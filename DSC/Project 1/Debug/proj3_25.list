
proj3_25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007168  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  08007308  08007308  00017308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007944  08007944  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007944  08007944  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007944  08007944  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007944  08007944  00017944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007948  08007948  00017948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800794c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000000fc  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d8  200002d8  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006efb  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001152  00000000  00000000  00027107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000658  00000000  00000000  00028260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005d0  00000000  00000000  000288b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b8b9  00000000  00000000  00028e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000504c  00000000  00000000  00044741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000921a7  00000000  00000000  0004978d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000db934  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fc8  00000000  00000000  000db988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080072f0 	.word	0x080072f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080072f0 	.word	0x080072f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d68:	d301      	bcc.n	8000d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00f      	b.n	8000d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <SysTick_Config+0x40>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d76:	210f      	movs	r1, #15
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f7ff ffc2 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SysTick_Config+0x40>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SysTick_Config+0x40>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000da6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000da8:	4907      	ldr	r1, [pc, #28]	; (8000dc8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000db2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4013      	ands	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40021000 	.word	0x40021000

08000dcc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000de2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4013      	ands	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dea:	68fb      	ldr	r3, [r7, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000

08000dfc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f043 0201 	orr.w	r2, r3, #1
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	601a      	str	r2, [r3, #0]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d101      	bne.n	8000e34 <LL_USART_IsActiveFlag_ORE+0x18>
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <LL_USART_IsActiveFlag_ORE+0x1a>
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 0320 	and.w	r3, r3, #32
 8000e52:	2b20      	cmp	r3, #32
 8000e54:	d101      	bne.n	8000e5a <LL_USART_IsActiveFlag_RXNE+0x18>
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e78:	2b80      	cmp	r3, #128	; 0x80
 8000e7a:	d101      	bne.n	8000e80 <LL_USART_IsActiveFlag_TXE+0x18>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e000      	b.n	8000e82 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2208      	movs	r2, #8
 8000e9a:	621a      	str	r2, [r3, #32]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	b2db      	uxtb	r3, r3
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f043 0201 	orr.w	r2, r3, #1
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	601a      	str	r2, [r3, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_TIM_GetAutoReload>:
  *       whether or not a timer instance supports a 32 bits counter.
  * @param  TIMx Timer instance
  * @retval Auto-reload value
  */
__STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a1a      	ldr	r2, [r3, #32]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	621a      	str	r2, [r3, #32]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <SysTick_Handler>:
uint8_t led_brightness = 50;  // Początkowe wypełnienie PWM 50%
uint8_t blink_frequency = 0; // Domyślnie dioda nie miga (0 Hz)
bool is_blinking = false;     // Flaga, czy dioda miga

void SysTick_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
    uwTick++;
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Handler+0x18>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <SysTick_Handler+0x18>)
 8000f68:	6013      	str	r3, [r2, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	200001f8 	.word	0x200001f8

08000f78 <LL_InitTick>:

void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
    // Konfiguracja SysTick do generowania przerwań co 1 ms
    SysTick_Config(HCLKFrequency / 1000);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <LL_InitTick+0x24>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	099b      	lsrs	r3, r3, #6
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fee3 	bl	8000d58 <SysTick_Config>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	10624dd3 	.word	0x10624dd3

08000fa0 <LL_GetTick>:

uint32_t LL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
    return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <LL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200001f8 	.word	0x200001f8

08000fb8 <UART_Init>:

void UART_Init(void){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b094      	sub	sp, #80	; 0x50
 8000fbc:	af00      	add	r7, sp, #0
    // 1) Włączenie zegarów dla GPIOA i USART2
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f7ff feec 	bl	8000d9c <LL_AHB2_GRP1_EnableClock>
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000fc4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000fc8:	f7ff ff00 	bl	8000dcc <LL_APB1_GRP1_EnableClock>

    // 2) Konfiguracja PA2 jako TX (AF7) i PA15 jako RX (AF3)
    LL_GPIO_InitTypeDef gpio_tx;
    LL_GPIO_StructInit(&gpio_tx);
 8000fcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 fd2c 	bl	8001a2e <LL_GPIO_StructInit>
    gpio_tx.Pin       = LL_GPIO_PIN_2;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio_tx.Mode      = LL_GPIO_MODE_ALTERNATE;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    gpio_tx.Alternate = LL_GPIO_AF_7;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
    LL_GPIO_Init(GPIOA, &gpio_tx);
 8000fe2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fec:	f000 fcb1 	bl	8001952 <LL_GPIO_Init>

    LL_GPIO_InitTypeDef gpio_rx;
    LL_GPIO_StructInit(&gpio_rx);
 8000ff0:	f107 0320 	add.w	r3, r7, #32
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 fd1a 	bl	8001a2e <LL_GPIO_StructInit>
    gpio_rx.Pin       = LL_GPIO_PIN_15;
 8000ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ffe:	623b      	str	r3, [r7, #32]
    gpio_rx.Mode      = LL_GPIO_MODE_ALTERNATE;
 8001000:	2302      	movs	r3, #2
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_rx.Alternate = LL_GPIO_AF_3;
 8001004:	2303      	movs	r3, #3
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
    LL_GPIO_Init(GPIOA, &gpio_rx);
 8001008:	f107 0320 	add.w	r3, r7, #32
 800100c:	4619      	mov	r1, r3
 800100e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001012:	f000 fc9e 	bl	8001952 <LL_GPIO_Init>

    // 3) Inicjalizacja USART2
    LL_USART_InitTypeDef usart;
    LL_USART_StructInit(&usart);
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	4618      	mov	r0, r3
 800101a:	f001 fcbb 	bl	8002994 <LL_USART_StructInit>
    usart.BaudRate            = 115200;
 800101e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001022:	607b      	str	r3, [r7, #4]
    usart.TransferDirection   = LL_USART_DIRECTION_TX_RX;
 8001024:	230c      	movs	r3, #12
 8001026:	617b      	str	r3, [r7, #20]
    LL_USART_Init(USART2, &usart);
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	4619      	mov	r1, r3
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <UART_Init+0x88>)
 800102e:	f001 fc57 	bl	80028e0 <LL_USART_Init>
    LL_USART_Enable(USART2);
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <UART_Init+0x88>)
 8001034:	f7ff fee2 	bl	8000dfc <LL_USART_Enable>
}
 8001038:	bf00      	nop
 800103a:	3750      	adds	r7, #80	; 0x50
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40004400 	.word	0x40004400

08001044 <PWM_Init>:

void PWM_Init(void){
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	; 0x50
 8001048:	af00      	add	r7, sp, #0
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800104a:	2002      	movs	r0, #2
 800104c:	f7ff fea6 	bl	8000d9c <LL_AHB2_GRP1_EnableClock>
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001050:	2001      	movs	r0, #1
 8001052:	f7ff febb 	bl	8000dcc <LL_APB1_GRP1_EnableClock>

    LL_GPIO_InitTypeDef gpio;
    LL_GPIO_StructInit(&gpio);
 8001056:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800105a:	4618      	mov	r0, r3
 800105c:	f000 fce7 	bl	8001a2e <LL_GPIO_StructInit>
    gpio.Pin       = LL_GPIO_PIN_3;
 8001060:	2308      	movs	r3, #8
 8001062:	63bb      	str	r3, [r7, #56]	; 0x38
    gpio.Mode      = LL_GPIO_MODE_ALTERNATE;
 8001064:	2302      	movs	r3, #2
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
    gpio.Alternate = LL_GPIO_AF_1;
 8001068:	2301      	movs	r3, #1
 800106a:	64fb      	str	r3, [r7, #76]	; 0x4c
    LL_GPIO_Init(GPIOB, &gpio);
 800106c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001070:	4619      	mov	r1, r3
 8001072:	481a      	ldr	r0, [pc, #104]	; (80010dc <PWM_Init+0x98>)
 8001074:	f000 fc6d 	bl	8001952 <LL_GPIO_Init>

    LL_TIM_InitTypeDef tim;
    LL_TIM_StructInit(&tim);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4618      	mov	r0, r3
 800107e:	f001 f851 	bl	8002124 <LL_TIM_StructInit>
    tim.Prescaler     = 79;   // 80 MHz / 80 = 1 MHz
 8001082:	234f      	movs	r3, #79	; 0x4f
 8001084:	84bb      	strh	r3, [r7, #36]	; 0x24
    tim.CounterMode   = LL_TIM_COUNTERMODE_UP;
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
    tim.Autoreload    = 999;  // 1 kHz PWM
 800108a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
    LL_TIM_Init(TIM2, &tim);
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800109a:	f001 f85d 	bl	8002158 <LL_TIM_Init>

    LL_TIM_OC_InitTypeDef oc;
    LL_TIM_OC_StructInit(&oc);
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 f8b7 	bl	8002214 <LL_TIM_OC_StructInit>
    oc.OCMode       = LL_TIM_OCMODE_PWM1;
 80010a6:	2360      	movs	r3, #96	; 0x60
 80010a8:	607b      	str	r3, [r7, #4]
    oc.OCState      = LL_TIM_OCSTATE_ENABLE;
 80010aa:	2301      	movs	r3, #1
 80010ac:	60bb      	str	r3, [r7, #8]
    oc.CompareValue = 500;    // 50% wypełnienie
 80010ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010b2:	613b      	str	r3, [r7, #16]
    LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &oc);
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	461a      	mov	r2, r3
 80010b8:	2110      	movs	r1, #16
 80010ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010be:	f001 f8cb 	bl	8002258 <LL_TIM_OC_Init>

    LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 80010c2:	2110      	movs	r1, #16
 80010c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010c8:	f7ff ff28 	bl	8000f1c <LL_TIM_CC_EnableChannel>
    LL_TIM_EnableCounter(TIM2);
 80010cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010d0:	f7ff ff08 	bl	8000ee4 <LL_TIM_EnableCounter>
}
 80010d4:	bf00      	nop
 80010d6:	3750      	adds	r7, #80	; 0x50
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	48000400 	.word	0x48000400

080010e0 <UART_SendString>:

void UART_SendString(const char *s){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    while(*s){
 80010e8:	e00e      	b.n	8001108 <UART_SendString+0x28>
        while(!LL_USART_IsActiveFlag_TXE(USART2));
 80010ea:	bf00      	nop
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <UART_SendString+0x3c>)
 80010ee:	f7ff febb 	bl	8000e68 <LL_USART_IsActiveFlag_TXE>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f9      	beq.n	80010ec <UART_SendString+0xc>
        LL_USART_TransmitData8(USART2, *s++);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <UART_SendString+0x3c>)
 8001104:	f7ff fede 	bl	8000ec4 <LL_USART_TransmitData8>
    while(*s){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ec      	bne.n	80010ea <UART_SendString+0xa>
    }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40004400 	.word	0x40004400

08001120 <LED_SetBrightness>:

void LED_SetBrightness(uint8_t percent){
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
    uint32_t arr = LL_TIM_GetAutoReload(TIM2);
 800112a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800112e:	f7ff fee9 	bl	8000f04 <LL_TIM_GetAutoReload>
 8001132:	60f8      	str	r0, [r7, #12]
    uint32_t ccr = (percent * (arr + 1)) / 100;
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	3201      	adds	r2, #1
 800113a:	fb02 f303 	mul.w	r3, r2, r3
 800113e:	4a07      	ldr	r2, [pc, #28]	; (800115c <LED_SetBrightness+0x3c>)
 8001140:	fba2 2303 	umull	r2, r3, r2, r3
 8001144:	095b      	lsrs	r3, r3, #5
 8001146:	60bb      	str	r3, [r7, #8]
    LL_TIM_OC_SetCompareCH2(TIM2, ccr);
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800114e:	f7ff fef6 	bl	8000f3e <LL_TIM_OC_SetCompareCH2>
}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	51eb851f 	.word	0x51eb851f

08001160 <LED_Blink>:

void LED_Blink(void){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
    static uint32_t last_time = 0;
    static bool led_on = true;
    uint32_t current_time = LL_GetTick();
 8001166:	f7ff ff1b 	bl	8000fa0 <LL_GetTick>
 800116a:	6078      	str	r0, [r7, #4]

    // Jeśli częstotliwość wynosi 0, dioda nie miga
    if (blink_frequency == 0) return;
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <LED_Blink+0x64>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d023      	beq.n	80011bc <LED_Blink+0x5c>

    // Sprawdzamy, czy minął czas dla migania (czas dla częstotliwości w Hz)
    if (current_time - last_time >= (1000 / blink_frequency)) {
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <LED_Blink+0x68>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	4a11      	ldr	r2, [pc, #68]	; (80011c4 <LED_Blink+0x64>)
 800117e:	7812      	ldrb	r2, [r2, #0]
 8001180:	4611      	mov	r1, r2
 8001182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001186:	fb92 f2f1 	sdiv	r2, r2, r1
 800118a:	4293      	cmp	r3, r2
 800118c:	d317      	bcc.n	80011be <LED_Blink+0x5e>
            if (led_on) {
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <LED_Blink+0x6c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d006      	beq.n	80011a4 <LED_Blink+0x44>
                LED_SetBrightness(0);
 8001196:	2000      	movs	r0, #0
 8001198:	f7ff ffc2 	bl	8001120 <LED_SetBrightness>
                led_on = false;
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <LED_Blink+0x6c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	e007      	b.n	80011b4 <LED_Blink+0x54>
            } else {
                LED_SetBrightness(led_brightness);
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <LED_Blink+0x70>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ffb9 	bl	8001120 <LED_SetBrightness>
                led_on = true;
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <LED_Blink+0x6c>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	701a      	strb	r2, [r3, #0]
            }
            last_time = current_time;
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <LED_Blink+0x68>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	e000      	b.n	80011be <LED_Blink+0x5e>
    if (blink_frequency == 0) return;
 80011bc:	bf00      	nop
        }
}
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200001fd 	.word	0x200001fd
 80011c8:	20000200 	.word	0x20000200
 80011cc:	20000001 	.word	0x20000001
 80011d0:	20000000 	.word	0x20000000

080011d4 <process_uart_input>:

void process_uart_input(void){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
    if(LL_USART_IsActiveFlag_RXNE(USART2) || LL_USART_IsActiveFlag_ORE(USART2)){
 80011da:	4851      	ldr	r0, [pc, #324]	; (8001320 <process_uart_input+0x14c>)
 80011dc:	f7ff fe31 	bl	8000e42 <LL_USART_IsActiveFlag_RXNE>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d106      	bne.n	80011f4 <process_uart_input+0x20>
 80011e6:	484e      	ldr	r0, [pc, #312]	; (8001320 <process_uart_input+0x14c>)
 80011e8:	f7ff fe18 	bl	8000e1c <LL_USART_IsActiveFlag_ORE>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 8091 	beq.w	8001316 <process_uart_input+0x142>
        if(LL_USART_IsActiveFlag_ORE(USART2)){
 80011f4:	484a      	ldr	r0, [pc, #296]	; (8001320 <process_uart_input+0x14c>)
 80011f6:	f7ff fe11 	bl	8000e1c <LL_USART_IsActiveFlag_ORE>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <process_uart_input+0x32>
            LL_USART_ClearFlag_ORE(USART2);
 8001200:	4847      	ldr	r0, [pc, #284]	; (8001320 <process_uart_input+0x14c>)
 8001202:	f7ff fe44 	bl	8000e8e <LL_USART_ClearFlag_ORE>
        }
        uint8_t ch = LL_USART_ReceiveData8(USART2);
 8001206:	4846      	ldr	r0, [pc, #280]	; (8001320 <process_uart_input+0x14c>)
 8001208:	f7ff fe4e 	bl	8000ea8 <LL_USART_ReceiveData8>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
        if(ch == '\r' || ch == '\n'){
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b0d      	cmp	r3, #13
 8001214:	d002      	beq.n	800121c <process_uart_input+0x48>
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b0a      	cmp	r3, #10
 800121a:	d15d      	bne.n	80012d8 <process_uart_input+0x104>
            if(uart_buf_idx > 0){
 800121c:	4b41      	ldr	r3, [pc, #260]	; (8001324 <process_uart_input+0x150>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d078      	beq.n	8001316 <process_uart_input+0x142>
                uart_buf[uart_buf_idx] = '\0';  // Zakończenie ciągu
 8001224:	4b3f      	ldr	r3, [pc, #252]	; (8001324 <process_uart_input+0x150>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b3f      	ldr	r3, [pc, #252]	; (8001328 <process_uart_input+0x154>)
 800122c:	2100      	movs	r1, #0
 800122e:	5499      	strb	r1, [r3, r2]

                // Jeśli użytkownik podał liczbę bezpośrednio, np. 123
                if(uart_buf[0] == '1'){ // Ustawienie PWM
 8001230:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <process_uart_input+0x154>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b31      	cmp	r3, #49	; 0x31
 8001236:	d120      	bne.n	800127a <process_uart_input+0xa6>
                    int val = atoi((char*)uart_buf + 1); // Pomijamy pierwszy znak ('1')
 8001238:	4b3c      	ldr	r3, [pc, #240]	; (800132c <process_uart_input+0x158>)
 800123a:	4618      	mov	r0, r3
 800123c:	f001 fbf3 	bl	8002a26 <atoi>
 8001240:	6078      	str	r0, [r7, #4]
                    val = val < 0 ? 0 : (val > 100 ? 100 : val);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db04      	blt.n	8001252 <process_uart_input+0x7e>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	bfa8      	it	ge
 800124e:	2364      	movge	r3, #100	; 0x64
 8001250:	e000      	b.n	8001254 <process_uart_input+0x80>
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
                    led_brightness = val;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4b35      	ldr	r3, [pc, #212]	; (8001330 <process_uart_input+0x15c>)
 800125c:	701a      	strb	r2, [r3, #0]
                    LED_SetBrightness(led_brightness); // Ustawienie jasności PWM
 800125e:	4b34      	ldr	r3, [pc, #208]	; (8001330 <process_uart_input+0x15c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff5c 	bl	8001120 <LED_SetBrightness>
                    sprintf(response, "Jasność PWM ustawiona na: %d%%\r\n", val);
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4932      	ldr	r1, [pc, #200]	; (8001334 <process_uart_input+0x160>)
 800126c:	4832      	ldr	r0, [pc, #200]	; (8001338 <process_uart_input+0x164>)
 800126e:	f002 fa91 	bl	8003794 <siprintf>
                    UART_SendString(response);
 8001272:	4831      	ldr	r0, [pc, #196]	; (8001338 <process_uart_input+0x164>)
 8001274:	f7ff ff34 	bl	80010e0 <UART_SendString>
 8001278:	e02a      	b.n	80012d0 <process_uart_input+0xfc>
                }
                else if(uart_buf[0] == '2'){ // Ustawienie migania
 800127a:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <process_uart_input+0x154>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b32      	cmp	r3, #50	; 0x32
 8001280:	d126      	bne.n	80012d0 <process_uart_input+0xfc>
                    int freq = atoi((char*)uart_buf + 1); // Pomijamy pierwszy znak ('2')
 8001282:	4b2a      	ldr	r3, [pc, #168]	; (800132c <process_uart_input+0x158>)
 8001284:	4618      	mov	r0, r3
 8001286:	f001 fbce 	bl	8002a26 <atoi>
 800128a:	60b8      	str	r0, [r7, #8]
                    if(freq >= 1 && freq <= 100) { // Zakładając zakres częstotliwości od 1 Hz do 100 Hz
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	dd18      	ble.n	80012c4 <process_uart_input+0xf0>
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	2b64      	cmp	r3, #100	; 0x64
 8001296:	dc15      	bgt.n	80012c4 <process_uart_input+0xf0>
                        blink_frequency = freq;
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b27      	ldr	r3, [pc, #156]	; (800133c <process_uart_input+0x168>)
 800129e:	701a      	strb	r2, [r3, #0]
                        is_blinking = true;
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <process_uart_input+0x16c>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
                        LED_SetBrightness(led_brightness);  // Zachowujemy aktualne wypełnienie PWM
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <process_uart_input+0x15c>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff38 	bl	8001120 <LED_SetBrightness>
                        sprintf(response, "Dioda zaczyna migać z częstotliwością: %d Hz i jasnością: %d%%\r\n", blink_frequency, led_brightness);
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <process_uart_input+0x168>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <process_uart_input+0x15c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	4922      	ldr	r1, [pc, #136]	; (8001344 <process_uart_input+0x170>)
 80012bc:	481e      	ldr	r0, [pc, #120]	; (8001338 <process_uart_input+0x164>)
 80012be:	f002 fa69 	bl	8003794 <siprintf>
 80012c2:	e002      	b.n	80012ca <process_uart_input+0xf6>
                    } else {
                        UART_SendString("Niepoprawna częstotliwość. Zakres: 1-100 Hz\r\n");
 80012c4:	4820      	ldr	r0, [pc, #128]	; (8001348 <process_uart_input+0x174>)
 80012c6:	f7ff ff0b 	bl	80010e0 <UART_SendString>
                    }
                    UART_SendString(response);
 80012ca:	481b      	ldr	r0, [pc, #108]	; (8001338 <process_uart_input+0x164>)
 80012cc:	f7ff ff08 	bl	80010e0 <UART_SendString>
                }
                uart_buf_idx = 0;
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <process_uart_input+0x150>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
            if(uart_buf_idx > 0){
 80012d6:	e01e      	b.n	8001316 <process_uart_input+0x142>
            }
        } else if(isdigit(ch) && uart_buf_idx < UART_BUF_SIZE-1){
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3301      	adds	r3, #1
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <process_uart_input+0x178>)
 80012de:	4413      	add	r3, r2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00e      	beq.n	8001308 <process_uart_input+0x134>
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <process_uart_input+0x150>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b1e      	cmp	r3, #30
 80012f0:	d80a      	bhi.n	8001308 <process_uart_input+0x134>
            uart_buf[uart_buf_idx++] = ch;
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <process_uart_input+0x150>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	b2d1      	uxtb	r1, r2
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <process_uart_input+0x150>)
 80012fc:	7011      	strb	r1, [r2, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	4a09      	ldr	r2, [pc, #36]	; (8001328 <process_uart_input+0x154>)
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	5453      	strb	r3, [r2, r1]
 8001306:	e006      	b.n	8001316 <process_uart_input+0x142>
        } else {
            UART_SendString("Wprowadzono błędne dane.\r\n");
 8001308:	4811      	ldr	r0, [pc, #68]	; (8001350 <process_uart_input+0x17c>)
 800130a:	f7ff fee9 	bl	80010e0 <UART_SendString>
            uart_buf_idx = 0;
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <process_uart_input+0x150>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001314:	e7ff      	b.n	8001316 <process_uart_input+0x142>
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40004400 	.word	0x40004400
 8001324:	200001fc 	.word	0x200001fc
 8001328:	200002a8 	.word	0x200002a8
 800132c:	200002a9 	.word	0x200002a9
 8001330:	20000000 	.word	0x20000000
 8001334:	08007308 	.word	0x08007308
 8001338:	20000210 	.word	0x20000210
 800133c:	200001fd 	.word	0x200001fd
 8001340:	200001fe 	.word	0x200001fe
 8001344:	0800732c 	.word	0x0800732c
 8001348:	08007374 	.word	0x08007374
 800134c:	0800748c 	.word	0x0800748c
 8001350:	080073a8 	.word	0x080073a8

08001354 <main>:

int main(void){
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0

	SystemCoreClockUpdate();
 8001358:	f000 f902 	bl	8001560 <SystemCoreClockUpdate>
	    LL_InitTick(SystemCoreClock, 1000);
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <main+0x48>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fe07 	bl	8000f78 <LL_InitTick>

	UART_Init();
 800136a:	f7ff fe25 	bl	8000fb8 <UART_Init>
	    PWM_Init();
 800136e:	f7ff fe69 	bl	8001044 <PWM_Init>

	    UART_SendString("Witaj w programie na przemiot DSC\r\n");
 8001372:	480b      	ldr	r0, [pc, #44]	; (80013a0 <main+0x4c>)
 8001374:	f7ff feb4 	bl	80010e0 <UART_SendString>
	    UART_SendString("[1] Ustaw jasność PWM (0-100%)\r\n");
 8001378:	480a      	ldr	r0, [pc, #40]	; (80013a4 <main+0x50>)
 800137a:	f7ff feb1 	bl	80010e0 <UART_SendString>
	    UART_SendString("[2] Miganie diody z częstotliwością (1-100 Hz)\r\n");
 800137e:	480a      	ldr	r0, [pc, #40]	; (80013a8 <main+0x54>)
 8001380:	f7ff feae 	bl	80010e0 <UART_SendString>

	    // Początkowe ustawienie jasności PWM na 50% (dioda nie miga)
	    LED_SetBrightness(50);
 8001384:	2032      	movs	r0, #50	; 0x32
 8001386:	f7ff fecb 	bl	8001120 <LED_SetBrightness>

	    while(1){
	        if(is_blinking) {
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <main+0x58>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <main+0x42>
	            LED_Blink();  // Miganie diodą
 8001392:	f7ff fee5 	bl	8001160 <LED_Blink>
	        }
	        process_uart_input();  // Przetwarzanie danych wejściowych z UART
 8001396:	f7ff ff1d 	bl	80011d4 <process_uart_input>
	        if(is_blinking) {
 800139a:	e7f6      	b.n	800138a <main+0x36>
 800139c:	20000004 	.word	0x20000004
 80013a0:	080073c8 	.word	0x080073c8
 80013a4:	080073ec 	.word	0x080073ec
 80013a8:	08007410 	.word	0x08007410
 80013ac:	200001fe 	.word	0x200001fe

080013b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
	return 1;
 80013b4:	2301      	movs	r3, #1
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_kill>:

int _kill(int pid, int sig)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013ca:	f001 fb31 	bl	8002a30 <__errno>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2216      	movs	r2, #22
 80013d2:	601a      	str	r2, [r3, #0]
	return -1;
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_exit>:

void _exit (int status)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ffe7 	bl	80013c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013f2:	e7fe      	b.n	80013f2 <_exit+0x12>

080013f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	e00a      	b.n	800141c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001406:	f3af 8000 	nop.w
 800140a:	4601      	mov	r1, r0
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	60ba      	str	r2, [r7, #8]
 8001412:	b2ca      	uxtb	r2, r1
 8001414:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	dbf0      	blt.n	8001406 <_read+0x12>
	}

return len;
 8001424:	687b      	ldr	r3, [r7, #4]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	e009      	b.n	8001454 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	60ba      	str	r2, [r7, #8]
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	dbf1      	blt.n	8001440 <_write+0x12>
	}
	return len;
 800145c:	687b      	ldr	r3, [r7, #4]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <_close>:

int _close(int file)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
	return -1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148e:	605a      	str	r2, [r3, #4]
	return 0;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <_isatty>:

int _isatty(int file)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
	return 1;
 80014a6:	2301      	movs	r3, #1
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
	return 0;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d8:	4a14      	ldr	r2, [pc, #80]	; (800152c <_sbrk+0x5c>)
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <_sbrk+0x60>)
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d102      	bne.n	80014f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <_sbrk+0x64>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <_sbrk+0x68>)
 80014f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d207      	bcs.n	8001510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001500:	f001 fa96 	bl	8002a30 <__errno>
 8001504:	4603      	mov	r3, r0
 8001506:	220c      	movs	r2, #12
 8001508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e009      	b.n	8001524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001516:	4b07      	ldr	r3, [pc, #28]	; (8001534 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <_sbrk+0x64>)
 8001520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20010000 	.word	0x20010000
 8001530:	00000400 	.word	0x00000400
 8001534:	20000204 	.word	0x20000204
 8001538:	200002d8 	.word	0x200002d8

0800153c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <SystemInit+0x20>)
 8001542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <SystemInit+0x20>)
 8001548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800154c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001566:	4b4f      	ldr	r3, [pc, #316]	; (80016a4 <SystemCoreClockUpdate+0x144>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d107      	bne.n	8001582 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001572:	4b4c      	ldr	r3, [pc, #304]	; (80016a4 <SystemCoreClockUpdate+0x144>)
 8001574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e005      	b.n	800158e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001582:	4b48      	ldr	r3, [pc, #288]	; (80016a4 <SystemCoreClockUpdate+0x144>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800158e:	4a46      	ldr	r2, [pc, #280]	; (80016a8 <SystemCoreClockUpdate+0x148>)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001598:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <SystemCoreClockUpdate+0x144>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	2b0c      	cmp	r3, #12
 80015a2:	d866      	bhi.n	8001672 <SystemCoreClockUpdate+0x112>
 80015a4:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <SystemCoreClockUpdate+0x4c>)
 80015a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015aa:	bf00      	nop
 80015ac:	080015e1 	.word	0x080015e1
 80015b0:	08001673 	.word	0x08001673
 80015b4:	08001673 	.word	0x08001673
 80015b8:	08001673 	.word	0x08001673
 80015bc:	080015e9 	.word	0x080015e9
 80015c0:	08001673 	.word	0x08001673
 80015c4:	08001673 	.word	0x08001673
 80015c8:	08001673 	.word	0x08001673
 80015cc:	080015f1 	.word	0x080015f1
 80015d0:	08001673 	.word	0x08001673
 80015d4:	08001673 	.word	0x08001673
 80015d8:	08001673 	.word	0x08001673
 80015dc:	080015f9 	.word	0x080015f9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80015e0:	4a32      	ldr	r2, [pc, #200]	; (80016ac <SystemCoreClockUpdate+0x14c>)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	6013      	str	r3, [r2, #0]
      break;
 80015e6:	e048      	b.n	800167a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80015e8:	4b30      	ldr	r3, [pc, #192]	; (80016ac <SystemCoreClockUpdate+0x14c>)
 80015ea:	4a31      	ldr	r2, [pc, #196]	; (80016b0 <SystemCoreClockUpdate+0x150>)
 80015ec:	601a      	str	r2, [r3, #0]
      break;
 80015ee:	e044      	b.n	800167a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80015f0:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <SystemCoreClockUpdate+0x14c>)
 80015f2:	4a30      	ldr	r2, [pc, #192]	; (80016b4 <SystemCoreClockUpdate+0x154>)
 80015f4:	601a      	str	r2, [r3, #0]
      break;
 80015f6:	e040      	b.n	800167a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80015f8:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <SystemCoreClockUpdate+0x144>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001602:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <SystemCoreClockUpdate+0x144>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	3301      	adds	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d003      	beq.n	800161e <SystemCoreClockUpdate+0xbe>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2b03      	cmp	r3, #3
 800161a:	d006      	beq.n	800162a <SystemCoreClockUpdate+0xca>
 800161c:	e00b      	b.n	8001636 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800161e:	4a24      	ldr	r2, [pc, #144]	; (80016b0 <SystemCoreClockUpdate+0x150>)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	613b      	str	r3, [r7, #16]
          break;
 8001628:	e00b      	b.n	8001642 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800162a:	4a22      	ldr	r2, [pc, #136]	; (80016b4 <SystemCoreClockUpdate+0x154>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	613b      	str	r3, [r7, #16]
          break;
 8001634:	e005      	b.n	8001642 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	613b      	str	r3, [r7, #16]
          break;
 8001640:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <SystemCoreClockUpdate+0x144>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	fb02 f303 	mul.w	r3, r2, r3
 8001652:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <SystemCoreClockUpdate+0x144>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0e5b      	lsrs	r3, r3, #25
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	3301      	adds	r3, #1
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	fbb2 f3f3 	udiv	r3, r2, r3
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <SystemCoreClockUpdate+0x14c>)
 800166e:	6013      	str	r3, [r2, #0]
      break;
 8001670:	e003      	b.n	800167a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001672:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <SystemCoreClockUpdate+0x14c>)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	6013      	str	r3, [r2, #0]
      break;
 8001678:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <SystemCoreClockUpdate+0x144>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <SystemCoreClockUpdate+0x158>)
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <SystemCoreClockUpdate+0x14c>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
 8001694:	4a05      	ldr	r2, [pc, #20]	; (80016ac <SystemCoreClockUpdate+0x14c>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	40021000 	.word	0x40021000
 80016a8:	0800745c 	.word	0x0800745c
 80016ac:	20000004 	.word	0x20000004
 80016b0:	00f42400 	.word	0x00f42400
 80016b4:	007a1200 	.word	0x007a1200
 80016b8:	08007444 	.word	0x08007444

080016bc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80016bc:	b480      	push	{r7}
 80016be:	b08b      	sub	sp, #44	; 0x2c
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa93 f3a3 	rbit	r3, r3
 80016d6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80016e2:	2320      	movs	r3, #32
 80016e4:	e003      	b.n	80016ee <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2103      	movs	r1, #3
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	401a      	ands	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	6a3b      	ldr	r3, [r7, #32]
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	61fb      	str	r3, [r7, #28]
  return result;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001710:	2320      	movs	r3, #32
 8001712:	e003      	b.n	800171c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	fab3 f383 	clz	r3, r3
 800171a:	b2db      	uxtb	r3, r3
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	fa01 f303 	lsl.w	r3, r1, r3
 8001724:	431a      	orrs	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	601a      	str	r2, [r3, #0]
}
 800172a:	bf00      	nop
 800172c:	372c      	adds	r7, #44	; 0x2c
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001736:	b480      	push	{r7}
 8001738:	b085      	sub	sp, #20
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	43db      	mvns	r3, r3
 800174a:	401a      	ands	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	431a      	orrs	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	605a      	str	r2, [r3, #4]
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001766:	b480      	push	{r7}
 8001768:	b08b      	sub	sp, #44	; 0x2c
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	613b      	str	r3, [r7, #16]
  return result;
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800178c:	2320      	movs	r3, #32
 800178e:	e003      	b.n	8001798 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2103      	movs	r1, #3
 800179c:	fa01 f303 	lsl.w	r3, r1, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	401a      	ands	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a8:	6a3b      	ldr	r3, [r7, #32]
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	61fb      	str	r3, [r7, #28]
  return result;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80017ba:	2320      	movs	r3, #32
 80017bc:	e003      	b.n	80017c6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	fab3 f383 	clz	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	431a      	orrs	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80017d4:	bf00      	nop
 80017d6:	372c      	adds	r7, #44	; 0x2c
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b08b      	sub	sp, #44	; 0x2c
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa93 f3a3 	rbit	r3, r3
 80017fa:	613b      	str	r3, [r7, #16]
  return result;
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001806:	2320      	movs	r3, #32
 8001808:	e003      	b.n	8001812 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	fab3 f383 	clz	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2103      	movs	r1, #3
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	401a      	ands	r2, r3
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	fa93 f3a3 	rbit	r3, r3
 8001828:	61fb      	str	r3, [r7, #28]
  return result;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001834:	2320      	movs	r3, #32
 8001836:	e003      	b.n	8001840 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	fab3 f383 	clz	r3, r3
 800183e:	b2db      	uxtb	r3, r3
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	fa01 f303 	lsl.w	r3, r1, r3
 8001848:	431a      	orrs	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	60da      	str	r2, [r3, #12]
}
 800184e:	bf00      	nop
 8001850:	372c      	adds	r7, #44	; 0x2c
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800185a:	b480      	push	{r7}
 800185c:	b08b      	sub	sp, #44	; 0x2c
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6a1a      	ldr	r2, [r3, #32]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	613b      	str	r3, [r7, #16]
  return result;
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001880:	2320      	movs	r3, #32
 8001882:	e003      	b.n	800188c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	210f      	movs	r1, #15
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	401a      	ands	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	fa93 f3a3 	rbit	r3, r3
 80018a2:	61fb      	str	r3, [r7, #28]
  return result;
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80018ae:	2320      	movs	r3, #32
 80018b0:	e003      	b.n	80018ba <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	fab3 f383 	clz	r3, r3
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	431a      	orrs	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80018c8:	bf00      	nop
 80018ca:	372c      	adds	r7, #44	; 0x2c
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b08b      	sub	sp, #44	; 0x2c
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	0a1b      	lsrs	r3, r3, #8
 80018e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	613b      	str	r3, [r7, #16]
  return result;
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80018fc:	2320      	movs	r3, #32
 80018fe:	e003      	b.n	8001908 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	210f      	movs	r1, #15
 800190c:	fa01 f303 	lsl.w	r3, r1, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	401a      	ands	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	61fb      	str	r3, [r7, #28]
  return result;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800192c:	2320      	movs	r3, #32
 800192e:	e003      	b.n	8001938 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	431a      	orrs	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001946:	bf00      	nop
 8001948:	372c      	adds	r7, #44	; 0x2c
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b088      	sub	sp, #32
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	60fb      	str	r3, [r7, #12]
  return result;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <LL_GPIO_Init+0x26>
    return 32U;
 8001974:	2320      	movs	r3, #32
 8001976:	e003      	b.n	8001980 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fab3 f383 	clz	r3, r3
 800197e:	b2db      	uxtb	r3, r3
 8001980:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001982:	e048      	b.n	8001a16 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d03a      	beq.n	8001a10 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d003      	beq.n	80019aa <LL_GPIO_Init+0x58>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d10e      	bne.n	80019c8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	461a      	mov	r2, r3
 80019b0:	69b9      	ldr	r1, [r7, #24]
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fed7 	bl	8001766 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	6819      	ldr	r1, [r3, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	461a      	mov	r2, r3
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff feb7 	bl	8001736 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	461a      	mov	r2, r3
 80019ce:	69b9      	ldr	r1, [r7, #24]
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff05 	bl	80017e0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d111      	bne.n	8001a02 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	2bff      	cmp	r3, #255	; 0xff
 80019e2:	d807      	bhi.n	80019f4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	461a      	mov	r2, r3
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff34 	bl	800185a <LL_GPIO_SetAFPin_0_7>
 80019f2:	e006      	b.n	8001a02 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	461a      	mov	r2, r3
 80019fa:	69b9      	ldr	r1, [r7, #24]
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff69 	bl	80018d4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	461a      	mov	r2, r3
 8001a08:	69b9      	ldr	r1, [r7, #24]
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fe56 	bl	80016bc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	3301      	adds	r3, #1
 8001a14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1af      	bne.n	8001984 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3720      	adds	r7, #32
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <LL_GPIO_StructInit>:
  *                          whose fields will be set to default values.
  * @retval None
  */

void LL_GPIO_StructInit(LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->Pin        = LL_GPIO_PIN_ALL;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_ANALOG;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2203      	movs	r2, #3
 8001a42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct->Speed      = LL_GPIO_SPEED_FREQ_LOW;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct->OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct->Pull       = LL_GPIO_PULL_NO;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct->Alternate  = LL_GPIO_AF_0;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <LL_RCC_HSI_IsReady+0x24>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a78:	d101      	bne.n	8001a7e <LL_RCC_HSI_IsReady+0x16>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <LL_RCC_HSI_IsReady+0x18>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000

08001a90 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <LL_RCC_LSE_IsReady+0x24>)
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d101      	bne.n	8001aa6 <LL_RCC_LSE_IsReady+0x16>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <LL_RCC_LSE_IsReady+0x18>
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0308 	and.w	r3, r3, #8
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d101      	bne.n	8001acc <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40021000 	.word	0x40021000

08001adc <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <LL_RCC_MSI_GetRange+0x18>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000

08001af8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8001afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b02:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40021000 	.word	0x40021000

08001b14 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <LL_RCC_GetSysClkSource+0x18>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000

08001b30 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <LL_RCC_GetAHBPrescaler+0x18>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000

08001b4c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000

08001b68 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000

08001b84 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <LL_RCC_GetUSARTClockSource+0x24>)
 8001b8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	401a      	ands	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	041b      	lsls	r3, r3, #16
 8001b9a:	4313      	orrs	r3, r2
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	40021000 	.word	0x40021000

08001bac <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <LL_RCC_PLL_GetMainSource+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <LL_RCC_PLL_GetN+0x18>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	40021000 	.word	0x40021000

08001be4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <LL_RCC_PLL_GetR+0x18>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000

08001c00 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <LL_RCC_PLL_GetDivider+0x18>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000

08001c1c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d133      	bne.n	8001c96 <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ffa8 	bl	8001b84 <LL_RCC_GetUSARTClockSource>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d875      	bhi.n	8001d2a <LL_RCC_GetUSARTClockFreq+0x10e>
 8001c3e:	a201      	add	r2, pc, #4	; (adr r2, 8001c44 <LL_RCC_GetUSARTClockFreq+0x28>)
 8001c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c44:	08001c7f 	.word	0x08001c7f
 8001c48:	08001c55 	.word	0x08001c55
 8001c4c:	08001c5d 	.word	0x08001c5d
 8001c50:	08001c6d 	.word	0x08001c6d
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001c54:	f000 f87c 	bl	8001d50 <RCC_GetSystemClockFreq>
 8001c58:	60f8      	str	r0, [r7, #12]
        break;
 8001c5a:	e071      	b.n	8001d40 <LL_RCC_GetUSARTClockFreq+0x124>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001c5c:	f7ff ff04 	bl	8001a68 <LL_RCC_HSI_IsReady>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d063      	beq.n	8001d2e <LL_RCC_GetUSARTClockFreq+0x112>
        {
          usart_frequency = HSI_VALUE;
 8001c66:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <LL_RCC_GetUSARTClockFreq+0x130>)
 8001c68:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c6a:	e060      	b.n	8001d2e <LL_RCC_GetUSARTClockFreq+0x112>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001c6c:	f7ff ff10 	bl	8001a90 <LL_RCC_LSE_IsReady>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d05d      	beq.n	8001d32 <LL_RCC_GetUSARTClockFreq+0x116>
        {
          usart_frequency = LSE_VALUE;
 8001c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c7a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001c7c:	e059      	b.n	8001d32 <LL_RCC_GetUSARTClockFreq+0x116>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001c7e:	f000 f867 	bl	8001d50 <RCC_GetSystemClockFreq>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 f8f3 	bl	8001e70 <RCC_GetHCLKClockFreq>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 f919 	bl	8001ec4 <RCC_GetPCLK2ClockFreq>
 8001c92:	60f8      	str	r0, [r7, #12]
        break;
 8001c94:	e054      	b.n	8001d40 <LL_RCC_GetUSARTClockFreq+0x124>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b0c      	cmp	r3, #12
 8001c9a:	d151      	bne.n	8001d40 <LL_RCC_GetUSARTClockFreq+0x124>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff71 	bl	8001b84 <LL_RCC_GetUSARTClockSource>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8001ca8:	2b0c      	cmp	r3, #12
 8001caa:	d844      	bhi.n	8001d36 <LL_RCC_GetUSARTClockFreq+0x11a>
 8001cac:	a201      	add	r2, pc, #4	; (adr r2, 8001cb4 <LL_RCC_GetUSARTClockFreq+0x98>)
 8001cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb2:	bf00      	nop
 8001cb4:	08001d13 	.word	0x08001d13
 8001cb8:	08001d37 	.word	0x08001d37
 8001cbc:	08001d37 	.word	0x08001d37
 8001cc0:	08001d37 	.word	0x08001d37
 8001cc4:	08001ce9 	.word	0x08001ce9
 8001cc8:	08001d37 	.word	0x08001d37
 8001ccc:	08001d37 	.word	0x08001d37
 8001cd0:	08001d37 	.word	0x08001d37
 8001cd4:	08001cf1 	.word	0x08001cf1
 8001cd8:	08001d37 	.word	0x08001d37
 8001cdc:	08001d37 	.word	0x08001d37
 8001ce0:	08001d37 	.word	0x08001d37
 8001ce4:	08001d01 	.word	0x08001d01
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001ce8:	f000 f832 	bl	8001d50 <RCC_GetSystemClockFreq>
 8001cec:	60f8      	str	r0, [r7, #12]
        break;
 8001cee:	e027      	b.n	8001d40 <LL_RCC_GetUSARTClockFreq+0x124>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001cf0:	f7ff feba 	bl	8001a68 <LL_RCC_HSI_IsReady>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01f      	beq.n	8001d3a <LL_RCC_GetUSARTClockFreq+0x11e>
        {
          usart_frequency = HSI_VALUE;
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <LL_RCC_GetUSARTClockFreq+0x130>)
 8001cfc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001cfe:	e01c      	b.n	8001d3a <LL_RCC_GetUSARTClockFreq+0x11e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001d00:	f7ff fec6 	bl	8001a90 <LL_RCC_LSE_IsReady>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d019      	beq.n	8001d3e <LL_RCC_GetUSARTClockFreq+0x122>
        {
          usart_frequency = LSE_VALUE;
 8001d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d0e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001d10:	e015      	b.n	8001d3e <LL_RCC_GetUSARTClockFreq+0x122>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001d12:	f000 f81d 	bl	8001d50 <RCC_GetSystemClockFreq>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f8a9 	bl	8001e70 <RCC_GetHCLKClockFreq>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 f8bb 	bl	8001e9c <RCC_GetPCLK1ClockFreq>
 8001d26:	60f8      	str	r0, [r7, #12]
        break;
 8001d28:	e00a      	b.n	8001d40 <LL_RCC_GetUSARTClockFreq+0x124>
        break;
 8001d2a:	bf00      	nop
 8001d2c:	e008      	b.n	8001d40 <LL_RCC_GetUSARTClockFreq+0x124>
        break;
 8001d2e:	bf00      	nop
 8001d30:	e006      	b.n	8001d40 <LL_RCC_GetUSARTClockFreq+0x124>
        break;
 8001d32:	bf00      	nop
 8001d34:	e004      	b.n	8001d40 <LL_RCC_GetUSARTClockFreq+0x124>

      default:
        break;
 8001d36:	bf00      	nop
 8001d38:	e002      	b.n	8001d40 <LL_RCC_GetUSARTClockFreq+0x124>
        break;
 8001d3a:	bf00      	nop
 8001d3c:	e000      	b.n	8001d40 <LL_RCC_GetUSARTClockFreq+0x124>
        break;
 8001d3e:	bf00      	nop
          break;
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8001d40:	68fb      	ldr	r3, [r7, #12]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	00f42400 	.word	0x00f42400

08001d50 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001d56:	f7ff fedd 	bl	8001b14 <LL_RCC_GetSysClkSource>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b0c      	cmp	r3, #12
 8001d5e:	d851      	bhi.n	8001e04 <RCC_GetSystemClockFreq+0xb4>
 8001d60:	a201      	add	r2, pc, #4	; (adr r2, 8001d68 <RCC_GetSystemClockFreq+0x18>)
 8001d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d66:	bf00      	nop
 8001d68:	08001d9d 	.word	0x08001d9d
 8001d6c:	08001e05 	.word	0x08001e05
 8001d70:	08001e05 	.word	0x08001e05
 8001d74:	08001e05 	.word	0x08001e05
 8001d78:	08001df1 	.word	0x08001df1
 8001d7c:	08001e05 	.word	0x08001e05
 8001d80:	08001e05 	.word	0x08001e05
 8001d84:	08001e05 	.word	0x08001e05
 8001d88:	08001df7 	.word	0x08001df7
 8001d8c:	08001e05 	.word	0x08001e05
 8001d90:	08001e05 	.word	0x08001e05
 8001d94:	08001e05 	.word	0x08001e05
 8001d98:	08001dfd 	.word	0x08001dfd
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001d9c:	f7ff fe8c 	bl	8001ab8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d111      	bne.n	8001dca <RCC_GetSystemClockFreq+0x7a>
 8001da6:	f7ff fe87 	bl	8001ab8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <RCC_GetSystemClockFreq+0x6a>
 8001db0:	f7ff fe94 	bl	8001adc <LL_RCC_MSI_GetRange>
 8001db4:	4603      	mov	r3, r0
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	e003      	b.n	8001dc2 <RCC_GetSystemClockFreq+0x72>
 8001dba:	f7ff fe9d 	bl	8001af8 <LL_RCC_MSI_GetRangeAfterStandby>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	4a28      	ldr	r2, [pc, #160]	; (8001e64 <RCC_GetSystemClockFreq+0x114>)
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	e010      	b.n	8001dec <RCC_GetSystemClockFreq+0x9c>
 8001dca:	f7ff fe75 	bl	8001ab8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <RCC_GetSystemClockFreq+0x8e>
 8001dd4:	f7ff fe82 	bl	8001adc <LL_RCC_MSI_GetRange>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	091b      	lsrs	r3, r3, #4
 8001ddc:	e003      	b.n	8001de6 <RCC_GetSystemClockFreq+0x96>
 8001dde:	f7ff fe8b 	bl	8001af8 <LL_RCC_MSI_GetRangeAfterStandby>
 8001de2:	4603      	mov	r3, r0
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <RCC_GetSystemClockFreq+0x114>)
 8001de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dec:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001dee:	e033      	b.n	8001e58 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <RCC_GetSystemClockFreq+0x118>)
 8001df2:	607b      	str	r3, [r7, #4]
      break;
 8001df4:	e030      	b.n	8001e58 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <RCC_GetSystemClockFreq+0x11c>)
 8001df8:	607b      	str	r3, [r7, #4]
      break;
 8001dfa:	e02d      	b.n	8001e58 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001dfc:	f000 f876 	bl	8001eec <RCC_PLL_GetFreqDomain_SYS>
 8001e00:	6078      	str	r0, [r7, #4]
      break;
 8001e02:	e029      	b.n	8001e58 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001e04:	f7ff fe58 	bl	8001ab8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d111      	bne.n	8001e32 <RCC_GetSystemClockFreq+0xe2>
 8001e0e:	f7ff fe53 	bl	8001ab8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d004      	beq.n	8001e22 <RCC_GetSystemClockFreq+0xd2>
 8001e18:	f7ff fe60 	bl	8001adc <LL_RCC_MSI_GetRange>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	e003      	b.n	8001e2a <RCC_GetSystemClockFreq+0xda>
 8001e22:	f7ff fe69 	bl	8001af8 <LL_RCC_MSI_GetRangeAfterStandby>
 8001e26:	4603      	mov	r3, r0
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	4a0e      	ldr	r2, [pc, #56]	; (8001e64 <RCC_GetSystemClockFreq+0x114>)
 8001e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e30:	e010      	b.n	8001e54 <RCC_GetSystemClockFreq+0x104>
 8001e32:	f7ff fe41 	bl	8001ab8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <RCC_GetSystemClockFreq+0xf6>
 8001e3c:	f7ff fe4e 	bl	8001adc <LL_RCC_MSI_GetRange>
 8001e40:	4603      	mov	r3, r0
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	e003      	b.n	8001e4e <RCC_GetSystemClockFreq+0xfe>
 8001e46:	f7ff fe57 	bl	8001af8 <LL_RCC_MSI_GetRangeAfterStandby>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <RCC_GetSystemClockFreq+0x114>)
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001e56:	bf00      	nop
  }

  return frequency;
 8001e58:	687b      	ldr	r3, [r7, #4]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	0800745c 	.word	0x0800745c
 8001e68:	00f42400 	.word	0x00f42400
 8001e6c:	007a1200 	.word	0x007a1200

08001e70 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001e78:	f7ff fe5a 	bl	8001b30 <LL_RCC_GetAHBPrescaler>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <RCC_GetHCLKClockFreq+0x28>)
 8001e86:	5cd3      	ldrb	r3, [r2, r3]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	40d3      	lsrs	r3, r2
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	08007444 	.word	0x08007444

08001e9c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001ea4:	f7ff fe52 	bl	8001b4c <LL_RCC_GetAPB1Prescaler>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <RCC_GetPCLK1ClockFreq+0x24>)
 8001eae:	5cd3      	ldrb	r3, [r2, r3]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	40d3      	lsrs	r3, r2
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	08007454 	.word	0x08007454

08001ec4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001ecc:	f7ff fe4c 	bl	8001b68 <LL_RCC_GetAPB2Prescaler>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	0adb      	lsrs	r3, r3, #11
 8001ed4:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <RCC_GetPCLK2ClockFreq+0x24>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	40d3      	lsrs	r3, r2
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	08007454 	.word	0x08007454

08001eec <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001ef2:	f7ff fe5b 	bl	8001bac <LL_RCC_PLL_GetMainSource>
 8001ef6:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d036      	beq.n	8001f6c <RCC_PLL_GetFreqDomain_SYS+0x80>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d836      	bhi.n	8001f72 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d003      	beq.n	8001f12 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d02a      	beq.n	8001f66 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8001f10:	e02f      	b.n	8001f72 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001f12:	f7ff fdd1 	bl	8001ab8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d111      	bne.n	8001f40 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8001f1c:	f7ff fdcc 	bl	8001ab8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d004      	beq.n	8001f30 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8001f26:	f7ff fdd9 	bl	8001adc <LL_RCC_MSI_GetRange>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	e003      	b.n	8001f38 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8001f30:	f7ff fde2 	bl	8001af8 <LL_RCC_MSI_GetRangeAfterStandby>
 8001f34:	4603      	mov	r3, r0
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	4a2f      	ldr	r2, [pc, #188]	; (8001ff8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3e:	e010      	b.n	8001f62 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8001f40:	f7ff fdba 	bl	8001ab8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d004      	beq.n	8001f54 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8001f4a:	f7ff fdc7 	bl	8001adc <LL_RCC_MSI_GetRange>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	e003      	b.n	8001f5c <RCC_PLL_GetFreqDomain_SYS+0x70>
 8001f54:	f7ff fdd0 	bl	8001af8 <LL_RCC_MSI_GetRangeAfterStandby>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	4a26      	ldr	r2, [pc, #152]	; (8001ff8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001f64:	e02f      	b.n	8001fc6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8001f68:	607b      	str	r3, [r7, #4]
      break;
 8001f6a:	e02c      	b.n	8001fc6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8001f6e:	607b      	str	r3, [r7, #4]
      break;
 8001f70:	e029      	b.n	8001fc6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001f72:	f7ff fda1 	bl	8001ab8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d111      	bne.n	8001fa0 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8001f7c:	f7ff fd9c 	bl	8001ab8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d004      	beq.n	8001f90 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8001f86:	f7ff fda9 	bl	8001adc <LL_RCC_MSI_GetRange>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	e003      	b.n	8001f98 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8001f90:	f7ff fdb2 	bl	8001af8 <LL_RCC_MSI_GetRangeAfterStandby>
 8001f94:	4603      	mov	r3, r0
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f9e:	e010      	b.n	8001fc2 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8001fa0:	f7ff fd8a 	bl	8001ab8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d004      	beq.n	8001fb4 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8001faa:	f7ff fd97 	bl	8001adc <LL_RCC_MSI_GetRange>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	e003      	b.n	8001fbc <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8001fb4:	f7ff fda0 	bl	8001af8 <LL_RCC_MSI_GetRangeAfterStandby>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	4a0e      	ldr	r2, [pc, #56]	; (8001ff8 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001fc4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001fc6:	f7ff fe1b 	bl	8001c00 <LL_RCC_PLL_GetDivider>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	3301      	adds	r3, #1
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	fbb2 f4f3 	udiv	r4, r2, r3
 8001fd6:	f7ff fdf7 	bl	8001bc8 <LL_RCC_PLL_GetN>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	fb03 f404 	mul.w	r4, r3, r4
 8001fe0:	f7ff fe00 	bl	8001be4 <LL_RCC_PLL_GetR>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	0e5b      	lsrs	r3, r3, #25
 8001fe8:	3301      	adds	r3, #1
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}
 8001ff8:	0800745c 	.word	0x0800745c
 8001ffc:	00f42400 	.word	0x00f42400
 8002000:	007a1200 	.word	0x007a1200

08002004 <LL_TIM_SetPrescaler>:
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_TIM_SetAutoReload>:
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_TIM_SetRepetitionCounter>:
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_TIM_OC_SetCompareCH1>:
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_TIM_OC_SetCompareCH2>:
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_TIM_OC_SetCompareCH5>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	659a      	str	r2, [r3, #88]	; 0x58
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_TIM_OC_SetCompareCH6>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	f043 0201 	orr.w	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	615a      	str	r2, [r3, #20]
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_TIM_StructInit>:
  *         to their default values.
  * @param  TIM_InitStruct pointer to a @ref LL_TIM_InitTypeDef structure (time base unit configuration data structure)
  * @retval None
  */
void LL_TIM_StructInit(LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	605a      	str	r2, [r3, #4]
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f04f 32ff 	mov.w	r2, #4294967295
 800213e:	609a      	str	r2, [r3, #8]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a27      	ldr	r2, [pc, #156]	; (8002208 <LL_TIM_Init+0xb0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d003      	beq.n	8002178 <LL_TIM_Init+0x20>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002176:	d106      	bne.n	8002186 <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1f      	ldr	r2, [pc, #124]	; (8002208 <LL_TIM_Init+0xb0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00b      	beq.n	80021a6 <LL_TIM_Init+0x4e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002194:	d007      	beq.n	80021a6 <LL_TIM_Init+0x4e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a1c      	ldr	r2, [pc, #112]	; (800220c <LL_TIM_Init+0xb4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d003      	beq.n	80021a6 <LL_TIM_Init+0x4e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <LL_TIM_Init+0xb8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d106      	bne.n	80021b4 <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	4619      	mov	r1, r3
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff2d 	bl	8002020 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff19 	bl	8002004 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <LL_TIM_Init+0xb0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <LL_TIM_Init+0x92>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a0b      	ldr	r2, [pc, #44]	; (800220c <LL_TIM_Init+0xb4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d003      	beq.n	80021ea <LL_TIM_Init+0x92>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a0a      	ldr	r2, [pc, #40]	; (8002210 <LL_TIM_Init+0xb8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d105      	bne.n	80021f6 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff23 	bl	800203c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ff84 	bl	8002104 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40012c00 	.word	0x40012c00
 800220c:	40014000 	.word	0x40014000
 8002210:	40014400 	.word	0x40014400

08002214 <LL_TIM_OC_StructInit>:
  * @param  TIM_OC_InitStruct pointer to a @ref LL_TIM_OC_InitTypeDef structure
  *         (the output channel configuration data structure)
  * @retval None
  */
void LL_TIM_OC_StructInit(LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	615a      	str	r2, [r3, #20]
  TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	61da      	str	r2, [r3, #28]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800226e:	d045      	beq.n	80022fc <LL_TIM_OC_Init+0xa4>
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002276:	d848      	bhi.n	800230a <LL_TIM_OC_Init+0xb2>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227e:	d036      	beq.n	80022ee <LL_TIM_OC_Init+0x96>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002286:	d840      	bhi.n	800230a <LL_TIM_OC_Init+0xb2>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800228e:	d027      	beq.n	80022e0 <LL_TIM_OC_Init+0x88>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002296:	d838      	bhi.n	800230a <LL_TIM_OC_Init+0xb2>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229e:	d018      	beq.n	80022d2 <LL_TIM_OC_Init+0x7a>
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a6:	d830      	bhi.n	800230a <LL_TIM_OC_Init+0xb2>
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d003      	beq.n	80022b6 <LL_TIM_OC_Init+0x5e>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d007      	beq.n	80022c4 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80022b4:	e029      	b.n	800230a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f82d 	bl	8002318 <OC1Config>
 80022be:	4603      	mov	r3, r0
 80022c0:	75fb      	strb	r3, [r7, #23]
      break;
 80022c2:	e023      	b.n	800230c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f89a 	bl	8002400 <OC2Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	75fb      	strb	r3, [r7, #23]
      break;
 80022d0:	e01c      	b.n	800230c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f90b 	bl	80024f0 <OC3Config>
 80022da:	4603      	mov	r3, r0
 80022dc:	75fb      	strb	r3, [r7, #23]
      break;
 80022de:	e015      	b.n	800230c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f97c 	bl	80025e0 <OC4Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	75fb      	strb	r3, [r7, #23]
      break;
 80022ec:	e00e      	b.n	800230c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f9d5 	bl	80026a0 <OC5Config>
 80022f6:	4603      	mov	r3, r0
 80022f8:	75fb      	strb	r3, [r7, #23]
      break;
 80022fa:	e007      	b.n	800230c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fa26 	bl	8002750 <OC6Config>
 8002304:	4603      	mov	r3, r0
 8002306:	75fb      	strb	r3, [r7, #23]
      break;
 8002308:	e000      	b.n	800230c <LL_TIM_OC_Init+0xb4>
      break;
 800230a:	bf00      	nop
  }

  return result;
 800230c:	7dfb      	ldrb	r3, [r7, #23]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	f023 0201 	bic.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f023 0303 	bic.w	r3, r3, #3
 8002346:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f023 0202 	bic.w	r2, r3, #2
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f023 0201 	bic.w	r2, r3, #1
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4313      	orrs	r3, r2
 8002374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a1e      	ldr	r2, [pc, #120]	; (80023f4 <OC1Config+0xdc>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <OC1Config+0x76>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <OC1Config+0xe0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d003      	beq.n	800238e <OC1Config+0x76>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a1c      	ldr	r2, [pc, #112]	; (80023fc <OC1Config+0xe4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d11e      	bne.n	80023cc <OC1Config+0xb4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f023 0208 	bic.w	r2, r3, #8
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f023 0204 	bic.w	r2, r3, #4
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4313      	orrs	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4619      	mov	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff fe3a 	bl	8002058 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40012c00 	.word	0x40012c00
 80023f8:	40014000 	.word	0x40014000
 80023fc:	40014400 	.word	0x40014400

08002400 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	f023 0210 	bic.w	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800242e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	0212      	lsls	r2, r2, #8
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f023 0220 	bic.w	r2, r3, #32
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f023 0210 	bic.w	r2, r3, #16
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <OC2Config+0xe4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d007      	beq.n	800247c <OC2Config+0x7c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <OC2Config+0xe8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d003      	beq.n	800247c <OC2Config+0x7c>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a1d      	ldr	r2, [pc, #116]	; (80024ec <OC2Config+0xec>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d11f      	bne.n	80024bc <OC2Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	019b      	lsls	r3, r3, #6
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	019b      	lsls	r3, r3, #6
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4619      	mov	r1, r3
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff fdd0 	bl	8002074 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40012c00 	.word	0x40012c00
 80024e8:	40014000 	.word	0x40014000
 80024ec:	40014400 	.word	0x40014400

080024f0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0303 	bic.w	r3, r3, #3
 800251e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <OC3Config+0xe4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d007      	beq.n	800256a <OC3Config+0x7a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a1e      	ldr	r2, [pc, #120]	; (80025d8 <OC3Config+0xe8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d003      	beq.n	800256a <OC3Config+0x7a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a1d      	ldr	r2, [pc, #116]	; (80025dc <OC3Config+0xec>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d11f      	bne.n	80025aa <OC3Config+0xba>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	029b      	lsls	r3, r3, #10
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	029b      	lsls	r3, r3, #10
 8002586:	4313      	orrs	r3, r2
 8002588:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	015b      	lsls	r3, r3, #5
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	4619      	mov	r1, r3
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff fd67 	bl	8002090 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40012c00 	.word	0x40012c00
 80025d8:	40014000 	.word	0x40014000
 80025dc:	40014400 	.word	0x40014400

080025e0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800260e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	0212      	lsls	r2, r2, #8
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	031b      	lsls	r3, r3, #12
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	031b      	lsls	r3, r3, #12
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a13      	ldr	r2, [pc, #76]	; (8002694 <OC4Config+0xb4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d007      	beq.n	800265c <OC4Config+0x7c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <OC4Config+0xb8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d003      	beq.n	800265c <OC4Config+0x7c>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a11      	ldr	r2, [pc, #68]	; (800269c <OC4Config+0xbc>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d107      	bne.n	800266c <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	019b      	lsls	r3, r3, #6
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4619      	mov	r1, r3
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff fd14 	bl	80020ac <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40012c00 	.word	0x40012c00
 8002698:	40014000 	.word	0x40014000
 800269c:	40014400 	.word	0x40014400

080026a0 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	041b      	lsls	r3, r3, #16
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	041b      	lsls	r3, r3, #16
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a13      	ldr	r2, [pc, #76]	; (8002744 <OC5Config+0xa4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d007      	beq.n	800270c <OC5Config+0x6c>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a12      	ldr	r2, [pc, #72]	; (8002748 <OC5Config+0xa8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d003      	beq.n	800270c <OC5Config+0x6c>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a11      	ldr	r2, [pc, #68]	; (800274c <OC5Config+0xac>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d109      	bne.n	8002720 <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	4619      	mov	r1, r3
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff fccb 	bl	80020c8 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40014000 	.word	0x40014000
 800274c:	40014400 	.word	0x40014400

08002750 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002770:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	0212      	lsls	r2, r2, #8
 8002782:	4313      	orrs	r3, r2
 8002784:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	051b      	lsls	r3, r3, #20
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	051b      	lsls	r3, r3, #20
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <OC6Config+0xa4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d007      	beq.n	80027be <OC6Config+0x6e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a11      	ldr	r2, [pc, #68]	; (80027f8 <OC6Config+0xa8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d003      	beq.n	80027be <OC6Config+0x6e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a10      	ldr	r2, [pc, #64]	; (80027fc <OC6Config+0xac>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d109      	bne.n	80027d2 <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	029b      	lsls	r3, r3, #10
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4619      	mov	r1, r3
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff fc82 	bl	80020e8 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40012c00 	.word	0x40012c00
 80027f8:	40014000 	.word	0x40014000
 80027fc:	40014400 	.word	0x40014400

08002800 <LL_USART_IsEnabled>:
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <LL_USART_IsEnabled+0x18>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <LL_USART_IsEnabled+0x1a>
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <LL_USART_SetStopBitsLength>:
{
 8002826:	b480      	push	{r7}
 8002828:	b083      	sub	sp, #12
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	605a      	str	r2, [r3, #4]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_USART_SetHWFlowCtrl>:
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	609a      	str	r2, [r3, #8]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_USART_SetBaudRate>:
{
 8002872:	b480      	push	{r7}
 8002874:	b087      	sub	sp, #28
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002886:	d11a      	bne.n	80028be <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	005a      	lsls	r2, r3, #1
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	085b      	lsrs	r3, r3, #1
 8002890:	441a      	add	r2, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	b29b      	uxth	r3, r3
 800289a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	60da      	str	r2, [r3, #12]
}
 80028bc:	e00a      	b.n	80028d4 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	085a      	lsrs	r2, r3, #1
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	441a      	add	r2, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	60da      	str	r2, [r3, #12]
}
 80028d4:	bf00      	nop
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff ff84 	bl	8002800 <LL_USART_IsEnabled>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d13f      	bne.n	800297e <LL_USART_Init+0x9e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4b21      	ldr	r3, [pc, #132]	; (8002988 <LL_USART_Init+0xa8>)
 8002904:	4013      	ands	r3, r2
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	6851      	ldr	r1, [r2, #4]
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	68d2      	ldr	r2, [r2, #12]
 800290e:	4311      	orrs	r1, r2
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	6912      	ldr	r2, [r2, #16]
 8002914:	4311      	orrs	r1, r2
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	6992      	ldr	r2, [r2, #24]
 800291a:	430a      	orrs	r2, r1
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	4619      	mov	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff ff7c 	bl	8002826 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	4619      	mov	r1, r3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff89 	bl	800284c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a13      	ldr	r2, [pc, #76]	; (800298c <LL_USART_Init+0xac>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d104      	bne.n	800294c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002942:	2003      	movs	r0, #3
 8002944:	f7ff f96a 	bl	8001c1c <LL_RCC_GetUSARTClockFreq>
 8002948:	60b8      	str	r0, [r7, #8]
 800294a:	e007      	b.n	800295c <LL_USART_Init+0x7c>
    }
    else if (USARTx == USART2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a10      	ldr	r2, [pc, #64]	; (8002990 <LL_USART_Init+0xb0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d103      	bne.n	800295c <LL_USART_Init+0x7c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002954:	200c      	movs	r0, #12
 8002956:	f7ff f961 	bl	8001c1c <LL_RCC_GetUSARTClockFreq>
 800295a:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00d      	beq.n	800297e <LL_USART_Init+0x9e>
        && (USART_InitStruct->BaudRate != 0U))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <LL_USART_Init+0x9e>
    {
      status = SUCCESS;
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ff7a 	bl	8002872 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	efff69f3 	.word	0xefff69f3
 800298c:	40013800 	.word	0x40013800
 8002990:	40004400 	.word	0x40004400

08002994 <LL_USART_StructInit>:
  *                         whose fields will be set to default values.
  * @retval None
  */

void LL_USART_StructInit(LL_USART_InitTypeDef *USART_InitStruct)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Set USART_InitStruct fields to default values */
#if defined(USART_PRESC_PRESCALER)
  USART_InitStruct->PrescalerValue      = LL_USART_PRESCALER_DIV1;
#endif /* USART_PRESC_PRESCALER */
  USART_InitStruct->BaudRate            = 9600U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029a2:	601a      	str	r2, [r3, #0]
  USART_InitStruct->DataWidth           = LL_USART_DATAWIDTH_8B;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	605a      	str	r2, [r3, #4]
  USART_InitStruct->StopBits            = LL_USART_STOPBITS_1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
  USART_InitStruct->Parity              = LL_USART_PARITY_NONE ;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
  USART_InitStruct->TransferDirection   = LL_USART_DIRECTION_TX_RX;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	220c      	movs	r2, #12
 80029ba:	611a      	str	r2, [r3, #16]
  USART_InitStruct->HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	615a      	str	r2, [r3, #20]
  USART_InitStruct->OverSampling        = LL_USART_OVERSAMPLING_16;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029d4:	480d      	ldr	r0, [pc, #52]	; (8002a0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80029d8:	f7fe fdb0 	bl	800153c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029dc:	480c      	ldr	r0, [pc, #48]	; (8002a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80029de:	490d      	ldr	r1, [pc, #52]	; (8002a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029e0:	4a0d      	ldr	r2, [pc, #52]	; (8002a18 <LoopForever+0xe>)
  movs r3, #0
 80029e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029e4:	e002      	b.n	80029ec <LoopCopyDataInit>

080029e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ea:	3304      	adds	r3, #4

080029ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f0:	d3f9      	bcc.n	80029e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80029f4:	4c0a      	ldr	r4, [pc, #40]	; (8002a20 <LoopForever+0x16>)
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f8:	e001      	b.n	80029fe <LoopFillZerobss>

080029fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029fc:	3204      	adds	r2, #4

080029fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a00:	d3fb      	bcc.n	80029fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a02:	f000 f81b 	bl	8002a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a06:	f7fe fca5 	bl	8001354 <main>

08002a0a <LoopForever>:

LoopForever:
    b LoopForever
 8002a0a:	e7fe      	b.n	8002a0a <LoopForever>
  ldr   r0, =_estack
 8002a0c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a14:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002a18:	0800794c 	.word	0x0800794c
  ldr r2, =_sbss
 8002a1c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002a20:	200002d8 	.word	0x200002d8

08002a24 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a24:	e7fe      	b.n	8002a24 <ADC1_IRQHandler>

08002a26 <atoi>:
 8002a26:	220a      	movs	r2, #10
 8002a28:	2100      	movs	r1, #0
 8002a2a:	f001 bd87 	b.w	800453c <strtol>
	...

08002a30 <__errno>:
 8002a30:	4b01      	ldr	r3, [pc, #4]	; (8002a38 <__errno+0x8>)
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000008 	.word	0x20000008

08002a3c <__libc_init_array>:
 8002a3c:	b570      	push	{r4, r5, r6, lr}
 8002a3e:	4d0d      	ldr	r5, [pc, #52]	; (8002a74 <__libc_init_array+0x38>)
 8002a40:	4c0d      	ldr	r4, [pc, #52]	; (8002a78 <__libc_init_array+0x3c>)
 8002a42:	1b64      	subs	r4, r4, r5
 8002a44:	10a4      	asrs	r4, r4, #2
 8002a46:	2600      	movs	r6, #0
 8002a48:	42a6      	cmp	r6, r4
 8002a4a:	d109      	bne.n	8002a60 <__libc_init_array+0x24>
 8002a4c:	4d0b      	ldr	r5, [pc, #44]	; (8002a7c <__libc_init_array+0x40>)
 8002a4e:	4c0c      	ldr	r4, [pc, #48]	; (8002a80 <__libc_init_array+0x44>)
 8002a50:	f004 fc4e 	bl	80072f0 <_init>
 8002a54:	1b64      	subs	r4, r4, r5
 8002a56:	10a4      	asrs	r4, r4, #2
 8002a58:	2600      	movs	r6, #0
 8002a5a:	42a6      	cmp	r6, r4
 8002a5c:	d105      	bne.n	8002a6a <__libc_init_array+0x2e>
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
 8002a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a64:	4798      	blx	r3
 8002a66:	3601      	adds	r6, #1
 8002a68:	e7ee      	b.n	8002a48 <__libc_init_array+0xc>
 8002a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a6e:	4798      	blx	r3
 8002a70:	3601      	adds	r6, #1
 8002a72:	e7f2      	b.n	8002a5a <__libc_init_array+0x1e>
 8002a74:	08007944 	.word	0x08007944
 8002a78:	08007944 	.word	0x08007944
 8002a7c:	08007944 	.word	0x08007944
 8002a80:	08007948 	.word	0x08007948

08002a84 <memset>:
 8002a84:	4402      	add	r2, r0
 8002a86:	4603      	mov	r3, r0
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d100      	bne.n	8002a8e <memset+0xa>
 8002a8c:	4770      	bx	lr
 8002a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a92:	e7f9      	b.n	8002a88 <memset+0x4>

08002a94 <__cvt>:
 8002a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a98:	ec55 4b10 	vmov	r4, r5, d0
 8002a9c:	2d00      	cmp	r5, #0
 8002a9e:	460e      	mov	r6, r1
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	462b      	mov	r3, r5
 8002aa4:	bfbb      	ittet	lt
 8002aa6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002aaa:	461d      	movlt	r5, r3
 8002aac:	2300      	movge	r3, #0
 8002aae:	232d      	movlt	r3, #45	; 0x2d
 8002ab0:	700b      	strb	r3, [r1, #0]
 8002ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ab4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002ab8:	4691      	mov	r9, r2
 8002aba:	f023 0820 	bic.w	r8, r3, #32
 8002abe:	bfbc      	itt	lt
 8002ac0:	4622      	movlt	r2, r4
 8002ac2:	4614      	movlt	r4, r2
 8002ac4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ac8:	d005      	beq.n	8002ad6 <__cvt+0x42>
 8002aca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002ace:	d100      	bne.n	8002ad2 <__cvt+0x3e>
 8002ad0:	3601      	adds	r6, #1
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	e000      	b.n	8002ad8 <__cvt+0x44>
 8002ad6:	2103      	movs	r1, #3
 8002ad8:	ab03      	add	r3, sp, #12
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	ab02      	add	r3, sp, #8
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	ec45 4b10 	vmov	d0, r4, r5
 8002ae4:	4653      	mov	r3, sl
 8002ae6:	4632      	mov	r2, r6
 8002ae8:	f001 fdbe 	bl	8004668 <_dtoa_r>
 8002aec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002af0:	4607      	mov	r7, r0
 8002af2:	d102      	bne.n	8002afa <__cvt+0x66>
 8002af4:	f019 0f01 	tst.w	r9, #1
 8002af8:	d022      	beq.n	8002b40 <__cvt+0xac>
 8002afa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002afe:	eb07 0906 	add.w	r9, r7, r6
 8002b02:	d110      	bne.n	8002b26 <__cvt+0x92>
 8002b04:	783b      	ldrb	r3, [r7, #0]
 8002b06:	2b30      	cmp	r3, #48	; 0x30
 8002b08:	d10a      	bne.n	8002b20 <__cvt+0x8c>
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	4620      	mov	r0, r4
 8002b10:	4629      	mov	r1, r5
 8002b12:	f7fd ffe1 	bl	8000ad8 <__aeabi_dcmpeq>
 8002b16:	b918      	cbnz	r0, 8002b20 <__cvt+0x8c>
 8002b18:	f1c6 0601 	rsb	r6, r6, #1
 8002b1c:	f8ca 6000 	str.w	r6, [sl]
 8002b20:	f8da 3000 	ldr.w	r3, [sl]
 8002b24:	4499      	add	r9, r3
 8002b26:	2200      	movs	r2, #0
 8002b28:	2300      	movs	r3, #0
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	f7fd ffd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8002b32:	b108      	cbz	r0, 8002b38 <__cvt+0xa4>
 8002b34:	f8cd 900c 	str.w	r9, [sp, #12]
 8002b38:	2230      	movs	r2, #48	; 0x30
 8002b3a:	9b03      	ldr	r3, [sp, #12]
 8002b3c:	454b      	cmp	r3, r9
 8002b3e:	d307      	bcc.n	8002b50 <__cvt+0xbc>
 8002b40:	9b03      	ldr	r3, [sp, #12]
 8002b42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b44:	1bdb      	subs	r3, r3, r7
 8002b46:	4638      	mov	r0, r7
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	b004      	add	sp, #16
 8002b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b50:	1c59      	adds	r1, r3, #1
 8002b52:	9103      	str	r1, [sp, #12]
 8002b54:	701a      	strb	r2, [r3, #0]
 8002b56:	e7f0      	b.n	8002b3a <__cvt+0xa6>

08002b58 <__exponent>:
 8002b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2900      	cmp	r1, #0
 8002b5e:	bfb8      	it	lt
 8002b60:	4249      	neglt	r1, r1
 8002b62:	f803 2b02 	strb.w	r2, [r3], #2
 8002b66:	bfb4      	ite	lt
 8002b68:	222d      	movlt	r2, #45	; 0x2d
 8002b6a:	222b      	movge	r2, #43	; 0x2b
 8002b6c:	2909      	cmp	r1, #9
 8002b6e:	7042      	strb	r2, [r0, #1]
 8002b70:	dd2a      	ble.n	8002bc8 <__exponent+0x70>
 8002b72:	f10d 0407 	add.w	r4, sp, #7
 8002b76:	46a4      	mov	ip, r4
 8002b78:	270a      	movs	r7, #10
 8002b7a:	46a6      	mov	lr, r4
 8002b7c:	460a      	mov	r2, r1
 8002b7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8002b82:	fb07 1516 	mls	r5, r7, r6, r1
 8002b86:	3530      	adds	r5, #48	; 0x30
 8002b88:	2a63      	cmp	r2, #99	; 0x63
 8002b8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8002b8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002b92:	4631      	mov	r1, r6
 8002b94:	dcf1      	bgt.n	8002b7a <__exponent+0x22>
 8002b96:	3130      	adds	r1, #48	; 0x30
 8002b98:	f1ae 0502 	sub.w	r5, lr, #2
 8002b9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002ba0:	1c44      	adds	r4, r0, #1
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	4561      	cmp	r1, ip
 8002ba6:	d30a      	bcc.n	8002bbe <__exponent+0x66>
 8002ba8:	f10d 0209 	add.w	r2, sp, #9
 8002bac:	eba2 020e 	sub.w	r2, r2, lr
 8002bb0:	4565      	cmp	r5, ip
 8002bb2:	bf88      	it	hi
 8002bb4:	2200      	movhi	r2, #0
 8002bb6:	4413      	add	r3, r2
 8002bb8:	1a18      	subs	r0, r3, r0
 8002bba:	b003      	add	sp, #12
 8002bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002bc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002bc6:	e7ed      	b.n	8002ba4 <__exponent+0x4c>
 8002bc8:	2330      	movs	r3, #48	; 0x30
 8002bca:	3130      	adds	r1, #48	; 0x30
 8002bcc:	7083      	strb	r3, [r0, #2]
 8002bce:	70c1      	strb	r1, [r0, #3]
 8002bd0:	1d03      	adds	r3, r0, #4
 8002bd2:	e7f1      	b.n	8002bb8 <__exponent+0x60>

08002bd4 <_printf_float>:
 8002bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd8:	ed2d 8b02 	vpush	{d8}
 8002bdc:	b08d      	sub	sp, #52	; 0x34
 8002bde:	460c      	mov	r4, r1
 8002be0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002be4:	4616      	mov	r6, r2
 8002be6:	461f      	mov	r7, r3
 8002be8:	4605      	mov	r5, r0
 8002bea:	f002 fe99 	bl	8005920 <_localeconv_r>
 8002bee:	f8d0 a000 	ldr.w	sl, [r0]
 8002bf2:	4650      	mov	r0, sl
 8002bf4:	f7fd faf4 	bl	80001e0 <strlen>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	9305      	str	r3, [sp, #20]
 8002c00:	f8d8 3000 	ldr.w	r3, [r8]
 8002c04:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002c08:	3307      	adds	r3, #7
 8002c0a:	f023 0307 	bic.w	r3, r3, #7
 8002c0e:	f103 0208 	add.w	r2, r3, #8
 8002c12:	f8c8 2000 	str.w	r2, [r8]
 8002c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002c1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002c22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002c26:	9307      	str	r3, [sp, #28]
 8002c28:	f8cd 8018 	str.w	r8, [sp, #24]
 8002c2c:	ee08 0a10 	vmov	s16, r0
 8002c30:	4b9f      	ldr	r3, [pc, #636]	; (8002eb0 <_printf_float+0x2dc>)
 8002c32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c36:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3a:	f7fd ff7f 	bl	8000b3c <__aeabi_dcmpun>
 8002c3e:	bb88      	cbnz	r0, 8002ca4 <_printf_float+0xd0>
 8002c40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002c44:	4b9a      	ldr	r3, [pc, #616]	; (8002eb0 <_printf_float+0x2dc>)
 8002c46:	f04f 32ff 	mov.w	r2, #4294967295
 8002c4a:	f7fd ff59 	bl	8000b00 <__aeabi_dcmple>
 8002c4e:	bb48      	cbnz	r0, 8002ca4 <_printf_float+0xd0>
 8002c50:	2200      	movs	r2, #0
 8002c52:	2300      	movs	r3, #0
 8002c54:	4640      	mov	r0, r8
 8002c56:	4649      	mov	r1, r9
 8002c58:	f7fd ff48 	bl	8000aec <__aeabi_dcmplt>
 8002c5c:	b110      	cbz	r0, 8002c64 <_printf_float+0x90>
 8002c5e:	232d      	movs	r3, #45	; 0x2d
 8002c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c64:	4b93      	ldr	r3, [pc, #588]	; (8002eb4 <_printf_float+0x2e0>)
 8002c66:	4894      	ldr	r0, [pc, #592]	; (8002eb8 <_printf_float+0x2e4>)
 8002c68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002c6c:	bf94      	ite	ls
 8002c6e:	4698      	movls	r8, r3
 8002c70:	4680      	movhi	r8, r0
 8002c72:	2303      	movs	r3, #3
 8002c74:	6123      	str	r3, [r4, #16]
 8002c76:	9b05      	ldr	r3, [sp, #20]
 8002c78:	f023 0204 	bic.w	r2, r3, #4
 8002c7c:	6022      	str	r2, [r4, #0]
 8002c7e:	f04f 0900 	mov.w	r9, #0
 8002c82:	9700      	str	r7, [sp, #0]
 8002c84:	4633      	mov	r3, r6
 8002c86:	aa0b      	add	r2, sp, #44	; 0x2c
 8002c88:	4621      	mov	r1, r4
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	f000 f9d8 	bl	8003040 <_printf_common>
 8002c90:	3001      	adds	r0, #1
 8002c92:	f040 8090 	bne.w	8002db6 <_printf_float+0x1e2>
 8002c96:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9a:	b00d      	add	sp, #52	; 0x34
 8002c9c:	ecbd 8b02 	vpop	{d8}
 8002ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ca4:	4642      	mov	r2, r8
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	4640      	mov	r0, r8
 8002caa:	4649      	mov	r1, r9
 8002cac:	f7fd ff46 	bl	8000b3c <__aeabi_dcmpun>
 8002cb0:	b140      	cbz	r0, 8002cc4 <_printf_float+0xf0>
 8002cb2:	464b      	mov	r3, r9
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	bfbc      	itt	lt
 8002cb8:	232d      	movlt	r3, #45	; 0x2d
 8002cba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002cbe:	487f      	ldr	r0, [pc, #508]	; (8002ebc <_printf_float+0x2e8>)
 8002cc0:	4b7f      	ldr	r3, [pc, #508]	; (8002ec0 <_printf_float+0x2ec>)
 8002cc2:	e7d1      	b.n	8002c68 <_printf_float+0x94>
 8002cc4:	6863      	ldr	r3, [r4, #4]
 8002cc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002cca:	9206      	str	r2, [sp, #24]
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	d13f      	bne.n	8002d50 <_printf_float+0x17c>
 8002cd0:	2306      	movs	r3, #6
 8002cd2:	6063      	str	r3, [r4, #4]
 8002cd4:	9b05      	ldr	r3, [sp, #20]
 8002cd6:	6861      	ldr	r1, [r4, #4]
 8002cd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9303      	str	r3, [sp, #12]
 8002ce0:	ab0a      	add	r3, sp, #40	; 0x28
 8002ce2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002ce6:	ab09      	add	r3, sp, #36	; 0x24
 8002ce8:	ec49 8b10 	vmov	d0, r8, r9
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	6022      	str	r2, [r4, #0]
 8002cf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002cf4:	4628      	mov	r0, r5
 8002cf6:	f7ff fecd 	bl	8002a94 <__cvt>
 8002cfa:	9b06      	ldr	r3, [sp, #24]
 8002cfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002cfe:	2b47      	cmp	r3, #71	; 0x47
 8002d00:	4680      	mov	r8, r0
 8002d02:	d108      	bne.n	8002d16 <_printf_float+0x142>
 8002d04:	1cc8      	adds	r0, r1, #3
 8002d06:	db02      	blt.n	8002d0e <_printf_float+0x13a>
 8002d08:	6863      	ldr	r3, [r4, #4]
 8002d0a:	4299      	cmp	r1, r3
 8002d0c:	dd41      	ble.n	8002d92 <_printf_float+0x1be>
 8002d0e:	f1ab 0b02 	sub.w	fp, fp, #2
 8002d12:	fa5f fb8b 	uxtb.w	fp, fp
 8002d16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002d1a:	d820      	bhi.n	8002d5e <_printf_float+0x18a>
 8002d1c:	3901      	subs	r1, #1
 8002d1e:	465a      	mov	r2, fp
 8002d20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002d24:	9109      	str	r1, [sp, #36]	; 0x24
 8002d26:	f7ff ff17 	bl	8002b58 <__exponent>
 8002d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d2c:	1813      	adds	r3, r2, r0
 8002d2e:	2a01      	cmp	r2, #1
 8002d30:	4681      	mov	r9, r0
 8002d32:	6123      	str	r3, [r4, #16]
 8002d34:	dc02      	bgt.n	8002d3c <_printf_float+0x168>
 8002d36:	6822      	ldr	r2, [r4, #0]
 8002d38:	07d2      	lsls	r2, r2, #31
 8002d3a:	d501      	bpl.n	8002d40 <_printf_float+0x16c>
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	6123      	str	r3, [r4, #16]
 8002d40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d09c      	beq.n	8002c82 <_printf_float+0xae>
 8002d48:	232d      	movs	r3, #45	; 0x2d
 8002d4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d4e:	e798      	b.n	8002c82 <_printf_float+0xae>
 8002d50:	9a06      	ldr	r2, [sp, #24]
 8002d52:	2a47      	cmp	r2, #71	; 0x47
 8002d54:	d1be      	bne.n	8002cd4 <_printf_float+0x100>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1bc      	bne.n	8002cd4 <_printf_float+0x100>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e7b9      	b.n	8002cd2 <_printf_float+0xfe>
 8002d5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002d62:	d118      	bne.n	8002d96 <_printf_float+0x1c2>
 8002d64:	2900      	cmp	r1, #0
 8002d66:	6863      	ldr	r3, [r4, #4]
 8002d68:	dd0b      	ble.n	8002d82 <_printf_float+0x1ae>
 8002d6a:	6121      	str	r1, [r4, #16]
 8002d6c:	b913      	cbnz	r3, 8002d74 <_printf_float+0x1a0>
 8002d6e:	6822      	ldr	r2, [r4, #0]
 8002d70:	07d0      	lsls	r0, r2, #31
 8002d72:	d502      	bpl.n	8002d7a <_printf_float+0x1a6>
 8002d74:	3301      	adds	r3, #1
 8002d76:	440b      	add	r3, r1
 8002d78:	6123      	str	r3, [r4, #16]
 8002d7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8002d7c:	f04f 0900 	mov.w	r9, #0
 8002d80:	e7de      	b.n	8002d40 <_printf_float+0x16c>
 8002d82:	b913      	cbnz	r3, 8002d8a <_printf_float+0x1b6>
 8002d84:	6822      	ldr	r2, [r4, #0]
 8002d86:	07d2      	lsls	r2, r2, #31
 8002d88:	d501      	bpl.n	8002d8e <_printf_float+0x1ba>
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	e7f4      	b.n	8002d78 <_printf_float+0x1a4>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e7f2      	b.n	8002d78 <_printf_float+0x1a4>
 8002d92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d98:	4299      	cmp	r1, r3
 8002d9a:	db05      	blt.n	8002da8 <_printf_float+0x1d4>
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	6121      	str	r1, [r4, #16]
 8002da0:	07d8      	lsls	r0, r3, #31
 8002da2:	d5ea      	bpl.n	8002d7a <_printf_float+0x1a6>
 8002da4:	1c4b      	adds	r3, r1, #1
 8002da6:	e7e7      	b.n	8002d78 <_printf_float+0x1a4>
 8002da8:	2900      	cmp	r1, #0
 8002daa:	bfd4      	ite	le
 8002dac:	f1c1 0202 	rsble	r2, r1, #2
 8002db0:	2201      	movgt	r2, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	e7e0      	b.n	8002d78 <_printf_float+0x1a4>
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	055a      	lsls	r2, r3, #21
 8002dba:	d407      	bmi.n	8002dcc <_printf_float+0x1f8>
 8002dbc:	6923      	ldr	r3, [r4, #16]
 8002dbe:	4642      	mov	r2, r8
 8002dc0:	4631      	mov	r1, r6
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	47b8      	blx	r7
 8002dc6:	3001      	adds	r0, #1
 8002dc8:	d12c      	bne.n	8002e24 <_printf_float+0x250>
 8002dca:	e764      	b.n	8002c96 <_printf_float+0xc2>
 8002dcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002dd0:	f240 80e0 	bls.w	8002f94 <_printf_float+0x3c0>
 8002dd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f7fd fe7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8002de0:	2800      	cmp	r0, #0
 8002de2:	d034      	beq.n	8002e4e <_printf_float+0x27a>
 8002de4:	4a37      	ldr	r2, [pc, #220]	; (8002ec4 <_printf_float+0x2f0>)
 8002de6:	2301      	movs	r3, #1
 8002de8:	4631      	mov	r1, r6
 8002dea:	4628      	mov	r0, r5
 8002dec:	47b8      	blx	r7
 8002dee:	3001      	adds	r0, #1
 8002df0:	f43f af51 	beq.w	8002c96 <_printf_float+0xc2>
 8002df4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	db02      	blt.n	8002e02 <_printf_float+0x22e>
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	07d8      	lsls	r0, r3, #31
 8002e00:	d510      	bpl.n	8002e24 <_printf_float+0x250>
 8002e02:	ee18 3a10 	vmov	r3, s16
 8002e06:	4652      	mov	r2, sl
 8002e08:	4631      	mov	r1, r6
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	47b8      	blx	r7
 8002e0e:	3001      	adds	r0, #1
 8002e10:	f43f af41 	beq.w	8002c96 <_printf_float+0xc2>
 8002e14:	f04f 0800 	mov.w	r8, #0
 8002e18:	f104 091a 	add.w	r9, r4, #26
 8002e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	4543      	cmp	r3, r8
 8002e22:	dc09      	bgt.n	8002e38 <_printf_float+0x264>
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	079b      	lsls	r3, r3, #30
 8002e28:	f100 8105 	bmi.w	8003036 <_printf_float+0x462>
 8002e2c:	68e0      	ldr	r0, [r4, #12]
 8002e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e30:	4298      	cmp	r0, r3
 8002e32:	bfb8      	it	lt
 8002e34:	4618      	movlt	r0, r3
 8002e36:	e730      	b.n	8002c9a <_printf_float+0xc6>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	464a      	mov	r2, r9
 8002e3c:	4631      	mov	r1, r6
 8002e3e:	4628      	mov	r0, r5
 8002e40:	47b8      	blx	r7
 8002e42:	3001      	adds	r0, #1
 8002e44:	f43f af27 	beq.w	8002c96 <_printf_float+0xc2>
 8002e48:	f108 0801 	add.w	r8, r8, #1
 8002e4c:	e7e6      	b.n	8002e1c <_printf_float+0x248>
 8002e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	dc39      	bgt.n	8002ec8 <_printf_float+0x2f4>
 8002e54:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <_printf_float+0x2f0>)
 8002e56:	2301      	movs	r3, #1
 8002e58:	4631      	mov	r1, r6
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	47b8      	blx	r7
 8002e5e:	3001      	adds	r0, #1
 8002e60:	f43f af19 	beq.w	8002c96 <_printf_float+0xc2>
 8002e64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	d102      	bne.n	8002e72 <_printf_float+0x29e>
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	07d9      	lsls	r1, r3, #31
 8002e70:	d5d8      	bpl.n	8002e24 <_printf_float+0x250>
 8002e72:	ee18 3a10 	vmov	r3, s16
 8002e76:	4652      	mov	r2, sl
 8002e78:	4631      	mov	r1, r6
 8002e7a:	4628      	mov	r0, r5
 8002e7c:	47b8      	blx	r7
 8002e7e:	3001      	adds	r0, #1
 8002e80:	f43f af09 	beq.w	8002c96 <_printf_float+0xc2>
 8002e84:	f04f 0900 	mov.w	r9, #0
 8002e88:	f104 0a1a 	add.w	sl, r4, #26
 8002e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e8e:	425b      	negs	r3, r3
 8002e90:	454b      	cmp	r3, r9
 8002e92:	dc01      	bgt.n	8002e98 <_printf_float+0x2c4>
 8002e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e96:	e792      	b.n	8002dbe <_printf_float+0x1ea>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	4652      	mov	r2, sl
 8002e9c:	4631      	mov	r1, r6
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	47b8      	blx	r7
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	f43f aef7 	beq.w	8002c96 <_printf_float+0xc2>
 8002ea8:	f109 0901 	add.w	r9, r9, #1
 8002eac:	e7ee      	b.n	8002e8c <_printf_float+0x2b8>
 8002eae:	bf00      	nop
 8002eb0:	7fefffff 	.word	0x7fefffff
 8002eb4:	08007594 	.word	0x08007594
 8002eb8:	08007598 	.word	0x08007598
 8002ebc:	080075a0 	.word	0x080075a0
 8002ec0:	0800759c 	.word	0x0800759c
 8002ec4:	080075a4 	.word	0x080075a4
 8002ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002eca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	bfa8      	it	ge
 8002ed0:	461a      	movge	r2, r3
 8002ed2:	2a00      	cmp	r2, #0
 8002ed4:	4691      	mov	r9, r2
 8002ed6:	dc37      	bgt.n	8002f48 <_printf_float+0x374>
 8002ed8:	f04f 0b00 	mov.w	fp, #0
 8002edc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ee0:	f104 021a 	add.w	r2, r4, #26
 8002ee4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ee6:	9305      	str	r3, [sp, #20]
 8002ee8:	eba3 0309 	sub.w	r3, r3, r9
 8002eec:	455b      	cmp	r3, fp
 8002eee:	dc33      	bgt.n	8002f58 <_printf_float+0x384>
 8002ef0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	db3b      	blt.n	8002f70 <_printf_float+0x39c>
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	07da      	lsls	r2, r3, #31
 8002efc:	d438      	bmi.n	8002f70 <_printf_float+0x39c>
 8002efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f00:	9b05      	ldr	r3, [sp, #20]
 8002f02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	eba2 0901 	sub.w	r9, r2, r1
 8002f0a:	4599      	cmp	r9, r3
 8002f0c:	bfa8      	it	ge
 8002f0e:	4699      	movge	r9, r3
 8002f10:	f1b9 0f00 	cmp.w	r9, #0
 8002f14:	dc35      	bgt.n	8002f82 <_printf_float+0x3ae>
 8002f16:	f04f 0800 	mov.w	r8, #0
 8002f1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f1e:	f104 0a1a 	add.w	sl, r4, #26
 8002f22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	eba3 0309 	sub.w	r3, r3, r9
 8002f2c:	4543      	cmp	r3, r8
 8002f2e:	f77f af79 	ble.w	8002e24 <_printf_float+0x250>
 8002f32:	2301      	movs	r3, #1
 8002f34:	4652      	mov	r2, sl
 8002f36:	4631      	mov	r1, r6
 8002f38:	4628      	mov	r0, r5
 8002f3a:	47b8      	blx	r7
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	f43f aeaa 	beq.w	8002c96 <_printf_float+0xc2>
 8002f42:	f108 0801 	add.w	r8, r8, #1
 8002f46:	e7ec      	b.n	8002f22 <_printf_float+0x34e>
 8002f48:	4613      	mov	r3, r2
 8002f4a:	4631      	mov	r1, r6
 8002f4c:	4642      	mov	r2, r8
 8002f4e:	4628      	mov	r0, r5
 8002f50:	47b8      	blx	r7
 8002f52:	3001      	adds	r0, #1
 8002f54:	d1c0      	bne.n	8002ed8 <_printf_float+0x304>
 8002f56:	e69e      	b.n	8002c96 <_printf_float+0xc2>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	4631      	mov	r1, r6
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	9205      	str	r2, [sp, #20]
 8002f60:	47b8      	blx	r7
 8002f62:	3001      	adds	r0, #1
 8002f64:	f43f ae97 	beq.w	8002c96 <_printf_float+0xc2>
 8002f68:	9a05      	ldr	r2, [sp, #20]
 8002f6a:	f10b 0b01 	add.w	fp, fp, #1
 8002f6e:	e7b9      	b.n	8002ee4 <_printf_float+0x310>
 8002f70:	ee18 3a10 	vmov	r3, s16
 8002f74:	4652      	mov	r2, sl
 8002f76:	4631      	mov	r1, r6
 8002f78:	4628      	mov	r0, r5
 8002f7a:	47b8      	blx	r7
 8002f7c:	3001      	adds	r0, #1
 8002f7e:	d1be      	bne.n	8002efe <_printf_float+0x32a>
 8002f80:	e689      	b.n	8002c96 <_printf_float+0xc2>
 8002f82:	9a05      	ldr	r2, [sp, #20]
 8002f84:	464b      	mov	r3, r9
 8002f86:	4442      	add	r2, r8
 8002f88:	4631      	mov	r1, r6
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	47b8      	blx	r7
 8002f8e:	3001      	adds	r0, #1
 8002f90:	d1c1      	bne.n	8002f16 <_printf_float+0x342>
 8002f92:	e680      	b.n	8002c96 <_printf_float+0xc2>
 8002f94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f96:	2a01      	cmp	r2, #1
 8002f98:	dc01      	bgt.n	8002f9e <_printf_float+0x3ca>
 8002f9a:	07db      	lsls	r3, r3, #31
 8002f9c:	d538      	bpl.n	8003010 <_printf_float+0x43c>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	4642      	mov	r2, r8
 8002fa2:	4631      	mov	r1, r6
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	47b8      	blx	r7
 8002fa8:	3001      	adds	r0, #1
 8002faa:	f43f ae74 	beq.w	8002c96 <_printf_float+0xc2>
 8002fae:	ee18 3a10 	vmov	r3, s16
 8002fb2:	4652      	mov	r2, sl
 8002fb4:	4631      	mov	r1, r6
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	47b8      	blx	r7
 8002fba:	3001      	adds	r0, #1
 8002fbc:	f43f ae6b 	beq.w	8002c96 <_printf_float+0xc2>
 8002fc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f7fd fd86 	bl	8000ad8 <__aeabi_dcmpeq>
 8002fcc:	b9d8      	cbnz	r0, 8003006 <_printf_float+0x432>
 8002fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fd0:	f108 0201 	add.w	r2, r8, #1
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	4631      	mov	r1, r6
 8002fd8:	4628      	mov	r0, r5
 8002fda:	47b8      	blx	r7
 8002fdc:	3001      	adds	r0, #1
 8002fde:	d10e      	bne.n	8002ffe <_printf_float+0x42a>
 8002fe0:	e659      	b.n	8002c96 <_printf_float+0xc2>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	4652      	mov	r2, sl
 8002fe6:	4631      	mov	r1, r6
 8002fe8:	4628      	mov	r0, r5
 8002fea:	47b8      	blx	r7
 8002fec:	3001      	adds	r0, #1
 8002fee:	f43f ae52 	beq.w	8002c96 <_printf_float+0xc2>
 8002ff2:	f108 0801 	add.w	r8, r8, #1
 8002ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	4543      	cmp	r3, r8
 8002ffc:	dcf1      	bgt.n	8002fe2 <_printf_float+0x40e>
 8002ffe:	464b      	mov	r3, r9
 8003000:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003004:	e6dc      	b.n	8002dc0 <_printf_float+0x1ec>
 8003006:	f04f 0800 	mov.w	r8, #0
 800300a:	f104 0a1a 	add.w	sl, r4, #26
 800300e:	e7f2      	b.n	8002ff6 <_printf_float+0x422>
 8003010:	2301      	movs	r3, #1
 8003012:	4642      	mov	r2, r8
 8003014:	e7df      	b.n	8002fd6 <_printf_float+0x402>
 8003016:	2301      	movs	r3, #1
 8003018:	464a      	mov	r2, r9
 800301a:	4631      	mov	r1, r6
 800301c:	4628      	mov	r0, r5
 800301e:	47b8      	blx	r7
 8003020:	3001      	adds	r0, #1
 8003022:	f43f ae38 	beq.w	8002c96 <_printf_float+0xc2>
 8003026:	f108 0801 	add.w	r8, r8, #1
 800302a:	68e3      	ldr	r3, [r4, #12]
 800302c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800302e:	1a5b      	subs	r3, r3, r1
 8003030:	4543      	cmp	r3, r8
 8003032:	dcf0      	bgt.n	8003016 <_printf_float+0x442>
 8003034:	e6fa      	b.n	8002e2c <_printf_float+0x258>
 8003036:	f04f 0800 	mov.w	r8, #0
 800303a:	f104 0919 	add.w	r9, r4, #25
 800303e:	e7f4      	b.n	800302a <_printf_float+0x456>

08003040 <_printf_common>:
 8003040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003044:	4616      	mov	r6, r2
 8003046:	4699      	mov	r9, r3
 8003048:	688a      	ldr	r2, [r1, #8]
 800304a:	690b      	ldr	r3, [r1, #16]
 800304c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003050:	4293      	cmp	r3, r2
 8003052:	bfb8      	it	lt
 8003054:	4613      	movlt	r3, r2
 8003056:	6033      	str	r3, [r6, #0]
 8003058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800305c:	4607      	mov	r7, r0
 800305e:	460c      	mov	r4, r1
 8003060:	b10a      	cbz	r2, 8003066 <_printf_common+0x26>
 8003062:	3301      	adds	r3, #1
 8003064:	6033      	str	r3, [r6, #0]
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	0699      	lsls	r1, r3, #26
 800306a:	bf42      	ittt	mi
 800306c:	6833      	ldrmi	r3, [r6, #0]
 800306e:	3302      	addmi	r3, #2
 8003070:	6033      	strmi	r3, [r6, #0]
 8003072:	6825      	ldr	r5, [r4, #0]
 8003074:	f015 0506 	ands.w	r5, r5, #6
 8003078:	d106      	bne.n	8003088 <_printf_common+0x48>
 800307a:	f104 0a19 	add.w	sl, r4, #25
 800307e:	68e3      	ldr	r3, [r4, #12]
 8003080:	6832      	ldr	r2, [r6, #0]
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	42ab      	cmp	r3, r5
 8003086:	dc26      	bgt.n	80030d6 <_printf_common+0x96>
 8003088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800308c:	1e13      	subs	r3, r2, #0
 800308e:	6822      	ldr	r2, [r4, #0]
 8003090:	bf18      	it	ne
 8003092:	2301      	movne	r3, #1
 8003094:	0692      	lsls	r2, r2, #26
 8003096:	d42b      	bmi.n	80030f0 <_printf_common+0xb0>
 8003098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800309c:	4649      	mov	r1, r9
 800309e:	4638      	mov	r0, r7
 80030a0:	47c0      	blx	r8
 80030a2:	3001      	adds	r0, #1
 80030a4:	d01e      	beq.n	80030e4 <_printf_common+0xa4>
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	68e5      	ldr	r5, [r4, #12]
 80030aa:	6832      	ldr	r2, [r6, #0]
 80030ac:	f003 0306 	and.w	r3, r3, #6
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	bf08      	it	eq
 80030b4:	1aad      	subeq	r5, r5, r2
 80030b6:	68a3      	ldr	r3, [r4, #8]
 80030b8:	6922      	ldr	r2, [r4, #16]
 80030ba:	bf0c      	ite	eq
 80030bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030c0:	2500      	movne	r5, #0
 80030c2:	4293      	cmp	r3, r2
 80030c4:	bfc4      	itt	gt
 80030c6:	1a9b      	subgt	r3, r3, r2
 80030c8:	18ed      	addgt	r5, r5, r3
 80030ca:	2600      	movs	r6, #0
 80030cc:	341a      	adds	r4, #26
 80030ce:	42b5      	cmp	r5, r6
 80030d0:	d11a      	bne.n	8003108 <_printf_common+0xc8>
 80030d2:	2000      	movs	r0, #0
 80030d4:	e008      	b.n	80030e8 <_printf_common+0xa8>
 80030d6:	2301      	movs	r3, #1
 80030d8:	4652      	mov	r2, sl
 80030da:	4649      	mov	r1, r9
 80030dc:	4638      	mov	r0, r7
 80030de:	47c0      	blx	r8
 80030e0:	3001      	adds	r0, #1
 80030e2:	d103      	bne.n	80030ec <_printf_common+0xac>
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295
 80030e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ec:	3501      	adds	r5, #1
 80030ee:	e7c6      	b.n	800307e <_printf_common+0x3e>
 80030f0:	18e1      	adds	r1, r4, r3
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	2030      	movs	r0, #48	; 0x30
 80030f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030fa:	4422      	add	r2, r4
 80030fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003104:	3302      	adds	r3, #2
 8003106:	e7c7      	b.n	8003098 <_printf_common+0x58>
 8003108:	2301      	movs	r3, #1
 800310a:	4622      	mov	r2, r4
 800310c:	4649      	mov	r1, r9
 800310e:	4638      	mov	r0, r7
 8003110:	47c0      	blx	r8
 8003112:	3001      	adds	r0, #1
 8003114:	d0e6      	beq.n	80030e4 <_printf_common+0xa4>
 8003116:	3601      	adds	r6, #1
 8003118:	e7d9      	b.n	80030ce <_printf_common+0x8e>
	...

0800311c <_printf_i>:
 800311c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003120:	460c      	mov	r4, r1
 8003122:	4691      	mov	r9, r2
 8003124:	7e27      	ldrb	r7, [r4, #24]
 8003126:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003128:	2f78      	cmp	r7, #120	; 0x78
 800312a:	4680      	mov	r8, r0
 800312c:	469a      	mov	sl, r3
 800312e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003132:	d807      	bhi.n	8003144 <_printf_i+0x28>
 8003134:	2f62      	cmp	r7, #98	; 0x62
 8003136:	d80a      	bhi.n	800314e <_printf_i+0x32>
 8003138:	2f00      	cmp	r7, #0
 800313a:	f000 80d8 	beq.w	80032ee <_printf_i+0x1d2>
 800313e:	2f58      	cmp	r7, #88	; 0x58
 8003140:	f000 80a3 	beq.w	800328a <_printf_i+0x16e>
 8003144:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800314c:	e03a      	b.n	80031c4 <_printf_i+0xa8>
 800314e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003152:	2b15      	cmp	r3, #21
 8003154:	d8f6      	bhi.n	8003144 <_printf_i+0x28>
 8003156:	a001      	add	r0, pc, #4	; (adr r0, 800315c <_printf_i+0x40>)
 8003158:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800315c:	080031b5 	.word	0x080031b5
 8003160:	080031c9 	.word	0x080031c9
 8003164:	08003145 	.word	0x08003145
 8003168:	08003145 	.word	0x08003145
 800316c:	08003145 	.word	0x08003145
 8003170:	08003145 	.word	0x08003145
 8003174:	080031c9 	.word	0x080031c9
 8003178:	08003145 	.word	0x08003145
 800317c:	08003145 	.word	0x08003145
 8003180:	08003145 	.word	0x08003145
 8003184:	08003145 	.word	0x08003145
 8003188:	080032d5 	.word	0x080032d5
 800318c:	080031f9 	.word	0x080031f9
 8003190:	080032b7 	.word	0x080032b7
 8003194:	08003145 	.word	0x08003145
 8003198:	08003145 	.word	0x08003145
 800319c:	080032f7 	.word	0x080032f7
 80031a0:	08003145 	.word	0x08003145
 80031a4:	080031f9 	.word	0x080031f9
 80031a8:	08003145 	.word	0x08003145
 80031ac:	08003145 	.word	0x08003145
 80031b0:	080032bf 	.word	0x080032bf
 80031b4:	680b      	ldr	r3, [r1, #0]
 80031b6:	1d1a      	adds	r2, r3, #4
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	600a      	str	r2, [r1, #0]
 80031bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80031c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0a3      	b.n	8003310 <_printf_i+0x1f4>
 80031c8:	6825      	ldr	r5, [r4, #0]
 80031ca:	6808      	ldr	r0, [r1, #0]
 80031cc:	062e      	lsls	r6, r5, #24
 80031ce:	f100 0304 	add.w	r3, r0, #4
 80031d2:	d50a      	bpl.n	80031ea <_printf_i+0xce>
 80031d4:	6805      	ldr	r5, [r0, #0]
 80031d6:	600b      	str	r3, [r1, #0]
 80031d8:	2d00      	cmp	r5, #0
 80031da:	da03      	bge.n	80031e4 <_printf_i+0xc8>
 80031dc:	232d      	movs	r3, #45	; 0x2d
 80031de:	426d      	negs	r5, r5
 80031e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031e4:	485e      	ldr	r0, [pc, #376]	; (8003360 <_printf_i+0x244>)
 80031e6:	230a      	movs	r3, #10
 80031e8:	e019      	b.n	800321e <_printf_i+0x102>
 80031ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80031ee:	6805      	ldr	r5, [r0, #0]
 80031f0:	600b      	str	r3, [r1, #0]
 80031f2:	bf18      	it	ne
 80031f4:	b22d      	sxthne	r5, r5
 80031f6:	e7ef      	b.n	80031d8 <_printf_i+0xbc>
 80031f8:	680b      	ldr	r3, [r1, #0]
 80031fa:	6825      	ldr	r5, [r4, #0]
 80031fc:	1d18      	adds	r0, r3, #4
 80031fe:	6008      	str	r0, [r1, #0]
 8003200:	0628      	lsls	r0, r5, #24
 8003202:	d501      	bpl.n	8003208 <_printf_i+0xec>
 8003204:	681d      	ldr	r5, [r3, #0]
 8003206:	e002      	b.n	800320e <_printf_i+0xf2>
 8003208:	0669      	lsls	r1, r5, #25
 800320a:	d5fb      	bpl.n	8003204 <_printf_i+0xe8>
 800320c:	881d      	ldrh	r5, [r3, #0]
 800320e:	4854      	ldr	r0, [pc, #336]	; (8003360 <_printf_i+0x244>)
 8003210:	2f6f      	cmp	r7, #111	; 0x6f
 8003212:	bf0c      	ite	eq
 8003214:	2308      	moveq	r3, #8
 8003216:	230a      	movne	r3, #10
 8003218:	2100      	movs	r1, #0
 800321a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800321e:	6866      	ldr	r6, [r4, #4]
 8003220:	60a6      	str	r6, [r4, #8]
 8003222:	2e00      	cmp	r6, #0
 8003224:	bfa2      	ittt	ge
 8003226:	6821      	ldrge	r1, [r4, #0]
 8003228:	f021 0104 	bicge.w	r1, r1, #4
 800322c:	6021      	strge	r1, [r4, #0]
 800322e:	b90d      	cbnz	r5, 8003234 <_printf_i+0x118>
 8003230:	2e00      	cmp	r6, #0
 8003232:	d04d      	beq.n	80032d0 <_printf_i+0x1b4>
 8003234:	4616      	mov	r6, r2
 8003236:	fbb5 f1f3 	udiv	r1, r5, r3
 800323a:	fb03 5711 	mls	r7, r3, r1, r5
 800323e:	5dc7      	ldrb	r7, [r0, r7]
 8003240:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003244:	462f      	mov	r7, r5
 8003246:	42bb      	cmp	r3, r7
 8003248:	460d      	mov	r5, r1
 800324a:	d9f4      	bls.n	8003236 <_printf_i+0x11a>
 800324c:	2b08      	cmp	r3, #8
 800324e:	d10b      	bne.n	8003268 <_printf_i+0x14c>
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	07df      	lsls	r7, r3, #31
 8003254:	d508      	bpl.n	8003268 <_printf_i+0x14c>
 8003256:	6923      	ldr	r3, [r4, #16]
 8003258:	6861      	ldr	r1, [r4, #4]
 800325a:	4299      	cmp	r1, r3
 800325c:	bfde      	ittt	le
 800325e:	2330      	movle	r3, #48	; 0x30
 8003260:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003264:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003268:	1b92      	subs	r2, r2, r6
 800326a:	6122      	str	r2, [r4, #16]
 800326c:	f8cd a000 	str.w	sl, [sp]
 8003270:	464b      	mov	r3, r9
 8003272:	aa03      	add	r2, sp, #12
 8003274:	4621      	mov	r1, r4
 8003276:	4640      	mov	r0, r8
 8003278:	f7ff fee2 	bl	8003040 <_printf_common>
 800327c:	3001      	adds	r0, #1
 800327e:	d14c      	bne.n	800331a <_printf_i+0x1fe>
 8003280:	f04f 30ff 	mov.w	r0, #4294967295
 8003284:	b004      	add	sp, #16
 8003286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800328a:	4835      	ldr	r0, [pc, #212]	; (8003360 <_printf_i+0x244>)
 800328c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	680e      	ldr	r6, [r1, #0]
 8003294:	061f      	lsls	r7, r3, #24
 8003296:	f856 5b04 	ldr.w	r5, [r6], #4
 800329a:	600e      	str	r6, [r1, #0]
 800329c:	d514      	bpl.n	80032c8 <_printf_i+0x1ac>
 800329e:	07d9      	lsls	r1, r3, #31
 80032a0:	bf44      	itt	mi
 80032a2:	f043 0320 	orrmi.w	r3, r3, #32
 80032a6:	6023      	strmi	r3, [r4, #0]
 80032a8:	b91d      	cbnz	r5, 80032b2 <_printf_i+0x196>
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	f023 0320 	bic.w	r3, r3, #32
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	2310      	movs	r3, #16
 80032b4:	e7b0      	b.n	8003218 <_printf_i+0xfc>
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	f043 0320 	orr.w	r3, r3, #32
 80032bc:	6023      	str	r3, [r4, #0]
 80032be:	2378      	movs	r3, #120	; 0x78
 80032c0:	4828      	ldr	r0, [pc, #160]	; (8003364 <_printf_i+0x248>)
 80032c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032c6:	e7e3      	b.n	8003290 <_printf_i+0x174>
 80032c8:	065e      	lsls	r6, r3, #25
 80032ca:	bf48      	it	mi
 80032cc:	b2ad      	uxthmi	r5, r5
 80032ce:	e7e6      	b.n	800329e <_printf_i+0x182>
 80032d0:	4616      	mov	r6, r2
 80032d2:	e7bb      	b.n	800324c <_printf_i+0x130>
 80032d4:	680b      	ldr	r3, [r1, #0]
 80032d6:	6826      	ldr	r6, [r4, #0]
 80032d8:	6960      	ldr	r0, [r4, #20]
 80032da:	1d1d      	adds	r5, r3, #4
 80032dc:	600d      	str	r5, [r1, #0]
 80032de:	0635      	lsls	r5, r6, #24
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	d501      	bpl.n	80032e8 <_printf_i+0x1cc>
 80032e4:	6018      	str	r0, [r3, #0]
 80032e6:	e002      	b.n	80032ee <_printf_i+0x1d2>
 80032e8:	0671      	lsls	r1, r6, #25
 80032ea:	d5fb      	bpl.n	80032e4 <_printf_i+0x1c8>
 80032ec:	8018      	strh	r0, [r3, #0]
 80032ee:	2300      	movs	r3, #0
 80032f0:	6123      	str	r3, [r4, #16]
 80032f2:	4616      	mov	r6, r2
 80032f4:	e7ba      	b.n	800326c <_printf_i+0x150>
 80032f6:	680b      	ldr	r3, [r1, #0]
 80032f8:	1d1a      	adds	r2, r3, #4
 80032fa:	600a      	str	r2, [r1, #0]
 80032fc:	681e      	ldr	r6, [r3, #0]
 80032fe:	6862      	ldr	r2, [r4, #4]
 8003300:	2100      	movs	r1, #0
 8003302:	4630      	mov	r0, r6
 8003304:	f7fc ff74 	bl	80001f0 <memchr>
 8003308:	b108      	cbz	r0, 800330e <_printf_i+0x1f2>
 800330a:	1b80      	subs	r0, r0, r6
 800330c:	6060      	str	r0, [r4, #4]
 800330e:	6863      	ldr	r3, [r4, #4]
 8003310:	6123      	str	r3, [r4, #16]
 8003312:	2300      	movs	r3, #0
 8003314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003318:	e7a8      	b.n	800326c <_printf_i+0x150>
 800331a:	6923      	ldr	r3, [r4, #16]
 800331c:	4632      	mov	r2, r6
 800331e:	4649      	mov	r1, r9
 8003320:	4640      	mov	r0, r8
 8003322:	47d0      	blx	sl
 8003324:	3001      	adds	r0, #1
 8003326:	d0ab      	beq.n	8003280 <_printf_i+0x164>
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	079b      	lsls	r3, r3, #30
 800332c:	d413      	bmi.n	8003356 <_printf_i+0x23a>
 800332e:	68e0      	ldr	r0, [r4, #12]
 8003330:	9b03      	ldr	r3, [sp, #12]
 8003332:	4298      	cmp	r0, r3
 8003334:	bfb8      	it	lt
 8003336:	4618      	movlt	r0, r3
 8003338:	e7a4      	b.n	8003284 <_printf_i+0x168>
 800333a:	2301      	movs	r3, #1
 800333c:	4632      	mov	r2, r6
 800333e:	4649      	mov	r1, r9
 8003340:	4640      	mov	r0, r8
 8003342:	47d0      	blx	sl
 8003344:	3001      	adds	r0, #1
 8003346:	d09b      	beq.n	8003280 <_printf_i+0x164>
 8003348:	3501      	adds	r5, #1
 800334a:	68e3      	ldr	r3, [r4, #12]
 800334c:	9903      	ldr	r1, [sp, #12]
 800334e:	1a5b      	subs	r3, r3, r1
 8003350:	42ab      	cmp	r3, r5
 8003352:	dcf2      	bgt.n	800333a <_printf_i+0x21e>
 8003354:	e7eb      	b.n	800332e <_printf_i+0x212>
 8003356:	2500      	movs	r5, #0
 8003358:	f104 0619 	add.w	r6, r4, #25
 800335c:	e7f5      	b.n	800334a <_printf_i+0x22e>
 800335e:	bf00      	nop
 8003360:	080075a6 	.word	0x080075a6
 8003364:	080075b7 	.word	0x080075b7

08003368 <_scanf_float>:
 8003368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336c:	b087      	sub	sp, #28
 800336e:	4617      	mov	r7, r2
 8003370:	9303      	str	r3, [sp, #12]
 8003372:	688b      	ldr	r3, [r1, #8]
 8003374:	1e5a      	subs	r2, r3, #1
 8003376:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800337a:	bf83      	ittte	hi
 800337c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003380:	195b      	addhi	r3, r3, r5
 8003382:	9302      	strhi	r3, [sp, #8]
 8003384:	2300      	movls	r3, #0
 8003386:	bf86      	itte	hi
 8003388:	f240 135d 	movwhi	r3, #349	; 0x15d
 800338c:	608b      	strhi	r3, [r1, #8]
 800338e:	9302      	strls	r3, [sp, #8]
 8003390:	680b      	ldr	r3, [r1, #0]
 8003392:	468b      	mov	fp, r1
 8003394:	2500      	movs	r5, #0
 8003396:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800339a:	f84b 3b1c 	str.w	r3, [fp], #28
 800339e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80033a2:	4680      	mov	r8, r0
 80033a4:	460c      	mov	r4, r1
 80033a6:	465e      	mov	r6, fp
 80033a8:	46aa      	mov	sl, r5
 80033aa:	46a9      	mov	r9, r5
 80033ac:	9501      	str	r5, [sp, #4]
 80033ae:	68a2      	ldr	r2, [r4, #8]
 80033b0:	b152      	cbz	r2, 80033c8 <_scanf_float+0x60>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b4e      	cmp	r3, #78	; 0x4e
 80033b8:	d864      	bhi.n	8003484 <_scanf_float+0x11c>
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d83c      	bhi.n	8003438 <_scanf_float+0xd0>
 80033be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80033c2:	b2c8      	uxtb	r0, r1
 80033c4:	280e      	cmp	r0, #14
 80033c6:	d93a      	bls.n	800343e <_scanf_float+0xd6>
 80033c8:	f1b9 0f00 	cmp.w	r9, #0
 80033cc:	d003      	beq.n	80033d6 <_scanf_float+0x6e>
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033d4:	6023      	str	r3, [r4, #0]
 80033d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80033da:	f1ba 0f01 	cmp.w	sl, #1
 80033de:	f200 8113 	bhi.w	8003608 <_scanf_float+0x2a0>
 80033e2:	455e      	cmp	r6, fp
 80033e4:	f200 8105 	bhi.w	80035f2 <_scanf_float+0x28a>
 80033e8:	2501      	movs	r5, #1
 80033ea:	4628      	mov	r0, r5
 80033ec:	b007      	add	sp, #28
 80033ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80033f6:	2a0d      	cmp	r2, #13
 80033f8:	d8e6      	bhi.n	80033c8 <_scanf_float+0x60>
 80033fa:	a101      	add	r1, pc, #4	; (adr r1, 8003400 <_scanf_float+0x98>)
 80033fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003400:	0800353f 	.word	0x0800353f
 8003404:	080033c9 	.word	0x080033c9
 8003408:	080033c9 	.word	0x080033c9
 800340c:	080033c9 	.word	0x080033c9
 8003410:	0800359f 	.word	0x0800359f
 8003414:	08003577 	.word	0x08003577
 8003418:	080033c9 	.word	0x080033c9
 800341c:	080033c9 	.word	0x080033c9
 8003420:	0800354d 	.word	0x0800354d
 8003424:	080033c9 	.word	0x080033c9
 8003428:	080033c9 	.word	0x080033c9
 800342c:	080033c9 	.word	0x080033c9
 8003430:	080033c9 	.word	0x080033c9
 8003434:	08003505 	.word	0x08003505
 8003438:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800343c:	e7db      	b.n	80033f6 <_scanf_float+0x8e>
 800343e:	290e      	cmp	r1, #14
 8003440:	d8c2      	bhi.n	80033c8 <_scanf_float+0x60>
 8003442:	a001      	add	r0, pc, #4	; (adr r0, 8003448 <_scanf_float+0xe0>)
 8003444:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003448:	080034f7 	.word	0x080034f7
 800344c:	080033c9 	.word	0x080033c9
 8003450:	080034f7 	.word	0x080034f7
 8003454:	0800358b 	.word	0x0800358b
 8003458:	080033c9 	.word	0x080033c9
 800345c:	080034a5 	.word	0x080034a5
 8003460:	080034e1 	.word	0x080034e1
 8003464:	080034e1 	.word	0x080034e1
 8003468:	080034e1 	.word	0x080034e1
 800346c:	080034e1 	.word	0x080034e1
 8003470:	080034e1 	.word	0x080034e1
 8003474:	080034e1 	.word	0x080034e1
 8003478:	080034e1 	.word	0x080034e1
 800347c:	080034e1 	.word	0x080034e1
 8003480:	080034e1 	.word	0x080034e1
 8003484:	2b6e      	cmp	r3, #110	; 0x6e
 8003486:	d809      	bhi.n	800349c <_scanf_float+0x134>
 8003488:	2b60      	cmp	r3, #96	; 0x60
 800348a:	d8b2      	bhi.n	80033f2 <_scanf_float+0x8a>
 800348c:	2b54      	cmp	r3, #84	; 0x54
 800348e:	d077      	beq.n	8003580 <_scanf_float+0x218>
 8003490:	2b59      	cmp	r3, #89	; 0x59
 8003492:	d199      	bne.n	80033c8 <_scanf_float+0x60>
 8003494:	2d07      	cmp	r5, #7
 8003496:	d197      	bne.n	80033c8 <_scanf_float+0x60>
 8003498:	2508      	movs	r5, #8
 800349a:	e029      	b.n	80034f0 <_scanf_float+0x188>
 800349c:	2b74      	cmp	r3, #116	; 0x74
 800349e:	d06f      	beq.n	8003580 <_scanf_float+0x218>
 80034a0:	2b79      	cmp	r3, #121	; 0x79
 80034a2:	e7f6      	b.n	8003492 <_scanf_float+0x12a>
 80034a4:	6821      	ldr	r1, [r4, #0]
 80034a6:	05c8      	lsls	r0, r1, #23
 80034a8:	d51a      	bpl.n	80034e0 <_scanf_float+0x178>
 80034aa:	9b02      	ldr	r3, [sp, #8]
 80034ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80034b0:	6021      	str	r1, [r4, #0]
 80034b2:	f109 0901 	add.w	r9, r9, #1
 80034b6:	b11b      	cbz	r3, 80034c0 <_scanf_float+0x158>
 80034b8:	3b01      	subs	r3, #1
 80034ba:	3201      	adds	r2, #1
 80034bc:	9302      	str	r3, [sp, #8]
 80034be:	60a2      	str	r2, [r4, #8]
 80034c0:	68a3      	ldr	r3, [r4, #8]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	60a3      	str	r3, [r4, #8]
 80034c6:	6923      	ldr	r3, [r4, #16]
 80034c8:	3301      	adds	r3, #1
 80034ca:	6123      	str	r3, [r4, #16]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	607b      	str	r3, [r7, #4]
 80034d4:	f340 8084 	ble.w	80035e0 <_scanf_float+0x278>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	3301      	adds	r3, #1
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	e766      	b.n	80033ae <_scanf_float+0x46>
 80034e0:	eb1a 0f05 	cmn.w	sl, r5
 80034e4:	f47f af70 	bne.w	80033c8 <_scanf_float+0x60>
 80034e8:	6822      	ldr	r2, [r4, #0]
 80034ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80034ee:	6022      	str	r2, [r4, #0]
 80034f0:	f806 3b01 	strb.w	r3, [r6], #1
 80034f4:	e7e4      	b.n	80034c0 <_scanf_float+0x158>
 80034f6:	6822      	ldr	r2, [r4, #0]
 80034f8:	0610      	lsls	r0, r2, #24
 80034fa:	f57f af65 	bpl.w	80033c8 <_scanf_float+0x60>
 80034fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003502:	e7f4      	b.n	80034ee <_scanf_float+0x186>
 8003504:	f1ba 0f00 	cmp.w	sl, #0
 8003508:	d10e      	bne.n	8003528 <_scanf_float+0x1c0>
 800350a:	f1b9 0f00 	cmp.w	r9, #0
 800350e:	d10e      	bne.n	800352e <_scanf_float+0x1c6>
 8003510:	6822      	ldr	r2, [r4, #0]
 8003512:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003516:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800351a:	d108      	bne.n	800352e <_scanf_float+0x1c6>
 800351c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003520:	6022      	str	r2, [r4, #0]
 8003522:	f04f 0a01 	mov.w	sl, #1
 8003526:	e7e3      	b.n	80034f0 <_scanf_float+0x188>
 8003528:	f1ba 0f02 	cmp.w	sl, #2
 800352c:	d055      	beq.n	80035da <_scanf_float+0x272>
 800352e:	2d01      	cmp	r5, #1
 8003530:	d002      	beq.n	8003538 <_scanf_float+0x1d0>
 8003532:	2d04      	cmp	r5, #4
 8003534:	f47f af48 	bne.w	80033c8 <_scanf_float+0x60>
 8003538:	3501      	adds	r5, #1
 800353a:	b2ed      	uxtb	r5, r5
 800353c:	e7d8      	b.n	80034f0 <_scanf_float+0x188>
 800353e:	f1ba 0f01 	cmp.w	sl, #1
 8003542:	f47f af41 	bne.w	80033c8 <_scanf_float+0x60>
 8003546:	f04f 0a02 	mov.w	sl, #2
 800354a:	e7d1      	b.n	80034f0 <_scanf_float+0x188>
 800354c:	b97d      	cbnz	r5, 800356e <_scanf_float+0x206>
 800354e:	f1b9 0f00 	cmp.w	r9, #0
 8003552:	f47f af3c 	bne.w	80033ce <_scanf_float+0x66>
 8003556:	6822      	ldr	r2, [r4, #0]
 8003558:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800355c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003560:	f47f af39 	bne.w	80033d6 <_scanf_float+0x6e>
 8003564:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003568:	6022      	str	r2, [r4, #0]
 800356a:	2501      	movs	r5, #1
 800356c:	e7c0      	b.n	80034f0 <_scanf_float+0x188>
 800356e:	2d03      	cmp	r5, #3
 8003570:	d0e2      	beq.n	8003538 <_scanf_float+0x1d0>
 8003572:	2d05      	cmp	r5, #5
 8003574:	e7de      	b.n	8003534 <_scanf_float+0x1cc>
 8003576:	2d02      	cmp	r5, #2
 8003578:	f47f af26 	bne.w	80033c8 <_scanf_float+0x60>
 800357c:	2503      	movs	r5, #3
 800357e:	e7b7      	b.n	80034f0 <_scanf_float+0x188>
 8003580:	2d06      	cmp	r5, #6
 8003582:	f47f af21 	bne.w	80033c8 <_scanf_float+0x60>
 8003586:	2507      	movs	r5, #7
 8003588:	e7b2      	b.n	80034f0 <_scanf_float+0x188>
 800358a:	6822      	ldr	r2, [r4, #0]
 800358c:	0591      	lsls	r1, r2, #22
 800358e:	f57f af1b 	bpl.w	80033c8 <_scanf_float+0x60>
 8003592:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003596:	6022      	str	r2, [r4, #0]
 8003598:	f8cd 9004 	str.w	r9, [sp, #4]
 800359c:	e7a8      	b.n	80034f0 <_scanf_float+0x188>
 800359e:	6822      	ldr	r2, [r4, #0]
 80035a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80035a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80035a8:	d006      	beq.n	80035b8 <_scanf_float+0x250>
 80035aa:	0550      	lsls	r0, r2, #21
 80035ac:	f57f af0c 	bpl.w	80033c8 <_scanf_float+0x60>
 80035b0:	f1b9 0f00 	cmp.w	r9, #0
 80035b4:	f43f af0f 	beq.w	80033d6 <_scanf_float+0x6e>
 80035b8:	0591      	lsls	r1, r2, #22
 80035ba:	bf58      	it	pl
 80035bc:	9901      	ldrpl	r1, [sp, #4]
 80035be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80035c2:	bf58      	it	pl
 80035c4:	eba9 0101 	subpl.w	r1, r9, r1
 80035c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80035cc:	bf58      	it	pl
 80035ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80035d2:	6022      	str	r2, [r4, #0]
 80035d4:	f04f 0900 	mov.w	r9, #0
 80035d8:	e78a      	b.n	80034f0 <_scanf_float+0x188>
 80035da:	f04f 0a03 	mov.w	sl, #3
 80035de:	e787      	b.n	80034f0 <_scanf_float+0x188>
 80035e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80035e4:	4639      	mov	r1, r7
 80035e6:	4640      	mov	r0, r8
 80035e8:	4798      	blx	r3
 80035ea:	2800      	cmp	r0, #0
 80035ec:	f43f aedf 	beq.w	80033ae <_scanf_float+0x46>
 80035f0:	e6ea      	b.n	80033c8 <_scanf_float+0x60>
 80035f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80035f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80035fa:	463a      	mov	r2, r7
 80035fc:	4640      	mov	r0, r8
 80035fe:	4798      	blx	r3
 8003600:	6923      	ldr	r3, [r4, #16]
 8003602:	3b01      	subs	r3, #1
 8003604:	6123      	str	r3, [r4, #16]
 8003606:	e6ec      	b.n	80033e2 <_scanf_float+0x7a>
 8003608:	1e6b      	subs	r3, r5, #1
 800360a:	2b06      	cmp	r3, #6
 800360c:	d825      	bhi.n	800365a <_scanf_float+0x2f2>
 800360e:	2d02      	cmp	r5, #2
 8003610:	d836      	bhi.n	8003680 <_scanf_float+0x318>
 8003612:	455e      	cmp	r6, fp
 8003614:	f67f aee8 	bls.w	80033e8 <_scanf_float+0x80>
 8003618:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800361c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003620:	463a      	mov	r2, r7
 8003622:	4640      	mov	r0, r8
 8003624:	4798      	blx	r3
 8003626:	6923      	ldr	r3, [r4, #16]
 8003628:	3b01      	subs	r3, #1
 800362a:	6123      	str	r3, [r4, #16]
 800362c:	e7f1      	b.n	8003612 <_scanf_float+0x2aa>
 800362e:	9802      	ldr	r0, [sp, #8]
 8003630:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003634:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003638:	9002      	str	r0, [sp, #8]
 800363a:	463a      	mov	r2, r7
 800363c:	4640      	mov	r0, r8
 800363e:	4798      	blx	r3
 8003640:	6923      	ldr	r3, [r4, #16]
 8003642:	3b01      	subs	r3, #1
 8003644:	6123      	str	r3, [r4, #16]
 8003646:	f10a 3aff 	add.w	sl, sl, #4294967295
 800364a:	fa5f fa8a 	uxtb.w	sl, sl
 800364e:	f1ba 0f02 	cmp.w	sl, #2
 8003652:	d1ec      	bne.n	800362e <_scanf_float+0x2c6>
 8003654:	3d03      	subs	r5, #3
 8003656:	b2ed      	uxtb	r5, r5
 8003658:	1b76      	subs	r6, r6, r5
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	05da      	lsls	r2, r3, #23
 800365e:	d52f      	bpl.n	80036c0 <_scanf_float+0x358>
 8003660:	055b      	lsls	r3, r3, #21
 8003662:	d510      	bpl.n	8003686 <_scanf_float+0x31e>
 8003664:	455e      	cmp	r6, fp
 8003666:	f67f aebf 	bls.w	80033e8 <_scanf_float+0x80>
 800366a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800366e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003672:	463a      	mov	r2, r7
 8003674:	4640      	mov	r0, r8
 8003676:	4798      	blx	r3
 8003678:	6923      	ldr	r3, [r4, #16]
 800367a:	3b01      	subs	r3, #1
 800367c:	6123      	str	r3, [r4, #16]
 800367e:	e7f1      	b.n	8003664 <_scanf_float+0x2fc>
 8003680:	46aa      	mov	sl, r5
 8003682:	9602      	str	r6, [sp, #8]
 8003684:	e7df      	b.n	8003646 <_scanf_float+0x2de>
 8003686:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800368a:	6923      	ldr	r3, [r4, #16]
 800368c:	2965      	cmp	r1, #101	; 0x65
 800368e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003692:	f106 35ff 	add.w	r5, r6, #4294967295
 8003696:	6123      	str	r3, [r4, #16]
 8003698:	d00c      	beq.n	80036b4 <_scanf_float+0x34c>
 800369a:	2945      	cmp	r1, #69	; 0x45
 800369c:	d00a      	beq.n	80036b4 <_scanf_float+0x34c>
 800369e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036a2:	463a      	mov	r2, r7
 80036a4:	4640      	mov	r0, r8
 80036a6:	4798      	blx	r3
 80036a8:	6923      	ldr	r3, [r4, #16]
 80036aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	1eb5      	subs	r5, r6, #2
 80036b2:	6123      	str	r3, [r4, #16]
 80036b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036b8:	463a      	mov	r2, r7
 80036ba:	4640      	mov	r0, r8
 80036bc:	4798      	blx	r3
 80036be:	462e      	mov	r6, r5
 80036c0:	6825      	ldr	r5, [r4, #0]
 80036c2:	f015 0510 	ands.w	r5, r5, #16
 80036c6:	d158      	bne.n	800377a <_scanf_float+0x412>
 80036c8:	7035      	strb	r5, [r6, #0]
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d4:	d11c      	bne.n	8003710 <_scanf_float+0x3a8>
 80036d6:	9b01      	ldr	r3, [sp, #4]
 80036d8:	454b      	cmp	r3, r9
 80036da:	eba3 0209 	sub.w	r2, r3, r9
 80036de:	d124      	bne.n	800372a <_scanf_float+0x3c2>
 80036e0:	2200      	movs	r2, #0
 80036e2:	4659      	mov	r1, fp
 80036e4:	4640      	mov	r0, r8
 80036e6:	f000 fe9d 	bl	8004424 <_strtod_r>
 80036ea:	9b03      	ldr	r3, [sp, #12]
 80036ec:	6821      	ldr	r1, [r4, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f011 0f02 	tst.w	r1, #2
 80036f4:	ec57 6b10 	vmov	r6, r7, d0
 80036f8:	f103 0204 	add.w	r2, r3, #4
 80036fc:	d020      	beq.n	8003740 <_scanf_float+0x3d8>
 80036fe:	9903      	ldr	r1, [sp, #12]
 8003700:	600a      	str	r2, [r1, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	e9c3 6700 	strd	r6, r7, [r3]
 8003708:	68e3      	ldr	r3, [r4, #12]
 800370a:	3301      	adds	r3, #1
 800370c:	60e3      	str	r3, [r4, #12]
 800370e:	e66c      	b.n	80033ea <_scanf_float+0x82>
 8003710:	9b04      	ldr	r3, [sp, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0e4      	beq.n	80036e0 <_scanf_float+0x378>
 8003716:	9905      	ldr	r1, [sp, #20]
 8003718:	230a      	movs	r3, #10
 800371a:	462a      	mov	r2, r5
 800371c:	3101      	adds	r1, #1
 800371e:	4640      	mov	r0, r8
 8003720:	f000 ff0a 	bl	8004538 <_strtol_r>
 8003724:	9b04      	ldr	r3, [sp, #16]
 8003726:	9e05      	ldr	r6, [sp, #20]
 8003728:	1ac2      	subs	r2, r0, r3
 800372a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800372e:	429e      	cmp	r6, r3
 8003730:	bf28      	it	cs
 8003732:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003736:	4912      	ldr	r1, [pc, #72]	; (8003780 <_scanf_float+0x418>)
 8003738:	4630      	mov	r0, r6
 800373a:	f000 f82b 	bl	8003794 <siprintf>
 800373e:	e7cf      	b.n	80036e0 <_scanf_float+0x378>
 8003740:	f011 0f04 	tst.w	r1, #4
 8003744:	9903      	ldr	r1, [sp, #12]
 8003746:	600a      	str	r2, [r1, #0]
 8003748:	d1db      	bne.n	8003702 <_scanf_float+0x39a>
 800374a:	f8d3 8000 	ldr.w	r8, [r3]
 800374e:	ee10 2a10 	vmov	r2, s0
 8003752:	ee10 0a10 	vmov	r0, s0
 8003756:	463b      	mov	r3, r7
 8003758:	4639      	mov	r1, r7
 800375a:	f7fd f9ef 	bl	8000b3c <__aeabi_dcmpun>
 800375e:	b128      	cbz	r0, 800376c <_scanf_float+0x404>
 8003760:	4808      	ldr	r0, [pc, #32]	; (8003784 <_scanf_float+0x41c>)
 8003762:	f000 f811 	bl	8003788 <nanf>
 8003766:	ed88 0a00 	vstr	s0, [r8]
 800376a:	e7cd      	b.n	8003708 <_scanf_float+0x3a0>
 800376c:	4630      	mov	r0, r6
 800376e:	4639      	mov	r1, r7
 8003770:	f7fd fa42 	bl	8000bf8 <__aeabi_d2f>
 8003774:	f8c8 0000 	str.w	r0, [r8]
 8003778:	e7c6      	b.n	8003708 <_scanf_float+0x3a0>
 800377a:	2500      	movs	r5, #0
 800377c:	e635      	b.n	80033ea <_scanf_float+0x82>
 800377e:	bf00      	nop
 8003780:	080075c8 	.word	0x080075c8
 8003784:	080078e0 	.word	0x080078e0

08003788 <nanf>:
 8003788:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003790 <nanf+0x8>
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	7fc00000 	.word	0x7fc00000

08003794 <siprintf>:
 8003794:	b40e      	push	{r1, r2, r3}
 8003796:	b500      	push	{lr}
 8003798:	b09c      	sub	sp, #112	; 0x70
 800379a:	ab1d      	add	r3, sp, #116	; 0x74
 800379c:	9002      	str	r0, [sp, #8]
 800379e:	9006      	str	r0, [sp, #24]
 80037a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037a4:	4809      	ldr	r0, [pc, #36]	; (80037cc <siprintf+0x38>)
 80037a6:	9107      	str	r1, [sp, #28]
 80037a8:	9104      	str	r1, [sp, #16]
 80037aa:	4909      	ldr	r1, [pc, #36]	; (80037d0 <siprintf+0x3c>)
 80037ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80037b0:	9105      	str	r1, [sp, #20]
 80037b2:	6800      	ldr	r0, [r0, #0]
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	a902      	add	r1, sp, #8
 80037b8:	f002 feae 	bl	8006518 <_svfiprintf_r>
 80037bc:	9b02      	ldr	r3, [sp, #8]
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	b01c      	add	sp, #112	; 0x70
 80037c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037c8:	b003      	add	sp, #12
 80037ca:	4770      	bx	lr
 80037cc:	20000008 	.word	0x20000008
 80037d0:	ffff0208 	.word	0xffff0208

080037d4 <sulp>:
 80037d4:	b570      	push	{r4, r5, r6, lr}
 80037d6:	4604      	mov	r4, r0
 80037d8:	460d      	mov	r5, r1
 80037da:	ec45 4b10 	vmov	d0, r4, r5
 80037de:	4616      	mov	r6, r2
 80037e0:	f002 fc36 	bl	8006050 <__ulp>
 80037e4:	ec51 0b10 	vmov	r0, r1, d0
 80037e8:	b17e      	cbz	r6, 800380a <sulp+0x36>
 80037ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80037ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	dd09      	ble.n	800380a <sulp+0x36>
 80037f6:	051b      	lsls	r3, r3, #20
 80037f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80037fc:	2400      	movs	r4, #0
 80037fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003802:	4622      	mov	r2, r4
 8003804:	462b      	mov	r3, r5
 8003806:	f7fc feff 	bl	8000608 <__aeabi_dmul>
 800380a:	bd70      	pop	{r4, r5, r6, pc}
 800380c:	0000      	movs	r0, r0
	...

08003810 <_strtod_l>:
 8003810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003814:	b0a3      	sub	sp, #140	; 0x8c
 8003816:	461f      	mov	r7, r3
 8003818:	2300      	movs	r3, #0
 800381a:	931e      	str	r3, [sp, #120]	; 0x78
 800381c:	4ba4      	ldr	r3, [pc, #656]	; (8003ab0 <_strtod_l+0x2a0>)
 800381e:	9219      	str	r2, [sp, #100]	; 0x64
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	9307      	str	r3, [sp, #28]
 8003824:	4604      	mov	r4, r0
 8003826:	4618      	mov	r0, r3
 8003828:	4688      	mov	r8, r1
 800382a:	f7fc fcd9 	bl	80001e0 <strlen>
 800382e:	f04f 0a00 	mov.w	sl, #0
 8003832:	4605      	mov	r5, r0
 8003834:	f04f 0b00 	mov.w	fp, #0
 8003838:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800383c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800383e:	781a      	ldrb	r2, [r3, #0]
 8003840:	2a2b      	cmp	r2, #43	; 0x2b
 8003842:	d04c      	beq.n	80038de <_strtod_l+0xce>
 8003844:	d839      	bhi.n	80038ba <_strtod_l+0xaa>
 8003846:	2a0d      	cmp	r2, #13
 8003848:	d832      	bhi.n	80038b0 <_strtod_l+0xa0>
 800384a:	2a08      	cmp	r2, #8
 800384c:	d832      	bhi.n	80038b4 <_strtod_l+0xa4>
 800384e:	2a00      	cmp	r2, #0
 8003850:	d03c      	beq.n	80038cc <_strtod_l+0xbc>
 8003852:	2300      	movs	r3, #0
 8003854:	930e      	str	r3, [sp, #56]	; 0x38
 8003856:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8003858:	7833      	ldrb	r3, [r6, #0]
 800385a:	2b30      	cmp	r3, #48	; 0x30
 800385c:	f040 80b4 	bne.w	80039c8 <_strtod_l+0x1b8>
 8003860:	7873      	ldrb	r3, [r6, #1]
 8003862:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003866:	2b58      	cmp	r3, #88	; 0x58
 8003868:	d16c      	bne.n	8003944 <_strtod_l+0x134>
 800386a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	ab1e      	add	r3, sp, #120	; 0x78
 8003870:	9702      	str	r7, [sp, #8]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	4a8f      	ldr	r2, [pc, #572]	; (8003ab4 <_strtod_l+0x2a4>)
 8003876:	ab1f      	add	r3, sp, #124	; 0x7c
 8003878:	a91d      	add	r1, sp, #116	; 0x74
 800387a:	4620      	mov	r0, r4
 800387c:	f001 fd48 	bl	8005310 <__gethex>
 8003880:	f010 0707 	ands.w	r7, r0, #7
 8003884:	4605      	mov	r5, r0
 8003886:	d005      	beq.n	8003894 <_strtod_l+0x84>
 8003888:	2f06      	cmp	r7, #6
 800388a:	d12a      	bne.n	80038e2 <_strtod_l+0xd2>
 800388c:	3601      	adds	r6, #1
 800388e:	2300      	movs	r3, #0
 8003890:	961d      	str	r6, [sp, #116]	; 0x74
 8003892:	930e      	str	r3, [sp, #56]	; 0x38
 8003894:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003896:	2b00      	cmp	r3, #0
 8003898:	f040 8596 	bne.w	80043c8 <_strtod_l+0xbb8>
 800389c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800389e:	b1db      	cbz	r3, 80038d8 <_strtod_l+0xc8>
 80038a0:	4652      	mov	r2, sl
 80038a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80038a6:	ec43 2b10 	vmov	d0, r2, r3
 80038aa:	b023      	add	sp, #140	; 0x8c
 80038ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038b0:	2a20      	cmp	r2, #32
 80038b2:	d1ce      	bne.n	8003852 <_strtod_l+0x42>
 80038b4:	3301      	adds	r3, #1
 80038b6:	931d      	str	r3, [sp, #116]	; 0x74
 80038b8:	e7c0      	b.n	800383c <_strtod_l+0x2c>
 80038ba:	2a2d      	cmp	r2, #45	; 0x2d
 80038bc:	d1c9      	bne.n	8003852 <_strtod_l+0x42>
 80038be:	2201      	movs	r2, #1
 80038c0:	920e      	str	r2, [sp, #56]	; 0x38
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	921d      	str	r2, [sp, #116]	; 0x74
 80038c6:	785b      	ldrb	r3, [r3, #1]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1c4      	bne.n	8003856 <_strtod_l+0x46>
 80038cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80038ce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f040 8576 	bne.w	80043c4 <_strtod_l+0xbb4>
 80038d8:	4652      	mov	r2, sl
 80038da:	465b      	mov	r3, fp
 80038dc:	e7e3      	b.n	80038a6 <_strtod_l+0x96>
 80038de:	2200      	movs	r2, #0
 80038e0:	e7ee      	b.n	80038c0 <_strtod_l+0xb0>
 80038e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80038e4:	b13a      	cbz	r2, 80038f6 <_strtod_l+0xe6>
 80038e6:	2135      	movs	r1, #53	; 0x35
 80038e8:	a820      	add	r0, sp, #128	; 0x80
 80038ea:	f002 fcbc 	bl	8006266 <__copybits>
 80038ee:	991e      	ldr	r1, [sp, #120]	; 0x78
 80038f0:	4620      	mov	r0, r4
 80038f2:	f002 f881 	bl	80059f8 <_Bfree>
 80038f6:	3f01      	subs	r7, #1
 80038f8:	2f05      	cmp	r7, #5
 80038fa:	d807      	bhi.n	800390c <_strtod_l+0xfc>
 80038fc:	e8df f007 	tbb	[pc, r7]
 8003900:	1d180b0e 	.word	0x1d180b0e
 8003904:	030e      	.short	0x030e
 8003906:	f04f 0b00 	mov.w	fp, #0
 800390a:	46da      	mov	sl, fp
 800390c:	0728      	lsls	r0, r5, #28
 800390e:	d5c1      	bpl.n	8003894 <_strtod_l+0x84>
 8003910:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8003914:	e7be      	b.n	8003894 <_strtod_l+0x84>
 8003916:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800391a:	e7f7      	b.n	800390c <_strtod_l+0xfc>
 800391c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8003920:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003922:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003926:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800392a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800392e:	e7ed      	b.n	800390c <_strtod_l+0xfc>
 8003930:	f8df b184 	ldr.w	fp, [pc, #388]	; 8003ab8 <_strtod_l+0x2a8>
 8003934:	f04f 0a00 	mov.w	sl, #0
 8003938:	e7e8      	b.n	800390c <_strtod_l+0xfc>
 800393a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800393e:	f04f 3aff 	mov.w	sl, #4294967295
 8003942:	e7e3      	b.n	800390c <_strtod_l+0xfc>
 8003944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	921d      	str	r2, [sp, #116]	; 0x74
 800394a:	785b      	ldrb	r3, [r3, #1]
 800394c:	2b30      	cmp	r3, #48	; 0x30
 800394e:	d0f9      	beq.n	8003944 <_strtod_l+0x134>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d09f      	beq.n	8003894 <_strtod_l+0x84>
 8003954:	2301      	movs	r3, #1
 8003956:	f04f 0900 	mov.w	r9, #0
 800395a:	9304      	str	r3, [sp, #16]
 800395c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800395e:	930a      	str	r3, [sp, #40]	; 0x28
 8003960:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003964:	464f      	mov	r7, r9
 8003966:	220a      	movs	r2, #10
 8003968:	981d      	ldr	r0, [sp, #116]	; 0x74
 800396a:	7806      	ldrb	r6, [r0, #0]
 800396c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8003970:	b2d9      	uxtb	r1, r3
 8003972:	2909      	cmp	r1, #9
 8003974:	d92a      	bls.n	80039cc <_strtod_l+0x1bc>
 8003976:	9907      	ldr	r1, [sp, #28]
 8003978:	462a      	mov	r2, r5
 800397a:	f002 fee5 	bl	8006748 <strncmp>
 800397e:	b398      	cbz	r0, 80039e8 <_strtod_l+0x1d8>
 8003980:	2000      	movs	r0, #0
 8003982:	4633      	mov	r3, r6
 8003984:	463d      	mov	r5, r7
 8003986:	9007      	str	r0, [sp, #28]
 8003988:	4602      	mov	r2, r0
 800398a:	2b65      	cmp	r3, #101	; 0x65
 800398c:	d001      	beq.n	8003992 <_strtod_l+0x182>
 800398e:	2b45      	cmp	r3, #69	; 0x45
 8003990:	d118      	bne.n	80039c4 <_strtod_l+0x1b4>
 8003992:	b91d      	cbnz	r5, 800399c <_strtod_l+0x18c>
 8003994:	9b04      	ldr	r3, [sp, #16]
 8003996:	4303      	orrs	r3, r0
 8003998:	d098      	beq.n	80038cc <_strtod_l+0xbc>
 800399a:	2500      	movs	r5, #0
 800399c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80039a0:	f108 0301 	add.w	r3, r8, #1
 80039a4:	931d      	str	r3, [sp, #116]	; 0x74
 80039a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80039aa:	2b2b      	cmp	r3, #43	; 0x2b
 80039ac:	d075      	beq.n	8003a9a <_strtod_l+0x28a>
 80039ae:	2b2d      	cmp	r3, #45	; 0x2d
 80039b0:	d07b      	beq.n	8003aaa <_strtod_l+0x29a>
 80039b2:	f04f 0c00 	mov.w	ip, #0
 80039b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80039ba:	2909      	cmp	r1, #9
 80039bc:	f240 8082 	bls.w	8003ac4 <_strtod_l+0x2b4>
 80039c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80039c4:	2600      	movs	r6, #0
 80039c6:	e09d      	b.n	8003b04 <_strtod_l+0x2f4>
 80039c8:	2300      	movs	r3, #0
 80039ca:	e7c4      	b.n	8003956 <_strtod_l+0x146>
 80039cc:	2f08      	cmp	r7, #8
 80039ce:	bfd8      	it	le
 80039d0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80039d2:	f100 0001 	add.w	r0, r0, #1
 80039d6:	bfda      	itte	le
 80039d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80039dc:	9309      	strle	r3, [sp, #36]	; 0x24
 80039de:	fb02 3909 	mlagt	r9, r2, r9, r3
 80039e2:	3701      	adds	r7, #1
 80039e4:	901d      	str	r0, [sp, #116]	; 0x74
 80039e6:	e7bf      	b.n	8003968 <_strtod_l+0x158>
 80039e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80039ea:	195a      	adds	r2, r3, r5
 80039ec:	921d      	str	r2, [sp, #116]	; 0x74
 80039ee:	5d5b      	ldrb	r3, [r3, r5]
 80039f0:	2f00      	cmp	r7, #0
 80039f2:	d037      	beq.n	8003a64 <_strtod_l+0x254>
 80039f4:	9007      	str	r0, [sp, #28]
 80039f6:	463d      	mov	r5, r7
 80039f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80039fc:	2a09      	cmp	r2, #9
 80039fe:	d912      	bls.n	8003a26 <_strtod_l+0x216>
 8003a00:	2201      	movs	r2, #1
 8003a02:	e7c2      	b.n	800398a <_strtod_l+0x17a>
 8003a04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	921d      	str	r2, [sp, #116]	; 0x74
 8003a0a:	785b      	ldrb	r3, [r3, #1]
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	2b30      	cmp	r3, #48	; 0x30
 8003a10:	d0f8      	beq.n	8003a04 <_strtod_l+0x1f4>
 8003a12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003a16:	2a08      	cmp	r2, #8
 8003a18:	f200 84db 	bhi.w	80043d2 <_strtod_l+0xbc2>
 8003a1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003a1e:	9007      	str	r0, [sp, #28]
 8003a20:	2000      	movs	r0, #0
 8003a22:	920a      	str	r2, [sp, #40]	; 0x28
 8003a24:	4605      	mov	r5, r0
 8003a26:	3b30      	subs	r3, #48	; 0x30
 8003a28:	f100 0201 	add.w	r2, r0, #1
 8003a2c:	d014      	beq.n	8003a58 <_strtod_l+0x248>
 8003a2e:	9907      	ldr	r1, [sp, #28]
 8003a30:	4411      	add	r1, r2
 8003a32:	9107      	str	r1, [sp, #28]
 8003a34:	462a      	mov	r2, r5
 8003a36:	eb00 0e05 	add.w	lr, r0, r5
 8003a3a:	210a      	movs	r1, #10
 8003a3c:	4572      	cmp	r2, lr
 8003a3e:	d113      	bne.n	8003a68 <_strtod_l+0x258>
 8003a40:	182a      	adds	r2, r5, r0
 8003a42:	2a08      	cmp	r2, #8
 8003a44:	f105 0501 	add.w	r5, r5, #1
 8003a48:	4405      	add	r5, r0
 8003a4a:	dc1c      	bgt.n	8003a86 <_strtod_l+0x276>
 8003a4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a4e:	220a      	movs	r2, #10
 8003a50:	fb02 3301 	mla	r3, r2, r1, r3
 8003a54:	9309      	str	r3, [sp, #36]	; 0x24
 8003a56:	2200      	movs	r2, #0
 8003a58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003a5a:	1c59      	adds	r1, r3, #1
 8003a5c:	911d      	str	r1, [sp, #116]	; 0x74
 8003a5e:	785b      	ldrb	r3, [r3, #1]
 8003a60:	4610      	mov	r0, r2
 8003a62:	e7c9      	b.n	80039f8 <_strtod_l+0x1e8>
 8003a64:	4638      	mov	r0, r7
 8003a66:	e7d2      	b.n	8003a0e <_strtod_l+0x1fe>
 8003a68:	2a08      	cmp	r2, #8
 8003a6a:	dc04      	bgt.n	8003a76 <_strtod_l+0x266>
 8003a6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003a6e:	434e      	muls	r6, r1
 8003a70:	9609      	str	r6, [sp, #36]	; 0x24
 8003a72:	3201      	adds	r2, #1
 8003a74:	e7e2      	b.n	8003a3c <_strtod_l+0x22c>
 8003a76:	f102 0c01 	add.w	ip, r2, #1
 8003a7a:	f1bc 0f10 	cmp.w	ip, #16
 8003a7e:	bfd8      	it	le
 8003a80:	fb01 f909 	mulle.w	r9, r1, r9
 8003a84:	e7f5      	b.n	8003a72 <_strtod_l+0x262>
 8003a86:	2d10      	cmp	r5, #16
 8003a88:	bfdc      	itt	le
 8003a8a:	220a      	movle	r2, #10
 8003a8c:	fb02 3909 	mlale	r9, r2, r9, r3
 8003a90:	e7e1      	b.n	8003a56 <_strtod_l+0x246>
 8003a92:	2300      	movs	r3, #0
 8003a94:	9307      	str	r3, [sp, #28]
 8003a96:	2201      	movs	r2, #1
 8003a98:	e77c      	b.n	8003994 <_strtod_l+0x184>
 8003a9a:	f04f 0c00 	mov.w	ip, #0
 8003a9e:	f108 0302 	add.w	r3, r8, #2
 8003aa2:	931d      	str	r3, [sp, #116]	; 0x74
 8003aa4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8003aa8:	e785      	b.n	80039b6 <_strtod_l+0x1a6>
 8003aaa:	f04f 0c01 	mov.w	ip, #1
 8003aae:	e7f6      	b.n	8003a9e <_strtod_l+0x28e>
 8003ab0:	08007720 	.word	0x08007720
 8003ab4:	080075d0 	.word	0x080075d0
 8003ab8:	7ff00000 	.word	0x7ff00000
 8003abc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003abe:	1c59      	adds	r1, r3, #1
 8003ac0:	911d      	str	r1, [sp, #116]	; 0x74
 8003ac2:	785b      	ldrb	r3, [r3, #1]
 8003ac4:	2b30      	cmp	r3, #48	; 0x30
 8003ac6:	d0f9      	beq.n	8003abc <_strtod_l+0x2ac>
 8003ac8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003acc:	2908      	cmp	r1, #8
 8003ace:	f63f af79 	bhi.w	80039c4 <_strtod_l+0x1b4>
 8003ad2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8003ad6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003ad8:	9308      	str	r3, [sp, #32]
 8003ada:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003adc:	1c59      	adds	r1, r3, #1
 8003ade:	911d      	str	r1, [sp, #116]	; 0x74
 8003ae0:	785b      	ldrb	r3, [r3, #1]
 8003ae2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003ae6:	2e09      	cmp	r6, #9
 8003ae8:	d937      	bls.n	8003b5a <_strtod_l+0x34a>
 8003aea:	9e08      	ldr	r6, [sp, #32]
 8003aec:	1b89      	subs	r1, r1, r6
 8003aee:	2908      	cmp	r1, #8
 8003af0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8003af4:	dc02      	bgt.n	8003afc <_strtod_l+0x2ec>
 8003af6:	4576      	cmp	r6, lr
 8003af8:	bfa8      	it	ge
 8003afa:	4676      	movge	r6, lr
 8003afc:	f1bc 0f00 	cmp.w	ip, #0
 8003b00:	d000      	beq.n	8003b04 <_strtod_l+0x2f4>
 8003b02:	4276      	negs	r6, r6
 8003b04:	2d00      	cmp	r5, #0
 8003b06:	d14f      	bne.n	8003ba8 <_strtod_l+0x398>
 8003b08:	9904      	ldr	r1, [sp, #16]
 8003b0a:	4301      	orrs	r1, r0
 8003b0c:	f47f aec2 	bne.w	8003894 <_strtod_l+0x84>
 8003b10:	2a00      	cmp	r2, #0
 8003b12:	f47f aedb 	bne.w	80038cc <_strtod_l+0xbc>
 8003b16:	2b69      	cmp	r3, #105	; 0x69
 8003b18:	d027      	beq.n	8003b6a <_strtod_l+0x35a>
 8003b1a:	dc24      	bgt.n	8003b66 <_strtod_l+0x356>
 8003b1c:	2b49      	cmp	r3, #73	; 0x49
 8003b1e:	d024      	beq.n	8003b6a <_strtod_l+0x35a>
 8003b20:	2b4e      	cmp	r3, #78	; 0x4e
 8003b22:	f47f aed3 	bne.w	80038cc <_strtod_l+0xbc>
 8003b26:	499e      	ldr	r1, [pc, #632]	; (8003da0 <_strtod_l+0x590>)
 8003b28:	a81d      	add	r0, sp, #116	; 0x74
 8003b2a:	f001 fe49 	bl	80057c0 <__match>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	f43f aecc 	beq.w	80038cc <_strtod_l+0xbc>
 8003b34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b28      	cmp	r3, #40	; 0x28
 8003b3a:	d12d      	bne.n	8003b98 <_strtod_l+0x388>
 8003b3c:	4999      	ldr	r1, [pc, #612]	; (8003da4 <_strtod_l+0x594>)
 8003b3e:	aa20      	add	r2, sp, #128	; 0x80
 8003b40:	a81d      	add	r0, sp, #116	; 0x74
 8003b42:	f001 fe51 	bl	80057e8 <__hexnan>
 8003b46:	2805      	cmp	r0, #5
 8003b48:	d126      	bne.n	8003b98 <_strtod_l+0x388>
 8003b4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b4c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8003b50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003b54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003b58:	e69c      	b.n	8003894 <_strtod_l+0x84>
 8003b5a:	210a      	movs	r1, #10
 8003b5c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8003b60:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003b64:	e7b9      	b.n	8003ada <_strtod_l+0x2ca>
 8003b66:	2b6e      	cmp	r3, #110	; 0x6e
 8003b68:	e7db      	b.n	8003b22 <_strtod_l+0x312>
 8003b6a:	498f      	ldr	r1, [pc, #572]	; (8003da8 <_strtod_l+0x598>)
 8003b6c:	a81d      	add	r0, sp, #116	; 0x74
 8003b6e:	f001 fe27 	bl	80057c0 <__match>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	f43f aeaa 	beq.w	80038cc <_strtod_l+0xbc>
 8003b78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b7a:	498c      	ldr	r1, [pc, #560]	; (8003dac <_strtod_l+0x59c>)
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	a81d      	add	r0, sp, #116	; 0x74
 8003b80:	931d      	str	r3, [sp, #116]	; 0x74
 8003b82:	f001 fe1d 	bl	80057c0 <__match>
 8003b86:	b910      	cbnz	r0, 8003b8e <_strtod_l+0x37e>
 8003b88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	931d      	str	r3, [sp, #116]	; 0x74
 8003b8e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8003dbc <_strtod_l+0x5ac>
 8003b92:	f04f 0a00 	mov.w	sl, #0
 8003b96:	e67d      	b.n	8003894 <_strtod_l+0x84>
 8003b98:	4885      	ldr	r0, [pc, #532]	; (8003db0 <_strtod_l+0x5a0>)
 8003b9a:	f002 fdbd 	bl	8006718 <nan>
 8003b9e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003ba2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003ba6:	e675      	b.n	8003894 <_strtod_l+0x84>
 8003ba8:	9b07      	ldr	r3, [sp, #28]
 8003baa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bac:	1af3      	subs	r3, r6, r3
 8003bae:	2f00      	cmp	r7, #0
 8003bb0:	bf08      	it	eq
 8003bb2:	462f      	moveq	r7, r5
 8003bb4:	2d10      	cmp	r5, #16
 8003bb6:	9308      	str	r3, [sp, #32]
 8003bb8:	46a8      	mov	r8, r5
 8003bba:	bfa8      	it	ge
 8003bbc:	f04f 0810 	movge.w	r8, #16
 8003bc0:	f7fc fca8 	bl	8000514 <__aeabi_ui2d>
 8003bc4:	2d09      	cmp	r5, #9
 8003bc6:	4682      	mov	sl, r0
 8003bc8:	468b      	mov	fp, r1
 8003bca:	dd13      	ble.n	8003bf4 <_strtod_l+0x3e4>
 8003bcc:	4b79      	ldr	r3, [pc, #484]	; (8003db4 <_strtod_l+0x5a4>)
 8003bce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003bd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003bd6:	f7fc fd17 	bl	8000608 <__aeabi_dmul>
 8003bda:	4682      	mov	sl, r0
 8003bdc:	4648      	mov	r0, r9
 8003bde:	468b      	mov	fp, r1
 8003be0:	f7fc fc98 	bl	8000514 <__aeabi_ui2d>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4650      	mov	r0, sl
 8003bea:	4659      	mov	r1, fp
 8003bec:	f7fc fb56 	bl	800029c <__adddf3>
 8003bf0:	4682      	mov	sl, r0
 8003bf2:	468b      	mov	fp, r1
 8003bf4:	2d0f      	cmp	r5, #15
 8003bf6:	dc38      	bgt.n	8003c6a <_strtod_l+0x45a>
 8003bf8:	9b08      	ldr	r3, [sp, #32]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f43f ae4a 	beq.w	8003894 <_strtod_l+0x84>
 8003c00:	dd24      	ble.n	8003c4c <_strtod_l+0x43c>
 8003c02:	2b16      	cmp	r3, #22
 8003c04:	dc0b      	bgt.n	8003c1e <_strtod_l+0x40e>
 8003c06:	4d6b      	ldr	r5, [pc, #428]	; (8003db4 <_strtod_l+0x5a4>)
 8003c08:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8003c0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003c10:	4652      	mov	r2, sl
 8003c12:	465b      	mov	r3, fp
 8003c14:	f7fc fcf8 	bl	8000608 <__aeabi_dmul>
 8003c18:	4682      	mov	sl, r0
 8003c1a:	468b      	mov	fp, r1
 8003c1c:	e63a      	b.n	8003894 <_strtod_l+0x84>
 8003c1e:	9a08      	ldr	r2, [sp, #32]
 8003c20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8003c24:	4293      	cmp	r3, r2
 8003c26:	db20      	blt.n	8003c6a <_strtod_l+0x45a>
 8003c28:	4c62      	ldr	r4, [pc, #392]	; (8003db4 <_strtod_l+0x5a4>)
 8003c2a:	f1c5 050f 	rsb	r5, r5, #15
 8003c2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003c32:	4652      	mov	r2, sl
 8003c34:	465b      	mov	r3, fp
 8003c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c3a:	f7fc fce5 	bl	8000608 <__aeabi_dmul>
 8003c3e:	9b08      	ldr	r3, [sp, #32]
 8003c40:	1b5d      	subs	r5, r3, r5
 8003c42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003c46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003c4a:	e7e3      	b.n	8003c14 <_strtod_l+0x404>
 8003c4c:	9b08      	ldr	r3, [sp, #32]
 8003c4e:	3316      	adds	r3, #22
 8003c50:	db0b      	blt.n	8003c6a <_strtod_l+0x45a>
 8003c52:	9b07      	ldr	r3, [sp, #28]
 8003c54:	4a57      	ldr	r2, [pc, #348]	; (8003db4 <_strtod_l+0x5a4>)
 8003c56:	1b9e      	subs	r6, r3, r6
 8003c58:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8003c5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003c60:	4650      	mov	r0, sl
 8003c62:	4659      	mov	r1, fp
 8003c64:	f7fc fdfa 	bl	800085c <__aeabi_ddiv>
 8003c68:	e7d6      	b.n	8003c18 <_strtod_l+0x408>
 8003c6a:	9b08      	ldr	r3, [sp, #32]
 8003c6c:	eba5 0808 	sub.w	r8, r5, r8
 8003c70:	4498      	add	r8, r3
 8003c72:	f1b8 0f00 	cmp.w	r8, #0
 8003c76:	dd71      	ble.n	8003d5c <_strtod_l+0x54c>
 8003c78:	f018 030f 	ands.w	r3, r8, #15
 8003c7c:	d00a      	beq.n	8003c94 <_strtod_l+0x484>
 8003c7e:	494d      	ldr	r1, [pc, #308]	; (8003db4 <_strtod_l+0x5a4>)
 8003c80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003c84:	4652      	mov	r2, sl
 8003c86:	465b      	mov	r3, fp
 8003c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c8c:	f7fc fcbc 	bl	8000608 <__aeabi_dmul>
 8003c90:	4682      	mov	sl, r0
 8003c92:	468b      	mov	fp, r1
 8003c94:	f038 080f 	bics.w	r8, r8, #15
 8003c98:	d04d      	beq.n	8003d36 <_strtod_l+0x526>
 8003c9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003c9e:	dd22      	ble.n	8003ce6 <_strtod_l+0x4d6>
 8003ca0:	2500      	movs	r5, #0
 8003ca2:	462e      	mov	r6, r5
 8003ca4:	9509      	str	r5, [sp, #36]	; 0x24
 8003ca6:	9507      	str	r5, [sp, #28]
 8003ca8:	2322      	movs	r3, #34	; 0x22
 8003caa:	f8df b110 	ldr.w	fp, [pc, #272]	; 8003dbc <_strtod_l+0x5ac>
 8003cae:	6023      	str	r3, [r4, #0]
 8003cb0:	f04f 0a00 	mov.w	sl, #0
 8003cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f43f adec 	beq.w	8003894 <_strtod_l+0x84>
 8003cbc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f001 fe9a 	bl	80059f8 <_Bfree>
 8003cc4:	9907      	ldr	r1, [sp, #28]
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	f001 fe96 	bl	80059f8 <_Bfree>
 8003ccc:	4631      	mov	r1, r6
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f001 fe92 	bl	80059f8 <_Bfree>
 8003cd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	f001 fe8e 	bl	80059f8 <_Bfree>
 8003cdc:	4629      	mov	r1, r5
 8003cde:	4620      	mov	r0, r4
 8003ce0:	f001 fe8a 	bl	80059f8 <_Bfree>
 8003ce4:	e5d6      	b.n	8003894 <_strtod_l+0x84>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003cec:	4650      	mov	r0, sl
 8003cee:	4659      	mov	r1, fp
 8003cf0:	4699      	mov	r9, r3
 8003cf2:	f1b8 0f01 	cmp.w	r8, #1
 8003cf6:	dc21      	bgt.n	8003d3c <_strtod_l+0x52c>
 8003cf8:	b10b      	cbz	r3, 8003cfe <_strtod_l+0x4ee>
 8003cfa:	4682      	mov	sl, r0
 8003cfc:	468b      	mov	fp, r1
 8003cfe:	4b2e      	ldr	r3, [pc, #184]	; (8003db8 <_strtod_l+0x5a8>)
 8003d00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003d04:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003d08:	4652      	mov	r2, sl
 8003d0a:	465b      	mov	r3, fp
 8003d0c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003d10:	f7fc fc7a 	bl	8000608 <__aeabi_dmul>
 8003d14:	4b29      	ldr	r3, [pc, #164]	; (8003dbc <_strtod_l+0x5ac>)
 8003d16:	460a      	mov	r2, r1
 8003d18:	400b      	ands	r3, r1
 8003d1a:	4929      	ldr	r1, [pc, #164]	; (8003dc0 <_strtod_l+0x5b0>)
 8003d1c:	428b      	cmp	r3, r1
 8003d1e:	4682      	mov	sl, r0
 8003d20:	d8be      	bhi.n	8003ca0 <_strtod_l+0x490>
 8003d22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003d26:	428b      	cmp	r3, r1
 8003d28:	bf86      	itte	hi
 8003d2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8003dc4 <_strtod_l+0x5b4>
 8003d2e:	f04f 3aff 	movhi.w	sl, #4294967295
 8003d32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003d36:	2300      	movs	r3, #0
 8003d38:	9304      	str	r3, [sp, #16]
 8003d3a:	e081      	b.n	8003e40 <_strtod_l+0x630>
 8003d3c:	f018 0f01 	tst.w	r8, #1
 8003d40:	d007      	beq.n	8003d52 <_strtod_l+0x542>
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <_strtod_l+0x5a8>)
 8003d44:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f7fc fc5c 	bl	8000608 <__aeabi_dmul>
 8003d50:	2301      	movs	r3, #1
 8003d52:	f109 0901 	add.w	r9, r9, #1
 8003d56:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003d5a:	e7ca      	b.n	8003cf2 <_strtod_l+0x4e2>
 8003d5c:	d0eb      	beq.n	8003d36 <_strtod_l+0x526>
 8003d5e:	f1c8 0800 	rsb	r8, r8, #0
 8003d62:	f018 020f 	ands.w	r2, r8, #15
 8003d66:	d00a      	beq.n	8003d7e <_strtod_l+0x56e>
 8003d68:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <_strtod_l+0x5a4>)
 8003d6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d6e:	4650      	mov	r0, sl
 8003d70:	4659      	mov	r1, fp
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	f7fc fd71 	bl	800085c <__aeabi_ddiv>
 8003d7a:	4682      	mov	sl, r0
 8003d7c:	468b      	mov	fp, r1
 8003d7e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003d82:	d0d8      	beq.n	8003d36 <_strtod_l+0x526>
 8003d84:	f1b8 0f1f 	cmp.w	r8, #31
 8003d88:	dd1e      	ble.n	8003dc8 <_strtod_l+0x5b8>
 8003d8a:	2500      	movs	r5, #0
 8003d8c:	462e      	mov	r6, r5
 8003d8e:	9509      	str	r5, [sp, #36]	; 0x24
 8003d90:	9507      	str	r5, [sp, #28]
 8003d92:	2322      	movs	r3, #34	; 0x22
 8003d94:	f04f 0a00 	mov.w	sl, #0
 8003d98:	f04f 0b00 	mov.w	fp, #0
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	e789      	b.n	8003cb4 <_strtod_l+0x4a4>
 8003da0:	080075a1 	.word	0x080075a1
 8003da4:	080075e4 	.word	0x080075e4
 8003da8:	08007599 	.word	0x08007599
 8003dac:	08007623 	.word	0x08007623
 8003db0:	080078e0 	.word	0x080078e0
 8003db4:	080077c0 	.word	0x080077c0
 8003db8:	08007798 	.word	0x08007798
 8003dbc:	7ff00000 	.word	0x7ff00000
 8003dc0:	7ca00000 	.word	0x7ca00000
 8003dc4:	7fefffff 	.word	0x7fefffff
 8003dc8:	f018 0310 	ands.w	r3, r8, #16
 8003dcc:	bf18      	it	ne
 8003dce:	236a      	movne	r3, #106	; 0x6a
 8003dd0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8004188 <_strtod_l+0x978>
 8003dd4:	9304      	str	r3, [sp, #16]
 8003dd6:	4650      	mov	r0, sl
 8003dd8:	4659      	mov	r1, fp
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f018 0f01 	tst.w	r8, #1
 8003de0:	d004      	beq.n	8003dec <_strtod_l+0x5dc>
 8003de2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003de6:	f7fc fc0f 	bl	8000608 <__aeabi_dmul>
 8003dea:	2301      	movs	r3, #1
 8003dec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8003df0:	f109 0908 	add.w	r9, r9, #8
 8003df4:	d1f2      	bne.n	8003ddc <_strtod_l+0x5cc>
 8003df6:	b10b      	cbz	r3, 8003dfc <_strtod_l+0x5ec>
 8003df8:	4682      	mov	sl, r0
 8003dfa:	468b      	mov	fp, r1
 8003dfc:	9b04      	ldr	r3, [sp, #16]
 8003dfe:	b1bb      	cbz	r3, 8003e30 <_strtod_l+0x620>
 8003e00:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8003e04:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	4659      	mov	r1, fp
 8003e0c:	dd10      	ble.n	8003e30 <_strtod_l+0x620>
 8003e0e:	2b1f      	cmp	r3, #31
 8003e10:	f340 8128 	ble.w	8004064 <_strtod_l+0x854>
 8003e14:	2b34      	cmp	r3, #52	; 0x34
 8003e16:	bfde      	ittt	le
 8003e18:	3b20      	suble	r3, #32
 8003e1a:	f04f 32ff 	movle.w	r2, #4294967295
 8003e1e:	fa02 f303 	lslle.w	r3, r2, r3
 8003e22:	f04f 0a00 	mov.w	sl, #0
 8003e26:	bfcc      	ite	gt
 8003e28:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8003e2c:	ea03 0b01 	andle.w	fp, r3, r1
 8003e30:	2200      	movs	r2, #0
 8003e32:	2300      	movs	r3, #0
 8003e34:	4650      	mov	r0, sl
 8003e36:	4659      	mov	r1, fp
 8003e38:	f7fc fe4e 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	d1a4      	bne.n	8003d8a <_strtod_l+0x57a>
 8003e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003e46:	462b      	mov	r3, r5
 8003e48:	463a      	mov	r2, r7
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f001 fe40 	bl	8005ad0 <__s2b>
 8003e50:	9009      	str	r0, [sp, #36]	; 0x24
 8003e52:	2800      	cmp	r0, #0
 8003e54:	f43f af24 	beq.w	8003ca0 <_strtod_l+0x490>
 8003e58:	9b07      	ldr	r3, [sp, #28]
 8003e5a:	1b9e      	subs	r6, r3, r6
 8003e5c:	9b08      	ldr	r3, [sp, #32]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bfb4      	ite	lt
 8003e62:	4633      	movlt	r3, r6
 8003e64:	2300      	movge	r3, #0
 8003e66:	9310      	str	r3, [sp, #64]	; 0x40
 8003e68:	9b08      	ldr	r3, [sp, #32]
 8003e6a:	2500      	movs	r5, #0
 8003e6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003e70:	9318      	str	r3, [sp, #96]	; 0x60
 8003e72:	462e      	mov	r6, r5
 8003e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e76:	4620      	mov	r0, r4
 8003e78:	6859      	ldr	r1, [r3, #4]
 8003e7a:	f001 fd7d 	bl	8005978 <_Balloc>
 8003e7e:	9007      	str	r0, [sp, #28]
 8003e80:	2800      	cmp	r0, #0
 8003e82:	f43f af11 	beq.w	8003ca8 <_strtod_l+0x498>
 8003e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	3202      	adds	r2, #2
 8003e8c:	f103 010c 	add.w	r1, r3, #12
 8003e90:	0092      	lsls	r2, r2, #2
 8003e92:	300c      	adds	r0, #12
 8003e94:	f001 fd62 	bl	800595c <memcpy>
 8003e98:	ec4b ab10 	vmov	d0, sl, fp
 8003e9c:	aa20      	add	r2, sp, #128	; 0x80
 8003e9e:	a91f      	add	r1, sp, #124	; 0x7c
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003ea6:	f002 f94f 	bl	8006148 <__d2b>
 8003eaa:	901e      	str	r0, [sp, #120]	; 0x78
 8003eac:	2800      	cmp	r0, #0
 8003eae:	f43f aefb 	beq.w	8003ca8 <_strtod_l+0x498>
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f001 fea5 	bl	8005c04 <__i2b>
 8003eba:	4606      	mov	r6, r0
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	f43f aef3 	beq.w	8003ca8 <_strtod_l+0x498>
 8003ec2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003ec4:	9904      	ldr	r1, [sp, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bfab      	itete	ge
 8003eca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8003ecc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8003ece:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8003ed0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8003ed4:	bfac      	ite	ge
 8003ed6:	eb03 0902 	addge.w	r9, r3, r2
 8003eda:	1ad7      	sublt	r7, r2, r3
 8003edc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003ede:	eba3 0801 	sub.w	r8, r3, r1
 8003ee2:	4490      	add	r8, r2
 8003ee4:	4ba3      	ldr	r3, [pc, #652]	; (8004174 <_strtod_l+0x964>)
 8003ee6:	f108 38ff 	add.w	r8, r8, #4294967295
 8003eea:	4598      	cmp	r8, r3
 8003eec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003ef0:	f280 80cc 	bge.w	800408c <_strtod_l+0x87c>
 8003ef4:	eba3 0308 	sub.w	r3, r3, r8
 8003ef8:	2b1f      	cmp	r3, #31
 8003efa:	eba2 0203 	sub.w	r2, r2, r3
 8003efe:	f04f 0101 	mov.w	r1, #1
 8003f02:	f300 80b6 	bgt.w	8004072 <_strtod_l+0x862>
 8003f06:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0a:	9311      	str	r3, [sp, #68]	; 0x44
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	930c      	str	r3, [sp, #48]	; 0x30
 8003f10:	eb09 0802 	add.w	r8, r9, r2
 8003f14:	9b04      	ldr	r3, [sp, #16]
 8003f16:	45c1      	cmp	r9, r8
 8003f18:	4417      	add	r7, r2
 8003f1a:	441f      	add	r7, r3
 8003f1c:	464b      	mov	r3, r9
 8003f1e:	bfa8      	it	ge
 8003f20:	4643      	movge	r3, r8
 8003f22:	42bb      	cmp	r3, r7
 8003f24:	bfa8      	it	ge
 8003f26:	463b      	movge	r3, r7
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bfc2      	ittt	gt
 8003f2c:	eba8 0803 	subgt.w	r8, r8, r3
 8003f30:	1aff      	subgt	r7, r7, r3
 8003f32:	eba9 0903 	subgt.w	r9, r9, r3
 8003f36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	dd17      	ble.n	8003f6c <_strtod_l+0x75c>
 8003f3c:	4631      	mov	r1, r6
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4620      	mov	r0, r4
 8003f42:	f001 ff1b 	bl	8005d7c <__pow5mult>
 8003f46:	4606      	mov	r6, r0
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	f43f aead 	beq.w	8003ca8 <_strtod_l+0x498>
 8003f4e:	4601      	mov	r1, r0
 8003f50:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003f52:	4620      	mov	r0, r4
 8003f54:	f001 fe6c 	bl	8005c30 <__multiply>
 8003f58:	900f      	str	r0, [sp, #60]	; 0x3c
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	f43f aea4 	beq.w	8003ca8 <_strtod_l+0x498>
 8003f60:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003f62:	4620      	mov	r0, r4
 8003f64:	f001 fd48 	bl	80059f8 <_Bfree>
 8003f68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f6a:	931e      	str	r3, [sp, #120]	; 0x78
 8003f6c:	f1b8 0f00 	cmp.w	r8, #0
 8003f70:	f300 8091 	bgt.w	8004096 <_strtod_l+0x886>
 8003f74:	9b08      	ldr	r3, [sp, #32]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	dd08      	ble.n	8003f8c <_strtod_l+0x77c>
 8003f7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003f7c:	9907      	ldr	r1, [sp, #28]
 8003f7e:	4620      	mov	r0, r4
 8003f80:	f001 fefc 	bl	8005d7c <__pow5mult>
 8003f84:	9007      	str	r0, [sp, #28]
 8003f86:	2800      	cmp	r0, #0
 8003f88:	f43f ae8e 	beq.w	8003ca8 <_strtod_l+0x498>
 8003f8c:	2f00      	cmp	r7, #0
 8003f8e:	dd08      	ble.n	8003fa2 <_strtod_l+0x792>
 8003f90:	9907      	ldr	r1, [sp, #28]
 8003f92:	463a      	mov	r2, r7
 8003f94:	4620      	mov	r0, r4
 8003f96:	f001 ff4b 	bl	8005e30 <__lshift>
 8003f9a:	9007      	str	r0, [sp, #28]
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	f43f ae83 	beq.w	8003ca8 <_strtod_l+0x498>
 8003fa2:	f1b9 0f00 	cmp.w	r9, #0
 8003fa6:	dd08      	ble.n	8003fba <_strtod_l+0x7aa>
 8003fa8:	4631      	mov	r1, r6
 8003faa:	464a      	mov	r2, r9
 8003fac:	4620      	mov	r0, r4
 8003fae:	f001 ff3f 	bl	8005e30 <__lshift>
 8003fb2:	4606      	mov	r6, r0
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	f43f ae77 	beq.w	8003ca8 <_strtod_l+0x498>
 8003fba:	9a07      	ldr	r2, [sp, #28]
 8003fbc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f001 ffbe 	bl	8005f40 <__mdiff>
 8003fc4:	4605      	mov	r5, r0
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	f43f ae6e 	beq.w	8003ca8 <_strtod_l+0x498>
 8003fcc:	68c3      	ldr	r3, [r0, #12]
 8003fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60c3      	str	r3, [r0, #12]
 8003fd4:	4631      	mov	r1, r6
 8003fd6:	f001 ff97 	bl	8005f08 <__mcmp>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	da65      	bge.n	80040aa <_strtod_l+0x89a>
 8003fde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003fe0:	ea53 030a 	orrs.w	r3, r3, sl
 8003fe4:	f040 8087 	bne.w	80040f6 <_strtod_l+0x8e6>
 8003fe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f040 8082 	bne.w	80040f6 <_strtod_l+0x8e6>
 8003ff2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003ff6:	0d1b      	lsrs	r3, r3, #20
 8003ff8:	051b      	lsls	r3, r3, #20
 8003ffa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8003ffe:	d97a      	bls.n	80040f6 <_strtod_l+0x8e6>
 8004000:	696b      	ldr	r3, [r5, #20]
 8004002:	b913      	cbnz	r3, 800400a <_strtod_l+0x7fa>
 8004004:	692b      	ldr	r3, [r5, #16]
 8004006:	2b01      	cmp	r3, #1
 8004008:	dd75      	ble.n	80040f6 <_strtod_l+0x8e6>
 800400a:	4629      	mov	r1, r5
 800400c:	2201      	movs	r2, #1
 800400e:	4620      	mov	r0, r4
 8004010:	f001 ff0e 	bl	8005e30 <__lshift>
 8004014:	4631      	mov	r1, r6
 8004016:	4605      	mov	r5, r0
 8004018:	f001 ff76 	bl	8005f08 <__mcmp>
 800401c:	2800      	cmp	r0, #0
 800401e:	dd6a      	ble.n	80040f6 <_strtod_l+0x8e6>
 8004020:	9904      	ldr	r1, [sp, #16]
 8004022:	4a55      	ldr	r2, [pc, #340]	; (8004178 <_strtod_l+0x968>)
 8004024:	465b      	mov	r3, fp
 8004026:	2900      	cmp	r1, #0
 8004028:	f000 8085 	beq.w	8004136 <_strtod_l+0x926>
 800402c:	ea02 010b 	and.w	r1, r2, fp
 8004030:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004034:	dc7f      	bgt.n	8004136 <_strtod_l+0x926>
 8004036:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800403a:	f77f aeaa 	ble.w	8003d92 <_strtod_l+0x582>
 800403e:	4a4f      	ldr	r2, [pc, #316]	; (800417c <_strtod_l+0x96c>)
 8004040:	2300      	movs	r3, #0
 8004042:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8004046:	4650      	mov	r0, sl
 8004048:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800404c:	4659      	mov	r1, fp
 800404e:	f7fc fadb 	bl	8000608 <__aeabi_dmul>
 8004052:	460b      	mov	r3, r1
 8004054:	4303      	orrs	r3, r0
 8004056:	bf08      	it	eq
 8004058:	2322      	moveq	r3, #34	; 0x22
 800405a:	4682      	mov	sl, r0
 800405c:	468b      	mov	fp, r1
 800405e:	bf08      	it	eq
 8004060:	6023      	streq	r3, [r4, #0]
 8004062:	e62b      	b.n	8003cbc <_strtod_l+0x4ac>
 8004064:	f04f 32ff 	mov.w	r2, #4294967295
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	ea03 0a0a 	and.w	sl, r3, sl
 8004070:	e6de      	b.n	8003e30 <_strtod_l+0x620>
 8004072:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004076:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800407a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800407e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004082:	fa01 f308 	lsl.w	r3, r1, r8
 8004086:	930c      	str	r3, [sp, #48]	; 0x30
 8004088:	9111      	str	r1, [sp, #68]	; 0x44
 800408a:	e741      	b.n	8003f10 <_strtod_l+0x700>
 800408c:	2300      	movs	r3, #0
 800408e:	930c      	str	r3, [sp, #48]	; 0x30
 8004090:	2301      	movs	r3, #1
 8004092:	9311      	str	r3, [sp, #68]	; 0x44
 8004094:	e73c      	b.n	8003f10 <_strtod_l+0x700>
 8004096:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004098:	4642      	mov	r2, r8
 800409a:	4620      	mov	r0, r4
 800409c:	f001 fec8 	bl	8005e30 <__lshift>
 80040a0:	901e      	str	r0, [sp, #120]	; 0x78
 80040a2:	2800      	cmp	r0, #0
 80040a4:	f47f af66 	bne.w	8003f74 <_strtod_l+0x764>
 80040a8:	e5fe      	b.n	8003ca8 <_strtod_l+0x498>
 80040aa:	465f      	mov	r7, fp
 80040ac:	d16e      	bne.n	800418c <_strtod_l+0x97c>
 80040ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80040b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80040b4:	b342      	cbz	r2, 8004108 <_strtod_l+0x8f8>
 80040b6:	4a32      	ldr	r2, [pc, #200]	; (8004180 <_strtod_l+0x970>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d128      	bne.n	800410e <_strtod_l+0x8fe>
 80040bc:	9b04      	ldr	r3, [sp, #16]
 80040be:	4650      	mov	r0, sl
 80040c0:	b1eb      	cbz	r3, 80040fe <_strtod_l+0x8ee>
 80040c2:	4a2d      	ldr	r2, [pc, #180]	; (8004178 <_strtod_l+0x968>)
 80040c4:	403a      	ands	r2, r7
 80040c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80040ca:	f04f 31ff 	mov.w	r1, #4294967295
 80040ce:	d819      	bhi.n	8004104 <_strtod_l+0x8f4>
 80040d0:	0d12      	lsrs	r2, r2, #20
 80040d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80040d6:	fa01 f303 	lsl.w	r3, r1, r3
 80040da:	4298      	cmp	r0, r3
 80040dc:	d117      	bne.n	800410e <_strtod_l+0x8fe>
 80040de:	4b29      	ldr	r3, [pc, #164]	; (8004184 <_strtod_l+0x974>)
 80040e0:	429f      	cmp	r7, r3
 80040e2:	d102      	bne.n	80040ea <_strtod_l+0x8da>
 80040e4:	3001      	adds	r0, #1
 80040e6:	f43f addf 	beq.w	8003ca8 <_strtod_l+0x498>
 80040ea:	4b23      	ldr	r3, [pc, #140]	; (8004178 <_strtod_l+0x968>)
 80040ec:	403b      	ands	r3, r7
 80040ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80040f2:	f04f 0a00 	mov.w	sl, #0
 80040f6:	9b04      	ldr	r3, [sp, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1a0      	bne.n	800403e <_strtod_l+0x82e>
 80040fc:	e5de      	b.n	8003cbc <_strtod_l+0x4ac>
 80040fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004102:	e7ea      	b.n	80040da <_strtod_l+0x8ca>
 8004104:	460b      	mov	r3, r1
 8004106:	e7e8      	b.n	80040da <_strtod_l+0x8ca>
 8004108:	ea53 030a 	orrs.w	r3, r3, sl
 800410c:	d088      	beq.n	8004020 <_strtod_l+0x810>
 800410e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004110:	b1db      	cbz	r3, 800414a <_strtod_l+0x93a>
 8004112:	423b      	tst	r3, r7
 8004114:	d0ef      	beq.n	80040f6 <_strtod_l+0x8e6>
 8004116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004118:	9a04      	ldr	r2, [sp, #16]
 800411a:	4650      	mov	r0, sl
 800411c:	4659      	mov	r1, fp
 800411e:	b1c3      	cbz	r3, 8004152 <_strtod_l+0x942>
 8004120:	f7ff fb58 	bl	80037d4 <sulp>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800412c:	f7fc f8b6 	bl	800029c <__adddf3>
 8004130:	4682      	mov	sl, r0
 8004132:	468b      	mov	fp, r1
 8004134:	e7df      	b.n	80040f6 <_strtod_l+0x8e6>
 8004136:	4013      	ands	r3, r2
 8004138:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800413c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004140:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004144:	f04f 3aff 	mov.w	sl, #4294967295
 8004148:	e7d5      	b.n	80040f6 <_strtod_l+0x8e6>
 800414a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800414c:	ea13 0f0a 	tst.w	r3, sl
 8004150:	e7e0      	b.n	8004114 <_strtod_l+0x904>
 8004152:	f7ff fb3f 	bl	80037d4 <sulp>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800415e:	f7fc f89b 	bl	8000298 <__aeabi_dsub>
 8004162:	2200      	movs	r2, #0
 8004164:	2300      	movs	r3, #0
 8004166:	4682      	mov	sl, r0
 8004168:	468b      	mov	fp, r1
 800416a:	f7fc fcb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800416e:	2800      	cmp	r0, #0
 8004170:	d0c1      	beq.n	80040f6 <_strtod_l+0x8e6>
 8004172:	e60e      	b.n	8003d92 <_strtod_l+0x582>
 8004174:	fffffc02 	.word	0xfffffc02
 8004178:	7ff00000 	.word	0x7ff00000
 800417c:	39500000 	.word	0x39500000
 8004180:	000fffff 	.word	0x000fffff
 8004184:	7fefffff 	.word	0x7fefffff
 8004188:	080075f8 	.word	0x080075f8
 800418c:	4631      	mov	r1, r6
 800418e:	4628      	mov	r0, r5
 8004190:	f002 f836 	bl	8006200 <__ratio>
 8004194:	ec59 8b10 	vmov	r8, r9, d0
 8004198:	ee10 0a10 	vmov	r0, s0
 800419c:	2200      	movs	r2, #0
 800419e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041a2:	4649      	mov	r1, r9
 80041a4:	f7fc fcac 	bl	8000b00 <__aeabi_dcmple>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d07c      	beq.n	80042a6 <_strtod_l+0xa96>
 80041ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d04c      	beq.n	800424c <_strtod_l+0xa3c>
 80041b2:	4b95      	ldr	r3, [pc, #596]	; (8004408 <_strtod_l+0xbf8>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80041ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004408 <_strtod_l+0xbf8>
 80041be:	f04f 0800 	mov.w	r8, #0
 80041c2:	4b92      	ldr	r3, [pc, #584]	; (800440c <_strtod_l+0xbfc>)
 80041c4:	403b      	ands	r3, r7
 80041c6:	9311      	str	r3, [sp, #68]	; 0x44
 80041c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80041ca:	4b91      	ldr	r3, [pc, #580]	; (8004410 <_strtod_l+0xc00>)
 80041cc:	429a      	cmp	r2, r3
 80041ce:	f040 80b2 	bne.w	8004336 <_strtod_l+0xb26>
 80041d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80041d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80041de:	ec4b ab10 	vmov	d0, sl, fp
 80041e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80041e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80041ea:	f001 ff31 	bl	8006050 <__ulp>
 80041ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041f2:	ec53 2b10 	vmov	r2, r3, d0
 80041f6:	f7fc fa07 	bl	8000608 <__aeabi_dmul>
 80041fa:	4652      	mov	r2, sl
 80041fc:	465b      	mov	r3, fp
 80041fe:	f7fc f84d 	bl	800029c <__adddf3>
 8004202:	460b      	mov	r3, r1
 8004204:	4981      	ldr	r1, [pc, #516]	; (800440c <_strtod_l+0xbfc>)
 8004206:	4a83      	ldr	r2, [pc, #524]	; (8004414 <_strtod_l+0xc04>)
 8004208:	4019      	ands	r1, r3
 800420a:	4291      	cmp	r1, r2
 800420c:	4682      	mov	sl, r0
 800420e:	d95e      	bls.n	80042ce <_strtod_l+0xabe>
 8004210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004212:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004216:	4293      	cmp	r3, r2
 8004218:	d103      	bne.n	8004222 <_strtod_l+0xa12>
 800421a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800421c:	3301      	adds	r3, #1
 800421e:	f43f ad43 	beq.w	8003ca8 <_strtod_l+0x498>
 8004222:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8004420 <_strtod_l+0xc10>
 8004226:	f04f 3aff 	mov.w	sl, #4294967295
 800422a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800422c:	4620      	mov	r0, r4
 800422e:	f001 fbe3 	bl	80059f8 <_Bfree>
 8004232:	9907      	ldr	r1, [sp, #28]
 8004234:	4620      	mov	r0, r4
 8004236:	f001 fbdf 	bl	80059f8 <_Bfree>
 800423a:	4631      	mov	r1, r6
 800423c:	4620      	mov	r0, r4
 800423e:	f001 fbdb 	bl	80059f8 <_Bfree>
 8004242:	4629      	mov	r1, r5
 8004244:	4620      	mov	r0, r4
 8004246:	f001 fbd7 	bl	80059f8 <_Bfree>
 800424a:	e613      	b.n	8003e74 <_strtod_l+0x664>
 800424c:	f1ba 0f00 	cmp.w	sl, #0
 8004250:	d11b      	bne.n	800428a <_strtod_l+0xa7a>
 8004252:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004256:	b9f3      	cbnz	r3, 8004296 <_strtod_l+0xa86>
 8004258:	4b6b      	ldr	r3, [pc, #428]	; (8004408 <_strtod_l+0xbf8>)
 800425a:	2200      	movs	r2, #0
 800425c:	4640      	mov	r0, r8
 800425e:	4649      	mov	r1, r9
 8004260:	f7fc fc44 	bl	8000aec <__aeabi_dcmplt>
 8004264:	b9d0      	cbnz	r0, 800429c <_strtod_l+0xa8c>
 8004266:	4640      	mov	r0, r8
 8004268:	4649      	mov	r1, r9
 800426a:	4b6b      	ldr	r3, [pc, #428]	; (8004418 <_strtod_l+0xc08>)
 800426c:	2200      	movs	r2, #0
 800426e:	f7fc f9cb 	bl	8000608 <__aeabi_dmul>
 8004272:	4680      	mov	r8, r0
 8004274:	4689      	mov	r9, r1
 8004276:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800427a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800427e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004280:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8004284:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004288:	e79b      	b.n	80041c2 <_strtod_l+0x9b2>
 800428a:	f1ba 0f01 	cmp.w	sl, #1
 800428e:	d102      	bne.n	8004296 <_strtod_l+0xa86>
 8004290:	2f00      	cmp	r7, #0
 8004292:	f43f ad7e 	beq.w	8003d92 <_strtod_l+0x582>
 8004296:	4b61      	ldr	r3, [pc, #388]	; (800441c <_strtod_l+0xc0c>)
 8004298:	2200      	movs	r2, #0
 800429a:	e78c      	b.n	80041b6 <_strtod_l+0x9a6>
 800429c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004418 <_strtod_l+0xc08>
 80042a0:	f04f 0800 	mov.w	r8, #0
 80042a4:	e7e7      	b.n	8004276 <_strtod_l+0xa66>
 80042a6:	4b5c      	ldr	r3, [pc, #368]	; (8004418 <_strtod_l+0xc08>)
 80042a8:	4640      	mov	r0, r8
 80042aa:	4649      	mov	r1, r9
 80042ac:	2200      	movs	r2, #0
 80042ae:	f7fc f9ab 	bl	8000608 <__aeabi_dmul>
 80042b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042b4:	4680      	mov	r8, r0
 80042b6:	4689      	mov	r9, r1
 80042b8:	b933      	cbnz	r3, 80042c8 <_strtod_l+0xab8>
 80042ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80042be:	9012      	str	r0, [sp, #72]	; 0x48
 80042c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80042c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80042c6:	e7dd      	b.n	8004284 <_strtod_l+0xa74>
 80042c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80042cc:	e7f9      	b.n	80042c2 <_strtod_l+0xab2>
 80042ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80042d2:	9b04      	ldr	r3, [sp, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1a8      	bne.n	800422a <_strtod_l+0xa1a>
 80042d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80042dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80042de:	0d1b      	lsrs	r3, r3, #20
 80042e0:	051b      	lsls	r3, r3, #20
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d1a1      	bne.n	800422a <_strtod_l+0xa1a>
 80042e6:	4640      	mov	r0, r8
 80042e8:	4649      	mov	r1, r9
 80042ea:	f7fc fcd5 	bl	8000c98 <__aeabi_d2lz>
 80042ee:	f7fc f95d 	bl	80005ac <__aeabi_l2d>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4640      	mov	r0, r8
 80042f8:	4649      	mov	r1, r9
 80042fa:	f7fb ffcd 	bl	8000298 <__aeabi_dsub>
 80042fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004300:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004304:	ea43 030a 	orr.w	r3, r3, sl
 8004308:	4313      	orrs	r3, r2
 800430a:	4680      	mov	r8, r0
 800430c:	4689      	mov	r9, r1
 800430e:	d053      	beq.n	80043b8 <_strtod_l+0xba8>
 8004310:	a335      	add	r3, pc, #212	; (adr r3, 80043e8 <_strtod_l+0xbd8>)
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	f7fc fbe9 	bl	8000aec <__aeabi_dcmplt>
 800431a:	2800      	cmp	r0, #0
 800431c:	f47f acce 	bne.w	8003cbc <_strtod_l+0x4ac>
 8004320:	a333      	add	r3, pc, #204	; (adr r3, 80043f0 <_strtod_l+0xbe0>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	4640      	mov	r0, r8
 8004328:	4649      	mov	r1, r9
 800432a:	f7fc fbfd 	bl	8000b28 <__aeabi_dcmpgt>
 800432e:	2800      	cmp	r0, #0
 8004330:	f43f af7b 	beq.w	800422a <_strtod_l+0xa1a>
 8004334:	e4c2      	b.n	8003cbc <_strtod_l+0x4ac>
 8004336:	9b04      	ldr	r3, [sp, #16]
 8004338:	b333      	cbz	r3, 8004388 <_strtod_l+0xb78>
 800433a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800433c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004340:	d822      	bhi.n	8004388 <_strtod_l+0xb78>
 8004342:	a32d      	add	r3, pc, #180	; (adr r3, 80043f8 <_strtod_l+0xbe8>)
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	4640      	mov	r0, r8
 800434a:	4649      	mov	r1, r9
 800434c:	f7fc fbd8 	bl	8000b00 <__aeabi_dcmple>
 8004350:	b1a0      	cbz	r0, 800437c <_strtod_l+0xb6c>
 8004352:	4649      	mov	r1, r9
 8004354:	4640      	mov	r0, r8
 8004356:	f7fc fc2f 	bl	8000bb8 <__aeabi_d2uiz>
 800435a:	2801      	cmp	r0, #1
 800435c:	bf38      	it	cc
 800435e:	2001      	movcc	r0, #1
 8004360:	f7fc f8d8 	bl	8000514 <__aeabi_ui2d>
 8004364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004366:	4680      	mov	r8, r0
 8004368:	4689      	mov	r9, r1
 800436a:	bb13      	cbnz	r3, 80043b2 <_strtod_l+0xba2>
 800436c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004370:	9014      	str	r0, [sp, #80]	; 0x50
 8004372:	9315      	str	r3, [sp, #84]	; 0x54
 8004374:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004378:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800437c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800437e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004380:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	930d      	str	r3, [sp, #52]	; 0x34
 8004388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800438c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004390:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004394:	f001 fe5c 	bl	8006050 <__ulp>
 8004398:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800439c:	ec53 2b10 	vmov	r2, r3, d0
 80043a0:	f7fc f932 	bl	8000608 <__aeabi_dmul>
 80043a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80043a8:	f7fb ff78 	bl	800029c <__adddf3>
 80043ac:	4682      	mov	sl, r0
 80043ae:	468b      	mov	fp, r1
 80043b0:	e78f      	b.n	80042d2 <_strtod_l+0xac2>
 80043b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80043b6:	e7dd      	b.n	8004374 <_strtod_l+0xb64>
 80043b8:	a311      	add	r3, pc, #68	; (adr r3, 8004400 <_strtod_l+0xbf0>)
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	f7fc fb95 	bl	8000aec <__aeabi_dcmplt>
 80043c2:	e7b4      	b.n	800432e <_strtod_l+0xb1e>
 80043c4:	2300      	movs	r3, #0
 80043c6:	930e      	str	r3, [sp, #56]	; 0x38
 80043c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80043ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	f7ff ba65 	b.w	800389c <_strtod_l+0x8c>
 80043d2:	2b65      	cmp	r3, #101	; 0x65
 80043d4:	f43f ab5d 	beq.w	8003a92 <_strtod_l+0x282>
 80043d8:	2b45      	cmp	r3, #69	; 0x45
 80043da:	f43f ab5a 	beq.w	8003a92 <_strtod_l+0x282>
 80043de:	2201      	movs	r2, #1
 80043e0:	f7ff bb92 	b.w	8003b08 <_strtod_l+0x2f8>
 80043e4:	f3af 8000 	nop.w
 80043e8:	94a03595 	.word	0x94a03595
 80043ec:	3fdfffff 	.word	0x3fdfffff
 80043f0:	35afe535 	.word	0x35afe535
 80043f4:	3fe00000 	.word	0x3fe00000
 80043f8:	ffc00000 	.word	0xffc00000
 80043fc:	41dfffff 	.word	0x41dfffff
 8004400:	94a03595 	.word	0x94a03595
 8004404:	3fcfffff 	.word	0x3fcfffff
 8004408:	3ff00000 	.word	0x3ff00000
 800440c:	7ff00000 	.word	0x7ff00000
 8004410:	7fe00000 	.word	0x7fe00000
 8004414:	7c9fffff 	.word	0x7c9fffff
 8004418:	3fe00000 	.word	0x3fe00000
 800441c:	bff00000 	.word	0xbff00000
 8004420:	7fefffff 	.word	0x7fefffff

08004424 <_strtod_r>:
 8004424:	4b01      	ldr	r3, [pc, #4]	; (800442c <_strtod_r+0x8>)
 8004426:	f7ff b9f3 	b.w	8003810 <_strtod_l>
 800442a:	bf00      	nop
 800442c:	20000070 	.word	0x20000070

08004430 <_strtol_l.isra.0>:
 8004430:	2b01      	cmp	r3, #1
 8004432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004436:	d001      	beq.n	800443c <_strtol_l.isra.0+0xc>
 8004438:	2b24      	cmp	r3, #36	; 0x24
 800443a:	d906      	bls.n	800444a <_strtol_l.isra.0+0x1a>
 800443c:	f7fe faf8 	bl	8002a30 <__errno>
 8004440:	2316      	movs	r3, #22
 8004442:	6003      	str	r3, [r0, #0]
 8004444:	2000      	movs	r0, #0
 8004446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444a:	4f3a      	ldr	r7, [pc, #232]	; (8004534 <_strtol_l.isra.0+0x104>)
 800444c:	468e      	mov	lr, r1
 800444e:	4676      	mov	r6, lr
 8004450:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004454:	5de5      	ldrb	r5, [r4, r7]
 8004456:	f015 0508 	ands.w	r5, r5, #8
 800445a:	d1f8      	bne.n	800444e <_strtol_l.isra.0+0x1e>
 800445c:	2c2d      	cmp	r4, #45	; 0x2d
 800445e:	d134      	bne.n	80044ca <_strtol_l.isra.0+0x9a>
 8004460:	f89e 4000 	ldrb.w	r4, [lr]
 8004464:	f04f 0801 	mov.w	r8, #1
 8004468:	f106 0e02 	add.w	lr, r6, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d05c      	beq.n	800452a <_strtol_l.isra.0+0xfa>
 8004470:	2b10      	cmp	r3, #16
 8004472:	d10c      	bne.n	800448e <_strtol_l.isra.0+0x5e>
 8004474:	2c30      	cmp	r4, #48	; 0x30
 8004476:	d10a      	bne.n	800448e <_strtol_l.isra.0+0x5e>
 8004478:	f89e 4000 	ldrb.w	r4, [lr]
 800447c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004480:	2c58      	cmp	r4, #88	; 0x58
 8004482:	d14d      	bne.n	8004520 <_strtol_l.isra.0+0xf0>
 8004484:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004488:	2310      	movs	r3, #16
 800448a:	f10e 0e02 	add.w	lr, lr, #2
 800448e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004492:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004496:	2600      	movs	r6, #0
 8004498:	fbbc f9f3 	udiv	r9, ip, r3
 800449c:	4635      	mov	r5, r6
 800449e:	fb03 ca19 	mls	sl, r3, r9, ip
 80044a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80044a6:	2f09      	cmp	r7, #9
 80044a8:	d818      	bhi.n	80044dc <_strtol_l.isra.0+0xac>
 80044aa:	463c      	mov	r4, r7
 80044ac:	42a3      	cmp	r3, r4
 80044ae:	dd24      	ble.n	80044fa <_strtol_l.isra.0+0xca>
 80044b0:	2e00      	cmp	r6, #0
 80044b2:	db1f      	blt.n	80044f4 <_strtol_l.isra.0+0xc4>
 80044b4:	45a9      	cmp	r9, r5
 80044b6:	d31d      	bcc.n	80044f4 <_strtol_l.isra.0+0xc4>
 80044b8:	d101      	bne.n	80044be <_strtol_l.isra.0+0x8e>
 80044ba:	45a2      	cmp	sl, r4
 80044bc:	db1a      	blt.n	80044f4 <_strtol_l.isra.0+0xc4>
 80044be:	fb05 4503 	mla	r5, r5, r3, r4
 80044c2:	2601      	movs	r6, #1
 80044c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80044c8:	e7eb      	b.n	80044a2 <_strtol_l.isra.0+0x72>
 80044ca:	2c2b      	cmp	r4, #43	; 0x2b
 80044cc:	bf08      	it	eq
 80044ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 80044d2:	46a8      	mov	r8, r5
 80044d4:	bf08      	it	eq
 80044d6:	f106 0e02 	addeq.w	lr, r6, #2
 80044da:	e7c7      	b.n	800446c <_strtol_l.isra.0+0x3c>
 80044dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80044e0:	2f19      	cmp	r7, #25
 80044e2:	d801      	bhi.n	80044e8 <_strtol_l.isra.0+0xb8>
 80044e4:	3c37      	subs	r4, #55	; 0x37
 80044e6:	e7e1      	b.n	80044ac <_strtol_l.isra.0+0x7c>
 80044e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80044ec:	2f19      	cmp	r7, #25
 80044ee:	d804      	bhi.n	80044fa <_strtol_l.isra.0+0xca>
 80044f0:	3c57      	subs	r4, #87	; 0x57
 80044f2:	e7db      	b.n	80044ac <_strtol_l.isra.0+0x7c>
 80044f4:	f04f 36ff 	mov.w	r6, #4294967295
 80044f8:	e7e4      	b.n	80044c4 <_strtol_l.isra.0+0x94>
 80044fa:	2e00      	cmp	r6, #0
 80044fc:	da05      	bge.n	800450a <_strtol_l.isra.0+0xda>
 80044fe:	2322      	movs	r3, #34	; 0x22
 8004500:	6003      	str	r3, [r0, #0]
 8004502:	4665      	mov	r5, ip
 8004504:	b942      	cbnz	r2, 8004518 <_strtol_l.isra.0+0xe8>
 8004506:	4628      	mov	r0, r5
 8004508:	e79d      	b.n	8004446 <_strtol_l.isra.0+0x16>
 800450a:	f1b8 0f00 	cmp.w	r8, #0
 800450e:	d000      	beq.n	8004512 <_strtol_l.isra.0+0xe2>
 8004510:	426d      	negs	r5, r5
 8004512:	2a00      	cmp	r2, #0
 8004514:	d0f7      	beq.n	8004506 <_strtol_l.isra.0+0xd6>
 8004516:	b10e      	cbz	r6, 800451c <_strtol_l.isra.0+0xec>
 8004518:	f10e 31ff 	add.w	r1, lr, #4294967295
 800451c:	6011      	str	r1, [r2, #0]
 800451e:	e7f2      	b.n	8004506 <_strtol_l.isra.0+0xd6>
 8004520:	2430      	movs	r4, #48	; 0x30
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1b3      	bne.n	800448e <_strtol_l.isra.0+0x5e>
 8004526:	2308      	movs	r3, #8
 8004528:	e7b1      	b.n	800448e <_strtol_l.isra.0+0x5e>
 800452a:	2c30      	cmp	r4, #48	; 0x30
 800452c:	d0a4      	beq.n	8004478 <_strtol_l.isra.0+0x48>
 800452e:	230a      	movs	r3, #10
 8004530:	e7ad      	b.n	800448e <_strtol_l.isra.0+0x5e>
 8004532:	bf00      	nop
 8004534:	0800748d 	.word	0x0800748d

08004538 <_strtol_r>:
 8004538:	f7ff bf7a 	b.w	8004430 <_strtol_l.isra.0>

0800453c <strtol>:
 800453c:	4613      	mov	r3, r2
 800453e:	460a      	mov	r2, r1
 8004540:	4601      	mov	r1, r0
 8004542:	4802      	ldr	r0, [pc, #8]	; (800454c <strtol+0x10>)
 8004544:	6800      	ldr	r0, [r0, #0]
 8004546:	f7ff bf73 	b.w	8004430 <_strtol_l.isra.0>
 800454a:	bf00      	nop
 800454c:	20000008 	.word	0x20000008

08004550 <quorem>:
 8004550:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004554:	6903      	ldr	r3, [r0, #16]
 8004556:	690c      	ldr	r4, [r1, #16]
 8004558:	42a3      	cmp	r3, r4
 800455a:	4607      	mov	r7, r0
 800455c:	f2c0 8081 	blt.w	8004662 <quorem+0x112>
 8004560:	3c01      	subs	r4, #1
 8004562:	f101 0814 	add.w	r8, r1, #20
 8004566:	f100 0514 	add.w	r5, r0, #20
 800456a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800456e:	9301      	str	r3, [sp, #4]
 8004570:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004574:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004578:	3301      	adds	r3, #1
 800457a:	429a      	cmp	r2, r3
 800457c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004580:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004584:	fbb2 f6f3 	udiv	r6, r2, r3
 8004588:	d331      	bcc.n	80045ee <quorem+0x9e>
 800458a:	f04f 0e00 	mov.w	lr, #0
 800458e:	4640      	mov	r0, r8
 8004590:	46ac      	mov	ip, r5
 8004592:	46f2      	mov	sl, lr
 8004594:	f850 2b04 	ldr.w	r2, [r0], #4
 8004598:	b293      	uxth	r3, r2
 800459a:	fb06 e303 	mla	r3, r6, r3, lr
 800459e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	ebaa 0303 	sub.w	r3, sl, r3
 80045a8:	0c12      	lsrs	r2, r2, #16
 80045aa:	f8dc a000 	ldr.w	sl, [ip]
 80045ae:	fb06 e202 	mla	r2, r6, r2, lr
 80045b2:	fa13 f38a 	uxtah	r3, r3, sl
 80045b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80045ba:	fa1f fa82 	uxth.w	sl, r2
 80045be:	f8dc 2000 	ldr.w	r2, [ip]
 80045c2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80045c6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045d0:	4581      	cmp	r9, r0
 80045d2:	f84c 3b04 	str.w	r3, [ip], #4
 80045d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80045da:	d2db      	bcs.n	8004594 <quorem+0x44>
 80045dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80045e0:	b92b      	cbnz	r3, 80045ee <quorem+0x9e>
 80045e2:	9b01      	ldr	r3, [sp, #4]
 80045e4:	3b04      	subs	r3, #4
 80045e6:	429d      	cmp	r5, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	d32e      	bcc.n	800464a <quorem+0xfa>
 80045ec:	613c      	str	r4, [r7, #16]
 80045ee:	4638      	mov	r0, r7
 80045f0:	f001 fc8a 	bl	8005f08 <__mcmp>
 80045f4:	2800      	cmp	r0, #0
 80045f6:	db24      	blt.n	8004642 <quorem+0xf2>
 80045f8:	3601      	adds	r6, #1
 80045fa:	4628      	mov	r0, r5
 80045fc:	f04f 0c00 	mov.w	ip, #0
 8004600:	f858 2b04 	ldr.w	r2, [r8], #4
 8004604:	f8d0 e000 	ldr.w	lr, [r0]
 8004608:	b293      	uxth	r3, r2
 800460a:	ebac 0303 	sub.w	r3, ip, r3
 800460e:	0c12      	lsrs	r2, r2, #16
 8004610:	fa13 f38e 	uxtah	r3, r3, lr
 8004614:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004618:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800461c:	b29b      	uxth	r3, r3
 800461e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004622:	45c1      	cmp	r9, r8
 8004624:	f840 3b04 	str.w	r3, [r0], #4
 8004628:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800462c:	d2e8      	bcs.n	8004600 <quorem+0xb0>
 800462e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004632:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004636:	b922      	cbnz	r2, 8004642 <quorem+0xf2>
 8004638:	3b04      	subs	r3, #4
 800463a:	429d      	cmp	r5, r3
 800463c:	461a      	mov	r2, r3
 800463e:	d30a      	bcc.n	8004656 <quorem+0x106>
 8004640:	613c      	str	r4, [r7, #16]
 8004642:	4630      	mov	r0, r6
 8004644:	b003      	add	sp, #12
 8004646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	3b04      	subs	r3, #4
 800464e:	2a00      	cmp	r2, #0
 8004650:	d1cc      	bne.n	80045ec <quorem+0x9c>
 8004652:	3c01      	subs	r4, #1
 8004654:	e7c7      	b.n	80045e6 <quorem+0x96>
 8004656:	6812      	ldr	r2, [r2, #0]
 8004658:	3b04      	subs	r3, #4
 800465a:	2a00      	cmp	r2, #0
 800465c:	d1f0      	bne.n	8004640 <quorem+0xf0>
 800465e:	3c01      	subs	r4, #1
 8004660:	e7eb      	b.n	800463a <quorem+0xea>
 8004662:	2000      	movs	r0, #0
 8004664:	e7ee      	b.n	8004644 <quorem+0xf4>
	...

08004668 <_dtoa_r>:
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	ed2d 8b02 	vpush	{d8}
 8004670:	ec57 6b10 	vmov	r6, r7, d0
 8004674:	b095      	sub	sp, #84	; 0x54
 8004676:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004678:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800467c:	9105      	str	r1, [sp, #20]
 800467e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004682:	4604      	mov	r4, r0
 8004684:	9209      	str	r2, [sp, #36]	; 0x24
 8004686:	930f      	str	r3, [sp, #60]	; 0x3c
 8004688:	b975      	cbnz	r5, 80046a8 <_dtoa_r+0x40>
 800468a:	2010      	movs	r0, #16
 800468c:	f001 f94c 	bl	8005928 <malloc>
 8004690:	4602      	mov	r2, r0
 8004692:	6260      	str	r0, [r4, #36]	; 0x24
 8004694:	b920      	cbnz	r0, 80046a0 <_dtoa_r+0x38>
 8004696:	4bb2      	ldr	r3, [pc, #712]	; (8004960 <_dtoa_r+0x2f8>)
 8004698:	21ea      	movs	r1, #234	; 0xea
 800469a:	48b2      	ldr	r0, [pc, #712]	; (8004964 <_dtoa_r+0x2fc>)
 800469c:	f002 f874 	bl	8006788 <__assert_func>
 80046a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80046a4:	6005      	str	r5, [r0, #0]
 80046a6:	60c5      	str	r5, [r0, #12]
 80046a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046aa:	6819      	ldr	r1, [r3, #0]
 80046ac:	b151      	cbz	r1, 80046c4 <_dtoa_r+0x5c>
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	604a      	str	r2, [r1, #4]
 80046b2:	2301      	movs	r3, #1
 80046b4:	4093      	lsls	r3, r2
 80046b6:	608b      	str	r3, [r1, #8]
 80046b8:	4620      	mov	r0, r4
 80046ba:	f001 f99d 	bl	80059f8 <_Bfree>
 80046be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	1e3b      	subs	r3, r7, #0
 80046c6:	bfb9      	ittee	lt
 80046c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80046cc:	9303      	strlt	r3, [sp, #12]
 80046ce:	2300      	movge	r3, #0
 80046d0:	f8c8 3000 	strge.w	r3, [r8]
 80046d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80046d8:	4ba3      	ldr	r3, [pc, #652]	; (8004968 <_dtoa_r+0x300>)
 80046da:	bfbc      	itt	lt
 80046dc:	2201      	movlt	r2, #1
 80046de:	f8c8 2000 	strlt.w	r2, [r8]
 80046e2:	ea33 0309 	bics.w	r3, r3, r9
 80046e6:	d11b      	bne.n	8004720 <_dtoa_r+0xb8>
 80046e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80046ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80046f4:	4333      	orrs	r3, r6
 80046f6:	f000 857a 	beq.w	80051ee <_dtoa_r+0xb86>
 80046fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046fc:	b963      	cbnz	r3, 8004718 <_dtoa_r+0xb0>
 80046fe:	4b9b      	ldr	r3, [pc, #620]	; (800496c <_dtoa_r+0x304>)
 8004700:	e024      	b.n	800474c <_dtoa_r+0xe4>
 8004702:	4b9b      	ldr	r3, [pc, #620]	; (8004970 <_dtoa_r+0x308>)
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	3308      	adds	r3, #8
 8004708:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	9800      	ldr	r0, [sp, #0]
 800470e:	b015      	add	sp, #84	; 0x54
 8004710:	ecbd 8b02 	vpop	{d8}
 8004714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004718:	4b94      	ldr	r3, [pc, #592]	; (800496c <_dtoa_r+0x304>)
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	3303      	adds	r3, #3
 800471e:	e7f3      	b.n	8004708 <_dtoa_r+0xa0>
 8004720:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004724:	2200      	movs	r2, #0
 8004726:	ec51 0b17 	vmov	r0, r1, d7
 800472a:	2300      	movs	r3, #0
 800472c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004730:	f7fc f9d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004734:	4680      	mov	r8, r0
 8004736:	b158      	cbz	r0, 8004750 <_dtoa_r+0xe8>
 8004738:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800473a:	2301      	movs	r3, #1
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 8551 	beq.w	80051e8 <_dtoa_r+0xb80>
 8004746:	488b      	ldr	r0, [pc, #556]	; (8004974 <_dtoa_r+0x30c>)
 8004748:	6018      	str	r0, [r3, #0]
 800474a:	1e43      	subs	r3, r0, #1
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	e7dd      	b.n	800470c <_dtoa_r+0xa4>
 8004750:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004754:	aa12      	add	r2, sp, #72	; 0x48
 8004756:	a913      	add	r1, sp, #76	; 0x4c
 8004758:	4620      	mov	r0, r4
 800475a:	f001 fcf5 	bl	8006148 <__d2b>
 800475e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004762:	4683      	mov	fp, r0
 8004764:	2d00      	cmp	r5, #0
 8004766:	d07c      	beq.n	8004862 <_dtoa_r+0x1fa>
 8004768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800476a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800476e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004772:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004776:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800477a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800477e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004782:	4b7d      	ldr	r3, [pc, #500]	; (8004978 <_dtoa_r+0x310>)
 8004784:	2200      	movs	r2, #0
 8004786:	4630      	mov	r0, r6
 8004788:	4639      	mov	r1, r7
 800478a:	f7fb fd85 	bl	8000298 <__aeabi_dsub>
 800478e:	a36e      	add	r3, pc, #440	; (adr r3, 8004948 <_dtoa_r+0x2e0>)
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f7fb ff38 	bl	8000608 <__aeabi_dmul>
 8004798:	a36d      	add	r3, pc, #436	; (adr r3, 8004950 <_dtoa_r+0x2e8>)
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f7fb fd7d 	bl	800029c <__adddf3>
 80047a2:	4606      	mov	r6, r0
 80047a4:	4628      	mov	r0, r5
 80047a6:	460f      	mov	r7, r1
 80047a8:	f7fb fec4 	bl	8000534 <__aeabi_i2d>
 80047ac:	a36a      	add	r3, pc, #424	; (adr r3, 8004958 <_dtoa_r+0x2f0>)
 80047ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b2:	f7fb ff29 	bl	8000608 <__aeabi_dmul>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4630      	mov	r0, r6
 80047bc:	4639      	mov	r1, r7
 80047be:	f7fb fd6d 	bl	800029c <__adddf3>
 80047c2:	4606      	mov	r6, r0
 80047c4:	460f      	mov	r7, r1
 80047c6:	f7fc f9cf 	bl	8000b68 <__aeabi_d2iz>
 80047ca:	2200      	movs	r2, #0
 80047cc:	4682      	mov	sl, r0
 80047ce:	2300      	movs	r3, #0
 80047d0:	4630      	mov	r0, r6
 80047d2:	4639      	mov	r1, r7
 80047d4:	f7fc f98a 	bl	8000aec <__aeabi_dcmplt>
 80047d8:	b148      	cbz	r0, 80047ee <_dtoa_r+0x186>
 80047da:	4650      	mov	r0, sl
 80047dc:	f7fb feaa 	bl	8000534 <__aeabi_i2d>
 80047e0:	4632      	mov	r2, r6
 80047e2:	463b      	mov	r3, r7
 80047e4:	f7fc f978 	bl	8000ad8 <__aeabi_dcmpeq>
 80047e8:	b908      	cbnz	r0, 80047ee <_dtoa_r+0x186>
 80047ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047ee:	f1ba 0f16 	cmp.w	sl, #22
 80047f2:	d854      	bhi.n	800489e <_dtoa_r+0x236>
 80047f4:	4b61      	ldr	r3, [pc, #388]	; (800497c <_dtoa_r+0x314>)
 80047f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004802:	f7fc f973 	bl	8000aec <__aeabi_dcmplt>
 8004806:	2800      	cmp	r0, #0
 8004808:	d04b      	beq.n	80048a2 <_dtoa_r+0x23a>
 800480a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800480e:	2300      	movs	r3, #0
 8004810:	930e      	str	r3, [sp, #56]	; 0x38
 8004812:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004814:	1b5d      	subs	r5, r3, r5
 8004816:	1e6b      	subs	r3, r5, #1
 8004818:	9304      	str	r3, [sp, #16]
 800481a:	bf43      	ittte	mi
 800481c:	2300      	movmi	r3, #0
 800481e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004822:	9304      	strmi	r3, [sp, #16]
 8004824:	f04f 0800 	movpl.w	r8, #0
 8004828:	f1ba 0f00 	cmp.w	sl, #0
 800482c:	db3b      	blt.n	80048a6 <_dtoa_r+0x23e>
 800482e:	9b04      	ldr	r3, [sp, #16]
 8004830:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004834:	4453      	add	r3, sl
 8004836:	9304      	str	r3, [sp, #16]
 8004838:	2300      	movs	r3, #0
 800483a:	9306      	str	r3, [sp, #24]
 800483c:	9b05      	ldr	r3, [sp, #20]
 800483e:	2b09      	cmp	r3, #9
 8004840:	d869      	bhi.n	8004916 <_dtoa_r+0x2ae>
 8004842:	2b05      	cmp	r3, #5
 8004844:	bfc4      	itt	gt
 8004846:	3b04      	subgt	r3, #4
 8004848:	9305      	strgt	r3, [sp, #20]
 800484a:	9b05      	ldr	r3, [sp, #20]
 800484c:	f1a3 0302 	sub.w	r3, r3, #2
 8004850:	bfcc      	ite	gt
 8004852:	2500      	movgt	r5, #0
 8004854:	2501      	movle	r5, #1
 8004856:	2b03      	cmp	r3, #3
 8004858:	d869      	bhi.n	800492e <_dtoa_r+0x2c6>
 800485a:	e8df f003 	tbb	[pc, r3]
 800485e:	4e2c      	.short	0x4e2c
 8004860:	5a4c      	.short	0x5a4c
 8004862:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004866:	441d      	add	r5, r3
 8004868:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800486c:	2b20      	cmp	r3, #32
 800486e:	bfc1      	itttt	gt
 8004870:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004874:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004878:	fa09 f303 	lslgt.w	r3, r9, r3
 800487c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004880:	bfda      	itte	le
 8004882:	f1c3 0320 	rsble	r3, r3, #32
 8004886:	fa06 f003 	lslle.w	r0, r6, r3
 800488a:	4318      	orrgt	r0, r3
 800488c:	f7fb fe42 	bl	8000514 <__aeabi_ui2d>
 8004890:	2301      	movs	r3, #1
 8004892:	4606      	mov	r6, r0
 8004894:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004898:	3d01      	subs	r5, #1
 800489a:	9310      	str	r3, [sp, #64]	; 0x40
 800489c:	e771      	b.n	8004782 <_dtoa_r+0x11a>
 800489e:	2301      	movs	r3, #1
 80048a0:	e7b6      	b.n	8004810 <_dtoa_r+0x1a8>
 80048a2:	900e      	str	r0, [sp, #56]	; 0x38
 80048a4:	e7b5      	b.n	8004812 <_dtoa_r+0x1aa>
 80048a6:	f1ca 0300 	rsb	r3, sl, #0
 80048aa:	9306      	str	r3, [sp, #24]
 80048ac:	2300      	movs	r3, #0
 80048ae:	eba8 080a 	sub.w	r8, r8, sl
 80048b2:	930d      	str	r3, [sp, #52]	; 0x34
 80048b4:	e7c2      	b.n	800483c <_dtoa_r+0x1d4>
 80048b6:	2300      	movs	r3, #0
 80048b8:	9308      	str	r3, [sp, #32]
 80048ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048bc:	2b00      	cmp	r3, #0
 80048be:	dc39      	bgt.n	8004934 <_dtoa_r+0x2cc>
 80048c0:	f04f 0901 	mov.w	r9, #1
 80048c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80048c8:	464b      	mov	r3, r9
 80048ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80048ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80048d0:	2200      	movs	r2, #0
 80048d2:	6042      	str	r2, [r0, #4]
 80048d4:	2204      	movs	r2, #4
 80048d6:	f102 0614 	add.w	r6, r2, #20
 80048da:	429e      	cmp	r6, r3
 80048dc:	6841      	ldr	r1, [r0, #4]
 80048de:	d92f      	bls.n	8004940 <_dtoa_r+0x2d8>
 80048e0:	4620      	mov	r0, r4
 80048e2:	f001 f849 	bl	8005978 <_Balloc>
 80048e6:	9000      	str	r0, [sp, #0]
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d14b      	bne.n	8004984 <_dtoa_r+0x31c>
 80048ec:	4b24      	ldr	r3, [pc, #144]	; (8004980 <_dtoa_r+0x318>)
 80048ee:	4602      	mov	r2, r0
 80048f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80048f4:	e6d1      	b.n	800469a <_dtoa_r+0x32>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e7de      	b.n	80048b8 <_dtoa_r+0x250>
 80048fa:	2300      	movs	r3, #0
 80048fc:	9308      	str	r3, [sp, #32]
 80048fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004900:	eb0a 0903 	add.w	r9, sl, r3
 8004904:	f109 0301 	add.w	r3, r9, #1
 8004908:	2b01      	cmp	r3, #1
 800490a:	9301      	str	r3, [sp, #4]
 800490c:	bfb8      	it	lt
 800490e:	2301      	movlt	r3, #1
 8004910:	e7dd      	b.n	80048ce <_dtoa_r+0x266>
 8004912:	2301      	movs	r3, #1
 8004914:	e7f2      	b.n	80048fc <_dtoa_r+0x294>
 8004916:	2501      	movs	r5, #1
 8004918:	2300      	movs	r3, #0
 800491a:	9305      	str	r3, [sp, #20]
 800491c:	9508      	str	r5, [sp, #32]
 800491e:	f04f 39ff 	mov.w	r9, #4294967295
 8004922:	2200      	movs	r2, #0
 8004924:	f8cd 9004 	str.w	r9, [sp, #4]
 8004928:	2312      	movs	r3, #18
 800492a:	9209      	str	r2, [sp, #36]	; 0x24
 800492c:	e7cf      	b.n	80048ce <_dtoa_r+0x266>
 800492e:	2301      	movs	r3, #1
 8004930:	9308      	str	r3, [sp, #32]
 8004932:	e7f4      	b.n	800491e <_dtoa_r+0x2b6>
 8004934:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004938:	f8cd 9004 	str.w	r9, [sp, #4]
 800493c:	464b      	mov	r3, r9
 800493e:	e7c6      	b.n	80048ce <_dtoa_r+0x266>
 8004940:	3101      	adds	r1, #1
 8004942:	6041      	str	r1, [r0, #4]
 8004944:	0052      	lsls	r2, r2, #1
 8004946:	e7c6      	b.n	80048d6 <_dtoa_r+0x26e>
 8004948:	636f4361 	.word	0x636f4361
 800494c:	3fd287a7 	.word	0x3fd287a7
 8004950:	8b60c8b3 	.word	0x8b60c8b3
 8004954:	3fc68a28 	.word	0x3fc68a28
 8004958:	509f79fb 	.word	0x509f79fb
 800495c:	3fd34413 	.word	0x3fd34413
 8004960:	0800762d 	.word	0x0800762d
 8004964:	08007644 	.word	0x08007644
 8004968:	7ff00000 	.word	0x7ff00000
 800496c:	08007629 	.word	0x08007629
 8004970:	08007620 	.word	0x08007620
 8004974:	080075a5 	.word	0x080075a5
 8004978:	3ff80000 	.word	0x3ff80000
 800497c:	080077c0 	.word	0x080077c0
 8004980:	080076a3 	.word	0x080076a3
 8004984:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004986:	9a00      	ldr	r2, [sp, #0]
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	9b01      	ldr	r3, [sp, #4]
 800498c:	2b0e      	cmp	r3, #14
 800498e:	f200 80ad 	bhi.w	8004aec <_dtoa_r+0x484>
 8004992:	2d00      	cmp	r5, #0
 8004994:	f000 80aa 	beq.w	8004aec <_dtoa_r+0x484>
 8004998:	f1ba 0f00 	cmp.w	sl, #0
 800499c:	dd36      	ble.n	8004a0c <_dtoa_r+0x3a4>
 800499e:	4ac3      	ldr	r2, [pc, #780]	; (8004cac <_dtoa_r+0x644>)
 80049a0:	f00a 030f 	and.w	r3, sl, #15
 80049a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80049a8:	ed93 7b00 	vldr	d7, [r3]
 80049ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80049b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80049b4:	eeb0 8a47 	vmov.f32	s16, s14
 80049b8:	eef0 8a67 	vmov.f32	s17, s15
 80049bc:	d016      	beq.n	80049ec <_dtoa_r+0x384>
 80049be:	4bbc      	ldr	r3, [pc, #752]	; (8004cb0 <_dtoa_r+0x648>)
 80049c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80049c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049c8:	f7fb ff48 	bl	800085c <__aeabi_ddiv>
 80049cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049d0:	f007 070f 	and.w	r7, r7, #15
 80049d4:	2503      	movs	r5, #3
 80049d6:	4eb6      	ldr	r6, [pc, #728]	; (8004cb0 <_dtoa_r+0x648>)
 80049d8:	b957      	cbnz	r7, 80049f0 <_dtoa_r+0x388>
 80049da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049de:	ec53 2b18 	vmov	r2, r3, d8
 80049e2:	f7fb ff3b 	bl	800085c <__aeabi_ddiv>
 80049e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049ea:	e029      	b.n	8004a40 <_dtoa_r+0x3d8>
 80049ec:	2502      	movs	r5, #2
 80049ee:	e7f2      	b.n	80049d6 <_dtoa_r+0x36e>
 80049f0:	07f9      	lsls	r1, r7, #31
 80049f2:	d508      	bpl.n	8004a06 <_dtoa_r+0x39e>
 80049f4:	ec51 0b18 	vmov	r0, r1, d8
 80049f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80049fc:	f7fb fe04 	bl	8000608 <__aeabi_dmul>
 8004a00:	ec41 0b18 	vmov	d8, r0, r1
 8004a04:	3501      	adds	r5, #1
 8004a06:	107f      	asrs	r7, r7, #1
 8004a08:	3608      	adds	r6, #8
 8004a0a:	e7e5      	b.n	80049d8 <_dtoa_r+0x370>
 8004a0c:	f000 80a6 	beq.w	8004b5c <_dtoa_r+0x4f4>
 8004a10:	f1ca 0600 	rsb	r6, sl, #0
 8004a14:	4ba5      	ldr	r3, [pc, #660]	; (8004cac <_dtoa_r+0x644>)
 8004a16:	4fa6      	ldr	r7, [pc, #664]	; (8004cb0 <_dtoa_r+0x648>)
 8004a18:	f006 020f 	and.w	r2, r6, #15
 8004a1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a28:	f7fb fdee 	bl	8000608 <__aeabi_dmul>
 8004a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a30:	1136      	asrs	r6, r6, #4
 8004a32:	2300      	movs	r3, #0
 8004a34:	2502      	movs	r5, #2
 8004a36:	2e00      	cmp	r6, #0
 8004a38:	f040 8085 	bne.w	8004b46 <_dtoa_r+0x4de>
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1d2      	bne.n	80049e6 <_dtoa_r+0x37e>
 8004a40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 808c 	beq.w	8004b60 <_dtoa_r+0x4f8>
 8004a48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004a4c:	4b99      	ldr	r3, [pc, #612]	; (8004cb4 <_dtoa_r+0x64c>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	4630      	mov	r0, r6
 8004a52:	4639      	mov	r1, r7
 8004a54:	f7fc f84a 	bl	8000aec <__aeabi_dcmplt>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	f000 8081 	beq.w	8004b60 <_dtoa_r+0x4f8>
 8004a5e:	9b01      	ldr	r3, [sp, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d07d      	beq.n	8004b60 <_dtoa_r+0x4f8>
 8004a64:	f1b9 0f00 	cmp.w	r9, #0
 8004a68:	dd3c      	ble.n	8004ae4 <_dtoa_r+0x47c>
 8004a6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004a6e:	9307      	str	r3, [sp, #28]
 8004a70:	2200      	movs	r2, #0
 8004a72:	4b91      	ldr	r3, [pc, #580]	; (8004cb8 <_dtoa_r+0x650>)
 8004a74:	4630      	mov	r0, r6
 8004a76:	4639      	mov	r1, r7
 8004a78:	f7fb fdc6 	bl	8000608 <__aeabi_dmul>
 8004a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a80:	3501      	adds	r5, #1
 8004a82:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004a86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f7fb fd52 	bl	8000534 <__aeabi_i2d>
 8004a90:	4632      	mov	r2, r6
 8004a92:	463b      	mov	r3, r7
 8004a94:	f7fb fdb8 	bl	8000608 <__aeabi_dmul>
 8004a98:	4b88      	ldr	r3, [pc, #544]	; (8004cbc <_dtoa_r+0x654>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f7fb fbfe 	bl	800029c <__adddf3>
 8004aa0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aa8:	9303      	str	r3, [sp, #12]
 8004aaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d15c      	bne.n	8004b6a <_dtoa_r+0x502>
 8004ab0:	4b83      	ldr	r3, [pc, #524]	; (8004cc0 <_dtoa_r+0x658>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	4639      	mov	r1, r7
 8004ab8:	f7fb fbee 	bl	8000298 <__aeabi_dsub>
 8004abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ac0:	4606      	mov	r6, r0
 8004ac2:	460f      	mov	r7, r1
 8004ac4:	f7fc f830 	bl	8000b28 <__aeabi_dcmpgt>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	f040 8296 	bne.w	8004ffa <_dtoa_r+0x992>
 8004ace:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ad8:	4639      	mov	r1, r7
 8004ada:	f7fc f807 	bl	8000aec <__aeabi_dcmplt>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	f040 8288 	bne.w	8004ff4 <_dtoa_r+0x98c>
 8004ae4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004ae8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004aec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f2c0 8158 	blt.w	8004da4 <_dtoa_r+0x73c>
 8004af4:	f1ba 0f0e 	cmp.w	sl, #14
 8004af8:	f300 8154 	bgt.w	8004da4 <_dtoa_r+0x73c>
 8004afc:	4b6b      	ldr	r3, [pc, #428]	; (8004cac <_dtoa_r+0x644>)
 8004afe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b02:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f280 80e3 	bge.w	8004cd4 <_dtoa_r+0x66c>
 8004b0e:	9b01      	ldr	r3, [sp, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f300 80df 	bgt.w	8004cd4 <_dtoa_r+0x66c>
 8004b16:	f040 826d 	bne.w	8004ff4 <_dtoa_r+0x98c>
 8004b1a:	4b69      	ldr	r3, [pc, #420]	; (8004cc0 <_dtoa_r+0x658>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	4640      	mov	r0, r8
 8004b20:	4649      	mov	r1, r9
 8004b22:	f7fb fd71 	bl	8000608 <__aeabi_dmul>
 8004b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b2a:	f7fb fff3 	bl	8000b14 <__aeabi_dcmpge>
 8004b2e:	9e01      	ldr	r6, [sp, #4]
 8004b30:	4637      	mov	r7, r6
 8004b32:	2800      	cmp	r0, #0
 8004b34:	f040 8243 	bne.w	8004fbe <_dtoa_r+0x956>
 8004b38:	9d00      	ldr	r5, [sp, #0]
 8004b3a:	2331      	movs	r3, #49	; 0x31
 8004b3c:	f805 3b01 	strb.w	r3, [r5], #1
 8004b40:	f10a 0a01 	add.w	sl, sl, #1
 8004b44:	e23f      	b.n	8004fc6 <_dtoa_r+0x95e>
 8004b46:	07f2      	lsls	r2, r6, #31
 8004b48:	d505      	bpl.n	8004b56 <_dtoa_r+0x4ee>
 8004b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b4e:	f7fb fd5b 	bl	8000608 <__aeabi_dmul>
 8004b52:	3501      	adds	r5, #1
 8004b54:	2301      	movs	r3, #1
 8004b56:	1076      	asrs	r6, r6, #1
 8004b58:	3708      	adds	r7, #8
 8004b5a:	e76c      	b.n	8004a36 <_dtoa_r+0x3ce>
 8004b5c:	2502      	movs	r5, #2
 8004b5e:	e76f      	b.n	8004a40 <_dtoa_r+0x3d8>
 8004b60:	9b01      	ldr	r3, [sp, #4]
 8004b62:	f8cd a01c 	str.w	sl, [sp, #28]
 8004b66:	930c      	str	r3, [sp, #48]	; 0x30
 8004b68:	e78d      	b.n	8004a86 <_dtoa_r+0x41e>
 8004b6a:	9900      	ldr	r1, [sp, #0]
 8004b6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004b6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b70:	4b4e      	ldr	r3, [pc, #312]	; (8004cac <_dtoa_r+0x644>)
 8004b72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b76:	4401      	add	r1, r0
 8004b78:	9102      	str	r1, [sp, #8]
 8004b7a:	9908      	ldr	r1, [sp, #32]
 8004b7c:	eeb0 8a47 	vmov.f32	s16, s14
 8004b80:	eef0 8a67 	vmov.f32	s17, s15
 8004b84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b8c:	2900      	cmp	r1, #0
 8004b8e:	d045      	beq.n	8004c1c <_dtoa_r+0x5b4>
 8004b90:	494c      	ldr	r1, [pc, #304]	; (8004cc4 <_dtoa_r+0x65c>)
 8004b92:	2000      	movs	r0, #0
 8004b94:	f7fb fe62 	bl	800085c <__aeabi_ddiv>
 8004b98:	ec53 2b18 	vmov	r2, r3, d8
 8004b9c:	f7fb fb7c 	bl	8000298 <__aeabi_dsub>
 8004ba0:	9d00      	ldr	r5, [sp, #0]
 8004ba2:	ec41 0b18 	vmov	d8, r0, r1
 8004ba6:	4639      	mov	r1, r7
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f7fb ffdd 	bl	8000b68 <__aeabi_d2iz>
 8004bae:	900c      	str	r0, [sp, #48]	; 0x30
 8004bb0:	f7fb fcc0 	bl	8000534 <__aeabi_i2d>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4630      	mov	r0, r6
 8004bba:	4639      	mov	r1, r7
 8004bbc:	f7fb fb6c 	bl	8000298 <__aeabi_dsub>
 8004bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bc2:	3330      	adds	r3, #48	; 0x30
 8004bc4:	f805 3b01 	strb.w	r3, [r5], #1
 8004bc8:	ec53 2b18 	vmov	r2, r3, d8
 8004bcc:	4606      	mov	r6, r0
 8004bce:	460f      	mov	r7, r1
 8004bd0:	f7fb ff8c 	bl	8000aec <__aeabi_dcmplt>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	d165      	bne.n	8004ca4 <_dtoa_r+0x63c>
 8004bd8:	4632      	mov	r2, r6
 8004bda:	463b      	mov	r3, r7
 8004bdc:	4935      	ldr	r1, [pc, #212]	; (8004cb4 <_dtoa_r+0x64c>)
 8004bde:	2000      	movs	r0, #0
 8004be0:	f7fb fb5a 	bl	8000298 <__aeabi_dsub>
 8004be4:	ec53 2b18 	vmov	r2, r3, d8
 8004be8:	f7fb ff80 	bl	8000aec <__aeabi_dcmplt>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	f040 80b9 	bne.w	8004d64 <_dtoa_r+0x6fc>
 8004bf2:	9b02      	ldr	r3, [sp, #8]
 8004bf4:	429d      	cmp	r5, r3
 8004bf6:	f43f af75 	beq.w	8004ae4 <_dtoa_r+0x47c>
 8004bfa:	4b2f      	ldr	r3, [pc, #188]	; (8004cb8 <_dtoa_r+0x650>)
 8004bfc:	ec51 0b18 	vmov	r0, r1, d8
 8004c00:	2200      	movs	r2, #0
 8004c02:	f7fb fd01 	bl	8000608 <__aeabi_dmul>
 8004c06:	4b2c      	ldr	r3, [pc, #176]	; (8004cb8 <_dtoa_r+0x650>)
 8004c08:	ec41 0b18 	vmov	d8, r0, r1
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	4630      	mov	r0, r6
 8004c10:	4639      	mov	r1, r7
 8004c12:	f7fb fcf9 	bl	8000608 <__aeabi_dmul>
 8004c16:	4606      	mov	r6, r0
 8004c18:	460f      	mov	r7, r1
 8004c1a:	e7c4      	b.n	8004ba6 <_dtoa_r+0x53e>
 8004c1c:	ec51 0b17 	vmov	r0, r1, d7
 8004c20:	f7fb fcf2 	bl	8000608 <__aeabi_dmul>
 8004c24:	9b02      	ldr	r3, [sp, #8]
 8004c26:	9d00      	ldr	r5, [sp, #0]
 8004c28:	930c      	str	r3, [sp, #48]	; 0x30
 8004c2a:	ec41 0b18 	vmov	d8, r0, r1
 8004c2e:	4639      	mov	r1, r7
 8004c30:	4630      	mov	r0, r6
 8004c32:	f7fb ff99 	bl	8000b68 <__aeabi_d2iz>
 8004c36:	9011      	str	r0, [sp, #68]	; 0x44
 8004c38:	f7fb fc7c 	bl	8000534 <__aeabi_i2d>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4630      	mov	r0, r6
 8004c42:	4639      	mov	r1, r7
 8004c44:	f7fb fb28 	bl	8000298 <__aeabi_dsub>
 8004c48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c4a:	3330      	adds	r3, #48	; 0x30
 8004c4c:	f805 3b01 	strb.w	r3, [r5], #1
 8004c50:	9b02      	ldr	r3, [sp, #8]
 8004c52:	429d      	cmp	r5, r3
 8004c54:	4606      	mov	r6, r0
 8004c56:	460f      	mov	r7, r1
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	d134      	bne.n	8004cc8 <_dtoa_r+0x660>
 8004c5e:	4b19      	ldr	r3, [pc, #100]	; (8004cc4 <_dtoa_r+0x65c>)
 8004c60:	ec51 0b18 	vmov	r0, r1, d8
 8004c64:	f7fb fb1a 	bl	800029c <__adddf3>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	4639      	mov	r1, r7
 8004c70:	f7fb ff5a 	bl	8000b28 <__aeabi_dcmpgt>
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d175      	bne.n	8004d64 <_dtoa_r+0x6fc>
 8004c78:	ec53 2b18 	vmov	r2, r3, d8
 8004c7c:	4911      	ldr	r1, [pc, #68]	; (8004cc4 <_dtoa_r+0x65c>)
 8004c7e:	2000      	movs	r0, #0
 8004c80:	f7fb fb0a 	bl	8000298 <__aeabi_dsub>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4630      	mov	r0, r6
 8004c8a:	4639      	mov	r1, r7
 8004c8c:	f7fb ff2e 	bl	8000aec <__aeabi_dcmplt>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	f43f af27 	beq.w	8004ae4 <_dtoa_r+0x47c>
 8004c96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c98:	1e6b      	subs	r3, r5, #1
 8004c9a:	930c      	str	r3, [sp, #48]	; 0x30
 8004c9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004ca0:	2b30      	cmp	r3, #48	; 0x30
 8004ca2:	d0f8      	beq.n	8004c96 <_dtoa_r+0x62e>
 8004ca4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004ca8:	e04a      	b.n	8004d40 <_dtoa_r+0x6d8>
 8004caa:	bf00      	nop
 8004cac:	080077c0 	.word	0x080077c0
 8004cb0:	08007798 	.word	0x08007798
 8004cb4:	3ff00000 	.word	0x3ff00000
 8004cb8:	40240000 	.word	0x40240000
 8004cbc:	401c0000 	.word	0x401c0000
 8004cc0:	40140000 	.word	0x40140000
 8004cc4:	3fe00000 	.word	0x3fe00000
 8004cc8:	4baf      	ldr	r3, [pc, #700]	; (8004f88 <_dtoa_r+0x920>)
 8004cca:	f7fb fc9d 	bl	8000608 <__aeabi_dmul>
 8004cce:	4606      	mov	r6, r0
 8004cd0:	460f      	mov	r7, r1
 8004cd2:	e7ac      	b.n	8004c2e <_dtoa_r+0x5c6>
 8004cd4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004cd8:	9d00      	ldr	r5, [sp, #0]
 8004cda:	4642      	mov	r2, r8
 8004cdc:	464b      	mov	r3, r9
 8004cde:	4630      	mov	r0, r6
 8004ce0:	4639      	mov	r1, r7
 8004ce2:	f7fb fdbb 	bl	800085c <__aeabi_ddiv>
 8004ce6:	f7fb ff3f 	bl	8000b68 <__aeabi_d2iz>
 8004cea:	9002      	str	r0, [sp, #8]
 8004cec:	f7fb fc22 	bl	8000534 <__aeabi_i2d>
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	f7fb fc88 	bl	8000608 <__aeabi_dmul>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	4639      	mov	r1, r7
 8004d00:	f7fb faca 	bl	8000298 <__aeabi_dsub>
 8004d04:	9e02      	ldr	r6, [sp, #8]
 8004d06:	9f01      	ldr	r7, [sp, #4]
 8004d08:	3630      	adds	r6, #48	; 0x30
 8004d0a:	f805 6b01 	strb.w	r6, [r5], #1
 8004d0e:	9e00      	ldr	r6, [sp, #0]
 8004d10:	1bae      	subs	r6, r5, r6
 8004d12:	42b7      	cmp	r7, r6
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	d137      	bne.n	8004d8a <_dtoa_r+0x722>
 8004d1a:	f7fb fabf 	bl	800029c <__adddf3>
 8004d1e:	4642      	mov	r2, r8
 8004d20:	464b      	mov	r3, r9
 8004d22:	4606      	mov	r6, r0
 8004d24:	460f      	mov	r7, r1
 8004d26:	f7fb feff 	bl	8000b28 <__aeabi_dcmpgt>
 8004d2a:	b9c8      	cbnz	r0, 8004d60 <_dtoa_r+0x6f8>
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	4630      	mov	r0, r6
 8004d32:	4639      	mov	r1, r7
 8004d34:	f7fb fed0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d38:	b110      	cbz	r0, 8004d40 <_dtoa_r+0x6d8>
 8004d3a:	9b02      	ldr	r3, [sp, #8]
 8004d3c:	07d9      	lsls	r1, r3, #31
 8004d3e:	d40f      	bmi.n	8004d60 <_dtoa_r+0x6f8>
 8004d40:	4620      	mov	r0, r4
 8004d42:	4659      	mov	r1, fp
 8004d44:	f000 fe58 	bl	80059f8 <_Bfree>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	702b      	strb	r3, [r5, #0]
 8004d4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d4e:	f10a 0001 	add.w	r0, sl, #1
 8004d52:	6018      	str	r0, [r3, #0]
 8004d54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f43f acd8 	beq.w	800470c <_dtoa_r+0xa4>
 8004d5c:	601d      	str	r5, [r3, #0]
 8004d5e:	e4d5      	b.n	800470c <_dtoa_r+0xa4>
 8004d60:	f8cd a01c 	str.w	sl, [sp, #28]
 8004d64:	462b      	mov	r3, r5
 8004d66:	461d      	mov	r5, r3
 8004d68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004d6c:	2a39      	cmp	r2, #57	; 0x39
 8004d6e:	d108      	bne.n	8004d82 <_dtoa_r+0x71a>
 8004d70:	9a00      	ldr	r2, [sp, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d1f7      	bne.n	8004d66 <_dtoa_r+0x6fe>
 8004d76:	9a07      	ldr	r2, [sp, #28]
 8004d78:	9900      	ldr	r1, [sp, #0]
 8004d7a:	3201      	adds	r2, #1
 8004d7c:	9207      	str	r2, [sp, #28]
 8004d7e:	2230      	movs	r2, #48	; 0x30
 8004d80:	700a      	strb	r2, [r1, #0]
 8004d82:	781a      	ldrb	r2, [r3, #0]
 8004d84:	3201      	adds	r2, #1
 8004d86:	701a      	strb	r2, [r3, #0]
 8004d88:	e78c      	b.n	8004ca4 <_dtoa_r+0x63c>
 8004d8a:	4b7f      	ldr	r3, [pc, #508]	; (8004f88 <_dtoa_r+0x920>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f7fb fc3b 	bl	8000608 <__aeabi_dmul>
 8004d92:	2200      	movs	r2, #0
 8004d94:	2300      	movs	r3, #0
 8004d96:	4606      	mov	r6, r0
 8004d98:	460f      	mov	r7, r1
 8004d9a:	f7fb fe9d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	d09b      	beq.n	8004cda <_dtoa_r+0x672>
 8004da2:	e7cd      	b.n	8004d40 <_dtoa_r+0x6d8>
 8004da4:	9a08      	ldr	r2, [sp, #32]
 8004da6:	2a00      	cmp	r2, #0
 8004da8:	f000 80c4 	beq.w	8004f34 <_dtoa_r+0x8cc>
 8004dac:	9a05      	ldr	r2, [sp, #20]
 8004dae:	2a01      	cmp	r2, #1
 8004db0:	f300 80a8 	bgt.w	8004f04 <_dtoa_r+0x89c>
 8004db4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004db6:	2a00      	cmp	r2, #0
 8004db8:	f000 80a0 	beq.w	8004efc <_dtoa_r+0x894>
 8004dbc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004dc0:	9e06      	ldr	r6, [sp, #24]
 8004dc2:	4645      	mov	r5, r8
 8004dc4:	9a04      	ldr	r2, [sp, #16]
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	441a      	add	r2, r3
 8004dca:	4620      	mov	r0, r4
 8004dcc:	4498      	add	r8, r3
 8004dce:	9204      	str	r2, [sp, #16]
 8004dd0:	f000 ff18 	bl	8005c04 <__i2b>
 8004dd4:	4607      	mov	r7, r0
 8004dd6:	2d00      	cmp	r5, #0
 8004dd8:	dd0b      	ble.n	8004df2 <_dtoa_r+0x78a>
 8004dda:	9b04      	ldr	r3, [sp, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	dd08      	ble.n	8004df2 <_dtoa_r+0x78a>
 8004de0:	42ab      	cmp	r3, r5
 8004de2:	9a04      	ldr	r2, [sp, #16]
 8004de4:	bfa8      	it	ge
 8004de6:	462b      	movge	r3, r5
 8004de8:	eba8 0803 	sub.w	r8, r8, r3
 8004dec:	1aed      	subs	r5, r5, r3
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	9304      	str	r3, [sp, #16]
 8004df2:	9b06      	ldr	r3, [sp, #24]
 8004df4:	b1fb      	cbz	r3, 8004e36 <_dtoa_r+0x7ce>
 8004df6:	9b08      	ldr	r3, [sp, #32]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 809f 	beq.w	8004f3c <_dtoa_r+0x8d4>
 8004dfe:	2e00      	cmp	r6, #0
 8004e00:	dd11      	ble.n	8004e26 <_dtoa_r+0x7be>
 8004e02:	4639      	mov	r1, r7
 8004e04:	4632      	mov	r2, r6
 8004e06:	4620      	mov	r0, r4
 8004e08:	f000 ffb8 	bl	8005d7c <__pow5mult>
 8004e0c:	465a      	mov	r2, fp
 8004e0e:	4601      	mov	r1, r0
 8004e10:	4607      	mov	r7, r0
 8004e12:	4620      	mov	r0, r4
 8004e14:	f000 ff0c 	bl	8005c30 <__multiply>
 8004e18:	4659      	mov	r1, fp
 8004e1a:	9007      	str	r0, [sp, #28]
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f000 fdeb 	bl	80059f8 <_Bfree>
 8004e22:	9b07      	ldr	r3, [sp, #28]
 8004e24:	469b      	mov	fp, r3
 8004e26:	9b06      	ldr	r3, [sp, #24]
 8004e28:	1b9a      	subs	r2, r3, r6
 8004e2a:	d004      	beq.n	8004e36 <_dtoa_r+0x7ce>
 8004e2c:	4659      	mov	r1, fp
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f000 ffa4 	bl	8005d7c <__pow5mult>
 8004e34:	4683      	mov	fp, r0
 8004e36:	2101      	movs	r1, #1
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f000 fee3 	bl	8005c04 <__i2b>
 8004e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	4606      	mov	r6, r0
 8004e44:	dd7c      	ble.n	8004f40 <_dtoa_r+0x8d8>
 8004e46:	461a      	mov	r2, r3
 8004e48:	4601      	mov	r1, r0
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	f000 ff96 	bl	8005d7c <__pow5mult>
 8004e50:	9b05      	ldr	r3, [sp, #20]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	4606      	mov	r6, r0
 8004e56:	dd76      	ble.n	8004f46 <_dtoa_r+0x8de>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	9306      	str	r3, [sp, #24]
 8004e5c:	6933      	ldr	r3, [r6, #16]
 8004e5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004e62:	6918      	ldr	r0, [r3, #16]
 8004e64:	f000 fe7e 	bl	8005b64 <__hi0bits>
 8004e68:	f1c0 0020 	rsb	r0, r0, #32
 8004e6c:	9b04      	ldr	r3, [sp, #16]
 8004e6e:	4418      	add	r0, r3
 8004e70:	f010 001f 	ands.w	r0, r0, #31
 8004e74:	f000 8086 	beq.w	8004f84 <_dtoa_r+0x91c>
 8004e78:	f1c0 0320 	rsb	r3, r0, #32
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	dd7f      	ble.n	8004f80 <_dtoa_r+0x918>
 8004e80:	f1c0 001c 	rsb	r0, r0, #28
 8004e84:	9b04      	ldr	r3, [sp, #16]
 8004e86:	4403      	add	r3, r0
 8004e88:	4480      	add	r8, r0
 8004e8a:	4405      	add	r5, r0
 8004e8c:	9304      	str	r3, [sp, #16]
 8004e8e:	f1b8 0f00 	cmp.w	r8, #0
 8004e92:	dd05      	ble.n	8004ea0 <_dtoa_r+0x838>
 8004e94:	4659      	mov	r1, fp
 8004e96:	4642      	mov	r2, r8
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f000 ffc9 	bl	8005e30 <__lshift>
 8004e9e:	4683      	mov	fp, r0
 8004ea0:	9b04      	ldr	r3, [sp, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	dd05      	ble.n	8004eb2 <_dtoa_r+0x84a>
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f000 ffc0 	bl	8005e30 <__lshift>
 8004eb0:	4606      	mov	r6, r0
 8004eb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d069      	beq.n	8004f8c <_dtoa_r+0x924>
 8004eb8:	4631      	mov	r1, r6
 8004eba:	4658      	mov	r0, fp
 8004ebc:	f001 f824 	bl	8005f08 <__mcmp>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	da63      	bge.n	8004f8c <_dtoa_r+0x924>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4659      	mov	r1, fp
 8004ec8:	220a      	movs	r2, #10
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f000 fdb6 	bl	8005a3c <__multadd>
 8004ed0:	9b08      	ldr	r3, [sp, #32]
 8004ed2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ed6:	4683      	mov	fp, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 818f 	beq.w	80051fc <_dtoa_r+0xb94>
 8004ede:	4639      	mov	r1, r7
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	220a      	movs	r2, #10
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f000 fda9 	bl	8005a3c <__multadd>
 8004eea:	f1b9 0f00 	cmp.w	r9, #0
 8004eee:	4607      	mov	r7, r0
 8004ef0:	f300 808e 	bgt.w	8005010 <_dtoa_r+0x9a8>
 8004ef4:	9b05      	ldr	r3, [sp, #20]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	dc50      	bgt.n	8004f9c <_dtoa_r+0x934>
 8004efa:	e089      	b.n	8005010 <_dtoa_r+0x9a8>
 8004efc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004efe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004f02:	e75d      	b.n	8004dc0 <_dtoa_r+0x758>
 8004f04:	9b01      	ldr	r3, [sp, #4]
 8004f06:	1e5e      	subs	r6, r3, #1
 8004f08:	9b06      	ldr	r3, [sp, #24]
 8004f0a:	42b3      	cmp	r3, r6
 8004f0c:	bfbf      	itttt	lt
 8004f0e:	9b06      	ldrlt	r3, [sp, #24]
 8004f10:	9606      	strlt	r6, [sp, #24]
 8004f12:	1af2      	sublt	r2, r6, r3
 8004f14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004f16:	bfb6      	itet	lt
 8004f18:	189b      	addlt	r3, r3, r2
 8004f1a:	1b9e      	subge	r6, r3, r6
 8004f1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004f1e:	9b01      	ldr	r3, [sp, #4]
 8004f20:	bfb8      	it	lt
 8004f22:	2600      	movlt	r6, #0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	bfb5      	itete	lt
 8004f28:	eba8 0503 	sublt.w	r5, r8, r3
 8004f2c:	9b01      	ldrge	r3, [sp, #4]
 8004f2e:	2300      	movlt	r3, #0
 8004f30:	4645      	movge	r5, r8
 8004f32:	e747      	b.n	8004dc4 <_dtoa_r+0x75c>
 8004f34:	9e06      	ldr	r6, [sp, #24]
 8004f36:	9f08      	ldr	r7, [sp, #32]
 8004f38:	4645      	mov	r5, r8
 8004f3a:	e74c      	b.n	8004dd6 <_dtoa_r+0x76e>
 8004f3c:	9a06      	ldr	r2, [sp, #24]
 8004f3e:	e775      	b.n	8004e2c <_dtoa_r+0x7c4>
 8004f40:	9b05      	ldr	r3, [sp, #20]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	dc18      	bgt.n	8004f78 <_dtoa_r+0x910>
 8004f46:	9b02      	ldr	r3, [sp, #8]
 8004f48:	b9b3      	cbnz	r3, 8004f78 <_dtoa_r+0x910>
 8004f4a:	9b03      	ldr	r3, [sp, #12]
 8004f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f50:	b9a3      	cbnz	r3, 8004f7c <_dtoa_r+0x914>
 8004f52:	9b03      	ldr	r3, [sp, #12]
 8004f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f58:	0d1b      	lsrs	r3, r3, #20
 8004f5a:	051b      	lsls	r3, r3, #20
 8004f5c:	b12b      	cbz	r3, 8004f6a <_dtoa_r+0x902>
 8004f5e:	9b04      	ldr	r3, [sp, #16]
 8004f60:	3301      	adds	r3, #1
 8004f62:	9304      	str	r3, [sp, #16]
 8004f64:	f108 0801 	add.w	r8, r8, #1
 8004f68:	2301      	movs	r3, #1
 8004f6a:	9306      	str	r3, [sp, #24]
 8004f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f47f af74 	bne.w	8004e5c <_dtoa_r+0x7f4>
 8004f74:	2001      	movs	r0, #1
 8004f76:	e779      	b.n	8004e6c <_dtoa_r+0x804>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	e7f6      	b.n	8004f6a <_dtoa_r+0x902>
 8004f7c:	9b02      	ldr	r3, [sp, #8]
 8004f7e:	e7f4      	b.n	8004f6a <_dtoa_r+0x902>
 8004f80:	d085      	beq.n	8004e8e <_dtoa_r+0x826>
 8004f82:	4618      	mov	r0, r3
 8004f84:	301c      	adds	r0, #28
 8004f86:	e77d      	b.n	8004e84 <_dtoa_r+0x81c>
 8004f88:	40240000 	.word	0x40240000
 8004f8c:	9b01      	ldr	r3, [sp, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	dc38      	bgt.n	8005004 <_dtoa_r+0x99c>
 8004f92:	9b05      	ldr	r3, [sp, #20]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	dd35      	ble.n	8005004 <_dtoa_r+0x99c>
 8004f98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004f9c:	f1b9 0f00 	cmp.w	r9, #0
 8004fa0:	d10d      	bne.n	8004fbe <_dtoa_r+0x956>
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	464b      	mov	r3, r9
 8004fa6:	2205      	movs	r2, #5
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f000 fd47 	bl	8005a3c <__multadd>
 8004fae:	4601      	mov	r1, r0
 8004fb0:	4606      	mov	r6, r0
 8004fb2:	4658      	mov	r0, fp
 8004fb4:	f000 ffa8 	bl	8005f08 <__mcmp>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	f73f adbd 	bgt.w	8004b38 <_dtoa_r+0x4d0>
 8004fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc0:	9d00      	ldr	r5, [sp, #0]
 8004fc2:	ea6f 0a03 	mvn.w	sl, r3
 8004fc6:	f04f 0800 	mov.w	r8, #0
 8004fca:	4631      	mov	r1, r6
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f000 fd13 	bl	80059f8 <_Bfree>
 8004fd2:	2f00      	cmp	r7, #0
 8004fd4:	f43f aeb4 	beq.w	8004d40 <_dtoa_r+0x6d8>
 8004fd8:	f1b8 0f00 	cmp.w	r8, #0
 8004fdc:	d005      	beq.n	8004fea <_dtoa_r+0x982>
 8004fde:	45b8      	cmp	r8, r7
 8004fe0:	d003      	beq.n	8004fea <_dtoa_r+0x982>
 8004fe2:	4641      	mov	r1, r8
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f000 fd07 	bl	80059f8 <_Bfree>
 8004fea:	4639      	mov	r1, r7
 8004fec:	4620      	mov	r0, r4
 8004fee:	f000 fd03 	bl	80059f8 <_Bfree>
 8004ff2:	e6a5      	b.n	8004d40 <_dtoa_r+0x6d8>
 8004ff4:	2600      	movs	r6, #0
 8004ff6:	4637      	mov	r7, r6
 8004ff8:	e7e1      	b.n	8004fbe <_dtoa_r+0x956>
 8004ffa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004ffc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005000:	4637      	mov	r7, r6
 8005002:	e599      	b.n	8004b38 <_dtoa_r+0x4d0>
 8005004:	9b08      	ldr	r3, [sp, #32]
 8005006:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 80fd 	beq.w	800520a <_dtoa_r+0xba2>
 8005010:	2d00      	cmp	r5, #0
 8005012:	dd05      	ble.n	8005020 <_dtoa_r+0x9b8>
 8005014:	4639      	mov	r1, r7
 8005016:	462a      	mov	r2, r5
 8005018:	4620      	mov	r0, r4
 800501a:	f000 ff09 	bl	8005e30 <__lshift>
 800501e:	4607      	mov	r7, r0
 8005020:	9b06      	ldr	r3, [sp, #24]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d05c      	beq.n	80050e0 <_dtoa_r+0xa78>
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4620      	mov	r0, r4
 800502a:	f000 fca5 	bl	8005978 <_Balloc>
 800502e:	4605      	mov	r5, r0
 8005030:	b928      	cbnz	r0, 800503e <_dtoa_r+0x9d6>
 8005032:	4b80      	ldr	r3, [pc, #512]	; (8005234 <_dtoa_r+0xbcc>)
 8005034:	4602      	mov	r2, r0
 8005036:	f240 21ea 	movw	r1, #746	; 0x2ea
 800503a:	f7ff bb2e 	b.w	800469a <_dtoa_r+0x32>
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	3202      	adds	r2, #2
 8005042:	0092      	lsls	r2, r2, #2
 8005044:	f107 010c 	add.w	r1, r7, #12
 8005048:	300c      	adds	r0, #12
 800504a:	f000 fc87 	bl	800595c <memcpy>
 800504e:	2201      	movs	r2, #1
 8005050:	4629      	mov	r1, r5
 8005052:	4620      	mov	r0, r4
 8005054:	f000 feec 	bl	8005e30 <__lshift>
 8005058:	9b00      	ldr	r3, [sp, #0]
 800505a:	3301      	adds	r3, #1
 800505c:	9301      	str	r3, [sp, #4]
 800505e:	9b00      	ldr	r3, [sp, #0]
 8005060:	444b      	add	r3, r9
 8005062:	9307      	str	r3, [sp, #28]
 8005064:	9b02      	ldr	r3, [sp, #8]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	46b8      	mov	r8, r7
 800506c:	9306      	str	r3, [sp, #24]
 800506e:	4607      	mov	r7, r0
 8005070:	9b01      	ldr	r3, [sp, #4]
 8005072:	4631      	mov	r1, r6
 8005074:	3b01      	subs	r3, #1
 8005076:	4658      	mov	r0, fp
 8005078:	9302      	str	r3, [sp, #8]
 800507a:	f7ff fa69 	bl	8004550 <quorem>
 800507e:	4603      	mov	r3, r0
 8005080:	3330      	adds	r3, #48	; 0x30
 8005082:	9004      	str	r0, [sp, #16]
 8005084:	4641      	mov	r1, r8
 8005086:	4658      	mov	r0, fp
 8005088:	9308      	str	r3, [sp, #32]
 800508a:	f000 ff3d 	bl	8005f08 <__mcmp>
 800508e:	463a      	mov	r2, r7
 8005090:	4681      	mov	r9, r0
 8005092:	4631      	mov	r1, r6
 8005094:	4620      	mov	r0, r4
 8005096:	f000 ff53 	bl	8005f40 <__mdiff>
 800509a:	68c2      	ldr	r2, [r0, #12]
 800509c:	9b08      	ldr	r3, [sp, #32]
 800509e:	4605      	mov	r5, r0
 80050a0:	bb02      	cbnz	r2, 80050e4 <_dtoa_r+0xa7c>
 80050a2:	4601      	mov	r1, r0
 80050a4:	4658      	mov	r0, fp
 80050a6:	f000 ff2f 	bl	8005f08 <__mcmp>
 80050aa:	9b08      	ldr	r3, [sp, #32]
 80050ac:	4602      	mov	r2, r0
 80050ae:	4629      	mov	r1, r5
 80050b0:	4620      	mov	r0, r4
 80050b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80050b6:	f000 fc9f 	bl	80059f8 <_Bfree>
 80050ba:	9b05      	ldr	r3, [sp, #20]
 80050bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050be:	9d01      	ldr	r5, [sp, #4]
 80050c0:	ea43 0102 	orr.w	r1, r3, r2
 80050c4:	9b06      	ldr	r3, [sp, #24]
 80050c6:	430b      	orrs	r3, r1
 80050c8:	9b08      	ldr	r3, [sp, #32]
 80050ca:	d10d      	bne.n	80050e8 <_dtoa_r+0xa80>
 80050cc:	2b39      	cmp	r3, #57	; 0x39
 80050ce:	d029      	beq.n	8005124 <_dtoa_r+0xabc>
 80050d0:	f1b9 0f00 	cmp.w	r9, #0
 80050d4:	dd01      	ble.n	80050da <_dtoa_r+0xa72>
 80050d6:	9b04      	ldr	r3, [sp, #16]
 80050d8:	3331      	adds	r3, #49	; 0x31
 80050da:	9a02      	ldr	r2, [sp, #8]
 80050dc:	7013      	strb	r3, [r2, #0]
 80050de:	e774      	b.n	8004fca <_dtoa_r+0x962>
 80050e0:	4638      	mov	r0, r7
 80050e2:	e7b9      	b.n	8005058 <_dtoa_r+0x9f0>
 80050e4:	2201      	movs	r2, #1
 80050e6:	e7e2      	b.n	80050ae <_dtoa_r+0xa46>
 80050e8:	f1b9 0f00 	cmp.w	r9, #0
 80050ec:	db06      	blt.n	80050fc <_dtoa_r+0xa94>
 80050ee:	9905      	ldr	r1, [sp, #20]
 80050f0:	ea41 0909 	orr.w	r9, r1, r9
 80050f4:	9906      	ldr	r1, [sp, #24]
 80050f6:	ea59 0101 	orrs.w	r1, r9, r1
 80050fa:	d120      	bne.n	800513e <_dtoa_r+0xad6>
 80050fc:	2a00      	cmp	r2, #0
 80050fe:	ddec      	ble.n	80050da <_dtoa_r+0xa72>
 8005100:	4659      	mov	r1, fp
 8005102:	2201      	movs	r2, #1
 8005104:	4620      	mov	r0, r4
 8005106:	9301      	str	r3, [sp, #4]
 8005108:	f000 fe92 	bl	8005e30 <__lshift>
 800510c:	4631      	mov	r1, r6
 800510e:	4683      	mov	fp, r0
 8005110:	f000 fefa 	bl	8005f08 <__mcmp>
 8005114:	2800      	cmp	r0, #0
 8005116:	9b01      	ldr	r3, [sp, #4]
 8005118:	dc02      	bgt.n	8005120 <_dtoa_r+0xab8>
 800511a:	d1de      	bne.n	80050da <_dtoa_r+0xa72>
 800511c:	07da      	lsls	r2, r3, #31
 800511e:	d5dc      	bpl.n	80050da <_dtoa_r+0xa72>
 8005120:	2b39      	cmp	r3, #57	; 0x39
 8005122:	d1d8      	bne.n	80050d6 <_dtoa_r+0xa6e>
 8005124:	9a02      	ldr	r2, [sp, #8]
 8005126:	2339      	movs	r3, #57	; 0x39
 8005128:	7013      	strb	r3, [r2, #0]
 800512a:	462b      	mov	r3, r5
 800512c:	461d      	mov	r5, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005134:	2a39      	cmp	r2, #57	; 0x39
 8005136:	d050      	beq.n	80051da <_dtoa_r+0xb72>
 8005138:	3201      	adds	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	e745      	b.n	8004fca <_dtoa_r+0x962>
 800513e:	2a00      	cmp	r2, #0
 8005140:	dd03      	ble.n	800514a <_dtoa_r+0xae2>
 8005142:	2b39      	cmp	r3, #57	; 0x39
 8005144:	d0ee      	beq.n	8005124 <_dtoa_r+0xabc>
 8005146:	3301      	adds	r3, #1
 8005148:	e7c7      	b.n	80050da <_dtoa_r+0xa72>
 800514a:	9a01      	ldr	r2, [sp, #4]
 800514c:	9907      	ldr	r1, [sp, #28]
 800514e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005152:	428a      	cmp	r2, r1
 8005154:	d02a      	beq.n	80051ac <_dtoa_r+0xb44>
 8005156:	4659      	mov	r1, fp
 8005158:	2300      	movs	r3, #0
 800515a:	220a      	movs	r2, #10
 800515c:	4620      	mov	r0, r4
 800515e:	f000 fc6d 	bl	8005a3c <__multadd>
 8005162:	45b8      	cmp	r8, r7
 8005164:	4683      	mov	fp, r0
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	f04f 020a 	mov.w	r2, #10
 800516e:	4641      	mov	r1, r8
 8005170:	4620      	mov	r0, r4
 8005172:	d107      	bne.n	8005184 <_dtoa_r+0xb1c>
 8005174:	f000 fc62 	bl	8005a3c <__multadd>
 8005178:	4680      	mov	r8, r0
 800517a:	4607      	mov	r7, r0
 800517c:	9b01      	ldr	r3, [sp, #4]
 800517e:	3301      	adds	r3, #1
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	e775      	b.n	8005070 <_dtoa_r+0xa08>
 8005184:	f000 fc5a 	bl	8005a3c <__multadd>
 8005188:	4639      	mov	r1, r7
 800518a:	4680      	mov	r8, r0
 800518c:	2300      	movs	r3, #0
 800518e:	220a      	movs	r2, #10
 8005190:	4620      	mov	r0, r4
 8005192:	f000 fc53 	bl	8005a3c <__multadd>
 8005196:	4607      	mov	r7, r0
 8005198:	e7f0      	b.n	800517c <_dtoa_r+0xb14>
 800519a:	f1b9 0f00 	cmp.w	r9, #0
 800519e:	9a00      	ldr	r2, [sp, #0]
 80051a0:	bfcc      	ite	gt
 80051a2:	464d      	movgt	r5, r9
 80051a4:	2501      	movle	r5, #1
 80051a6:	4415      	add	r5, r2
 80051a8:	f04f 0800 	mov.w	r8, #0
 80051ac:	4659      	mov	r1, fp
 80051ae:	2201      	movs	r2, #1
 80051b0:	4620      	mov	r0, r4
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	f000 fe3c 	bl	8005e30 <__lshift>
 80051b8:	4631      	mov	r1, r6
 80051ba:	4683      	mov	fp, r0
 80051bc:	f000 fea4 	bl	8005f08 <__mcmp>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	dcb2      	bgt.n	800512a <_dtoa_r+0xac2>
 80051c4:	d102      	bne.n	80051cc <_dtoa_r+0xb64>
 80051c6:	9b01      	ldr	r3, [sp, #4]
 80051c8:	07db      	lsls	r3, r3, #31
 80051ca:	d4ae      	bmi.n	800512a <_dtoa_r+0xac2>
 80051cc:	462b      	mov	r3, r5
 80051ce:	461d      	mov	r5, r3
 80051d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051d4:	2a30      	cmp	r2, #48	; 0x30
 80051d6:	d0fa      	beq.n	80051ce <_dtoa_r+0xb66>
 80051d8:	e6f7      	b.n	8004fca <_dtoa_r+0x962>
 80051da:	9a00      	ldr	r2, [sp, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d1a5      	bne.n	800512c <_dtoa_r+0xac4>
 80051e0:	f10a 0a01 	add.w	sl, sl, #1
 80051e4:	2331      	movs	r3, #49	; 0x31
 80051e6:	e779      	b.n	80050dc <_dtoa_r+0xa74>
 80051e8:	4b13      	ldr	r3, [pc, #76]	; (8005238 <_dtoa_r+0xbd0>)
 80051ea:	f7ff baaf 	b.w	800474c <_dtoa_r+0xe4>
 80051ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f47f aa86 	bne.w	8004702 <_dtoa_r+0x9a>
 80051f6:	4b11      	ldr	r3, [pc, #68]	; (800523c <_dtoa_r+0xbd4>)
 80051f8:	f7ff baa8 	b.w	800474c <_dtoa_r+0xe4>
 80051fc:	f1b9 0f00 	cmp.w	r9, #0
 8005200:	dc03      	bgt.n	800520a <_dtoa_r+0xba2>
 8005202:	9b05      	ldr	r3, [sp, #20]
 8005204:	2b02      	cmp	r3, #2
 8005206:	f73f aec9 	bgt.w	8004f9c <_dtoa_r+0x934>
 800520a:	9d00      	ldr	r5, [sp, #0]
 800520c:	4631      	mov	r1, r6
 800520e:	4658      	mov	r0, fp
 8005210:	f7ff f99e 	bl	8004550 <quorem>
 8005214:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005218:	f805 3b01 	strb.w	r3, [r5], #1
 800521c:	9a00      	ldr	r2, [sp, #0]
 800521e:	1aaa      	subs	r2, r5, r2
 8005220:	4591      	cmp	r9, r2
 8005222:	ddba      	ble.n	800519a <_dtoa_r+0xb32>
 8005224:	4659      	mov	r1, fp
 8005226:	2300      	movs	r3, #0
 8005228:	220a      	movs	r2, #10
 800522a:	4620      	mov	r0, r4
 800522c:	f000 fc06 	bl	8005a3c <__multadd>
 8005230:	4683      	mov	fp, r0
 8005232:	e7eb      	b.n	800520c <_dtoa_r+0xba4>
 8005234:	080076a3 	.word	0x080076a3
 8005238:	080075a4 	.word	0x080075a4
 800523c:	08007620 	.word	0x08007620

08005240 <rshift>:
 8005240:	6903      	ldr	r3, [r0, #16]
 8005242:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800524a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800524e:	f100 0414 	add.w	r4, r0, #20
 8005252:	dd45      	ble.n	80052e0 <rshift+0xa0>
 8005254:	f011 011f 	ands.w	r1, r1, #31
 8005258:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800525c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005260:	d10c      	bne.n	800527c <rshift+0x3c>
 8005262:	f100 0710 	add.w	r7, r0, #16
 8005266:	4629      	mov	r1, r5
 8005268:	42b1      	cmp	r1, r6
 800526a:	d334      	bcc.n	80052d6 <rshift+0x96>
 800526c:	1a9b      	subs	r3, r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	1eea      	subs	r2, r5, #3
 8005272:	4296      	cmp	r6, r2
 8005274:	bf38      	it	cc
 8005276:	2300      	movcc	r3, #0
 8005278:	4423      	add	r3, r4
 800527a:	e015      	b.n	80052a8 <rshift+0x68>
 800527c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005280:	f1c1 0820 	rsb	r8, r1, #32
 8005284:	40cf      	lsrs	r7, r1
 8005286:	f105 0e04 	add.w	lr, r5, #4
 800528a:	46a1      	mov	r9, r4
 800528c:	4576      	cmp	r6, lr
 800528e:	46f4      	mov	ip, lr
 8005290:	d815      	bhi.n	80052be <rshift+0x7e>
 8005292:	1a9b      	subs	r3, r3, r2
 8005294:	009a      	lsls	r2, r3, #2
 8005296:	3a04      	subs	r2, #4
 8005298:	3501      	adds	r5, #1
 800529a:	42ae      	cmp	r6, r5
 800529c:	bf38      	it	cc
 800529e:	2200      	movcc	r2, #0
 80052a0:	18a3      	adds	r3, r4, r2
 80052a2:	50a7      	str	r7, [r4, r2]
 80052a4:	b107      	cbz	r7, 80052a8 <rshift+0x68>
 80052a6:	3304      	adds	r3, #4
 80052a8:	1b1a      	subs	r2, r3, r4
 80052aa:	42a3      	cmp	r3, r4
 80052ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80052b0:	bf08      	it	eq
 80052b2:	2300      	moveq	r3, #0
 80052b4:	6102      	str	r2, [r0, #16]
 80052b6:	bf08      	it	eq
 80052b8:	6143      	streq	r3, [r0, #20]
 80052ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052be:	f8dc c000 	ldr.w	ip, [ip]
 80052c2:	fa0c fc08 	lsl.w	ip, ip, r8
 80052c6:	ea4c 0707 	orr.w	r7, ip, r7
 80052ca:	f849 7b04 	str.w	r7, [r9], #4
 80052ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80052d2:	40cf      	lsrs	r7, r1
 80052d4:	e7da      	b.n	800528c <rshift+0x4c>
 80052d6:	f851 cb04 	ldr.w	ip, [r1], #4
 80052da:	f847 cf04 	str.w	ip, [r7, #4]!
 80052de:	e7c3      	b.n	8005268 <rshift+0x28>
 80052e0:	4623      	mov	r3, r4
 80052e2:	e7e1      	b.n	80052a8 <rshift+0x68>

080052e4 <__hexdig_fun>:
 80052e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80052e8:	2b09      	cmp	r3, #9
 80052ea:	d802      	bhi.n	80052f2 <__hexdig_fun+0xe>
 80052ec:	3820      	subs	r0, #32
 80052ee:	b2c0      	uxtb	r0, r0
 80052f0:	4770      	bx	lr
 80052f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80052f6:	2b05      	cmp	r3, #5
 80052f8:	d801      	bhi.n	80052fe <__hexdig_fun+0x1a>
 80052fa:	3847      	subs	r0, #71	; 0x47
 80052fc:	e7f7      	b.n	80052ee <__hexdig_fun+0xa>
 80052fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005302:	2b05      	cmp	r3, #5
 8005304:	d801      	bhi.n	800530a <__hexdig_fun+0x26>
 8005306:	3827      	subs	r0, #39	; 0x27
 8005308:	e7f1      	b.n	80052ee <__hexdig_fun+0xa>
 800530a:	2000      	movs	r0, #0
 800530c:	4770      	bx	lr
	...

08005310 <__gethex>:
 8005310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005314:	ed2d 8b02 	vpush	{d8}
 8005318:	b089      	sub	sp, #36	; 0x24
 800531a:	ee08 0a10 	vmov	s16, r0
 800531e:	9304      	str	r3, [sp, #16]
 8005320:	4bbc      	ldr	r3, [pc, #752]	; (8005614 <__gethex+0x304>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	4618      	mov	r0, r3
 8005328:	468b      	mov	fp, r1
 800532a:	4690      	mov	r8, r2
 800532c:	f7fa ff58 	bl	80001e0 <strlen>
 8005330:	9b01      	ldr	r3, [sp, #4]
 8005332:	f8db 2000 	ldr.w	r2, [fp]
 8005336:	4403      	add	r3, r0
 8005338:	4682      	mov	sl, r0
 800533a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800533e:	9305      	str	r3, [sp, #20]
 8005340:	1c93      	adds	r3, r2, #2
 8005342:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005346:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800534a:	32fe      	adds	r2, #254	; 0xfe
 800534c:	18d1      	adds	r1, r2, r3
 800534e:	461f      	mov	r7, r3
 8005350:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005354:	9100      	str	r1, [sp, #0]
 8005356:	2830      	cmp	r0, #48	; 0x30
 8005358:	d0f8      	beq.n	800534c <__gethex+0x3c>
 800535a:	f7ff ffc3 	bl	80052e4 <__hexdig_fun>
 800535e:	4604      	mov	r4, r0
 8005360:	2800      	cmp	r0, #0
 8005362:	d13a      	bne.n	80053da <__gethex+0xca>
 8005364:	9901      	ldr	r1, [sp, #4]
 8005366:	4652      	mov	r2, sl
 8005368:	4638      	mov	r0, r7
 800536a:	f001 f9ed 	bl	8006748 <strncmp>
 800536e:	4605      	mov	r5, r0
 8005370:	2800      	cmp	r0, #0
 8005372:	d168      	bne.n	8005446 <__gethex+0x136>
 8005374:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005378:	eb07 060a 	add.w	r6, r7, sl
 800537c:	f7ff ffb2 	bl	80052e4 <__hexdig_fun>
 8005380:	2800      	cmp	r0, #0
 8005382:	d062      	beq.n	800544a <__gethex+0x13a>
 8005384:	4633      	mov	r3, r6
 8005386:	7818      	ldrb	r0, [r3, #0]
 8005388:	2830      	cmp	r0, #48	; 0x30
 800538a:	461f      	mov	r7, r3
 800538c:	f103 0301 	add.w	r3, r3, #1
 8005390:	d0f9      	beq.n	8005386 <__gethex+0x76>
 8005392:	f7ff ffa7 	bl	80052e4 <__hexdig_fun>
 8005396:	2301      	movs	r3, #1
 8005398:	fab0 f480 	clz	r4, r0
 800539c:	0964      	lsrs	r4, r4, #5
 800539e:	4635      	mov	r5, r6
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	463a      	mov	r2, r7
 80053a4:	4616      	mov	r6, r2
 80053a6:	3201      	adds	r2, #1
 80053a8:	7830      	ldrb	r0, [r6, #0]
 80053aa:	f7ff ff9b 	bl	80052e4 <__hexdig_fun>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d1f8      	bne.n	80053a4 <__gethex+0x94>
 80053b2:	9901      	ldr	r1, [sp, #4]
 80053b4:	4652      	mov	r2, sl
 80053b6:	4630      	mov	r0, r6
 80053b8:	f001 f9c6 	bl	8006748 <strncmp>
 80053bc:	b980      	cbnz	r0, 80053e0 <__gethex+0xd0>
 80053be:	b94d      	cbnz	r5, 80053d4 <__gethex+0xc4>
 80053c0:	eb06 050a 	add.w	r5, r6, sl
 80053c4:	462a      	mov	r2, r5
 80053c6:	4616      	mov	r6, r2
 80053c8:	3201      	adds	r2, #1
 80053ca:	7830      	ldrb	r0, [r6, #0]
 80053cc:	f7ff ff8a 	bl	80052e4 <__hexdig_fun>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	d1f8      	bne.n	80053c6 <__gethex+0xb6>
 80053d4:	1bad      	subs	r5, r5, r6
 80053d6:	00ad      	lsls	r5, r5, #2
 80053d8:	e004      	b.n	80053e4 <__gethex+0xd4>
 80053da:	2400      	movs	r4, #0
 80053dc:	4625      	mov	r5, r4
 80053de:	e7e0      	b.n	80053a2 <__gethex+0x92>
 80053e0:	2d00      	cmp	r5, #0
 80053e2:	d1f7      	bne.n	80053d4 <__gethex+0xc4>
 80053e4:	7833      	ldrb	r3, [r6, #0]
 80053e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80053ea:	2b50      	cmp	r3, #80	; 0x50
 80053ec:	d13b      	bne.n	8005466 <__gethex+0x156>
 80053ee:	7873      	ldrb	r3, [r6, #1]
 80053f0:	2b2b      	cmp	r3, #43	; 0x2b
 80053f2:	d02c      	beq.n	800544e <__gethex+0x13e>
 80053f4:	2b2d      	cmp	r3, #45	; 0x2d
 80053f6:	d02e      	beq.n	8005456 <__gethex+0x146>
 80053f8:	1c71      	adds	r1, r6, #1
 80053fa:	f04f 0900 	mov.w	r9, #0
 80053fe:	7808      	ldrb	r0, [r1, #0]
 8005400:	f7ff ff70 	bl	80052e4 <__hexdig_fun>
 8005404:	1e43      	subs	r3, r0, #1
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b18      	cmp	r3, #24
 800540a:	d82c      	bhi.n	8005466 <__gethex+0x156>
 800540c:	f1a0 0210 	sub.w	r2, r0, #16
 8005410:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005414:	f7ff ff66 	bl	80052e4 <__hexdig_fun>
 8005418:	1e43      	subs	r3, r0, #1
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b18      	cmp	r3, #24
 800541e:	d91d      	bls.n	800545c <__gethex+0x14c>
 8005420:	f1b9 0f00 	cmp.w	r9, #0
 8005424:	d000      	beq.n	8005428 <__gethex+0x118>
 8005426:	4252      	negs	r2, r2
 8005428:	4415      	add	r5, r2
 800542a:	f8cb 1000 	str.w	r1, [fp]
 800542e:	b1e4      	cbz	r4, 800546a <__gethex+0x15a>
 8005430:	9b00      	ldr	r3, [sp, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	bf14      	ite	ne
 8005436:	2700      	movne	r7, #0
 8005438:	2706      	moveq	r7, #6
 800543a:	4638      	mov	r0, r7
 800543c:	b009      	add	sp, #36	; 0x24
 800543e:	ecbd 8b02 	vpop	{d8}
 8005442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005446:	463e      	mov	r6, r7
 8005448:	4625      	mov	r5, r4
 800544a:	2401      	movs	r4, #1
 800544c:	e7ca      	b.n	80053e4 <__gethex+0xd4>
 800544e:	f04f 0900 	mov.w	r9, #0
 8005452:	1cb1      	adds	r1, r6, #2
 8005454:	e7d3      	b.n	80053fe <__gethex+0xee>
 8005456:	f04f 0901 	mov.w	r9, #1
 800545a:	e7fa      	b.n	8005452 <__gethex+0x142>
 800545c:	230a      	movs	r3, #10
 800545e:	fb03 0202 	mla	r2, r3, r2, r0
 8005462:	3a10      	subs	r2, #16
 8005464:	e7d4      	b.n	8005410 <__gethex+0x100>
 8005466:	4631      	mov	r1, r6
 8005468:	e7df      	b.n	800542a <__gethex+0x11a>
 800546a:	1bf3      	subs	r3, r6, r7
 800546c:	3b01      	subs	r3, #1
 800546e:	4621      	mov	r1, r4
 8005470:	2b07      	cmp	r3, #7
 8005472:	dc0b      	bgt.n	800548c <__gethex+0x17c>
 8005474:	ee18 0a10 	vmov	r0, s16
 8005478:	f000 fa7e 	bl	8005978 <_Balloc>
 800547c:	4604      	mov	r4, r0
 800547e:	b940      	cbnz	r0, 8005492 <__gethex+0x182>
 8005480:	4b65      	ldr	r3, [pc, #404]	; (8005618 <__gethex+0x308>)
 8005482:	4602      	mov	r2, r0
 8005484:	21de      	movs	r1, #222	; 0xde
 8005486:	4865      	ldr	r0, [pc, #404]	; (800561c <__gethex+0x30c>)
 8005488:	f001 f97e 	bl	8006788 <__assert_func>
 800548c:	3101      	adds	r1, #1
 800548e:	105b      	asrs	r3, r3, #1
 8005490:	e7ee      	b.n	8005470 <__gethex+0x160>
 8005492:	f100 0914 	add.w	r9, r0, #20
 8005496:	f04f 0b00 	mov.w	fp, #0
 800549a:	f1ca 0301 	rsb	r3, sl, #1
 800549e:	f8cd 9008 	str.w	r9, [sp, #8]
 80054a2:	f8cd b000 	str.w	fp, [sp]
 80054a6:	9306      	str	r3, [sp, #24]
 80054a8:	42b7      	cmp	r7, r6
 80054aa:	d340      	bcc.n	800552e <__gethex+0x21e>
 80054ac:	9802      	ldr	r0, [sp, #8]
 80054ae:	9b00      	ldr	r3, [sp, #0]
 80054b0:	f840 3b04 	str.w	r3, [r0], #4
 80054b4:	eba0 0009 	sub.w	r0, r0, r9
 80054b8:	1080      	asrs	r0, r0, #2
 80054ba:	0146      	lsls	r6, r0, #5
 80054bc:	6120      	str	r0, [r4, #16]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fb50 	bl	8005b64 <__hi0bits>
 80054c4:	1a30      	subs	r0, r6, r0
 80054c6:	f8d8 6000 	ldr.w	r6, [r8]
 80054ca:	42b0      	cmp	r0, r6
 80054cc:	dd63      	ble.n	8005596 <__gethex+0x286>
 80054ce:	1b87      	subs	r7, r0, r6
 80054d0:	4639      	mov	r1, r7
 80054d2:	4620      	mov	r0, r4
 80054d4:	f000 feea 	bl	80062ac <__any_on>
 80054d8:	4682      	mov	sl, r0
 80054da:	b1a8      	cbz	r0, 8005508 <__gethex+0x1f8>
 80054dc:	1e7b      	subs	r3, r7, #1
 80054de:	1159      	asrs	r1, r3, #5
 80054e0:	f003 021f 	and.w	r2, r3, #31
 80054e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80054e8:	f04f 0a01 	mov.w	sl, #1
 80054ec:	fa0a f202 	lsl.w	r2, sl, r2
 80054f0:	420a      	tst	r2, r1
 80054f2:	d009      	beq.n	8005508 <__gethex+0x1f8>
 80054f4:	4553      	cmp	r3, sl
 80054f6:	dd05      	ble.n	8005504 <__gethex+0x1f4>
 80054f8:	1eb9      	subs	r1, r7, #2
 80054fa:	4620      	mov	r0, r4
 80054fc:	f000 fed6 	bl	80062ac <__any_on>
 8005500:	2800      	cmp	r0, #0
 8005502:	d145      	bne.n	8005590 <__gethex+0x280>
 8005504:	f04f 0a02 	mov.w	sl, #2
 8005508:	4639      	mov	r1, r7
 800550a:	4620      	mov	r0, r4
 800550c:	f7ff fe98 	bl	8005240 <rshift>
 8005510:	443d      	add	r5, r7
 8005512:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005516:	42ab      	cmp	r3, r5
 8005518:	da4c      	bge.n	80055b4 <__gethex+0x2a4>
 800551a:	ee18 0a10 	vmov	r0, s16
 800551e:	4621      	mov	r1, r4
 8005520:	f000 fa6a 	bl	80059f8 <_Bfree>
 8005524:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005526:	2300      	movs	r3, #0
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	27a3      	movs	r7, #163	; 0xa3
 800552c:	e785      	b.n	800543a <__gethex+0x12a>
 800552e:	1e73      	subs	r3, r6, #1
 8005530:	9a05      	ldr	r2, [sp, #20]
 8005532:	9303      	str	r3, [sp, #12]
 8005534:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005538:	4293      	cmp	r3, r2
 800553a:	d019      	beq.n	8005570 <__gethex+0x260>
 800553c:	f1bb 0f20 	cmp.w	fp, #32
 8005540:	d107      	bne.n	8005552 <__gethex+0x242>
 8005542:	9b02      	ldr	r3, [sp, #8]
 8005544:	9a00      	ldr	r2, [sp, #0]
 8005546:	f843 2b04 	str.w	r2, [r3], #4
 800554a:	9302      	str	r3, [sp, #8]
 800554c:	2300      	movs	r3, #0
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	469b      	mov	fp, r3
 8005552:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005556:	f7ff fec5 	bl	80052e4 <__hexdig_fun>
 800555a:	9b00      	ldr	r3, [sp, #0]
 800555c:	f000 000f 	and.w	r0, r0, #15
 8005560:	fa00 f00b 	lsl.w	r0, r0, fp
 8005564:	4303      	orrs	r3, r0
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	f10b 0b04 	add.w	fp, fp, #4
 800556c:	9b03      	ldr	r3, [sp, #12]
 800556e:	e00d      	b.n	800558c <__gethex+0x27c>
 8005570:	9b03      	ldr	r3, [sp, #12]
 8005572:	9a06      	ldr	r2, [sp, #24]
 8005574:	4413      	add	r3, r2
 8005576:	42bb      	cmp	r3, r7
 8005578:	d3e0      	bcc.n	800553c <__gethex+0x22c>
 800557a:	4618      	mov	r0, r3
 800557c:	9901      	ldr	r1, [sp, #4]
 800557e:	9307      	str	r3, [sp, #28]
 8005580:	4652      	mov	r2, sl
 8005582:	f001 f8e1 	bl	8006748 <strncmp>
 8005586:	9b07      	ldr	r3, [sp, #28]
 8005588:	2800      	cmp	r0, #0
 800558a:	d1d7      	bne.n	800553c <__gethex+0x22c>
 800558c:	461e      	mov	r6, r3
 800558e:	e78b      	b.n	80054a8 <__gethex+0x198>
 8005590:	f04f 0a03 	mov.w	sl, #3
 8005594:	e7b8      	b.n	8005508 <__gethex+0x1f8>
 8005596:	da0a      	bge.n	80055ae <__gethex+0x29e>
 8005598:	1a37      	subs	r7, r6, r0
 800559a:	4621      	mov	r1, r4
 800559c:	ee18 0a10 	vmov	r0, s16
 80055a0:	463a      	mov	r2, r7
 80055a2:	f000 fc45 	bl	8005e30 <__lshift>
 80055a6:	1bed      	subs	r5, r5, r7
 80055a8:	4604      	mov	r4, r0
 80055aa:	f100 0914 	add.w	r9, r0, #20
 80055ae:	f04f 0a00 	mov.w	sl, #0
 80055b2:	e7ae      	b.n	8005512 <__gethex+0x202>
 80055b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80055b8:	42a8      	cmp	r0, r5
 80055ba:	dd72      	ble.n	80056a2 <__gethex+0x392>
 80055bc:	1b45      	subs	r5, r0, r5
 80055be:	42ae      	cmp	r6, r5
 80055c0:	dc36      	bgt.n	8005630 <__gethex+0x320>
 80055c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d02a      	beq.n	8005620 <__gethex+0x310>
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d02c      	beq.n	8005628 <__gethex+0x318>
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d115      	bne.n	80055fe <__gethex+0x2ee>
 80055d2:	42ae      	cmp	r6, r5
 80055d4:	d113      	bne.n	80055fe <__gethex+0x2ee>
 80055d6:	2e01      	cmp	r6, #1
 80055d8:	d10b      	bne.n	80055f2 <__gethex+0x2e2>
 80055da:	9a04      	ldr	r2, [sp, #16]
 80055dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	2301      	movs	r3, #1
 80055e4:	6123      	str	r3, [r4, #16]
 80055e6:	f8c9 3000 	str.w	r3, [r9]
 80055ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80055ec:	2762      	movs	r7, #98	; 0x62
 80055ee:	601c      	str	r4, [r3, #0]
 80055f0:	e723      	b.n	800543a <__gethex+0x12a>
 80055f2:	1e71      	subs	r1, r6, #1
 80055f4:	4620      	mov	r0, r4
 80055f6:	f000 fe59 	bl	80062ac <__any_on>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d1ed      	bne.n	80055da <__gethex+0x2ca>
 80055fe:	ee18 0a10 	vmov	r0, s16
 8005602:	4621      	mov	r1, r4
 8005604:	f000 f9f8 	bl	80059f8 <_Bfree>
 8005608:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800560a:	2300      	movs	r3, #0
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	2750      	movs	r7, #80	; 0x50
 8005610:	e713      	b.n	800543a <__gethex+0x12a>
 8005612:	bf00      	nop
 8005614:	08007720 	.word	0x08007720
 8005618:	080076a3 	.word	0x080076a3
 800561c:	080076b4 	.word	0x080076b4
 8005620:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1eb      	bne.n	80055fe <__gethex+0x2ee>
 8005626:	e7d8      	b.n	80055da <__gethex+0x2ca>
 8005628:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1d5      	bne.n	80055da <__gethex+0x2ca>
 800562e:	e7e6      	b.n	80055fe <__gethex+0x2ee>
 8005630:	1e6f      	subs	r7, r5, #1
 8005632:	f1ba 0f00 	cmp.w	sl, #0
 8005636:	d131      	bne.n	800569c <__gethex+0x38c>
 8005638:	b127      	cbz	r7, 8005644 <__gethex+0x334>
 800563a:	4639      	mov	r1, r7
 800563c:	4620      	mov	r0, r4
 800563e:	f000 fe35 	bl	80062ac <__any_on>
 8005642:	4682      	mov	sl, r0
 8005644:	117b      	asrs	r3, r7, #5
 8005646:	2101      	movs	r1, #1
 8005648:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800564c:	f007 071f 	and.w	r7, r7, #31
 8005650:	fa01 f707 	lsl.w	r7, r1, r7
 8005654:	421f      	tst	r7, r3
 8005656:	4629      	mov	r1, r5
 8005658:	4620      	mov	r0, r4
 800565a:	bf18      	it	ne
 800565c:	f04a 0a02 	orrne.w	sl, sl, #2
 8005660:	1b76      	subs	r6, r6, r5
 8005662:	f7ff fded 	bl	8005240 <rshift>
 8005666:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800566a:	2702      	movs	r7, #2
 800566c:	f1ba 0f00 	cmp.w	sl, #0
 8005670:	d048      	beq.n	8005704 <__gethex+0x3f4>
 8005672:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d015      	beq.n	80056a6 <__gethex+0x396>
 800567a:	2b03      	cmp	r3, #3
 800567c:	d017      	beq.n	80056ae <__gethex+0x39e>
 800567e:	2b01      	cmp	r3, #1
 8005680:	d109      	bne.n	8005696 <__gethex+0x386>
 8005682:	f01a 0f02 	tst.w	sl, #2
 8005686:	d006      	beq.n	8005696 <__gethex+0x386>
 8005688:	f8d9 0000 	ldr.w	r0, [r9]
 800568c:	ea4a 0a00 	orr.w	sl, sl, r0
 8005690:	f01a 0f01 	tst.w	sl, #1
 8005694:	d10e      	bne.n	80056b4 <__gethex+0x3a4>
 8005696:	f047 0710 	orr.w	r7, r7, #16
 800569a:	e033      	b.n	8005704 <__gethex+0x3f4>
 800569c:	f04f 0a01 	mov.w	sl, #1
 80056a0:	e7d0      	b.n	8005644 <__gethex+0x334>
 80056a2:	2701      	movs	r7, #1
 80056a4:	e7e2      	b.n	800566c <__gethex+0x35c>
 80056a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056a8:	f1c3 0301 	rsb	r3, r3, #1
 80056ac:	9315      	str	r3, [sp, #84]	; 0x54
 80056ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f0      	beq.n	8005696 <__gethex+0x386>
 80056b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80056b8:	f104 0314 	add.w	r3, r4, #20
 80056bc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80056c0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80056c4:	f04f 0c00 	mov.w	ip, #0
 80056c8:	4618      	mov	r0, r3
 80056ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ce:	f1b2 3fff 	cmp.w	r2, #4294967295
 80056d2:	d01c      	beq.n	800570e <__gethex+0x3fe>
 80056d4:	3201      	adds	r2, #1
 80056d6:	6002      	str	r2, [r0, #0]
 80056d8:	2f02      	cmp	r7, #2
 80056da:	f104 0314 	add.w	r3, r4, #20
 80056de:	d13f      	bne.n	8005760 <__gethex+0x450>
 80056e0:	f8d8 2000 	ldr.w	r2, [r8]
 80056e4:	3a01      	subs	r2, #1
 80056e6:	42b2      	cmp	r2, r6
 80056e8:	d10a      	bne.n	8005700 <__gethex+0x3f0>
 80056ea:	1171      	asrs	r1, r6, #5
 80056ec:	2201      	movs	r2, #1
 80056ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80056f2:	f006 061f 	and.w	r6, r6, #31
 80056f6:	fa02 f606 	lsl.w	r6, r2, r6
 80056fa:	421e      	tst	r6, r3
 80056fc:	bf18      	it	ne
 80056fe:	4617      	movne	r7, r2
 8005700:	f047 0720 	orr.w	r7, r7, #32
 8005704:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005706:	601c      	str	r4, [r3, #0]
 8005708:	9b04      	ldr	r3, [sp, #16]
 800570a:	601d      	str	r5, [r3, #0]
 800570c:	e695      	b.n	800543a <__gethex+0x12a>
 800570e:	4299      	cmp	r1, r3
 8005710:	f843 cc04 	str.w	ip, [r3, #-4]
 8005714:	d8d8      	bhi.n	80056c8 <__gethex+0x3b8>
 8005716:	68a3      	ldr	r3, [r4, #8]
 8005718:	459b      	cmp	fp, r3
 800571a:	db19      	blt.n	8005750 <__gethex+0x440>
 800571c:	6861      	ldr	r1, [r4, #4]
 800571e:	ee18 0a10 	vmov	r0, s16
 8005722:	3101      	adds	r1, #1
 8005724:	f000 f928 	bl	8005978 <_Balloc>
 8005728:	4681      	mov	r9, r0
 800572a:	b918      	cbnz	r0, 8005734 <__gethex+0x424>
 800572c:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <__gethex+0x488>)
 800572e:	4602      	mov	r2, r0
 8005730:	2184      	movs	r1, #132	; 0x84
 8005732:	e6a8      	b.n	8005486 <__gethex+0x176>
 8005734:	6922      	ldr	r2, [r4, #16]
 8005736:	3202      	adds	r2, #2
 8005738:	f104 010c 	add.w	r1, r4, #12
 800573c:	0092      	lsls	r2, r2, #2
 800573e:	300c      	adds	r0, #12
 8005740:	f000 f90c 	bl	800595c <memcpy>
 8005744:	4621      	mov	r1, r4
 8005746:	ee18 0a10 	vmov	r0, s16
 800574a:	f000 f955 	bl	80059f8 <_Bfree>
 800574e:	464c      	mov	r4, r9
 8005750:	6923      	ldr	r3, [r4, #16]
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005758:	6122      	str	r2, [r4, #16]
 800575a:	2201      	movs	r2, #1
 800575c:	615a      	str	r2, [r3, #20]
 800575e:	e7bb      	b.n	80056d8 <__gethex+0x3c8>
 8005760:	6922      	ldr	r2, [r4, #16]
 8005762:	455a      	cmp	r2, fp
 8005764:	dd0b      	ble.n	800577e <__gethex+0x46e>
 8005766:	2101      	movs	r1, #1
 8005768:	4620      	mov	r0, r4
 800576a:	f7ff fd69 	bl	8005240 <rshift>
 800576e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005772:	3501      	adds	r5, #1
 8005774:	42ab      	cmp	r3, r5
 8005776:	f6ff aed0 	blt.w	800551a <__gethex+0x20a>
 800577a:	2701      	movs	r7, #1
 800577c:	e7c0      	b.n	8005700 <__gethex+0x3f0>
 800577e:	f016 061f 	ands.w	r6, r6, #31
 8005782:	d0fa      	beq.n	800577a <__gethex+0x46a>
 8005784:	449a      	add	sl, r3
 8005786:	f1c6 0620 	rsb	r6, r6, #32
 800578a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800578e:	f000 f9e9 	bl	8005b64 <__hi0bits>
 8005792:	42b0      	cmp	r0, r6
 8005794:	dbe7      	blt.n	8005766 <__gethex+0x456>
 8005796:	e7f0      	b.n	800577a <__gethex+0x46a>
 8005798:	080076a3 	.word	0x080076a3

0800579c <L_shift>:
 800579c:	f1c2 0208 	rsb	r2, r2, #8
 80057a0:	0092      	lsls	r2, r2, #2
 80057a2:	b570      	push	{r4, r5, r6, lr}
 80057a4:	f1c2 0620 	rsb	r6, r2, #32
 80057a8:	6843      	ldr	r3, [r0, #4]
 80057aa:	6804      	ldr	r4, [r0, #0]
 80057ac:	fa03 f506 	lsl.w	r5, r3, r6
 80057b0:	432c      	orrs	r4, r5
 80057b2:	40d3      	lsrs	r3, r2
 80057b4:	6004      	str	r4, [r0, #0]
 80057b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80057ba:	4288      	cmp	r0, r1
 80057bc:	d3f4      	bcc.n	80057a8 <L_shift+0xc>
 80057be:	bd70      	pop	{r4, r5, r6, pc}

080057c0 <__match>:
 80057c0:	b530      	push	{r4, r5, lr}
 80057c2:	6803      	ldr	r3, [r0, #0]
 80057c4:	3301      	adds	r3, #1
 80057c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ca:	b914      	cbnz	r4, 80057d2 <__match+0x12>
 80057cc:	6003      	str	r3, [r0, #0]
 80057ce:	2001      	movs	r0, #1
 80057d0:	bd30      	pop	{r4, r5, pc}
 80057d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80057da:	2d19      	cmp	r5, #25
 80057dc:	bf98      	it	ls
 80057de:	3220      	addls	r2, #32
 80057e0:	42a2      	cmp	r2, r4
 80057e2:	d0f0      	beq.n	80057c6 <__match+0x6>
 80057e4:	2000      	movs	r0, #0
 80057e6:	e7f3      	b.n	80057d0 <__match+0x10>

080057e8 <__hexnan>:
 80057e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ec:	680b      	ldr	r3, [r1, #0]
 80057ee:	6801      	ldr	r1, [r0, #0]
 80057f0:	115e      	asrs	r6, r3, #5
 80057f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80057f6:	f013 031f 	ands.w	r3, r3, #31
 80057fa:	b087      	sub	sp, #28
 80057fc:	bf18      	it	ne
 80057fe:	3604      	addne	r6, #4
 8005800:	2500      	movs	r5, #0
 8005802:	1f37      	subs	r7, r6, #4
 8005804:	4682      	mov	sl, r0
 8005806:	4690      	mov	r8, r2
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	f846 5c04 	str.w	r5, [r6, #-4]
 800580e:	46b9      	mov	r9, r7
 8005810:	463c      	mov	r4, r7
 8005812:	9502      	str	r5, [sp, #8]
 8005814:	46ab      	mov	fp, r5
 8005816:	784a      	ldrb	r2, [r1, #1]
 8005818:	1c4b      	adds	r3, r1, #1
 800581a:	9303      	str	r3, [sp, #12]
 800581c:	b342      	cbz	r2, 8005870 <__hexnan+0x88>
 800581e:	4610      	mov	r0, r2
 8005820:	9105      	str	r1, [sp, #20]
 8005822:	9204      	str	r2, [sp, #16]
 8005824:	f7ff fd5e 	bl	80052e4 <__hexdig_fun>
 8005828:	2800      	cmp	r0, #0
 800582a:	d14f      	bne.n	80058cc <__hexnan+0xe4>
 800582c:	9a04      	ldr	r2, [sp, #16]
 800582e:	9905      	ldr	r1, [sp, #20]
 8005830:	2a20      	cmp	r2, #32
 8005832:	d818      	bhi.n	8005866 <__hexnan+0x7e>
 8005834:	9b02      	ldr	r3, [sp, #8]
 8005836:	459b      	cmp	fp, r3
 8005838:	dd13      	ble.n	8005862 <__hexnan+0x7a>
 800583a:	454c      	cmp	r4, r9
 800583c:	d206      	bcs.n	800584c <__hexnan+0x64>
 800583e:	2d07      	cmp	r5, #7
 8005840:	dc04      	bgt.n	800584c <__hexnan+0x64>
 8005842:	462a      	mov	r2, r5
 8005844:	4649      	mov	r1, r9
 8005846:	4620      	mov	r0, r4
 8005848:	f7ff ffa8 	bl	800579c <L_shift>
 800584c:	4544      	cmp	r4, r8
 800584e:	d950      	bls.n	80058f2 <__hexnan+0x10a>
 8005850:	2300      	movs	r3, #0
 8005852:	f1a4 0904 	sub.w	r9, r4, #4
 8005856:	f844 3c04 	str.w	r3, [r4, #-4]
 800585a:	f8cd b008 	str.w	fp, [sp, #8]
 800585e:	464c      	mov	r4, r9
 8005860:	461d      	mov	r5, r3
 8005862:	9903      	ldr	r1, [sp, #12]
 8005864:	e7d7      	b.n	8005816 <__hexnan+0x2e>
 8005866:	2a29      	cmp	r2, #41	; 0x29
 8005868:	d156      	bne.n	8005918 <__hexnan+0x130>
 800586a:	3102      	adds	r1, #2
 800586c:	f8ca 1000 	str.w	r1, [sl]
 8005870:	f1bb 0f00 	cmp.w	fp, #0
 8005874:	d050      	beq.n	8005918 <__hexnan+0x130>
 8005876:	454c      	cmp	r4, r9
 8005878:	d206      	bcs.n	8005888 <__hexnan+0xa0>
 800587a:	2d07      	cmp	r5, #7
 800587c:	dc04      	bgt.n	8005888 <__hexnan+0xa0>
 800587e:	462a      	mov	r2, r5
 8005880:	4649      	mov	r1, r9
 8005882:	4620      	mov	r0, r4
 8005884:	f7ff ff8a 	bl	800579c <L_shift>
 8005888:	4544      	cmp	r4, r8
 800588a:	d934      	bls.n	80058f6 <__hexnan+0x10e>
 800588c:	f1a8 0204 	sub.w	r2, r8, #4
 8005890:	4623      	mov	r3, r4
 8005892:	f853 1b04 	ldr.w	r1, [r3], #4
 8005896:	f842 1f04 	str.w	r1, [r2, #4]!
 800589a:	429f      	cmp	r7, r3
 800589c:	d2f9      	bcs.n	8005892 <__hexnan+0xaa>
 800589e:	1b3b      	subs	r3, r7, r4
 80058a0:	f023 0303 	bic.w	r3, r3, #3
 80058a4:	3304      	adds	r3, #4
 80058a6:	3401      	adds	r4, #1
 80058a8:	3e03      	subs	r6, #3
 80058aa:	42b4      	cmp	r4, r6
 80058ac:	bf88      	it	hi
 80058ae:	2304      	movhi	r3, #4
 80058b0:	4443      	add	r3, r8
 80058b2:	2200      	movs	r2, #0
 80058b4:	f843 2b04 	str.w	r2, [r3], #4
 80058b8:	429f      	cmp	r7, r3
 80058ba:	d2fb      	bcs.n	80058b4 <__hexnan+0xcc>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	b91b      	cbnz	r3, 80058c8 <__hexnan+0xe0>
 80058c0:	4547      	cmp	r7, r8
 80058c2:	d127      	bne.n	8005914 <__hexnan+0x12c>
 80058c4:	2301      	movs	r3, #1
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	2005      	movs	r0, #5
 80058ca:	e026      	b.n	800591a <__hexnan+0x132>
 80058cc:	3501      	adds	r5, #1
 80058ce:	2d08      	cmp	r5, #8
 80058d0:	f10b 0b01 	add.w	fp, fp, #1
 80058d4:	dd06      	ble.n	80058e4 <__hexnan+0xfc>
 80058d6:	4544      	cmp	r4, r8
 80058d8:	d9c3      	bls.n	8005862 <__hexnan+0x7a>
 80058da:	2300      	movs	r3, #0
 80058dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80058e0:	2501      	movs	r5, #1
 80058e2:	3c04      	subs	r4, #4
 80058e4:	6822      	ldr	r2, [r4, #0]
 80058e6:	f000 000f 	and.w	r0, r0, #15
 80058ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80058ee:	6022      	str	r2, [r4, #0]
 80058f0:	e7b7      	b.n	8005862 <__hexnan+0x7a>
 80058f2:	2508      	movs	r5, #8
 80058f4:	e7b5      	b.n	8005862 <__hexnan+0x7a>
 80058f6:	9b01      	ldr	r3, [sp, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0df      	beq.n	80058bc <__hexnan+0xd4>
 80058fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005900:	f1c3 0320 	rsb	r3, r3, #32
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
 8005908:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800590c:	401a      	ands	r2, r3
 800590e:	f846 2c04 	str.w	r2, [r6, #-4]
 8005912:	e7d3      	b.n	80058bc <__hexnan+0xd4>
 8005914:	3f04      	subs	r7, #4
 8005916:	e7d1      	b.n	80058bc <__hexnan+0xd4>
 8005918:	2004      	movs	r0, #4
 800591a:	b007      	add	sp, #28
 800591c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005920 <_localeconv_r>:
 8005920:	4800      	ldr	r0, [pc, #0]	; (8005924 <_localeconv_r+0x4>)
 8005922:	4770      	bx	lr
 8005924:	20000160 	.word	0x20000160

08005928 <malloc>:
 8005928:	4b02      	ldr	r3, [pc, #8]	; (8005934 <malloc+0xc>)
 800592a:	4601      	mov	r1, r0
 800592c:	6818      	ldr	r0, [r3, #0]
 800592e:	f000 bd3d 	b.w	80063ac <_malloc_r>
 8005932:	bf00      	nop
 8005934:	20000008 	.word	0x20000008

08005938 <__ascii_mbtowc>:
 8005938:	b082      	sub	sp, #8
 800593a:	b901      	cbnz	r1, 800593e <__ascii_mbtowc+0x6>
 800593c:	a901      	add	r1, sp, #4
 800593e:	b142      	cbz	r2, 8005952 <__ascii_mbtowc+0x1a>
 8005940:	b14b      	cbz	r3, 8005956 <__ascii_mbtowc+0x1e>
 8005942:	7813      	ldrb	r3, [r2, #0]
 8005944:	600b      	str	r3, [r1, #0]
 8005946:	7812      	ldrb	r2, [r2, #0]
 8005948:	1e10      	subs	r0, r2, #0
 800594a:	bf18      	it	ne
 800594c:	2001      	movne	r0, #1
 800594e:	b002      	add	sp, #8
 8005950:	4770      	bx	lr
 8005952:	4610      	mov	r0, r2
 8005954:	e7fb      	b.n	800594e <__ascii_mbtowc+0x16>
 8005956:	f06f 0001 	mvn.w	r0, #1
 800595a:	e7f8      	b.n	800594e <__ascii_mbtowc+0x16>

0800595c <memcpy>:
 800595c:	440a      	add	r2, r1
 800595e:	4291      	cmp	r1, r2
 8005960:	f100 33ff 	add.w	r3, r0, #4294967295
 8005964:	d100      	bne.n	8005968 <memcpy+0xc>
 8005966:	4770      	bx	lr
 8005968:	b510      	push	{r4, lr}
 800596a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800596e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005972:	4291      	cmp	r1, r2
 8005974:	d1f9      	bne.n	800596a <memcpy+0xe>
 8005976:	bd10      	pop	{r4, pc}

08005978 <_Balloc>:
 8005978:	b570      	push	{r4, r5, r6, lr}
 800597a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800597c:	4604      	mov	r4, r0
 800597e:	460d      	mov	r5, r1
 8005980:	b976      	cbnz	r6, 80059a0 <_Balloc+0x28>
 8005982:	2010      	movs	r0, #16
 8005984:	f7ff ffd0 	bl	8005928 <malloc>
 8005988:	4602      	mov	r2, r0
 800598a:	6260      	str	r0, [r4, #36]	; 0x24
 800598c:	b920      	cbnz	r0, 8005998 <_Balloc+0x20>
 800598e:	4b18      	ldr	r3, [pc, #96]	; (80059f0 <_Balloc+0x78>)
 8005990:	4818      	ldr	r0, [pc, #96]	; (80059f4 <_Balloc+0x7c>)
 8005992:	2166      	movs	r1, #102	; 0x66
 8005994:	f000 fef8 	bl	8006788 <__assert_func>
 8005998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800599c:	6006      	str	r6, [r0, #0]
 800599e:	60c6      	str	r6, [r0, #12]
 80059a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059a2:	68f3      	ldr	r3, [r6, #12]
 80059a4:	b183      	cbz	r3, 80059c8 <_Balloc+0x50>
 80059a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059ae:	b9b8      	cbnz	r0, 80059e0 <_Balloc+0x68>
 80059b0:	2101      	movs	r1, #1
 80059b2:	fa01 f605 	lsl.w	r6, r1, r5
 80059b6:	1d72      	adds	r2, r6, #5
 80059b8:	0092      	lsls	r2, r2, #2
 80059ba:	4620      	mov	r0, r4
 80059bc:	f000 fc97 	bl	80062ee <_calloc_r>
 80059c0:	b160      	cbz	r0, 80059dc <_Balloc+0x64>
 80059c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059c6:	e00e      	b.n	80059e6 <_Balloc+0x6e>
 80059c8:	2221      	movs	r2, #33	; 0x21
 80059ca:	2104      	movs	r1, #4
 80059cc:	4620      	mov	r0, r4
 80059ce:	f000 fc8e 	bl	80062ee <_calloc_r>
 80059d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059d4:	60f0      	str	r0, [r6, #12]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e4      	bne.n	80059a6 <_Balloc+0x2e>
 80059dc:	2000      	movs	r0, #0
 80059de:	bd70      	pop	{r4, r5, r6, pc}
 80059e0:	6802      	ldr	r2, [r0, #0]
 80059e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80059e6:	2300      	movs	r3, #0
 80059e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80059ec:	e7f7      	b.n	80059de <_Balloc+0x66>
 80059ee:	bf00      	nop
 80059f0:	0800762d 	.word	0x0800762d
 80059f4:	08007734 	.word	0x08007734

080059f8 <_Bfree>:
 80059f8:	b570      	push	{r4, r5, r6, lr}
 80059fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059fc:	4605      	mov	r5, r0
 80059fe:	460c      	mov	r4, r1
 8005a00:	b976      	cbnz	r6, 8005a20 <_Bfree+0x28>
 8005a02:	2010      	movs	r0, #16
 8005a04:	f7ff ff90 	bl	8005928 <malloc>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	6268      	str	r0, [r5, #36]	; 0x24
 8005a0c:	b920      	cbnz	r0, 8005a18 <_Bfree+0x20>
 8005a0e:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <_Bfree+0x3c>)
 8005a10:	4809      	ldr	r0, [pc, #36]	; (8005a38 <_Bfree+0x40>)
 8005a12:	218a      	movs	r1, #138	; 0x8a
 8005a14:	f000 feb8 	bl	8006788 <__assert_func>
 8005a18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a1c:	6006      	str	r6, [r0, #0]
 8005a1e:	60c6      	str	r6, [r0, #12]
 8005a20:	b13c      	cbz	r4, 8005a32 <_Bfree+0x3a>
 8005a22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a24:	6862      	ldr	r2, [r4, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a2c:	6021      	str	r1, [r4, #0]
 8005a2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a32:	bd70      	pop	{r4, r5, r6, pc}
 8005a34:	0800762d 	.word	0x0800762d
 8005a38:	08007734 	.word	0x08007734

08005a3c <__multadd>:
 8005a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a40:	690e      	ldr	r6, [r1, #16]
 8005a42:	4607      	mov	r7, r0
 8005a44:	4698      	mov	r8, r3
 8005a46:	460c      	mov	r4, r1
 8005a48:	f101 0014 	add.w	r0, r1, #20
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	6805      	ldr	r5, [r0, #0]
 8005a50:	b2a9      	uxth	r1, r5
 8005a52:	fb02 8101 	mla	r1, r2, r1, r8
 8005a56:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005a5a:	0c2d      	lsrs	r5, r5, #16
 8005a5c:	fb02 c505 	mla	r5, r2, r5, ip
 8005a60:	b289      	uxth	r1, r1
 8005a62:	3301      	adds	r3, #1
 8005a64:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005a68:	429e      	cmp	r6, r3
 8005a6a:	f840 1b04 	str.w	r1, [r0], #4
 8005a6e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005a72:	dcec      	bgt.n	8005a4e <__multadd+0x12>
 8005a74:	f1b8 0f00 	cmp.w	r8, #0
 8005a78:	d022      	beq.n	8005ac0 <__multadd+0x84>
 8005a7a:	68a3      	ldr	r3, [r4, #8]
 8005a7c:	42b3      	cmp	r3, r6
 8005a7e:	dc19      	bgt.n	8005ab4 <__multadd+0x78>
 8005a80:	6861      	ldr	r1, [r4, #4]
 8005a82:	4638      	mov	r0, r7
 8005a84:	3101      	adds	r1, #1
 8005a86:	f7ff ff77 	bl	8005978 <_Balloc>
 8005a8a:	4605      	mov	r5, r0
 8005a8c:	b928      	cbnz	r0, 8005a9a <__multadd+0x5e>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	4b0d      	ldr	r3, [pc, #52]	; (8005ac8 <__multadd+0x8c>)
 8005a92:	480e      	ldr	r0, [pc, #56]	; (8005acc <__multadd+0x90>)
 8005a94:	21b5      	movs	r1, #181	; 0xb5
 8005a96:	f000 fe77 	bl	8006788 <__assert_func>
 8005a9a:	6922      	ldr	r2, [r4, #16]
 8005a9c:	3202      	adds	r2, #2
 8005a9e:	f104 010c 	add.w	r1, r4, #12
 8005aa2:	0092      	lsls	r2, r2, #2
 8005aa4:	300c      	adds	r0, #12
 8005aa6:	f7ff ff59 	bl	800595c <memcpy>
 8005aaa:	4621      	mov	r1, r4
 8005aac:	4638      	mov	r0, r7
 8005aae:	f7ff ffa3 	bl	80059f8 <_Bfree>
 8005ab2:	462c      	mov	r4, r5
 8005ab4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005ab8:	3601      	adds	r6, #1
 8005aba:	f8c3 8014 	str.w	r8, [r3, #20]
 8005abe:	6126      	str	r6, [r4, #16]
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac6:	bf00      	nop
 8005ac8:	080076a3 	.word	0x080076a3
 8005acc:	08007734 	.word	0x08007734

08005ad0 <__s2b>:
 8005ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	4615      	mov	r5, r2
 8005ad8:	461f      	mov	r7, r3
 8005ada:	2209      	movs	r2, #9
 8005adc:	3308      	adds	r3, #8
 8005ade:	4606      	mov	r6, r0
 8005ae0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	db09      	blt.n	8005b00 <__s2b+0x30>
 8005aec:	4630      	mov	r0, r6
 8005aee:	f7ff ff43 	bl	8005978 <_Balloc>
 8005af2:	b940      	cbnz	r0, 8005b06 <__s2b+0x36>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4b19      	ldr	r3, [pc, #100]	; (8005b5c <__s2b+0x8c>)
 8005af8:	4819      	ldr	r0, [pc, #100]	; (8005b60 <__s2b+0x90>)
 8005afa:	21ce      	movs	r1, #206	; 0xce
 8005afc:	f000 fe44 	bl	8006788 <__assert_func>
 8005b00:	0052      	lsls	r2, r2, #1
 8005b02:	3101      	adds	r1, #1
 8005b04:	e7f0      	b.n	8005ae8 <__s2b+0x18>
 8005b06:	9b08      	ldr	r3, [sp, #32]
 8005b08:	6143      	str	r3, [r0, #20]
 8005b0a:	2d09      	cmp	r5, #9
 8005b0c:	f04f 0301 	mov.w	r3, #1
 8005b10:	6103      	str	r3, [r0, #16]
 8005b12:	dd16      	ble.n	8005b42 <__s2b+0x72>
 8005b14:	f104 0909 	add.w	r9, r4, #9
 8005b18:	46c8      	mov	r8, r9
 8005b1a:	442c      	add	r4, r5
 8005b1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005b20:	4601      	mov	r1, r0
 8005b22:	3b30      	subs	r3, #48	; 0x30
 8005b24:	220a      	movs	r2, #10
 8005b26:	4630      	mov	r0, r6
 8005b28:	f7ff ff88 	bl	8005a3c <__multadd>
 8005b2c:	45a0      	cmp	r8, r4
 8005b2e:	d1f5      	bne.n	8005b1c <__s2b+0x4c>
 8005b30:	f1a5 0408 	sub.w	r4, r5, #8
 8005b34:	444c      	add	r4, r9
 8005b36:	1b2d      	subs	r5, r5, r4
 8005b38:	1963      	adds	r3, r4, r5
 8005b3a:	42bb      	cmp	r3, r7
 8005b3c:	db04      	blt.n	8005b48 <__s2b+0x78>
 8005b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b42:	340a      	adds	r4, #10
 8005b44:	2509      	movs	r5, #9
 8005b46:	e7f6      	b.n	8005b36 <__s2b+0x66>
 8005b48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b4c:	4601      	mov	r1, r0
 8005b4e:	3b30      	subs	r3, #48	; 0x30
 8005b50:	220a      	movs	r2, #10
 8005b52:	4630      	mov	r0, r6
 8005b54:	f7ff ff72 	bl	8005a3c <__multadd>
 8005b58:	e7ee      	b.n	8005b38 <__s2b+0x68>
 8005b5a:	bf00      	nop
 8005b5c:	080076a3 	.word	0x080076a3
 8005b60:	08007734 	.word	0x08007734

08005b64 <__hi0bits>:
 8005b64:	0c03      	lsrs	r3, r0, #16
 8005b66:	041b      	lsls	r3, r3, #16
 8005b68:	b9d3      	cbnz	r3, 8005ba0 <__hi0bits+0x3c>
 8005b6a:	0400      	lsls	r0, r0, #16
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005b72:	bf04      	itt	eq
 8005b74:	0200      	lsleq	r0, r0, #8
 8005b76:	3308      	addeq	r3, #8
 8005b78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005b7c:	bf04      	itt	eq
 8005b7e:	0100      	lsleq	r0, r0, #4
 8005b80:	3304      	addeq	r3, #4
 8005b82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005b86:	bf04      	itt	eq
 8005b88:	0080      	lsleq	r0, r0, #2
 8005b8a:	3302      	addeq	r3, #2
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	db05      	blt.n	8005b9c <__hi0bits+0x38>
 8005b90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005b94:	f103 0301 	add.w	r3, r3, #1
 8005b98:	bf08      	it	eq
 8005b9a:	2320      	moveq	r3, #32
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	4770      	bx	lr
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e7e4      	b.n	8005b6e <__hi0bits+0xa>

08005ba4 <__lo0bits>:
 8005ba4:	6803      	ldr	r3, [r0, #0]
 8005ba6:	f013 0207 	ands.w	r2, r3, #7
 8005baa:	4601      	mov	r1, r0
 8005bac:	d00b      	beq.n	8005bc6 <__lo0bits+0x22>
 8005bae:	07da      	lsls	r2, r3, #31
 8005bb0:	d424      	bmi.n	8005bfc <__lo0bits+0x58>
 8005bb2:	0798      	lsls	r0, r3, #30
 8005bb4:	bf49      	itett	mi
 8005bb6:	085b      	lsrmi	r3, r3, #1
 8005bb8:	089b      	lsrpl	r3, r3, #2
 8005bba:	2001      	movmi	r0, #1
 8005bbc:	600b      	strmi	r3, [r1, #0]
 8005bbe:	bf5c      	itt	pl
 8005bc0:	600b      	strpl	r3, [r1, #0]
 8005bc2:	2002      	movpl	r0, #2
 8005bc4:	4770      	bx	lr
 8005bc6:	b298      	uxth	r0, r3
 8005bc8:	b9b0      	cbnz	r0, 8005bf8 <__lo0bits+0x54>
 8005bca:	0c1b      	lsrs	r3, r3, #16
 8005bcc:	2010      	movs	r0, #16
 8005bce:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005bd2:	bf04      	itt	eq
 8005bd4:	0a1b      	lsreq	r3, r3, #8
 8005bd6:	3008      	addeq	r0, #8
 8005bd8:	071a      	lsls	r2, r3, #28
 8005bda:	bf04      	itt	eq
 8005bdc:	091b      	lsreq	r3, r3, #4
 8005bde:	3004      	addeq	r0, #4
 8005be0:	079a      	lsls	r2, r3, #30
 8005be2:	bf04      	itt	eq
 8005be4:	089b      	lsreq	r3, r3, #2
 8005be6:	3002      	addeq	r0, #2
 8005be8:	07da      	lsls	r2, r3, #31
 8005bea:	d403      	bmi.n	8005bf4 <__lo0bits+0x50>
 8005bec:	085b      	lsrs	r3, r3, #1
 8005bee:	f100 0001 	add.w	r0, r0, #1
 8005bf2:	d005      	beq.n	8005c00 <__lo0bits+0x5c>
 8005bf4:	600b      	str	r3, [r1, #0]
 8005bf6:	4770      	bx	lr
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	e7e8      	b.n	8005bce <__lo0bits+0x2a>
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	4770      	bx	lr
 8005c00:	2020      	movs	r0, #32
 8005c02:	4770      	bx	lr

08005c04 <__i2b>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	460c      	mov	r4, r1
 8005c08:	2101      	movs	r1, #1
 8005c0a:	f7ff feb5 	bl	8005978 <_Balloc>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	b928      	cbnz	r0, 8005c1e <__i2b+0x1a>
 8005c12:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <__i2b+0x24>)
 8005c14:	4805      	ldr	r0, [pc, #20]	; (8005c2c <__i2b+0x28>)
 8005c16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c1a:	f000 fdb5 	bl	8006788 <__assert_func>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	6144      	str	r4, [r0, #20]
 8005c22:	6103      	str	r3, [r0, #16]
 8005c24:	bd10      	pop	{r4, pc}
 8005c26:	bf00      	nop
 8005c28:	080076a3 	.word	0x080076a3
 8005c2c:	08007734 	.word	0x08007734

08005c30 <__multiply>:
 8005c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c34:	4614      	mov	r4, r2
 8005c36:	690a      	ldr	r2, [r1, #16]
 8005c38:	6923      	ldr	r3, [r4, #16]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	bfb8      	it	lt
 8005c3e:	460b      	movlt	r3, r1
 8005c40:	460d      	mov	r5, r1
 8005c42:	bfbc      	itt	lt
 8005c44:	4625      	movlt	r5, r4
 8005c46:	461c      	movlt	r4, r3
 8005c48:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005c4c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005c50:	68ab      	ldr	r3, [r5, #8]
 8005c52:	6869      	ldr	r1, [r5, #4]
 8005c54:	eb0a 0709 	add.w	r7, sl, r9
 8005c58:	42bb      	cmp	r3, r7
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	bfb8      	it	lt
 8005c5e:	3101      	addlt	r1, #1
 8005c60:	f7ff fe8a 	bl	8005978 <_Balloc>
 8005c64:	b930      	cbnz	r0, 8005c74 <__multiply+0x44>
 8005c66:	4602      	mov	r2, r0
 8005c68:	4b42      	ldr	r3, [pc, #264]	; (8005d74 <__multiply+0x144>)
 8005c6a:	4843      	ldr	r0, [pc, #268]	; (8005d78 <__multiply+0x148>)
 8005c6c:	f240 115d 	movw	r1, #349	; 0x15d
 8005c70:	f000 fd8a 	bl	8006788 <__assert_func>
 8005c74:	f100 0614 	add.w	r6, r0, #20
 8005c78:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005c7c:	4633      	mov	r3, r6
 8005c7e:	2200      	movs	r2, #0
 8005c80:	4543      	cmp	r3, r8
 8005c82:	d31e      	bcc.n	8005cc2 <__multiply+0x92>
 8005c84:	f105 0c14 	add.w	ip, r5, #20
 8005c88:	f104 0314 	add.w	r3, r4, #20
 8005c8c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005c90:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005c94:	9202      	str	r2, [sp, #8]
 8005c96:	ebac 0205 	sub.w	r2, ip, r5
 8005c9a:	3a15      	subs	r2, #21
 8005c9c:	f022 0203 	bic.w	r2, r2, #3
 8005ca0:	3204      	adds	r2, #4
 8005ca2:	f105 0115 	add.w	r1, r5, #21
 8005ca6:	458c      	cmp	ip, r1
 8005ca8:	bf38      	it	cc
 8005caa:	2204      	movcc	r2, #4
 8005cac:	9201      	str	r2, [sp, #4]
 8005cae:	9a02      	ldr	r2, [sp, #8]
 8005cb0:	9303      	str	r3, [sp, #12]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d808      	bhi.n	8005cc8 <__multiply+0x98>
 8005cb6:	2f00      	cmp	r7, #0
 8005cb8:	dc55      	bgt.n	8005d66 <__multiply+0x136>
 8005cba:	6107      	str	r7, [r0, #16]
 8005cbc:	b005      	add	sp, #20
 8005cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc2:	f843 2b04 	str.w	r2, [r3], #4
 8005cc6:	e7db      	b.n	8005c80 <__multiply+0x50>
 8005cc8:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ccc:	f1ba 0f00 	cmp.w	sl, #0
 8005cd0:	d020      	beq.n	8005d14 <__multiply+0xe4>
 8005cd2:	f105 0e14 	add.w	lr, r5, #20
 8005cd6:	46b1      	mov	r9, r6
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005cde:	f8d9 b000 	ldr.w	fp, [r9]
 8005ce2:	b2a1      	uxth	r1, r4
 8005ce4:	fa1f fb8b 	uxth.w	fp, fp
 8005ce8:	fb0a b101 	mla	r1, sl, r1, fp
 8005cec:	4411      	add	r1, r2
 8005cee:	f8d9 2000 	ldr.w	r2, [r9]
 8005cf2:	0c24      	lsrs	r4, r4, #16
 8005cf4:	0c12      	lsrs	r2, r2, #16
 8005cf6:	fb0a 2404 	mla	r4, sl, r4, r2
 8005cfa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005cfe:	b289      	uxth	r1, r1
 8005d00:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005d04:	45f4      	cmp	ip, lr
 8005d06:	f849 1b04 	str.w	r1, [r9], #4
 8005d0a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005d0e:	d8e4      	bhi.n	8005cda <__multiply+0xaa>
 8005d10:	9901      	ldr	r1, [sp, #4]
 8005d12:	5072      	str	r2, [r6, r1]
 8005d14:	9a03      	ldr	r2, [sp, #12]
 8005d16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	f1b9 0f00 	cmp.w	r9, #0
 8005d20:	d01f      	beq.n	8005d62 <__multiply+0x132>
 8005d22:	6834      	ldr	r4, [r6, #0]
 8005d24:	f105 0114 	add.w	r1, r5, #20
 8005d28:	46b6      	mov	lr, r6
 8005d2a:	f04f 0a00 	mov.w	sl, #0
 8005d2e:	880a      	ldrh	r2, [r1, #0]
 8005d30:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005d34:	fb09 b202 	mla	r2, r9, r2, fp
 8005d38:	4492      	add	sl, r2
 8005d3a:	b2a4      	uxth	r4, r4
 8005d3c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005d40:	f84e 4b04 	str.w	r4, [lr], #4
 8005d44:	f851 4b04 	ldr.w	r4, [r1], #4
 8005d48:	f8be 2000 	ldrh.w	r2, [lr]
 8005d4c:	0c24      	lsrs	r4, r4, #16
 8005d4e:	fb09 2404 	mla	r4, r9, r4, r2
 8005d52:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005d56:	458c      	cmp	ip, r1
 8005d58:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d5c:	d8e7      	bhi.n	8005d2e <__multiply+0xfe>
 8005d5e:	9a01      	ldr	r2, [sp, #4]
 8005d60:	50b4      	str	r4, [r6, r2]
 8005d62:	3604      	adds	r6, #4
 8005d64:	e7a3      	b.n	8005cae <__multiply+0x7e>
 8005d66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1a5      	bne.n	8005cba <__multiply+0x8a>
 8005d6e:	3f01      	subs	r7, #1
 8005d70:	e7a1      	b.n	8005cb6 <__multiply+0x86>
 8005d72:	bf00      	nop
 8005d74:	080076a3 	.word	0x080076a3
 8005d78:	08007734 	.word	0x08007734

08005d7c <__pow5mult>:
 8005d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d80:	4615      	mov	r5, r2
 8005d82:	f012 0203 	ands.w	r2, r2, #3
 8005d86:	4606      	mov	r6, r0
 8005d88:	460f      	mov	r7, r1
 8005d8a:	d007      	beq.n	8005d9c <__pow5mult+0x20>
 8005d8c:	4c25      	ldr	r4, [pc, #148]	; (8005e24 <__pow5mult+0xa8>)
 8005d8e:	3a01      	subs	r2, #1
 8005d90:	2300      	movs	r3, #0
 8005d92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d96:	f7ff fe51 	bl	8005a3c <__multadd>
 8005d9a:	4607      	mov	r7, r0
 8005d9c:	10ad      	asrs	r5, r5, #2
 8005d9e:	d03d      	beq.n	8005e1c <__pow5mult+0xa0>
 8005da0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005da2:	b97c      	cbnz	r4, 8005dc4 <__pow5mult+0x48>
 8005da4:	2010      	movs	r0, #16
 8005da6:	f7ff fdbf 	bl	8005928 <malloc>
 8005daa:	4602      	mov	r2, r0
 8005dac:	6270      	str	r0, [r6, #36]	; 0x24
 8005dae:	b928      	cbnz	r0, 8005dbc <__pow5mult+0x40>
 8005db0:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <__pow5mult+0xac>)
 8005db2:	481e      	ldr	r0, [pc, #120]	; (8005e2c <__pow5mult+0xb0>)
 8005db4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005db8:	f000 fce6 	bl	8006788 <__assert_func>
 8005dbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dc0:	6004      	str	r4, [r0, #0]
 8005dc2:	60c4      	str	r4, [r0, #12]
 8005dc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005dc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005dcc:	b94c      	cbnz	r4, 8005de2 <__pow5mult+0x66>
 8005dce:	f240 2171 	movw	r1, #625	; 0x271
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f7ff ff16 	bl	8005c04 <__i2b>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f8c8 0008 	str.w	r0, [r8, #8]
 8005dde:	4604      	mov	r4, r0
 8005de0:	6003      	str	r3, [r0, #0]
 8005de2:	f04f 0900 	mov.w	r9, #0
 8005de6:	07eb      	lsls	r3, r5, #31
 8005de8:	d50a      	bpl.n	8005e00 <__pow5mult+0x84>
 8005dea:	4639      	mov	r1, r7
 8005dec:	4622      	mov	r2, r4
 8005dee:	4630      	mov	r0, r6
 8005df0:	f7ff ff1e 	bl	8005c30 <__multiply>
 8005df4:	4639      	mov	r1, r7
 8005df6:	4680      	mov	r8, r0
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f7ff fdfd 	bl	80059f8 <_Bfree>
 8005dfe:	4647      	mov	r7, r8
 8005e00:	106d      	asrs	r5, r5, #1
 8005e02:	d00b      	beq.n	8005e1c <__pow5mult+0xa0>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	b938      	cbnz	r0, 8005e18 <__pow5mult+0x9c>
 8005e08:	4622      	mov	r2, r4
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f7ff ff0f 	bl	8005c30 <__multiply>
 8005e12:	6020      	str	r0, [r4, #0]
 8005e14:	f8c0 9000 	str.w	r9, [r0]
 8005e18:	4604      	mov	r4, r0
 8005e1a:	e7e4      	b.n	8005de6 <__pow5mult+0x6a>
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e22:	bf00      	nop
 8005e24:	08007888 	.word	0x08007888
 8005e28:	0800762d 	.word	0x0800762d
 8005e2c:	08007734 	.word	0x08007734

08005e30 <__lshift>:
 8005e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e34:	460c      	mov	r4, r1
 8005e36:	6849      	ldr	r1, [r1, #4]
 8005e38:	6923      	ldr	r3, [r4, #16]
 8005e3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e3e:	68a3      	ldr	r3, [r4, #8]
 8005e40:	4607      	mov	r7, r0
 8005e42:	4691      	mov	r9, r2
 8005e44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e48:	f108 0601 	add.w	r6, r8, #1
 8005e4c:	42b3      	cmp	r3, r6
 8005e4e:	db0b      	blt.n	8005e68 <__lshift+0x38>
 8005e50:	4638      	mov	r0, r7
 8005e52:	f7ff fd91 	bl	8005978 <_Balloc>
 8005e56:	4605      	mov	r5, r0
 8005e58:	b948      	cbnz	r0, 8005e6e <__lshift+0x3e>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	4b28      	ldr	r3, [pc, #160]	; (8005f00 <__lshift+0xd0>)
 8005e5e:	4829      	ldr	r0, [pc, #164]	; (8005f04 <__lshift+0xd4>)
 8005e60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e64:	f000 fc90 	bl	8006788 <__assert_func>
 8005e68:	3101      	adds	r1, #1
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	e7ee      	b.n	8005e4c <__lshift+0x1c>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f100 0114 	add.w	r1, r0, #20
 8005e74:	f100 0210 	add.w	r2, r0, #16
 8005e78:	4618      	mov	r0, r3
 8005e7a:	4553      	cmp	r3, sl
 8005e7c:	db33      	blt.n	8005ee6 <__lshift+0xb6>
 8005e7e:	6920      	ldr	r0, [r4, #16]
 8005e80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e84:	f104 0314 	add.w	r3, r4, #20
 8005e88:	f019 091f 	ands.w	r9, r9, #31
 8005e8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e94:	d02b      	beq.n	8005eee <__lshift+0xbe>
 8005e96:	f1c9 0e20 	rsb	lr, r9, #32
 8005e9a:	468a      	mov	sl, r1
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	fa00 f009 	lsl.w	r0, r0, r9
 8005ea4:	4302      	orrs	r2, r0
 8005ea6:	f84a 2b04 	str.w	r2, [sl], #4
 8005eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005eae:	459c      	cmp	ip, r3
 8005eb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8005eb4:	d8f3      	bhi.n	8005e9e <__lshift+0x6e>
 8005eb6:	ebac 0304 	sub.w	r3, ip, r4
 8005eba:	3b15      	subs	r3, #21
 8005ebc:	f023 0303 	bic.w	r3, r3, #3
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	f104 0015 	add.w	r0, r4, #21
 8005ec6:	4584      	cmp	ip, r0
 8005ec8:	bf38      	it	cc
 8005eca:	2304      	movcc	r3, #4
 8005ecc:	50ca      	str	r2, [r1, r3]
 8005ece:	b10a      	cbz	r2, 8005ed4 <__lshift+0xa4>
 8005ed0:	f108 0602 	add.w	r6, r8, #2
 8005ed4:	3e01      	subs	r6, #1
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	612e      	str	r6, [r5, #16]
 8005eda:	4621      	mov	r1, r4
 8005edc:	f7ff fd8c 	bl	80059f8 <_Bfree>
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee6:	f842 0f04 	str.w	r0, [r2, #4]!
 8005eea:	3301      	adds	r3, #1
 8005eec:	e7c5      	b.n	8005e7a <__lshift+0x4a>
 8005eee:	3904      	subs	r1, #4
 8005ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef4:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ef8:	459c      	cmp	ip, r3
 8005efa:	d8f9      	bhi.n	8005ef0 <__lshift+0xc0>
 8005efc:	e7ea      	b.n	8005ed4 <__lshift+0xa4>
 8005efe:	bf00      	nop
 8005f00:	080076a3 	.word	0x080076a3
 8005f04:	08007734 	.word	0x08007734

08005f08 <__mcmp>:
 8005f08:	b530      	push	{r4, r5, lr}
 8005f0a:	6902      	ldr	r2, [r0, #16]
 8005f0c:	690c      	ldr	r4, [r1, #16]
 8005f0e:	1b12      	subs	r2, r2, r4
 8005f10:	d10e      	bne.n	8005f30 <__mcmp+0x28>
 8005f12:	f100 0314 	add.w	r3, r0, #20
 8005f16:	3114      	adds	r1, #20
 8005f18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005f1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005f20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005f24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005f28:	42a5      	cmp	r5, r4
 8005f2a:	d003      	beq.n	8005f34 <__mcmp+0x2c>
 8005f2c:	d305      	bcc.n	8005f3a <__mcmp+0x32>
 8005f2e:	2201      	movs	r2, #1
 8005f30:	4610      	mov	r0, r2
 8005f32:	bd30      	pop	{r4, r5, pc}
 8005f34:	4283      	cmp	r3, r0
 8005f36:	d3f3      	bcc.n	8005f20 <__mcmp+0x18>
 8005f38:	e7fa      	b.n	8005f30 <__mcmp+0x28>
 8005f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f3e:	e7f7      	b.n	8005f30 <__mcmp+0x28>

08005f40 <__mdiff>:
 8005f40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	460c      	mov	r4, r1
 8005f46:	4606      	mov	r6, r0
 8005f48:	4611      	mov	r1, r2
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	4617      	mov	r7, r2
 8005f4e:	f7ff ffdb 	bl	8005f08 <__mcmp>
 8005f52:	1e05      	subs	r5, r0, #0
 8005f54:	d110      	bne.n	8005f78 <__mdiff+0x38>
 8005f56:	4629      	mov	r1, r5
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f7ff fd0d 	bl	8005978 <_Balloc>
 8005f5e:	b930      	cbnz	r0, 8005f6e <__mdiff+0x2e>
 8005f60:	4b39      	ldr	r3, [pc, #228]	; (8006048 <__mdiff+0x108>)
 8005f62:	4602      	mov	r2, r0
 8005f64:	f240 2132 	movw	r1, #562	; 0x232
 8005f68:	4838      	ldr	r0, [pc, #224]	; (800604c <__mdiff+0x10c>)
 8005f6a:	f000 fc0d 	bl	8006788 <__assert_func>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f78:	bfa4      	itt	ge
 8005f7a:	463b      	movge	r3, r7
 8005f7c:	4627      	movge	r7, r4
 8005f7e:	4630      	mov	r0, r6
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	bfa6      	itte	ge
 8005f84:	461c      	movge	r4, r3
 8005f86:	2500      	movge	r5, #0
 8005f88:	2501      	movlt	r5, #1
 8005f8a:	f7ff fcf5 	bl	8005978 <_Balloc>
 8005f8e:	b920      	cbnz	r0, 8005f9a <__mdiff+0x5a>
 8005f90:	4b2d      	ldr	r3, [pc, #180]	; (8006048 <__mdiff+0x108>)
 8005f92:	4602      	mov	r2, r0
 8005f94:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f98:	e7e6      	b.n	8005f68 <__mdiff+0x28>
 8005f9a:	693e      	ldr	r6, [r7, #16]
 8005f9c:	60c5      	str	r5, [r0, #12]
 8005f9e:	6925      	ldr	r5, [r4, #16]
 8005fa0:	f107 0114 	add.w	r1, r7, #20
 8005fa4:	f104 0914 	add.w	r9, r4, #20
 8005fa8:	f100 0e14 	add.w	lr, r0, #20
 8005fac:	f107 0210 	add.w	r2, r7, #16
 8005fb0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005fb4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005fb8:	46f2      	mov	sl, lr
 8005fba:	2700      	movs	r7, #0
 8005fbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8005fc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005fc4:	fa1f f883 	uxth.w	r8, r3
 8005fc8:	fa17 f78b 	uxtah	r7, r7, fp
 8005fcc:	0c1b      	lsrs	r3, r3, #16
 8005fce:	eba7 0808 	sub.w	r8, r7, r8
 8005fd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005fd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005fda:	fa1f f888 	uxth.w	r8, r8
 8005fde:	141f      	asrs	r7, r3, #16
 8005fe0:	454d      	cmp	r5, r9
 8005fe2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005fe6:	f84a 3b04 	str.w	r3, [sl], #4
 8005fea:	d8e7      	bhi.n	8005fbc <__mdiff+0x7c>
 8005fec:	1b2b      	subs	r3, r5, r4
 8005fee:	3b15      	subs	r3, #21
 8005ff0:	f023 0303 	bic.w	r3, r3, #3
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	3415      	adds	r4, #21
 8005ff8:	42a5      	cmp	r5, r4
 8005ffa:	bf38      	it	cc
 8005ffc:	2304      	movcc	r3, #4
 8005ffe:	4419      	add	r1, r3
 8006000:	4473      	add	r3, lr
 8006002:	469e      	mov	lr, r3
 8006004:	460d      	mov	r5, r1
 8006006:	4565      	cmp	r5, ip
 8006008:	d30e      	bcc.n	8006028 <__mdiff+0xe8>
 800600a:	f10c 0203 	add.w	r2, ip, #3
 800600e:	1a52      	subs	r2, r2, r1
 8006010:	f022 0203 	bic.w	r2, r2, #3
 8006014:	3903      	subs	r1, #3
 8006016:	458c      	cmp	ip, r1
 8006018:	bf38      	it	cc
 800601a:	2200      	movcc	r2, #0
 800601c:	441a      	add	r2, r3
 800601e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006022:	b17b      	cbz	r3, 8006044 <__mdiff+0x104>
 8006024:	6106      	str	r6, [r0, #16]
 8006026:	e7a5      	b.n	8005f74 <__mdiff+0x34>
 8006028:	f855 8b04 	ldr.w	r8, [r5], #4
 800602c:	fa17 f488 	uxtah	r4, r7, r8
 8006030:	1422      	asrs	r2, r4, #16
 8006032:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006036:	b2a4      	uxth	r4, r4
 8006038:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800603c:	f84e 4b04 	str.w	r4, [lr], #4
 8006040:	1417      	asrs	r7, r2, #16
 8006042:	e7e0      	b.n	8006006 <__mdiff+0xc6>
 8006044:	3e01      	subs	r6, #1
 8006046:	e7ea      	b.n	800601e <__mdiff+0xde>
 8006048:	080076a3 	.word	0x080076a3
 800604c:	08007734 	.word	0x08007734

08006050 <__ulp>:
 8006050:	b082      	sub	sp, #8
 8006052:	ed8d 0b00 	vstr	d0, [sp]
 8006056:	9b01      	ldr	r3, [sp, #4]
 8006058:	4912      	ldr	r1, [pc, #72]	; (80060a4 <__ulp+0x54>)
 800605a:	4019      	ands	r1, r3
 800605c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006060:	2900      	cmp	r1, #0
 8006062:	dd05      	ble.n	8006070 <__ulp+0x20>
 8006064:	2200      	movs	r2, #0
 8006066:	460b      	mov	r3, r1
 8006068:	ec43 2b10 	vmov	d0, r2, r3
 800606c:	b002      	add	sp, #8
 800606e:	4770      	bx	lr
 8006070:	4249      	negs	r1, r1
 8006072:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006076:	ea4f 5021 	mov.w	r0, r1, asr #20
 800607a:	f04f 0200 	mov.w	r2, #0
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	da04      	bge.n	800608e <__ulp+0x3e>
 8006084:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006088:	fa41 f300 	asr.w	r3, r1, r0
 800608c:	e7ec      	b.n	8006068 <__ulp+0x18>
 800608e:	f1a0 0114 	sub.w	r1, r0, #20
 8006092:	291e      	cmp	r1, #30
 8006094:	bfda      	itte	le
 8006096:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800609a:	fa20 f101 	lsrle.w	r1, r0, r1
 800609e:	2101      	movgt	r1, #1
 80060a0:	460a      	mov	r2, r1
 80060a2:	e7e1      	b.n	8006068 <__ulp+0x18>
 80060a4:	7ff00000 	.word	0x7ff00000

080060a8 <__b2d>:
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060aa:	6905      	ldr	r5, [r0, #16]
 80060ac:	f100 0714 	add.w	r7, r0, #20
 80060b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80060b4:	1f2e      	subs	r6, r5, #4
 80060b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80060ba:	4620      	mov	r0, r4
 80060bc:	f7ff fd52 	bl	8005b64 <__hi0bits>
 80060c0:	f1c0 0320 	rsb	r3, r0, #32
 80060c4:	280a      	cmp	r0, #10
 80060c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006144 <__b2d+0x9c>
 80060ca:	600b      	str	r3, [r1, #0]
 80060cc:	dc14      	bgt.n	80060f8 <__b2d+0x50>
 80060ce:	f1c0 0e0b 	rsb	lr, r0, #11
 80060d2:	fa24 f10e 	lsr.w	r1, r4, lr
 80060d6:	42b7      	cmp	r7, r6
 80060d8:	ea41 030c 	orr.w	r3, r1, ip
 80060dc:	bf34      	ite	cc
 80060de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80060e2:	2100      	movcs	r1, #0
 80060e4:	3015      	adds	r0, #21
 80060e6:	fa04 f000 	lsl.w	r0, r4, r0
 80060ea:	fa21 f10e 	lsr.w	r1, r1, lr
 80060ee:	ea40 0201 	orr.w	r2, r0, r1
 80060f2:	ec43 2b10 	vmov	d0, r2, r3
 80060f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060f8:	42b7      	cmp	r7, r6
 80060fa:	bf3a      	itte	cc
 80060fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006100:	f1a5 0608 	subcc.w	r6, r5, #8
 8006104:	2100      	movcs	r1, #0
 8006106:	380b      	subs	r0, #11
 8006108:	d017      	beq.n	800613a <__b2d+0x92>
 800610a:	f1c0 0c20 	rsb	ip, r0, #32
 800610e:	fa04 f500 	lsl.w	r5, r4, r0
 8006112:	42be      	cmp	r6, r7
 8006114:	fa21 f40c 	lsr.w	r4, r1, ip
 8006118:	ea45 0504 	orr.w	r5, r5, r4
 800611c:	bf8c      	ite	hi
 800611e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006122:	2400      	movls	r4, #0
 8006124:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006128:	fa01 f000 	lsl.w	r0, r1, r0
 800612c:	fa24 f40c 	lsr.w	r4, r4, ip
 8006130:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006134:	ea40 0204 	orr.w	r2, r0, r4
 8006138:	e7db      	b.n	80060f2 <__b2d+0x4a>
 800613a:	ea44 030c 	orr.w	r3, r4, ip
 800613e:	460a      	mov	r2, r1
 8006140:	e7d7      	b.n	80060f2 <__b2d+0x4a>
 8006142:	bf00      	nop
 8006144:	3ff00000 	.word	0x3ff00000

08006148 <__d2b>:
 8006148:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800614c:	4689      	mov	r9, r1
 800614e:	2101      	movs	r1, #1
 8006150:	ec57 6b10 	vmov	r6, r7, d0
 8006154:	4690      	mov	r8, r2
 8006156:	f7ff fc0f 	bl	8005978 <_Balloc>
 800615a:	4604      	mov	r4, r0
 800615c:	b930      	cbnz	r0, 800616c <__d2b+0x24>
 800615e:	4602      	mov	r2, r0
 8006160:	4b25      	ldr	r3, [pc, #148]	; (80061f8 <__d2b+0xb0>)
 8006162:	4826      	ldr	r0, [pc, #152]	; (80061fc <__d2b+0xb4>)
 8006164:	f240 310a 	movw	r1, #778	; 0x30a
 8006168:	f000 fb0e 	bl	8006788 <__assert_func>
 800616c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006170:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006174:	bb35      	cbnz	r5, 80061c4 <__d2b+0x7c>
 8006176:	2e00      	cmp	r6, #0
 8006178:	9301      	str	r3, [sp, #4]
 800617a:	d028      	beq.n	80061ce <__d2b+0x86>
 800617c:	4668      	mov	r0, sp
 800617e:	9600      	str	r6, [sp, #0]
 8006180:	f7ff fd10 	bl	8005ba4 <__lo0bits>
 8006184:	9900      	ldr	r1, [sp, #0]
 8006186:	b300      	cbz	r0, 80061ca <__d2b+0x82>
 8006188:	9a01      	ldr	r2, [sp, #4]
 800618a:	f1c0 0320 	rsb	r3, r0, #32
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	430b      	orrs	r3, r1
 8006194:	40c2      	lsrs	r2, r0
 8006196:	6163      	str	r3, [r4, #20]
 8006198:	9201      	str	r2, [sp, #4]
 800619a:	9b01      	ldr	r3, [sp, #4]
 800619c:	61a3      	str	r3, [r4, #24]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bf14      	ite	ne
 80061a2:	2202      	movne	r2, #2
 80061a4:	2201      	moveq	r2, #1
 80061a6:	6122      	str	r2, [r4, #16]
 80061a8:	b1d5      	cbz	r5, 80061e0 <__d2b+0x98>
 80061aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80061ae:	4405      	add	r5, r0
 80061b0:	f8c9 5000 	str.w	r5, [r9]
 80061b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80061b8:	f8c8 0000 	str.w	r0, [r8]
 80061bc:	4620      	mov	r0, r4
 80061be:	b003      	add	sp, #12
 80061c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061c8:	e7d5      	b.n	8006176 <__d2b+0x2e>
 80061ca:	6161      	str	r1, [r4, #20]
 80061cc:	e7e5      	b.n	800619a <__d2b+0x52>
 80061ce:	a801      	add	r0, sp, #4
 80061d0:	f7ff fce8 	bl	8005ba4 <__lo0bits>
 80061d4:	9b01      	ldr	r3, [sp, #4]
 80061d6:	6163      	str	r3, [r4, #20]
 80061d8:	2201      	movs	r2, #1
 80061da:	6122      	str	r2, [r4, #16]
 80061dc:	3020      	adds	r0, #32
 80061de:	e7e3      	b.n	80061a8 <__d2b+0x60>
 80061e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80061e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80061e8:	f8c9 0000 	str.w	r0, [r9]
 80061ec:	6918      	ldr	r0, [r3, #16]
 80061ee:	f7ff fcb9 	bl	8005b64 <__hi0bits>
 80061f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80061f6:	e7df      	b.n	80061b8 <__d2b+0x70>
 80061f8:	080076a3 	.word	0x080076a3
 80061fc:	08007734 	.word	0x08007734

08006200 <__ratio>:
 8006200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	4688      	mov	r8, r1
 8006206:	4669      	mov	r1, sp
 8006208:	4681      	mov	r9, r0
 800620a:	f7ff ff4d 	bl	80060a8 <__b2d>
 800620e:	a901      	add	r1, sp, #4
 8006210:	4640      	mov	r0, r8
 8006212:	ec55 4b10 	vmov	r4, r5, d0
 8006216:	f7ff ff47 	bl	80060a8 <__b2d>
 800621a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800621e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006222:	eba3 0c02 	sub.w	ip, r3, r2
 8006226:	e9dd 3200 	ldrd	r3, r2, [sp]
 800622a:	1a9b      	subs	r3, r3, r2
 800622c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006230:	ec51 0b10 	vmov	r0, r1, d0
 8006234:	2b00      	cmp	r3, #0
 8006236:	bfd6      	itet	le
 8006238:	460a      	movle	r2, r1
 800623a:	462a      	movgt	r2, r5
 800623c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006240:	468b      	mov	fp, r1
 8006242:	462f      	mov	r7, r5
 8006244:	bfd4      	ite	le
 8006246:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800624a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800624e:	4620      	mov	r0, r4
 8006250:	ee10 2a10 	vmov	r2, s0
 8006254:	465b      	mov	r3, fp
 8006256:	4639      	mov	r1, r7
 8006258:	f7fa fb00 	bl	800085c <__aeabi_ddiv>
 800625c:	ec41 0b10 	vmov	d0, r0, r1
 8006260:	b003      	add	sp, #12
 8006262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006266 <__copybits>:
 8006266:	3901      	subs	r1, #1
 8006268:	b570      	push	{r4, r5, r6, lr}
 800626a:	1149      	asrs	r1, r1, #5
 800626c:	6914      	ldr	r4, [r2, #16]
 800626e:	3101      	adds	r1, #1
 8006270:	f102 0314 	add.w	r3, r2, #20
 8006274:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006278:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800627c:	1f05      	subs	r5, r0, #4
 800627e:	42a3      	cmp	r3, r4
 8006280:	d30c      	bcc.n	800629c <__copybits+0x36>
 8006282:	1aa3      	subs	r3, r4, r2
 8006284:	3b11      	subs	r3, #17
 8006286:	f023 0303 	bic.w	r3, r3, #3
 800628a:	3211      	adds	r2, #17
 800628c:	42a2      	cmp	r2, r4
 800628e:	bf88      	it	hi
 8006290:	2300      	movhi	r3, #0
 8006292:	4418      	add	r0, r3
 8006294:	2300      	movs	r3, #0
 8006296:	4288      	cmp	r0, r1
 8006298:	d305      	bcc.n	80062a6 <__copybits+0x40>
 800629a:	bd70      	pop	{r4, r5, r6, pc}
 800629c:	f853 6b04 	ldr.w	r6, [r3], #4
 80062a0:	f845 6f04 	str.w	r6, [r5, #4]!
 80062a4:	e7eb      	b.n	800627e <__copybits+0x18>
 80062a6:	f840 3b04 	str.w	r3, [r0], #4
 80062aa:	e7f4      	b.n	8006296 <__copybits+0x30>

080062ac <__any_on>:
 80062ac:	f100 0214 	add.w	r2, r0, #20
 80062b0:	6900      	ldr	r0, [r0, #16]
 80062b2:	114b      	asrs	r3, r1, #5
 80062b4:	4298      	cmp	r0, r3
 80062b6:	b510      	push	{r4, lr}
 80062b8:	db11      	blt.n	80062de <__any_on+0x32>
 80062ba:	dd0a      	ble.n	80062d2 <__any_on+0x26>
 80062bc:	f011 011f 	ands.w	r1, r1, #31
 80062c0:	d007      	beq.n	80062d2 <__any_on+0x26>
 80062c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80062c6:	fa24 f001 	lsr.w	r0, r4, r1
 80062ca:	fa00 f101 	lsl.w	r1, r0, r1
 80062ce:	428c      	cmp	r4, r1
 80062d0:	d10b      	bne.n	80062ea <__any_on+0x3e>
 80062d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d803      	bhi.n	80062e2 <__any_on+0x36>
 80062da:	2000      	movs	r0, #0
 80062dc:	bd10      	pop	{r4, pc}
 80062de:	4603      	mov	r3, r0
 80062e0:	e7f7      	b.n	80062d2 <__any_on+0x26>
 80062e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80062e6:	2900      	cmp	r1, #0
 80062e8:	d0f5      	beq.n	80062d6 <__any_on+0x2a>
 80062ea:	2001      	movs	r0, #1
 80062ec:	e7f6      	b.n	80062dc <__any_on+0x30>

080062ee <_calloc_r>:
 80062ee:	b513      	push	{r0, r1, r4, lr}
 80062f0:	434a      	muls	r2, r1
 80062f2:	4611      	mov	r1, r2
 80062f4:	9201      	str	r2, [sp, #4]
 80062f6:	f000 f859 	bl	80063ac <_malloc_r>
 80062fa:	4604      	mov	r4, r0
 80062fc:	b118      	cbz	r0, 8006306 <_calloc_r+0x18>
 80062fe:	9a01      	ldr	r2, [sp, #4]
 8006300:	2100      	movs	r1, #0
 8006302:	f7fc fbbf 	bl	8002a84 <memset>
 8006306:	4620      	mov	r0, r4
 8006308:	b002      	add	sp, #8
 800630a:	bd10      	pop	{r4, pc}

0800630c <_free_r>:
 800630c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800630e:	2900      	cmp	r1, #0
 8006310:	d048      	beq.n	80063a4 <_free_r+0x98>
 8006312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006316:	9001      	str	r0, [sp, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	f1a1 0404 	sub.w	r4, r1, #4
 800631e:	bfb8      	it	lt
 8006320:	18e4      	addlt	r4, r4, r3
 8006322:	f000 fa7b 	bl	800681c <__malloc_lock>
 8006326:	4a20      	ldr	r2, [pc, #128]	; (80063a8 <_free_r+0x9c>)
 8006328:	9801      	ldr	r0, [sp, #4]
 800632a:	6813      	ldr	r3, [r2, #0]
 800632c:	4615      	mov	r5, r2
 800632e:	b933      	cbnz	r3, 800633e <_free_r+0x32>
 8006330:	6063      	str	r3, [r4, #4]
 8006332:	6014      	str	r4, [r2, #0]
 8006334:	b003      	add	sp, #12
 8006336:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800633a:	f000 ba75 	b.w	8006828 <__malloc_unlock>
 800633e:	42a3      	cmp	r3, r4
 8006340:	d90b      	bls.n	800635a <_free_r+0x4e>
 8006342:	6821      	ldr	r1, [r4, #0]
 8006344:	1862      	adds	r2, r4, r1
 8006346:	4293      	cmp	r3, r2
 8006348:	bf04      	itt	eq
 800634a:	681a      	ldreq	r2, [r3, #0]
 800634c:	685b      	ldreq	r3, [r3, #4]
 800634e:	6063      	str	r3, [r4, #4]
 8006350:	bf04      	itt	eq
 8006352:	1852      	addeq	r2, r2, r1
 8006354:	6022      	streq	r2, [r4, #0]
 8006356:	602c      	str	r4, [r5, #0]
 8006358:	e7ec      	b.n	8006334 <_free_r+0x28>
 800635a:	461a      	mov	r2, r3
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	b10b      	cbz	r3, 8006364 <_free_r+0x58>
 8006360:	42a3      	cmp	r3, r4
 8006362:	d9fa      	bls.n	800635a <_free_r+0x4e>
 8006364:	6811      	ldr	r1, [r2, #0]
 8006366:	1855      	adds	r5, r2, r1
 8006368:	42a5      	cmp	r5, r4
 800636a:	d10b      	bne.n	8006384 <_free_r+0x78>
 800636c:	6824      	ldr	r4, [r4, #0]
 800636e:	4421      	add	r1, r4
 8006370:	1854      	adds	r4, r2, r1
 8006372:	42a3      	cmp	r3, r4
 8006374:	6011      	str	r1, [r2, #0]
 8006376:	d1dd      	bne.n	8006334 <_free_r+0x28>
 8006378:	681c      	ldr	r4, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	6053      	str	r3, [r2, #4]
 800637e:	4421      	add	r1, r4
 8006380:	6011      	str	r1, [r2, #0]
 8006382:	e7d7      	b.n	8006334 <_free_r+0x28>
 8006384:	d902      	bls.n	800638c <_free_r+0x80>
 8006386:	230c      	movs	r3, #12
 8006388:	6003      	str	r3, [r0, #0]
 800638a:	e7d3      	b.n	8006334 <_free_r+0x28>
 800638c:	6825      	ldr	r5, [r4, #0]
 800638e:	1961      	adds	r1, r4, r5
 8006390:	428b      	cmp	r3, r1
 8006392:	bf04      	itt	eq
 8006394:	6819      	ldreq	r1, [r3, #0]
 8006396:	685b      	ldreq	r3, [r3, #4]
 8006398:	6063      	str	r3, [r4, #4]
 800639a:	bf04      	itt	eq
 800639c:	1949      	addeq	r1, r1, r5
 800639e:	6021      	streq	r1, [r4, #0]
 80063a0:	6054      	str	r4, [r2, #4]
 80063a2:	e7c7      	b.n	8006334 <_free_r+0x28>
 80063a4:	b003      	add	sp, #12
 80063a6:	bd30      	pop	{r4, r5, pc}
 80063a8:	20000208 	.word	0x20000208

080063ac <_malloc_r>:
 80063ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ae:	1ccd      	adds	r5, r1, #3
 80063b0:	f025 0503 	bic.w	r5, r5, #3
 80063b4:	3508      	adds	r5, #8
 80063b6:	2d0c      	cmp	r5, #12
 80063b8:	bf38      	it	cc
 80063ba:	250c      	movcc	r5, #12
 80063bc:	2d00      	cmp	r5, #0
 80063be:	4606      	mov	r6, r0
 80063c0:	db01      	blt.n	80063c6 <_malloc_r+0x1a>
 80063c2:	42a9      	cmp	r1, r5
 80063c4:	d903      	bls.n	80063ce <_malloc_r+0x22>
 80063c6:	230c      	movs	r3, #12
 80063c8:	6033      	str	r3, [r6, #0]
 80063ca:	2000      	movs	r0, #0
 80063cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ce:	f000 fa25 	bl	800681c <__malloc_lock>
 80063d2:	4921      	ldr	r1, [pc, #132]	; (8006458 <_malloc_r+0xac>)
 80063d4:	680a      	ldr	r2, [r1, #0]
 80063d6:	4614      	mov	r4, r2
 80063d8:	b99c      	cbnz	r4, 8006402 <_malloc_r+0x56>
 80063da:	4f20      	ldr	r7, [pc, #128]	; (800645c <_malloc_r+0xb0>)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	b923      	cbnz	r3, 80063ea <_malloc_r+0x3e>
 80063e0:	4621      	mov	r1, r4
 80063e2:	4630      	mov	r0, r6
 80063e4:	f000 f9a0 	bl	8006728 <_sbrk_r>
 80063e8:	6038      	str	r0, [r7, #0]
 80063ea:	4629      	mov	r1, r5
 80063ec:	4630      	mov	r0, r6
 80063ee:	f000 f99b 	bl	8006728 <_sbrk_r>
 80063f2:	1c43      	adds	r3, r0, #1
 80063f4:	d123      	bne.n	800643e <_malloc_r+0x92>
 80063f6:	230c      	movs	r3, #12
 80063f8:	6033      	str	r3, [r6, #0]
 80063fa:	4630      	mov	r0, r6
 80063fc:	f000 fa14 	bl	8006828 <__malloc_unlock>
 8006400:	e7e3      	b.n	80063ca <_malloc_r+0x1e>
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	1b5b      	subs	r3, r3, r5
 8006406:	d417      	bmi.n	8006438 <_malloc_r+0x8c>
 8006408:	2b0b      	cmp	r3, #11
 800640a:	d903      	bls.n	8006414 <_malloc_r+0x68>
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	441c      	add	r4, r3
 8006410:	6025      	str	r5, [r4, #0]
 8006412:	e004      	b.n	800641e <_malloc_r+0x72>
 8006414:	6863      	ldr	r3, [r4, #4]
 8006416:	42a2      	cmp	r2, r4
 8006418:	bf0c      	ite	eq
 800641a:	600b      	streq	r3, [r1, #0]
 800641c:	6053      	strne	r3, [r2, #4]
 800641e:	4630      	mov	r0, r6
 8006420:	f000 fa02 	bl	8006828 <__malloc_unlock>
 8006424:	f104 000b 	add.w	r0, r4, #11
 8006428:	1d23      	adds	r3, r4, #4
 800642a:	f020 0007 	bic.w	r0, r0, #7
 800642e:	1ac2      	subs	r2, r0, r3
 8006430:	d0cc      	beq.n	80063cc <_malloc_r+0x20>
 8006432:	1a1b      	subs	r3, r3, r0
 8006434:	50a3      	str	r3, [r4, r2]
 8006436:	e7c9      	b.n	80063cc <_malloc_r+0x20>
 8006438:	4622      	mov	r2, r4
 800643a:	6864      	ldr	r4, [r4, #4]
 800643c:	e7cc      	b.n	80063d8 <_malloc_r+0x2c>
 800643e:	1cc4      	adds	r4, r0, #3
 8006440:	f024 0403 	bic.w	r4, r4, #3
 8006444:	42a0      	cmp	r0, r4
 8006446:	d0e3      	beq.n	8006410 <_malloc_r+0x64>
 8006448:	1a21      	subs	r1, r4, r0
 800644a:	4630      	mov	r0, r6
 800644c:	f000 f96c 	bl	8006728 <_sbrk_r>
 8006450:	3001      	adds	r0, #1
 8006452:	d1dd      	bne.n	8006410 <_malloc_r+0x64>
 8006454:	e7cf      	b.n	80063f6 <_malloc_r+0x4a>
 8006456:	bf00      	nop
 8006458:	20000208 	.word	0x20000208
 800645c:	2000020c 	.word	0x2000020c

08006460 <__ssputs_r>:
 8006460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006464:	688e      	ldr	r6, [r1, #8]
 8006466:	429e      	cmp	r6, r3
 8006468:	4682      	mov	sl, r0
 800646a:	460c      	mov	r4, r1
 800646c:	4690      	mov	r8, r2
 800646e:	461f      	mov	r7, r3
 8006470:	d838      	bhi.n	80064e4 <__ssputs_r+0x84>
 8006472:	898a      	ldrh	r2, [r1, #12]
 8006474:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006478:	d032      	beq.n	80064e0 <__ssputs_r+0x80>
 800647a:	6825      	ldr	r5, [r4, #0]
 800647c:	6909      	ldr	r1, [r1, #16]
 800647e:	eba5 0901 	sub.w	r9, r5, r1
 8006482:	6965      	ldr	r5, [r4, #20]
 8006484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006488:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800648c:	3301      	adds	r3, #1
 800648e:	444b      	add	r3, r9
 8006490:	106d      	asrs	r5, r5, #1
 8006492:	429d      	cmp	r5, r3
 8006494:	bf38      	it	cc
 8006496:	461d      	movcc	r5, r3
 8006498:	0553      	lsls	r3, r2, #21
 800649a:	d531      	bpl.n	8006500 <__ssputs_r+0xa0>
 800649c:	4629      	mov	r1, r5
 800649e:	f7ff ff85 	bl	80063ac <_malloc_r>
 80064a2:	4606      	mov	r6, r0
 80064a4:	b950      	cbnz	r0, 80064bc <__ssputs_r+0x5c>
 80064a6:	230c      	movs	r3, #12
 80064a8:	f8ca 3000 	str.w	r3, [sl]
 80064ac:	89a3      	ldrh	r3, [r4, #12]
 80064ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064b2:	81a3      	strh	r3, [r4, #12]
 80064b4:	f04f 30ff 	mov.w	r0, #4294967295
 80064b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064bc:	6921      	ldr	r1, [r4, #16]
 80064be:	464a      	mov	r2, r9
 80064c0:	f7ff fa4c 	bl	800595c <memcpy>
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ce:	81a3      	strh	r3, [r4, #12]
 80064d0:	6126      	str	r6, [r4, #16]
 80064d2:	6165      	str	r5, [r4, #20]
 80064d4:	444e      	add	r6, r9
 80064d6:	eba5 0509 	sub.w	r5, r5, r9
 80064da:	6026      	str	r6, [r4, #0]
 80064dc:	60a5      	str	r5, [r4, #8]
 80064de:	463e      	mov	r6, r7
 80064e0:	42be      	cmp	r6, r7
 80064e2:	d900      	bls.n	80064e6 <__ssputs_r+0x86>
 80064e4:	463e      	mov	r6, r7
 80064e6:	4632      	mov	r2, r6
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	4641      	mov	r1, r8
 80064ec:	f000 f97c 	bl	80067e8 <memmove>
 80064f0:	68a3      	ldr	r3, [r4, #8]
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	1b9b      	subs	r3, r3, r6
 80064f6:	4432      	add	r2, r6
 80064f8:	60a3      	str	r3, [r4, #8]
 80064fa:	6022      	str	r2, [r4, #0]
 80064fc:	2000      	movs	r0, #0
 80064fe:	e7db      	b.n	80064b8 <__ssputs_r+0x58>
 8006500:	462a      	mov	r2, r5
 8006502:	f000 f997 	bl	8006834 <_realloc_r>
 8006506:	4606      	mov	r6, r0
 8006508:	2800      	cmp	r0, #0
 800650a:	d1e1      	bne.n	80064d0 <__ssputs_r+0x70>
 800650c:	6921      	ldr	r1, [r4, #16]
 800650e:	4650      	mov	r0, sl
 8006510:	f7ff fefc 	bl	800630c <_free_r>
 8006514:	e7c7      	b.n	80064a6 <__ssputs_r+0x46>
	...

08006518 <_svfiprintf_r>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	4698      	mov	r8, r3
 800651e:	898b      	ldrh	r3, [r1, #12]
 8006520:	061b      	lsls	r3, r3, #24
 8006522:	b09d      	sub	sp, #116	; 0x74
 8006524:	4607      	mov	r7, r0
 8006526:	460d      	mov	r5, r1
 8006528:	4614      	mov	r4, r2
 800652a:	d50e      	bpl.n	800654a <_svfiprintf_r+0x32>
 800652c:	690b      	ldr	r3, [r1, #16]
 800652e:	b963      	cbnz	r3, 800654a <_svfiprintf_r+0x32>
 8006530:	2140      	movs	r1, #64	; 0x40
 8006532:	f7ff ff3b 	bl	80063ac <_malloc_r>
 8006536:	6028      	str	r0, [r5, #0]
 8006538:	6128      	str	r0, [r5, #16]
 800653a:	b920      	cbnz	r0, 8006546 <_svfiprintf_r+0x2e>
 800653c:	230c      	movs	r3, #12
 800653e:	603b      	str	r3, [r7, #0]
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	e0d1      	b.n	80066ea <_svfiprintf_r+0x1d2>
 8006546:	2340      	movs	r3, #64	; 0x40
 8006548:	616b      	str	r3, [r5, #20]
 800654a:	2300      	movs	r3, #0
 800654c:	9309      	str	r3, [sp, #36]	; 0x24
 800654e:	2320      	movs	r3, #32
 8006550:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006554:	f8cd 800c 	str.w	r8, [sp, #12]
 8006558:	2330      	movs	r3, #48	; 0x30
 800655a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006704 <_svfiprintf_r+0x1ec>
 800655e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006562:	f04f 0901 	mov.w	r9, #1
 8006566:	4623      	mov	r3, r4
 8006568:	469a      	mov	sl, r3
 800656a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800656e:	b10a      	cbz	r2, 8006574 <_svfiprintf_r+0x5c>
 8006570:	2a25      	cmp	r2, #37	; 0x25
 8006572:	d1f9      	bne.n	8006568 <_svfiprintf_r+0x50>
 8006574:	ebba 0b04 	subs.w	fp, sl, r4
 8006578:	d00b      	beq.n	8006592 <_svfiprintf_r+0x7a>
 800657a:	465b      	mov	r3, fp
 800657c:	4622      	mov	r2, r4
 800657e:	4629      	mov	r1, r5
 8006580:	4638      	mov	r0, r7
 8006582:	f7ff ff6d 	bl	8006460 <__ssputs_r>
 8006586:	3001      	adds	r0, #1
 8006588:	f000 80aa 	beq.w	80066e0 <_svfiprintf_r+0x1c8>
 800658c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800658e:	445a      	add	r2, fp
 8006590:	9209      	str	r2, [sp, #36]	; 0x24
 8006592:	f89a 3000 	ldrb.w	r3, [sl]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 80a2 	beq.w	80066e0 <_svfiprintf_r+0x1c8>
 800659c:	2300      	movs	r3, #0
 800659e:	f04f 32ff 	mov.w	r2, #4294967295
 80065a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065a6:	f10a 0a01 	add.w	sl, sl, #1
 80065aa:	9304      	str	r3, [sp, #16]
 80065ac:	9307      	str	r3, [sp, #28]
 80065ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065b2:	931a      	str	r3, [sp, #104]	; 0x68
 80065b4:	4654      	mov	r4, sl
 80065b6:	2205      	movs	r2, #5
 80065b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065bc:	4851      	ldr	r0, [pc, #324]	; (8006704 <_svfiprintf_r+0x1ec>)
 80065be:	f7f9 fe17 	bl	80001f0 <memchr>
 80065c2:	9a04      	ldr	r2, [sp, #16]
 80065c4:	b9d8      	cbnz	r0, 80065fe <_svfiprintf_r+0xe6>
 80065c6:	06d0      	lsls	r0, r2, #27
 80065c8:	bf44      	itt	mi
 80065ca:	2320      	movmi	r3, #32
 80065cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065d0:	0711      	lsls	r1, r2, #28
 80065d2:	bf44      	itt	mi
 80065d4:	232b      	movmi	r3, #43	; 0x2b
 80065d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065da:	f89a 3000 	ldrb.w	r3, [sl]
 80065de:	2b2a      	cmp	r3, #42	; 0x2a
 80065e0:	d015      	beq.n	800660e <_svfiprintf_r+0xf6>
 80065e2:	9a07      	ldr	r2, [sp, #28]
 80065e4:	4654      	mov	r4, sl
 80065e6:	2000      	movs	r0, #0
 80065e8:	f04f 0c0a 	mov.w	ip, #10
 80065ec:	4621      	mov	r1, r4
 80065ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065f2:	3b30      	subs	r3, #48	; 0x30
 80065f4:	2b09      	cmp	r3, #9
 80065f6:	d94e      	bls.n	8006696 <_svfiprintf_r+0x17e>
 80065f8:	b1b0      	cbz	r0, 8006628 <_svfiprintf_r+0x110>
 80065fa:	9207      	str	r2, [sp, #28]
 80065fc:	e014      	b.n	8006628 <_svfiprintf_r+0x110>
 80065fe:	eba0 0308 	sub.w	r3, r0, r8
 8006602:	fa09 f303 	lsl.w	r3, r9, r3
 8006606:	4313      	orrs	r3, r2
 8006608:	9304      	str	r3, [sp, #16]
 800660a:	46a2      	mov	sl, r4
 800660c:	e7d2      	b.n	80065b4 <_svfiprintf_r+0x9c>
 800660e:	9b03      	ldr	r3, [sp, #12]
 8006610:	1d19      	adds	r1, r3, #4
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	9103      	str	r1, [sp, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	bfbb      	ittet	lt
 800661a:	425b      	neglt	r3, r3
 800661c:	f042 0202 	orrlt.w	r2, r2, #2
 8006620:	9307      	strge	r3, [sp, #28]
 8006622:	9307      	strlt	r3, [sp, #28]
 8006624:	bfb8      	it	lt
 8006626:	9204      	strlt	r2, [sp, #16]
 8006628:	7823      	ldrb	r3, [r4, #0]
 800662a:	2b2e      	cmp	r3, #46	; 0x2e
 800662c:	d10c      	bne.n	8006648 <_svfiprintf_r+0x130>
 800662e:	7863      	ldrb	r3, [r4, #1]
 8006630:	2b2a      	cmp	r3, #42	; 0x2a
 8006632:	d135      	bne.n	80066a0 <_svfiprintf_r+0x188>
 8006634:	9b03      	ldr	r3, [sp, #12]
 8006636:	1d1a      	adds	r2, r3, #4
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	9203      	str	r2, [sp, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	bfb8      	it	lt
 8006640:	f04f 33ff 	movlt.w	r3, #4294967295
 8006644:	3402      	adds	r4, #2
 8006646:	9305      	str	r3, [sp, #20]
 8006648:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006714 <_svfiprintf_r+0x1fc>
 800664c:	7821      	ldrb	r1, [r4, #0]
 800664e:	2203      	movs	r2, #3
 8006650:	4650      	mov	r0, sl
 8006652:	f7f9 fdcd 	bl	80001f0 <memchr>
 8006656:	b140      	cbz	r0, 800666a <_svfiprintf_r+0x152>
 8006658:	2340      	movs	r3, #64	; 0x40
 800665a:	eba0 000a 	sub.w	r0, r0, sl
 800665e:	fa03 f000 	lsl.w	r0, r3, r0
 8006662:	9b04      	ldr	r3, [sp, #16]
 8006664:	4303      	orrs	r3, r0
 8006666:	3401      	adds	r4, #1
 8006668:	9304      	str	r3, [sp, #16]
 800666a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800666e:	4826      	ldr	r0, [pc, #152]	; (8006708 <_svfiprintf_r+0x1f0>)
 8006670:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006674:	2206      	movs	r2, #6
 8006676:	f7f9 fdbb 	bl	80001f0 <memchr>
 800667a:	2800      	cmp	r0, #0
 800667c:	d038      	beq.n	80066f0 <_svfiprintf_r+0x1d8>
 800667e:	4b23      	ldr	r3, [pc, #140]	; (800670c <_svfiprintf_r+0x1f4>)
 8006680:	bb1b      	cbnz	r3, 80066ca <_svfiprintf_r+0x1b2>
 8006682:	9b03      	ldr	r3, [sp, #12]
 8006684:	3307      	adds	r3, #7
 8006686:	f023 0307 	bic.w	r3, r3, #7
 800668a:	3308      	adds	r3, #8
 800668c:	9303      	str	r3, [sp, #12]
 800668e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006690:	4433      	add	r3, r6
 8006692:	9309      	str	r3, [sp, #36]	; 0x24
 8006694:	e767      	b.n	8006566 <_svfiprintf_r+0x4e>
 8006696:	fb0c 3202 	mla	r2, ip, r2, r3
 800669a:	460c      	mov	r4, r1
 800669c:	2001      	movs	r0, #1
 800669e:	e7a5      	b.n	80065ec <_svfiprintf_r+0xd4>
 80066a0:	2300      	movs	r3, #0
 80066a2:	3401      	adds	r4, #1
 80066a4:	9305      	str	r3, [sp, #20]
 80066a6:	4619      	mov	r1, r3
 80066a8:	f04f 0c0a 	mov.w	ip, #10
 80066ac:	4620      	mov	r0, r4
 80066ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066b2:	3a30      	subs	r2, #48	; 0x30
 80066b4:	2a09      	cmp	r2, #9
 80066b6:	d903      	bls.n	80066c0 <_svfiprintf_r+0x1a8>
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d0c5      	beq.n	8006648 <_svfiprintf_r+0x130>
 80066bc:	9105      	str	r1, [sp, #20]
 80066be:	e7c3      	b.n	8006648 <_svfiprintf_r+0x130>
 80066c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80066c4:	4604      	mov	r4, r0
 80066c6:	2301      	movs	r3, #1
 80066c8:	e7f0      	b.n	80066ac <_svfiprintf_r+0x194>
 80066ca:	ab03      	add	r3, sp, #12
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	462a      	mov	r2, r5
 80066d0:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <_svfiprintf_r+0x1f8>)
 80066d2:	a904      	add	r1, sp, #16
 80066d4:	4638      	mov	r0, r7
 80066d6:	f7fc fa7d 	bl	8002bd4 <_printf_float>
 80066da:	1c42      	adds	r2, r0, #1
 80066dc:	4606      	mov	r6, r0
 80066de:	d1d6      	bne.n	800668e <_svfiprintf_r+0x176>
 80066e0:	89ab      	ldrh	r3, [r5, #12]
 80066e2:	065b      	lsls	r3, r3, #25
 80066e4:	f53f af2c 	bmi.w	8006540 <_svfiprintf_r+0x28>
 80066e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ea:	b01d      	add	sp, #116	; 0x74
 80066ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f0:	ab03      	add	r3, sp, #12
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	462a      	mov	r2, r5
 80066f6:	4b06      	ldr	r3, [pc, #24]	; (8006710 <_svfiprintf_r+0x1f8>)
 80066f8:	a904      	add	r1, sp, #16
 80066fa:	4638      	mov	r0, r7
 80066fc:	f7fc fd0e 	bl	800311c <_printf_i>
 8006700:	e7eb      	b.n	80066da <_svfiprintf_r+0x1c2>
 8006702:	bf00      	nop
 8006704:	08007894 	.word	0x08007894
 8006708:	0800789e 	.word	0x0800789e
 800670c:	08002bd5 	.word	0x08002bd5
 8006710:	08006461 	.word	0x08006461
 8006714:	0800789a 	.word	0x0800789a

08006718 <nan>:
 8006718:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006720 <nan+0x8>
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	00000000 	.word	0x00000000
 8006724:	7ff80000 	.word	0x7ff80000

08006728 <_sbrk_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4d06      	ldr	r5, [pc, #24]	; (8006744 <_sbrk_r+0x1c>)
 800672c:	2300      	movs	r3, #0
 800672e:	4604      	mov	r4, r0
 8006730:	4608      	mov	r0, r1
 8006732:	602b      	str	r3, [r5, #0]
 8006734:	f7fa fecc 	bl	80014d0 <_sbrk>
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	d102      	bne.n	8006742 <_sbrk_r+0x1a>
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	b103      	cbz	r3, 8006742 <_sbrk_r+0x1a>
 8006740:	6023      	str	r3, [r4, #0]
 8006742:	bd38      	pop	{r3, r4, r5, pc}
 8006744:	200002c8 	.word	0x200002c8

08006748 <strncmp>:
 8006748:	b510      	push	{r4, lr}
 800674a:	b16a      	cbz	r2, 8006768 <strncmp+0x20>
 800674c:	3901      	subs	r1, #1
 800674e:	1884      	adds	r4, r0, r2
 8006750:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006754:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006758:	4293      	cmp	r3, r2
 800675a:	d103      	bne.n	8006764 <strncmp+0x1c>
 800675c:	42a0      	cmp	r0, r4
 800675e:	d001      	beq.n	8006764 <strncmp+0x1c>
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1f5      	bne.n	8006750 <strncmp+0x8>
 8006764:	1a98      	subs	r0, r3, r2
 8006766:	bd10      	pop	{r4, pc}
 8006768:	4610      	mov	r0, r2
 800676a:	e7fc      	b.n	8006766 <strncmp+0x1e>

0800676c <__ascii_wctomb>:
 800676c:	b149      	cbz	r1, 8006782 <__ascii_wctomb+0x16>
 800676e:	2aff      	cmp	r2, #255	; 0xff
 8006770:	bf85      	ittet	hi
 8006772:	238a      	movhi	r3, #138	; 0x8a
 8006774:	6003      	strhi	r3, [r0, #0]
 8006776:	700a      	strbls	r2, [r1, #0]
 8006778:	f04f 30ff 	movhi.w	r0, #4294967295
 800677c:	bf98      	it	ls
 800677e:	2001      	movls	r0, #1
 8006780:	4770      	bx	lr
 8006782:	4608      	mov	r0, r1
 8006784:	4770      	bx	lr
	...

08006788 <__assert_func>:
 8006788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800678a:	4614      	mov	r4, r2
 800678c:	461a      	mov	r2, r3
 800678e:	4b09      	ldr	r3, [pc, #36]	; (80067b4 <__assert_func+0x2c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4605      	mov	r5, r0
 8006794:	68d8      	ldr	r0, [r3, #12]
 8006796:	b14c      	cbz	r4, 80067ac <__assert_func+0x24>
 8006798:	4b07      	ldr	r3, [pc, #28]	; (80067b8 <__assert_func+0x30>)
 800679a:	9100      	str	r1, [sp, #0]
 800679c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067a0:	4906      	ldr	r1, [pc, #24]	; (80067bc <__assert_func+0x34>)
 80067a2:	462b      	mov	r3, r5
 80067a4:	f000 f80e 	bl	80067c4 <fiprintf>
 80067a8:	f000 fa84 	bl	8006cb4 <abort>
 80067ac:	4b04      	ldr	r3, [pc, #16]	; (80067c0 <__assert_func+0x38>)
 80067ae:	461c      	mov	r4, r3
 80067b0:	e7f3      	b.n	800679a <__assert_func+0x12>
 80067b2:	bf00      	nop
 80067b4:	20000008 	.word	0x20000008
 80067b8:	080078a5 	.word	0x080078a5
 80067bc:	080078b2 	.word	0x080078b2
 80067c0:	080078e0 	.word	0x080078e0

080067c4 <fiprintf>:
 80067c4:	b40e      	push	{r1, r2, r3}
 80067c6:	b503      	push	{r0, r1, lr}
 80067c8:	4601      	mov	r1, r0
 80067ca:	ab03      	add	r3, sp, #12
 80067cc:	4805      	ldr	r0, [pc, #20]	; (80067e4 <fiprintf+0x20>)
 80067ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80067d2:	6800      	ldr	r0, [r0, #0]
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	f000 f87d 	bl	80068d4 <_vfiprintf_r>
 80067da:	b002      	add	sp, #8
 80067dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80067e0:	b003      	add	sp, #12
 80067e2:	4770      	bx	lr
 80067e4:	20000008 	.word	0x20000008

080067e8 <memmove>:
 80067e8:	4288      	cmp	r0, r1
 80067ea:	b510      	push	{r4, lr}
 80067ec:	eb01 0402 	add.w	r4, r1, r2
 80067f0:	d902      	bls.n	80067f8 <memmove+0x10>
 80067f2:	4284      	cmp	r4, r0
 80067f4:	4623      	mov	r3, r4
 80067f6:	d807      	bhi.n	8006808 <memmove+0x20>
 80067f8:	1e43      	subs	r3, r0, #1
 80067fa:	42a1      	cmp	r1, r4
 80067fc:	d008      	beq.n	8006810 <memmove+0x28>
 80067fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006802:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006806:	e7f8      	b.n	80067fa <memmove+0x12>
 8006808:	4402      	add	r2, r0
 800680a:	4601      	mov	r1, r0
 800680c:	428a      	cmp	r2, r1
 800680e:	d100      	bne.n	8006812 <memmove+0x2a>
 8006810:	bd10      	pop	{r4, pc}
 8006812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006816:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800681a:	e7f7      	b.n	800680c <memmove+0x24>

0800681c <__malloc_lock>:
 800681c:	4801      	ldr	r0, [pc, #4]	; (8006824 <__malloc_lock+0x8>)
 800681e:	f000 bc09 	b.w	8007034 <__retarget_lock_acquire_recursive>
 8006822:	bf00      	nop
 8006824:	200002d0 	.word	0x200002d0

08006828 <__malloc_unlock>:
 8006828:	4801      	ldr	r0, [pc, #4]	; (8006830 <__malloc_unlock+0x8>)
 800682a:	f000 bc04 	b.w	8007036 <__retarget_lock_release_recursive>
 800682e:	bf00      	nop
 8006830:	200002d0 	.word	0x200002d0

08006834 <_realloc_r>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	4607      	mov	r7, r0
 8006838:	4614      	mov	r4, r2
 800683a:	460e      	mov	r6, r1
 800683c:	b921      	cbnz	r1, 8006848 <_realloc_r+0x14>
 800683e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006842:	4611      	mov	r1, r2
 8006844:	f7ff bdb2 	b.w	80063ac <_malloc_r>
 8006848:	b922      	cbnz	r2, 8006854 <_realloc_r+0x20>
 800684a:	f7ff fd5f 	bl	800630c <_free_r>
 800684e:	4625      	mov	r5, r4
 8006850:	4628      	mov	r0, r5
 8006852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006854:	f000 fc54 	bl	8007100 <_malloc_usable_size_r>
 8006858:	42a0      	cmp	r0, r4
 800685a:	d20f      	bcs.n	800687c <_realloc_r+0x48>
 800685c:	4621      	mov	r1, r4
 800685e:	4638      	mov	r0, r7
 8006860:	f7ff fda4 	bl	80063ac <_malloc_r>
 8006864:	4605      	mov	r5, r0
 8006866:	2800      	cmp	r0, #0
 8006868:	d0f2      	beq.n	8006850 <_realloc_r+0x1c>
 800686a:	4631      	mov	r1, r6
 800686c:	4622      	mov	r2, r4
 800686e:	f7ff f875 	bl	800595c <memcpy>
 8006872:	4631      	mov	r1, r6
 8006874:	4638      	mov	r0, r7
 8006876:	f7ff fd49 	bl	800630c <_free_r>
 800687a:	e7e9      	b.n	8006850 <_realloc_r+0x1c>
 800687c:	4635      	mov	r5, r6
 800687e:	e7e7      	b.n	8006850 <_realloc_r+0x1c>

08006880 <__sfputc_r>:
 8006880:	6893      	ldr	r3, [r2, #8]
 8006882:	3b01      	subs	r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	b410      	push	{r4}
 8006888:	6093      	str	r3, [r2, #8]
 800688a:	da08      	bge.n	800689e <__sfputc_r+0x1e>
 800688c:	6994      	ldr	r4, [r2, #24]
 800688e:	42a3      	cmp	r3, r4
 8006890:	db01      	blt.n	8006896 <__sfputc_r+0x16>
 8006892:	290a      	cmp	r1, #10
 8006894:	d103      	bne.n	800689e <__sfputc_r+0x1e>
 8006896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800689a:	f000 b94b 	b.w	8006b34 <__swbuf_r>
 800689e:	6813      	ldr	r3, [r2, #0]
 80068a0:	1c58      	adds	r0, r3, #1
 80068a2:	6010      	str	r0, [r2, #0]
 80068a4:	7019      	strb	r1, [r3, #0]
 80068a6:	4608      	mov	r0, r1
 80068a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <__sfputs_r>:
 80068ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b0:	4606      	mov	r6, r0
 80068b2:	460f      	mov	r7, r1
 80068b4:	4614      	mov	r4, r2
 80068b6:	18d5      	adds	r5, r2, r3
 80068b8:	42ac      	cmp	r4, r5
 80068ba:	d101      	bne.n	80068c0 <__sfputs_r+0x12>
 80068bc:	2000      	movs	r0, #0
 80068be:	e007      	b.n	80068d0 <__sfputs_r+0x22>
 80068c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c4:	463a      	mov	r2, r7
 80068c6:	4630      	mov	r0, r6
 80068c8:	f7ff ffda 	bl	8006880 <__sfputc_r>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d1f3      	bne.n	80068b8 <__sfputs_r+0xa>
 80068d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068d4 <_vfiprintf_r>:
 80068d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d8:	460d      	mov	r5, r1
 80068da:	b09d      	sub	sp, #116	; 0x74
 80068dc:	4614      	mov	r4, r2
 80068de:	4698      	mov	r8, r3
 80068e0:	4606      	mov	r6, r0
 80068e2:	b118      	cbz	r0, 80068ec <_vfiprintf_r+0x18>
 80068e4:	6983      	ldr	r3, [r0, #24]
 80068e6:	b90b      	cbnz	r3, 80068ec <_vfiprintf_r+0x18>
 80068e8:	f000 fb06 	bl	8006ef8 <__sinit>
 80068ec:	4b89      	ldr	r3, [pc, #548]	; (8006b14 <_vfiprintf_r+0x240>)
 80068ee:	429d      	cmp	r5, r3
 80068f0:	d11b      	bne.n	800692a <_vfiprintf_r+0x56>
 80068f2:	6875      	ldr	r5, [r6, #4]
 80068f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068f6:	07d9      	lsls	r1, r3, #31
 80068f8:	d405      	bmi.n	8006906 <_vfiprintf_r+0x32>
 80068fa:	89ab      	ldrh	r3, [r5, #12]
 80068fc:	059a      	lsls	r2, r3, #22
 80068fe:	d402      	bmi.n	8006906 <_vfiprintf_r+0x32>
 8006900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006902:	f000 fb97 	bl	8007034 <__retarget_lock_acquire_recursive>
 8006906:	89ab      	ldrh	r3, [r5, #12]
 8006908:	071b      	lsls	r3, r3, #28
 800690a:	d501      	bpl.n	8006910 <_vfiprintf_r+0x3c>
 800690c:	692b      	ldr	r3, [r5, #16]
 800690e:	b9eb      	cbnz	r3, 800694c <_vfiprintf_r+0x78>
 8006910:	4629      	mov	r1, r5
 8006912:	4630      	mov	r0, r6
 8006914:	f000 f960 	bl	8006bd8 <__swsetup_r>
 8006918:	b1c0      	cbz	r0, 800694c <_vfiprintf_r+0x78>
 800691a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800691c:	07dc      	lsls	r4, r3, #31
 800691e:	d50e      	bpl.n	800693e <_vfiprintf_r+0x6a>
 8006920:	f04f 30ff 	mov.w	r0, #4294967295
 8006924:	b01d      	add	sp, #116	; 0x74
 8006926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692a:	4b7b      	ldr	r3, [pc, #492]	; (8006b18 <_vfiprintf_r+0x244>)
 800692c:	429d      	cmp	r5, r3
 800692e:	d101      	bne.n	8006934 <_vfiprintf_r+0x60>
 8006930:	68b5      	ldr	r5, [r6, #8]
 8006932:	e7df      	b.n	80068f4 <_vfiprintf_r+0x20>
 8006934:	4b79      	ldr	r3, [pc, #484]	; (8006b1c <_vfiprintf_r+0x248>)
 8006936:	429d      	cmp	r5, r3
 8006938:	bf08      	it	eq
 800693a:	68f5      	ldreq	r5, [r6, #12]
 800693c:	e7da      	b.n	80068f4 <_vfiprintf_r+0x20>
 800693e:	89ab      	ldrh	r3, [r5, #12]
 8006940:	0598      	lsls	r0, r3, #22
 8006942:	d4ed      	bmi.n	8006920 <_vfiprintf_r+0x4c>
 8006944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006946:	f000 fb76 	bl	8007036 <__retarget_lock_release_recursive>
 800694a:	e7e9      	b.n	8006920 <_vfiprintf_r+0x4c>
 800694c:	2300      	movs	r3, #0
 800694e:	9309      	str	r3, [sp, #36]	; 0x24
 8006950:	2320      	movs	r3, #32
 8006952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006956:	f8cd 800c 	str.w	r8, [sp, #12]
 800695a:	2330      	movs	r3, #48	; 0x30
 800695c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b20 <_vfiprintf_r+0x24c>
 8006960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006964:	f04f 0901 	mov.w	r9, #1
 8006968:	4623      	mov	r3, r4
 800696a:	469a      	mov	sl, r3
 800696c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006970:	b10a      	cbz	r2, 8006976 <_vfiprintf_r+0xa2>
 8006972:	2a25      	cmp	r2, #37	; 0x25
 8006974:	d1f9      	bne.n	800696a <_vfiprintf_r+0x96>
 8006976:	ebba 0b04 	subs.w	fp, sl, r4
 800697a:	d00b      	beq.n	8006994 <_vfiprintf_r+0xc0>
 800697c:	465b      	mov	r3, fp
 800697e:	4622      	mov	r2, r4
 8006980:	4629      	mov	r1, r5
 8006982:	4630      	mov	r0, r6
 8006984:	f7ff ff93 	bl	80068ae <__sfputs_r>
 8006988:	3001      	adds	r0, #1
 800698a:	f000 80aa 	beq.w	8006ae2 <_vfiprintf_r+0x20e>
 800698e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006990:	445a      	add	r2, fp
 8006992:	9209      	str	r2, [sp, #36]	; 0x24
 8006994:	f89a 3000 	ldrb.w	r3, [sl]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 80a2 	beq.w	8006ae2 <_vfiprintf_r+0x20e>
 800699e:	2300      	movs	r3, #0
 80069a0:	f04f 32ff 	mov.w	r2, #4294967295
 80069a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069a8:	f10a 0a01 	add.w	sl, sl, #1
 80069ac:	9304      	str	r3, [sp, #16]
 80069ae:	9307      	str	r3, [sp, #28]
 80069b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069b4:	931a      	str	r3, [sp, #104]	; 0x68
 80069b6:	4654      	mov	r4, sl
 80069b8:	2205      	movs	r2, #5
 80069ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069be:	4858      	ldr	r0, [pc, #352]	; (8006b20 <_vfiprintf_r+0x24c>)
 80069c0:	f7f9 fc16 	bl	80001f0 <memchr>
 80069c4:	9a04      	ldr	r2, [sp, #16]
 80069c6:	b9d8      	cbnz	r0, 8006a00 <_vfiprintf_r+0x12c>
 80069c8:	06d1      	lsls	r1, r2, #27
 80069ca:	bf44      	itt	mi
 80069cc:	2320      	movmi	r3, #32
 80069ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069d2:	0713      	lsls	r3, r2, #28
 80069d4:	bf44      	itt	mi
 80069d6:	232b      	movmi	r3, #43	; 0x2b
 80069d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069dc:	f89a 3000 	ldrb.w	r3, [sl]
 80069e0:	2b2a      	cmp	r3, #42	; 0x2a
 80069e2:	d015      	beq.n	8006a10 <_vfiprintf_r+0x13c>
 80069e4:	9a07      	ldr	r2, [sp, #28]
 80069e6:	4654      	mov	r4, sl
 80069e8:	2000      	movs	r0, #0
 80069ea:	f04f 0c0a 	mov.w	ip, #10
 80069ee:	4621      	mov	r1, r4
 80069f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069f4:	3b30      	subs	r3, #48	; 0x30
 80069f6:	2b09      	cmp	r3, #9
 80069f8:	d94e      	bls.n	8006a98 <_vfiprintf_r+0x1c4>
 80069fa:	b1b0      	cbz	r0, 8006a2a <_vfiprintf_r+0x156>
 80069fc:	9207      	str	r2, [sp, #28]
 80069fe:	e014      	b.n	8006a2a <_vfiprintf_r+0x156>
 8006a00:	eba0 0308 	sub.w	r3, r0, r8
 8006a04:	fa09 f303 	lsl.w	r3, r9, r3
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	9304      	str	r3, [sp, #16]
 8006a0c:	46a2      	mov	sl, r4
 8006a0e:	e7d2      	b.n	80069b6 <_vfiprintf_r+0xe2>
 8006a10:	9b03      	ldr	r3, [sp, #12]
 8006a12:	1d19      	adds	r1, r3, #4
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	9103      	str	r1, [sp, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	bfbb      	ittet	lt
 8006a1c:	425b      	neglt	r3, r3
 8006a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a22:	9307      	strge	r3, [sp, #28]
 8006a24:	9307      	strlt	r3, [sp, #28]
 8006a26:	bfb8      	it	lt
 8006a28:	9204      	strlt	r2, [sp, #16]
 8006a2a:	7823      	ldrb	r3, [r4, #0]
 8006a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a2e:	d10c      	bne.n	8006a4a <_vfiprintf_r+0x176>
 8006a30:	7863      	ldrb	r3, [r4, #1]
 8006a32:	2b2a      	cmp	r3, #42	; 0x2a
 8006a34:	d135      	bne.n	8006aa2 <_vfiprintf_r+0x1ce>
 8006a36:	9b03      	ldr	r3, [sp, #12]
 8006a38:	1d1a      	adds	r2, r3, #4
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	9203      	str	r2, [sp, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	bfb8      	it	lt
 8006a42:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a46:	3402      	adds	r4, #2
 8006a48:	9305      	str	r3, [sp, #20]
 8006a4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b30 <_vfiprintf_r+0x25c>
 8006a4e:	7821      	ldrb	r1, [r4, #0]
 8006a50:	2203      	movs	r2, #3
 8006a52:	4650      	mov	r0, sl
 8006a54:	f7f9 fbcc 	bl	80001f0 <memchr>
 8006a58:	b140      	cbz	r0, 8006a6c <_vfiprintf_r+0x198>
 8006a5a:	2340      	movs	r3, #64	; 0x40
 8006a5c:	eba0 000a 	sub.w	r0, r0, sl
 8006a60:	fa03 f000 	lsl.w	r0, r3, r0
 8006a64:	9b04      	ldr	r3, [sp, #16]
 8006a66:	4303      	orrs	r3, r0
 8006a68:	3401      	adds	r4, #1
 8006a6a:	9304      	str	r3, [sp, #16]
 8006a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a70:	482c      	ldr	r0, [pc, #176]	; (8006b24 <_vfiprintf_r+0x250>)
 8006a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a76:	2206      	movs	r2, #6
 8006a78:	f7f9 fbba 	bl	80001f0 <memchr>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	d03f      	beq.n	8006b00 <_vfiprintf_r+0x22c>
 8006a80:	4b29      	ldr	r3, [pc, #164]	; (8006b28 <_vfiprintf_r+0x254>)
 8006a82:	bb1b      	cbnz	r3, 8006acc <_vfiprintf_r+0x1f8>
 8006a84:	9b03      	ldr	r3, [sp, #12]
 8006a86:	3307      	adds	r3, #7
 8006a88:	f023 0307 	bic.w	r3, r3, #7
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	9303      	str	r3, [sp, #12]
 8006a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a92:	443b      	add	r3, r7
 8006a94:	9309      	str	r3, [sp, #36]	; 0x24
 8006a96:	e767      	b.n	8006968 <_vfiprintf_r+0x94>
 8006a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	2001      	movs	r0, #1
 8006aa0:	e7a5      	b.n	80069ee <_vfiprintf_r+0x11a>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	3401      	adds	r4, #1
 8006aa6:	9305      	str	r3, [sp, #20]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	f04f 0c0a 	mov.w	ip, #10
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ab4:	3a30      	subs	r2, #48	; 0x30
 8006ab6:	2a09      	cmp	r2, #9
 8006ab8:	d903      	bls.n	8006ac2 <_vfiprintf_r+0x1ee>
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d0c5      	beq.n	8006a4a <_vfiprintf_r+0x176>
 8006abe:	9105      	str	r1, [sp, #20]
 8006ac0:	e7c3      	b.n	8006a4a <_vfiprintf_r+0x176>
 8006ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e7f0      	b.n	8006aae <_vfiprintf_r+0x1da>
 8006acc:	ab03      	add	r3, sp, #12
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	462a      	mov	r2, r5
 8006ad2:	4b16      	ldr	r3, [pc, #88]	; (8006b2c <_vfiprintf_r+0x258>)
 8006ad4:	a904      	add	r1, sp, #16
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f7fc f87c 	bl	8002bd4 <_printf_float>
 8006adc:	4607      	mov	r7, r0
 8006ade:	1c78      	adds	r0, r7, #1
 8006ae0:	d1d6      	bne.n	8006a90 <_vfiprintf_r+0x1bc>
 8006ae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ae4:	07d9      	lsls	r1, r3, #31
 8006ae6:	d405      	bmi.n	8006af4 <_vfiprintf_r+0x220>
 8006ae8:	89ab      	ldrh	r3, [r5, #12]
 8006aea:	059a      	lsls	r2, r3, #22
 8006aec:	d402      	bmi.n	8006af4 <_vfiprintf_r+0x220>
 8006aee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006af0:	f000 faa1 	bl	8007036 <__retarget_lock_release_recursive>
 8006af4:	89ab      	ldrh	r3, [r5, #12]
 8006af6:	065b      	lsls	r3, r3, #25
 8006af8:	f53f af12 	bmi.w	8006920 <_vfiprintf_r+0x4c>
 8006afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006afe:	e711      	b.n	8006924 <_vfiprintf_r+0x50>
 8006b00:	ab03      	add	r3, sp, #12
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	462a      	mov	r2, r5
 8006b06:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <_vfiprintf_r+0x258>)
 8006b08:	a904      	add	r1, sp, #16
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f7fc fb06 	bl	800311c <_printf_i>
 8006b10:	e7e4      	b.n	8006adc <_vfiprintf_r+0x208>
 8006b12:	bf00      	nop
 8006b14:	08007904 	.word	0x08007904
 8006b18:	08007924 	.word	0x08007924
 8006b1c:	080078e4 	.word	0x080078e4
 8006b20:	08007894 	.word	0x08007894
 8006b24:	0800789e 	.word	0x0800789e
 8006b28:	08002bd5 	.word	0x08002bd5
 8006b2c:	080068af 	.word	0x080068af
 8006b30:	0800789a 	.word	0x0800789a

08006b34 <__swbuf_r>:
 8006b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b36:	460e      	mov	r6, r1
 8006b38:	4614      	mov	r4, r2
 8006b3a:	4605      	mov	r5, r0
 8006b3c:	b118      	cbz	r0, 8006b46 <__swbuf_r+0x12>
 8006b3e:	6983      	ldr	r3, [r0, #24]
 8006b40:	b90b      	cbnz	r3, 8006b46 <__swbuf_r+0x12>
 8006b42:	f000 f9d9 	bl	8006ef8 <__sinit>
 8006b46:	4b21      	ldr	r3, [pc, #132]	; (8006bcc <__swbuf_r+0x98>)
 8006b48:	429c      	cmp	r4, r3
 8006b4a:	d12b      	bne.n	8006ba4 <__swbuf_r+0x70>
 8006b4c:	686c      	ldr	r4, [r5, #4]
 8006b4e:	69a3      	ldr	r3, [r4, #24]
 8006b50:	60a3      	str	r3, [r4, #8]
 8006b52:	89a3      	ldrh	r3, [r4, #12]
 8006b54:	071a      	lsls	r2, r3, #28
 8006b56:	d52f      	bpl.n	8006bb8 <__swbuf_r+0x84>
 8006b58:	6923      	ldr	r3, [r4, #16]
 8006b5a:	b36b      	cbz	r3, 8006bb8 <__swbuf_r+0x84>
 8006b5c:	6923      	ldr	r3, [r4, #16]
 8006b5e:	6820      	ldr	r0, [r4, #0]
 8006b60:	1ac0      	subs	r0, r0, r3
 8006b62:	6963      	ldr	r3, [r4, #20]
 8006b64:	b2f6      	uxtb	r6, r6
 8006b66:	4283      	cmp	r3, r0
 8006b68:	4637      	mov	r7, r6
 8006b6a:	dc04      	bgt.n	8006b76 <__swbuf_r+0x42>
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f000 f92e 	bl	8006dd0 <_fflush_r>
 8006b74:	bb30      	cbnz	r0, 8006bc4 <__swbuf_r+0x90>
 8006b76:	68a3      	ldr	r3, [r4, #8]
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	60a3      	str	r3, [r4, #8]
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	6022      	str	r2, [r4, #0]
 8006b82:	701e      	strb	r6, [r3, #0]
 8006b84:	6963      	ldr	r3, [r4, #20]
 8006b86:	3001      	adds	r0, #1
 8006b88:	4283      	cmp	r3, r0
 8006b8a:	d004      	beq.n	8006b96 <__swbuf_r+0x62>
 8006b8c:	89a3      	ldrh	r3, [r4, #12]
 8006b8e:	07db      	lsls	r3, r3, #31
 8006b90:	d506      	bpl.n	8006ba0 <__swbuf_r+0x6c>
 8006b92:	2e0a      	cmp	r6, #10
 8006b94:	d104      	bne.n	8006ba0 <__swbuf_r+0x6c>
 8006b96:	4621      	mov	r1, r4
 8006b98:	4628      	mov	r0, r5
 8006b9a:	f000 f919 	bl	8006dd0 <_fflush_r>
 8006b9e:	b988      	cbnz	r0, 8006bc4 <__swbuf_r+0x90>
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ba4:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <__swbuf_r+0x9c>)
 8006ba6:	429c      	cmp	r4, r3
 8006ba8:	d101      	bne.n	8006bae <__swbuf_r+0x7a>
 8006baa:	68ac      	ldr	r4, [r5, #8]
 8006bac:	e7cf      	b.n	8006b4e <__swbuf_r+0x1a>
 8006bae:	4b09      	ldr	r3, [pc, #36]	; (8006bd4 <__swbuf_r+0xa0>)
 8006bb0:	429c      	cmp	r4, r3
 8006bb2:	bf08      	it	eq
 8006bb4:	68ec      	ldreq	r4, [r5, #12]
 8006bb6:	e7ca      	b.n	8006b4e <__swbuf_r+0x1a>
 8006bb8:	4621      	mov	r1, r4
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f000 f80c 	bl	8006bd8 <__swsetup_r>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d0cb      	beq.n	8006b5c <__swbuf_r+0x28>
 8006bc4:	f04f 37ff 	mov.w	r7, #4294967295
 8006bc8:	e7ea      	b.n	8006ba0 <__swbuf_r+0x6c>
 8006bca:	bf00      	nop
 8006bcc:	08007904 	.word	0x08007904
 8006bd0:	08007924 	.word	0x08007924
 8006bd4:	080078e4 	.word	0x080078e4

08006bd8 <__swsetup_r>:
 8006bd8:	4b32      	ldr	r3, [pc, #200]	; (8006ca4 <__swsetup_r+0xcc>)
 8006bda:	b570      	push	{r4, r5, r6, lr}
 8006bdc:	681d      	ldr	r5, [r3, #0]
 8006bde:	4606      	mov	r6, r0
 8006be0:	460c      	mov	r4, r1
 8006be2:	b125      	cbz	r5, 8006bee <__swsetup_r+0x16>
 8006be4:	69ab      	ldr	r3, [r5, #24]
 8006be6:	b913      	cbnz	r3, 8006bee <__swsetup_r+0x16>
 8006be8:	4628      	mov	r0, r5
 8006bea:	f000 f985 	bl	8006ef8 <__sinit>
 8006bee:	4b2e      	ldr	r3, [pc, #184]	; (8006ca8 <__swsetup_r+0xd0>)
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	d10f      	bne.n	8006c14 <__swsetup_r+0x3c>
 8006bf4:	686c      	ldr	r4, [r5, #4]
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bfc:	0719      	lsls	r1, r3, #28
 8006bfe:	d42c      	bmi.n	8006c5a <__swsetup_r+0x82>
 8006c00:	06dd      	lsls	r5, r3, #27
 8006c02:	d411      	bmi.n	8006c28 <__swsetup_r+0x50>
 8006c04:	2309      	movs	r3, #9
 8006c06:	6033      	str	r3, [r6, #0]
 8006c08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c0c:	81a3      	strh	r3, [r4, #12]
 8006c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c12:	e03e      	b.n	8006c92 <__swsetup_r+0xba>
 8006c14:	4b25      	ldr	r3, [pc, #148]	; (8006cac <__swsetup_r+0xd4>)
 8006c16:	429c      	cmp	r4, r3
 8006c18:	d101      	bne.n	8006c1e <__swsetup_r+0x46>
 8006c1a:	68ac      	ldr	r4, [r5, #8]
 8006c1c:	e7eb      	b.n	8006bf6 <__swsetup_r+0x1e>
 8006c1e:	4b24      	ldr	r3, [pc, #144]	; (8006cb0 <__swsetup_r+0xd8>)
 8006c20:	429c      	cmp	r4, r3
 8006c22:	bf08      	it	eq
 8006c24:	68ec      	ldreq	r4, [r5, #12]
 8006c26:	e7e6      	b.n	8006bf6 <__swsetup_r+0x1e>
 8006c28:	0758      	lsls	r0, r3, #29
 8006c2a:	d512      	bpl.n	8006c52 <__swsetup_r+0x7a>
 8006c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c2e:	b141      	cbz	r1, 8006c42 <__swsetup_r+0x6a>
 8006c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c34:	4299      	cmp	r1, r3
 8006c36:	d002      	beq.n	8006c3e <__swsetup_r+0x66>
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f7ff fb67 	bl	800630c <_free_r>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	6363      	str	r3, [r4, #52]	; 0x34
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	6063      	str	r3, [r4, #4]
 8006c4e:	6923      	ldr	r3, [r4, #16]
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	89a3      	ldrh	r3, [r4, #12]
 8006c54:	f043 0308 	orr.w	r3, r3, #8
 8006c58:	81a3      	strh	r3, [r4, #12]
 8006c5a:	6923      	ldr	r3, [r4, #16]
 8006c5c:	b94b      	cbnz	r3, 8006c72 <__swsetup_r+0x9a>
 8006c5e:	89a3      	ldrh	r3, [r4, #12]
 8006c60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c68:	d003      	beq.n	8006c72 <__swsetup_r+0x9a>
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	f000 fa07 	bl	8007080 <__smakebuf_r>
 8006c72:	89a0      	ldrh	r0, [r4, #12]
 8006c74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c78:	f010 0301 	ands.w	r3, r0, #1
 8006c7c:	d00a      	beq.n	8006c94 <__swsetup_r+0xbc>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60a3      	str	r3, [r4, #8]
 8006c82:	6963      	ldr	r3, [r4, #20]
 8006c84:	425b      	negs	r3, r3
 8006c86:	61a3      	str	r3, [r4, #24]
 8006c88:	6923      	ldr	r3, [r4, #16]
 8006c8a:	b943      	cbnz	r3, 8006c9e <__swsetup_r+0xc6>
 8006c8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c90:	d1ba      	bne.n	8006c08 <__swsetup_r+0x30>
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	0781      	lsls	r1, r0, #30
 8006c96:	bf58      	it	pl
 8006c98:	6963      	ldrpl	r3, [r4, #20]
 8006c9a:	60a3      	str	r3, [r4, #8]
 8006c9c:	e7f4      	b.n	8006c88 <__swsetup_r+0xb0>
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	e7f7      	b.n	8006c92 <__swsetup_r+0xba>
 8006ca2:	bf00      	nop
 8006ca4:	20000008 	.word	0x20000008
 8006ca8:	08007904 	.word	0x08007904
 8006cac:	08007924 	.word	0x08007924
 8006cb0:	080078e4 	.word	0x080078e4

08006cb4 <abort>:
 8006cb4:	b508      	push	{r3, lr}
 8006cb6:	2006      	movs	r0, #6
 8006cb8:	f000 fa52 	bl	8007160 <raise>
 8006cbc:	2001      	movs	r0, #1
 8006cbe:	f7fa fb8f 	bl	80013e0 <_exit>
	...

08006cc4 <__sflush_r>:
 8006cc4:	898a      	ldrh	r2, [r1, #12]
 8006cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cca:	4605      	mov	r5, r0
 8006ccc:	0710      	lsls	r0, r2, #28
 8006cce:	460c      	mov	r4, r1
 8006cd0:	d458      	bmi.n	8006d84 <__sflush_r+0xc0>
 8006cd2:	684b      	ldr	r3, [r1, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	dc05      	bgt.n	8006ce4 <__sflush_r+0x20>
 8006cd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	dc02      	bgt.n	8006ce4 <__sflush_r+0x20>
 8006cde:	2000      	movs	r0, #0
 8006ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ce4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ce6:	2e00      	cmp	r6, #0
 8006ce8:	d0f9      	beq.n	8006cde <__sflush_r+0x1a>
 8006cea:	2300      	movs	r3, #0
 8006cec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cf0:	682f      	ldr	r7, [r5, #0]
 8006cf2:	602b      	str	r3, [r5, #0]
 8006cf4:	d032      	beq.n	8006d5c <__sflush_r+0x98>
 8006cf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	075a      	lsls	r2, r3, #29
 8006cfc:	d505      	bpl.n	8006d0a <__sflush_r+0x46>
 8006cfe:	6863      	ldr	r3, [r4, #4]
 8006d00:	1ac0      	subs	r0, r0, r3
 8006d02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d04:	b10b      	cbz	r3, 8006d0a <__sflush_r+0x46>
 8006d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d08:	1ac0      	subs	r0, r0, r3
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d10:	6a21      	ldr	r1, [r4, #32]
 8006d12:	4628      	mov	r0, r5
 8006d14:	47b0      	blx	r6
 8006d16:	1c43      	adds	r3, r0, #1
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	d106      	bne.n	8006d2a <__sflush_r+0x66>
 8006d1c:	6829      	ldr	r1, [r5, #0]
 8006d1e:	291d      	cmp	r1, #29
 8006d20:	d82c      	bhi.n	8006d7c <__sflush_r+0xb8>
 8006d22:	4a2a      	ldr	r2, [pc, #168]	; (8006dcc <__sflush_r+0x108>)
 8006d24:	40ca      	lsrs	r2, r1
 8006d26:	07d6      	lsls	r6, r2, #31
 8006d28:	d528      	bpl.n	8006d7c <__sflush_r+0xb8>
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	6062      	str	r2, [r4, #4]
 8006d2e:	04d9      	lsls	r1, r3, #19
 8006d30:	6922      	ldr	r2, [r4, #16]
 8006d32:	6022      	str	r2, [r4, #0]
 8006d34:	d504      	bpl.n	8006d40 <__sflush_r+0x7c>
 8006d36:	1c42      	adds	r2, r0, #1
 8006d38:	d101      	bne.n	8006d3e <__sflush_r+0x7a>
 8006d3a:	682b      	ldr	r3, [r5, #0]
 8006d3c:	b903      	cbnz	r3, 8006d40 <__sflush_r+0x7c>
 8006d3e:	6560      	str	r0, [r4, #84]	; 0x54
 8006d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d42:	602f      	str	r7, [r5, #0]
 8006d44:	2900      	cmp	r1, #0
 8006d46:	d0ca      	beq.n	8006cde <__sflush_r+0x1a>
 8006d48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d4c:	4299      	cmp	r1, r3
 8006d4e:	d002      	beq.n	8006d56 <__sflush_r+0x92>
 8006d50:	4628      	mov	r0, r5
 8006d52:	f7ff fadb 	bl	800630c <_free_r>
 8006d56:	2000      	movs	r0, #0
 8006d58:	6360      	str	r0, [r4, #52]	; 0x34
 8006d5a:	e7c1      	b.n	8006ce0 <__sflush_r+0x1c>
 8006d5c:	6a21      	ldr	r1, [r4, #32]
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4628      	mov	r0, r5
 8006d62:	47b0      	blx	r6
 8006d64:	1c41      	adds	r1, r0, #1
 8006d66:	d1c7      	bne.n	8006cf8 <__sflush_r+0x34>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0c4      	beq.n	8006cf8 <__sflush_r+0x34>
 8006d6e:	2b1d      	cmp	r3, #29
 8006d70:	d001      	beq.n	8006d76 <__sflush_r+0xb2>
 8006d72:	2b16      	cmp	r3, #22
 8006d74:	d101      	bne.n	8006d7a <__sflush_r+0xb6>
 8006d76:	602f      	str	r7, [r5, #0]
 8006d78:	e7b1      	b.n	8006cde <__sflush_r+0x1a>
 8006d7a:	89a3      	ldrh	r3, [r4, #12]
 8006d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d80:	81a3      	strh	r3, [r4, #12]
 8006d82:	e7ad      	b.n	8006ce0 <__sflush_r+0x1c>
 8006d84:	690f      	ldr	r7, [r1, #16]
 8006d86:	2f00      	cmp	r7, #0
 8006d88:	d0a9      	beq.n	8006cde <__sflush_r+0x1a>
 8006d8a:	0793      	lsls	r3, r2, #30
 8006d8c:	680e      	ldr	r6, [r1, #0]
 8006d8e:	bf08      	it	eq
 8006d90:	694b      	ldreq	r3, [r1, #20]
 8006d92:	600f      	str	r7, [r1, #0]
 8006d94:	bf18      	it	ne
 8006d96:	2300      	movne	r3, #0
 8006d98:	eba6 0807 	sub.w	r8, r6, r7
 8006d9c:	608b      	str	r3, [r1, #8]
 8006d9e:	f1b8 0f00 	cmp.w	r8, #0
 8006da2:	dd9c      	ble.n	8006cde <__sflush_r+0x1a>
 8006da4:	6a21      	ldr	r1, [r4, #32]
 8006da6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006da8:	4643      	mov	r3, r8
 8006daa:	463a      	mov	r2, r7
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b0      	blx	r6
 8006db0:	2800      	cmp	r0, #0
 8006db2:	dc06      	bgt.n	8006dc2 <__sflush_r+0xfe>
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dba:	81a3      	strh	r3, [r4, #12]
 8006dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc0:	e78e      	b.n	8006ce0 <__sflush_r+0x1c>
 8006dc2:	4407      	add	r7, r0
 8006dc4:	eba8 0800 	sub.w	r8, r8, r0
 8006dc8:	e7e9      	b.n	8006d9e <__sflush_r+0xda>
 8006dca:	bf00      	nop
 8006dcc:	20400001 	.word	0x20400001

08006dd0 <_fflush_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	690b      	ldr	r3, [r1, #16]
 8006dd4:	4605      	mov	r5, r0
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	b913      	cbnz	r3, 8006de0 <_fflush_r+0x10>
 8006dda:	2500      	movs	r5, #0
 8006ddc:	4628      	mov	r0, r5
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	b118      	cbz	r0, 8006dea <_fflush_r+0x1a>
 8006de2:	6983      	ldr	r3, [r0, #24]
 8006de4:	b90b      	cbnz	r3, 8006dea <_fflush_r+0x1a>
 8006de6:	f000 f887 	bl	8006ef8 <__sinit>
 8006dea:	4b14      	ldr	r3, [pc, #80]	; (8006e3c <_fflush_r+0x6c>)
 8006dec:	429c      	cmp	r4, r3
 8006dee:	d11b      	bne.n	8006e28 <_fflush_r+0x58>
 8006df0:	686c      	ldr	r4, [r5, #4]
 8006df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0ef      	beq.n	8006dda <_fflush_r+0xa>
 8006dfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006dfc:	07d0      	lsls	r0, r2, #31
 8006dfe:	d404      	bmi.n	8006e0a <_fflush_r+0x3a>
 8006e00:	0599      	lsls	r1, r3, #22
 8006e02:	d402      	bmi.n	8006e0a <_fflush_r+0x3a>
 8006e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e06:	f000 f915 	bl	8007034 <__retarget_lock_acquire_recursive>
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	f7ff ff59 	bl	8006cc4 <__sflush_r>
 8006e12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e14:	07da      	lsls	r2, r3, #31
 8006e16:	4605      	mov	r5, r0
 8006e18:	d4e0      	bmi.n	8006ddc <_fflush_r+0xc>
 8006e1a:	89a3      	ldrh	r3, [r4, #12]
 8006e1c:	059b      	lsls	r3, r3, #22
 8006e1e:	d4dd      	bmi.n	8006ddc <_fflush_r+0xc>
 8006e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e22:	f000 f908 	bl	8007036 <__retarget_lock_release_recursive>
 8006e26:	e7d9      	b.n	8006ddc <_fflush_r+0xc>
 8006e28:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <_fflush_r+0x70>)
 8006e2a:	429c      	cmp	r4, r3
 8006e2c:	d101      	bne.n	8006e32 <_fflush_r+0x62>
 8006e2e:	68ac      	ldr	r4, [r5, #8]
 8006e30:	e7df      	b.n	8006df2 <_fflush_r+0x22>
 8006e32:	4b04      	ldr	r3, [pc, #16]	; (8006e44 <_fflush_r+0x74>)
 8006e34:	429c      	cmp	r4, r3
 8006e36:	bf08      	it	eq
 8006e38:	68ec      	ldreq	r4, [r5, #12]
 8006e3a:	e7da      	b.n	8006df2 <_fflush_r+0x22>
 8006e3c:	08007904 	.word	0x08007904
 8006e40:	08007924 	.word	0x08007924
 8006e44:	080078e4 	.word	0x080078e4

08006e48 <std>:
 8006e48:	2300      	movs	r3, #0
 8006e4a:	b510      	push	{r4, lr}
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e56:	6083      	str	r3, [r0, #8]
 8006e58:	8181      	strh	r1, [r0, #12]
 8006e5a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e5c:	81c2      	strh	r2, [r0, #14]
 8006e5e:	6183      	str	r3, [r0, #24]
 8006e60:	4619      	mov	r1, r3
 8006e62:	2208      	movs	r2, #8
 8006e64:	305c      	adds	r0, #92	; 0x5c
 8006e66:	f7fb fe0d 	bl	8002a84 <memset>
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <std+0x38>)
 8006e6c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <std+0x3c>)
 8006e70:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e72:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <std+0x40>)
 8006e74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e76:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <std+0x44>)
 8006e78:	6224      	str	r4, [r4, #32]
 8006e7a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e7c:	bd10      	pop	{r4, pc}
 8006e7e:	bf00      	nop
 8006e80:	08007199 	.word	0x08007199
 8006e84:	080071bb 	.word	0x080071bb
 8006e88:	080071f3 	.word	0x080071f3
 8006e8c:	08007217 	.word	0x08007217

08006e90 <_cleanup_r>:
 8006e90:	4901      	ldr	r1, [pc, #4]	; (8006e98 <_cleanup_r+0x8>)
 8006e92:	f000 b8af 	b.w	8006ff4 <_fwalk_reent>
 8006e96:	bf00      	nop
 8006e98:	08006dd1 	.word	0x08006dd1

08006e9c <__sfmoreglue>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	1e4a      	subs	r2, r1, #1
 8006ea0:	2568      	movs	r5, #104	; 0x68
 8006ea2:	4355      	muls	r5, r2
 8006ea4:	460e      	mov	r6, r1
 8006ea6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006eaa:	f7ff fa7f 	bl	80063ac <_malloc_r>
 8006eae:	4604      	mov	r4, r0
 8006eb0:	b140      	cbz	r0, 8006ec4 <__sfmoreglue+0x28>
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	e9c0 1600 	strd	r1, r6, [r0]
 8006eb8:	300c      	adds	r0, #12
 8006eba:	60a0      	str	r0, [r4, #8]
 8006ebc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ec0:	f7fb fde0 	bl	8002a84 <memset>
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}

08006ec8 <__sfp_lock_acquire>:
 8006ec8:	4801      	ldr	r0, [pc, #4]	; (8006ed0 <__sfp_lock_acquire+0x8>)
 8006eca:	f000 b8b3 	b.w	8007034 <__retarget_lock_acquire_recursive>
 8006ece:	bf00      	nop
 8006ed0:	200002d4 	.word	0x200002d4

08006ed4 <__sfp_lock_release>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <__sfp_lock_release+0x8>)
 8006ed6:	f000 b8ae 	b.w	8007036 <__retarget_lock_release_recursive>
 8006eda:	bf00      	nop
 8006edc:	200002d4 	.word	0x200002d4

08006ee0 <__sinit_lock_acquire>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	; (8006ee8 <__sinit_lock_acquire+0x8>)
 8006ee2:	f000 b8a7 	b.w	8007034 <__retarget_lock_acquire_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	200002cf 	.word	0x200002cf

08006eec <__sinit_lock_release>:
 8006eec:	4801      	ldr	r0, [pc, #4]	; (8006ef4 <__sinit_lock_release+0x8>)
 8006eee:	f000 b8a2 	b.w	8007036 <__retarget_lock_release_recursive>
 8006ef2:	bf00      	nop
 8006ef4:	200002cf 	.word	0x200002cf

08006ef8 <__sinit>:
 8006ef8:	b510      	push	{r4, lr}
 8006efa:	4604      	mov	r4, r0
 8006efc:	f7ff fff0 	bl	8006ee0 <__sinit_lock_acquire>
 8006f00:	69a3      	ldr	r3, [r4, #24]
 8006f02:	b11b      	cbz	r3, 8006f0c <__sinit+0x14>
 8006f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f08:	f7ff bff0 	b.w	8006eec <__sinit_lock_release>
 8006f0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f10:	6523      	str	r3, [r4, #80]	; 0x50
 8006f12:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <__sinit+0x68>)
 8006f14:	4a13      	ldr	r2, [pc, #76]	; (8006f64 <__sinit+0x6c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f1a:	42a3      	cmp	r3, r4
 8006f1c:	bf04      	itt	eq
 8006f1e:	2301      	moveq	r3, #1
 8006f20:	61a3      	streq	r3, [r4, #24]
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 f820 	bl	8006f68 <__sfp>
 8006f28:	6060      	str	r0, [r4, #4]
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f000 f81c 	bl	8006f68 <__sfp>
 8006f30:	60a0      	str	r0, [r4, #8]
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 f818 	bl	8006f68 <__sfp>
 8006f38:	2200      	movs	r2, #0
 8006f3a:	60e0      	str	r0, [r4, #12]
 8006f3c:	2104      	movs	r1, #4
 8006f3e:	6860      	ldr	r0, [r4, #4]
 8006f40:	f7ff ff82 	bl	8006e48 <std>
 8006f44:	68a0      	ldr	r0, [r4, #8]
 8006f46:	2201      	movs	r2, #1
 8006f48:	2109      	movs	r1, #9
 8006f4a:	f7ff ff7d 	bl	8006e48 <std>
 8006f4e:	68e0      	ldr	r0, [r4, #12]
 8006f50:	2202      	movs	r2, #2
 8006f52:	2112      	movs	r1, #18
 8006f54:	f7ff ff78 	bl	8006e48 <std>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	61a3      	str	r3, [r4, #24]
 8006f5c:	e7d2      	b.n	8006f04 <__sinit+0xc>
 8006f5e:	bf00      	nop
 8006f60:	08007590 	.word	0x08007590
 8006f64:	08006e91 	.word	0x08006e91

08006f68 <__sfp>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	4607      	mov	r7, r0
 8006f6c:	f7ff ffac 	bl	8006ec8 <__sfp_lock_acquire>
 8006f70:	4b1e      	ldr	r3, [pc, #120]	; (8006fec <__sfp+0x84>)
 8006f72:	681e      	ldr	r6, [r3, #0]
 8006f74:	69b3      	ldr	r3, [r6, #24]
 8006f76:	b913      	cbnz	r3, 8006f7e <__sfp+0x16>
 8006f78:	4630      	mov	r0, r6
 8006f7a:	f7ff ffbd 	bl	8006ef8 <__sinit>
 8006f7e:	3648      	adds	r6, #72	; 0x48
 8006f80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	d503      	bpl.n	8006f90 <__sfp+0x28>
 8006f88:	6833      	ldr	r3, [r6, #0]
 8006f8a:	b30b      	cbz	r3, 8006fd0 <__sfp+0x68>
 8006f8c:	6836      	ldr	r6, [r6, #0]
 8006f8e:	e7f7      	b.n	8006f80 <__sfp+0x18>
 8006f90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f94:	b9d5      	cbnz	r5, 8006fcc <__sfp+0x64>
 8006f96:	4b16      	ldr	r3, [pc, #88]	; (8006ff0 <__sfp+0x88>)
 8006f98:	60e3      	str	r3, [r4, #12]
 8006f9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f9e:	6665      	str	r5, [r4, #100]	; 0x64
 8006fa0:	f000 f847 	bl	8007032 <__retarget_lock_init_recursive>
 8006fa4:	f7ff ff96 	bl	8006ed4 <__sfp_lock_release>
 8006fa8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fb0:	6025      	str	r5, [r4, #0]
 8006fb2:	61a5      	str	r5, [r4, #24]
 8006fb4:	2208      	movs	r2, #8
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fbc:	f7fb fd62 	bl	8002a84 <memset>
 8006fc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fc8:	4620      	mov	r0, r4
 8006fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fcc:	3468      	adds	r4, #104	; 0x68
 8006fce:	e7d9      	b.n	8006f84 <__sfp+0x1c>
 8006fd0:	2104      	movs	r1, #4
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	f7ff ff62 	bl	8006e9c <__sfmoreglue>
 8006fd8:	4604      	mov	r4, r0
 8006fda:	6030      	str	r0, [r6, #0]
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d1d5      	bne.n	8006f8c <__sfp+0x24>
 8006fe0:	f7ff ff78 	bl	8006ed4 <__sfp_lock_release>
 8006fe4:	230c      	movs	r3, #12
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	e7ee      	b.n	8006fc8 <__sfp+0x60>
 8006fea:	bf00      	nop
 8006fec:	08007590 	.word	0x08007590
 8006ff0:	ffff0001 	.word	0xffff0001

08006ff4 <_fwalk_reent>:
 8006ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	4688      	mov	r8, r1
 8006ffc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007000:	2700      	movs	r7, #0
 8007002:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007006:	f1b9 0901 	subs.w	r9, r9, #1
 800700a:	d505      	bpl.n	8007018 <_fwalk_reent+0x24>
 800700c:	6824      	ldr	r4, [r4, #0]
 800700e:	2c00      	cmp	r4, #0
 8007010:	d1f7      	bne.n	8007002 <_fwalk_reent+0xe>
 8007012:	4638      	mov	r0, r7
 8007014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007018:	89ab      	ldrh	r3, [r5, #12]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d907      	bls.n	800702e <_fwalk_reent+0x3a>
 800701e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007022:	3301      	adds	r3, #1
 8007024:	d003      	beq.n	800702e <_fwalk_reent+0x3a>
 8007026:	4629      	mov	r1, r5
 8007028:	4630      	mov	r0, r6
 800702a:	47c0      	blx	r8
 800702c:	4307      	orrs	r7, r0
 800702e:	3568      	adds	r5, #104	; 0x68
 8007030:	e7e9      	b.n	8007006 <_fwalk_reent+0x12>

08007032 <__retarget_lock_init_recursive>:
 8007032:	4770      	bx	lr

08007034 <__retarget_lock_acquire_recursive>:
 8007034:	4770      	bx	lr

08007036 <__retarget_lock_release_recursive>:
 8007036:	4770      	bx	lr

08007038 <__swhatbuf_r>:
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	460e      	mov	r6, r1
 800703c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007040:	2900      	cmp	r1, #0
 8007042:	b096      	sub	sp, #88	; 0x58
 8007044:	4614      	mov	r4, r2
 8007046:	461d      	mov	r5, r3
 8007048:	da07      	bge.n	800705a <__swhatbuf_r+0x22>
 800704a:	2300      	movs	r3, #0
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	89b3      	ldrh	r3, [r6, #12]
 8007050:	061a      	lsls	r2, r3, #24
 8007052:	d410      	bmi.n	8007076 <__swhatbuf_r+0x3e>
 8007054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007058:	e00e      	b.n	8007078 <__swhatbuf_r+0x40>
 800705a:	466a      	mov	r2, sp
 800705c:	f000 f902 	bl	8007264 <_fstat_r>
 8007060:	2800      	cmp	r0, #0
 8007062:	dbf2      	blt.n	800704a <__swhatbuf_r+0x12>
 8007064:	9a01      	ldr	r2, [sp, #4]
 8007066:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800706a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800706e:	425a      	negs	r2, r3
 8007070:	415a      	adcs	r2, r3
 8007072:	602a      	str	r2, [r5, #0]
 8007074:	e7ee      	b.n	8007054 <__swhatbuf_r+0x1c>
 8007076:	2340      	movs	r3, #64	; 0x40
 8007078:	2000      	movs	r0, #0
 800707a:	6023      	str	r3, [r4, #0]
 800707c:	b016      	add	sp, #88	; 0x58
 800707e:	bd70      	pop	{r4, r5, r6, pc}

08007080 <__smakebuf_r>:
 8007080:	898b      	ldrh	r3, [r1, #12]
 8007082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007084:	079d      	lsls	r5, r3, #30
 8007086:	4606      	mov	r6, r0
 8007088:	460c      	mov	r4, r1
 800708a:	d507      	bpl.n	800709c <__smakebuf_r+0x1c>
 800708c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	6123      	str	r3, [r4, #16]
 8007094:	2301      	movs	r3, #1
 8007096:	6163      	str	r3, [r4, #20]
 8007098:	b002      	add	sp, #8
 800709a:	bd70      	pop	{r4, r5, r6, pc}
 800709c:	ab01      	add	r3, sp, #4
 800709e:	466a      	mov	r2, sp
 80070a0:	f7ff ffca 	bl	8007038 <__swhatbuf_r>
 80070a4:	9900      	ldr	r1, [sp, #0]
 80070a6:	4605      	mov	r5, r0
 80070a8:	4630      	mov	r0, r6
 80070aa:	f7ff f97f 	bl	80063ac <_malloc_r>
 80070ae:	b948      	cbnz	r0, 80070c4 <__smakebuf_r+0x44>
 80070b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070b4:	059a      	lsls	r2, r3, #22
 80070b6:	d4ef      	bmi.n	8007098 <__smakebuf_r+0x18>
 80070b8:	f023 0303 	bic.w	r3, r3, #3
 80070bc:	f043 0302 	orr.w	r3, r3, #2
 80070c0:	81a3      	strh	r3, [r4, #12]
 80070c2:	e7e3      	b.n	800708c <__smakebuf_r+0xc>
 80070c4:	4b0d      	ldr	r3, [pc, #52]	; (80070fc <__smakebuf_r+0x7c>)
 80070c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	6020      	str	r0, [r4, #0]
 80070cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d0:	81a3      	strh	r3, [r4, #12]
 80070d2:	9b00      	ldr	r3, [sp, #0]
 80070d4:	6163      	str	r3, [r4, #20]
 80070d6:	9b01      	ldr	r3, [sp, #4]
 80070d8:	6120      	str	r0, [r4, #16]
 80070da:	b15b      	cbz	r3, 80070f4 <__smakebuf_r+0x74>
 80070dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070e0:	4630      	mov	r0, r6
 80070e2:	f000 f8d1 	bl	8007288 <_isatty_r>
 80070e6:	b128      	cbz	r0, 80070f4 <__smakebuf_r+0x74>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	f043 0301 	orr.w	r3, r3, #1
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	89a0      	ldrh	r0, [r4, #12]
 80070f6:	4305      	orrs	r5, r0
 80070f8:	81a5      	strh	r5, [r4, #12]
 80070fa:	e7cd      	b.n	8007098 <__smakebuf_r+0x18>
 80070fc:	08006e91 	.word	0x08006e91

08007100 <_malloc_usable_size_r>:
 8007100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007104:	1f18      	subs	r0, r3, #4
 8007106:	2b00      	cmp	r3, #0
 8007108:	bfbc      	itt	lt
 800710a:	580b      	ldrlt	r3, [r1, r0]
 800710c:	18c0      	addlt	r0, r0, r3
 800710e:	4770      	bx	lr

08007110 <_raise_r>:
 8007110:	291f      	cmp	r1, #31
 8007112:	b538      	push	{r3, r4, r5, lr}
 8007114:	4604      	mov	r4, r0
 8007116:	460d      	mov	r5, r1
 8007118:	d904      	bls.n	8007124 <_raise_r+0x14>
 800711a:	2316      	movs	r3, #22
 800711c:	6003      	str	r3, [r0, #0]
 800711e:	f04f 30ff 	mov.w	r0, #4294967295
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007126:	b112      	cbz	r2, 800712e <_raise_r+0x1e>
 8007128:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800712c:	b94b      	cbnz	r3, 8007142 <_raise_r+0x32>
 800712e:	4620      	mov	r0, r4
 8007130:	f000 f830 	bl	8007194 <_getpid_r>
 8007134:	462a      	mov	r2, r5
 8007136:	4601      	mov	r1, r0
 8007138:	4620      	mov	r0, r4
 800713a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800713e:	f000 b817 	b.w	8007170 <_kill_r>
 8007142:	2b01      	cmp	r3, #1
 8007144:	d00a      	beq.n	800715c <_raise_r+0x4c>
 8007146:	1c59      	adds	r1, r3, #1
 8007148:	d103      	bne.n	8007152 <_raise_r+0x42>
 800714a:	2316      	movs	r3, #22
 800714c:	6003      	str	r3, [r0, #0]
 800714e:	2001      	movs	r0, #1
 8007150:	e7e7      	b.n	8007122 <_raise_r+0x12>
 8007152:	2400      	movs	r4, #0
 8007154:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007158:	4628      	mov	r0, r5
 800715a:	4798      	blx	r3
 800715c:	2000      	movs	r0, #0
 800715e:	e7e0      	b.n	8007122 <_raise_r+0x12>

08007160 <raise>:
 8007160:	4b02      	ldr	r3, [pc, #8]	; (800716c <raise+0xc>)
 8007162:	4601      	mov	r1, r0
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	f7ff bfd3 	b.w	8007110 <_raise_r>
 800716a:	bf00      	nop
 800716c:	20000008 	.word	0x20000008

08007170 <_kill_r>:
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	4d07      	ldr	r5, [pc, #28]	; (8007190 <_kill_r+0x20>)
 8007174:	2300      	movs	r3, #0
 8007176:	4604      	mov	r4, r0
 8007178:	4608      	mov	r0, r1
 800717a:	4611      	mov	r1, r2
 800717c:	602b      	str	r3, [r5, #0]
 800717e:	f7fa f91f 	bl	80013c0 <_kill>
 8007182:	1c43      	adds	r3, r0, #1
 8007184:	d102      	bne.n	800718c <_kill_r+0x1c>
 8007186:	682b      	ldr	r3, [r5, #0]
 8007188:	b103      	cbz	r3, 800718c <_kill_r+0x1c>
 800718a:	6023      	str	r3, [r4, #0]
 800718c:	bd38      	pop	{r3, r4, r5, pc}
 800718e:	bf00      	nop
 8007190:	200002c8 	.word	0x200002c8

08007194 <_getpid_r>:
 8007194:	f7fa b90c 	b.w	80013b0 <_getpid>

08007198 <__sread>:
 8007198:	b510      	push	{r4, lr}
 800719a:	460c      	mov	r4, r1
 800719c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a0:	f000 f894 	bl	80072cc <_read_r>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	bfab      	itete	ge
 80071a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071aa:	89a3      	ldrhlt	r3, [r4, #12]
 80071ac:	181b      	addge	r3, r3, r0
 80071ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071b2:	bfac      	ite	ge
 80071b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80071b6:	81a3      	strhlt	r3, [r4, #12]
 80071b8:	bd10      	pop	{r4, pc}

080071ba <__swrite>:
 80071ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071be:	461f      	mov	r7, r3
 80071c0:	898b      	ldrh	r3, [r1, #12]
 80071c2:	05db      	lsls	r3, r3, #23
 80071c4:	4605      	mov	r5, r0
 80071c6:	460c      	mov	r4, r1
 80071c8:	4616      	mov	r6, r2
 80071ca:	d505      	bpl.n	80071d8 <__swrite+0x1e>
 80071cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d0:	2302      	movs	r3, #2
 80071d2:	2200      	movs	r2, #0
 80071d4:	f000 f868 	bl	80072a8 <_lseek_r>
 80071d8:	89a3      	ldrh	r3, [r4, #12]
 80071da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071e2:	81a3      	strh	r3, [r4, #12]
 80071e4:	4632      	mov	r2, r6
 80071e6:	463b      	mov	r3, r7
 80071e8:	4628      	mov	r0, r5
 80071ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071ee:	f000 b817 	b.w	8007220 <_write_r>

080071f2 <__sseek>:
 80071f2:	b510      	push	{r4, lr}
 80071f4:	460c      	mov	r4, r1
 80071f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071fa:	f000 f855 	bl	80072a8 <_lseek_r>
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	bf15      	itete	ne
 8007204:	6560      	strne	r0, [r4, #84]	; 0x54
 8007206:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800720a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800720e:	81a3      	strheq	r3, [r4, #12]
 8007210:	bf18      	it	ne
 8007212:	81a3      	strhne	r3, [r4, #12]
 8007214:	bd10      	pop	{r4, pc}

08007216 <__sclose>:
 8007216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721a:	f000 b813 	b.w	8007244 <_close_r>
	...

08007220 <_write_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4d07      	ldr	r5, [pc, #28]	; (8007240 <_write_r+0x20>)
 8007224:	4604      	mov	r4, r0
 8007226:	4608      	mov	r0, r1
 8007228:	4611      	mov	r1, r2
 800722a:	2200      	movs	r2, #0
 800722c:	602a      	str	r2, [r5, #0]
 800722e:	461a      	mov	r2, r3
 8007230:	f7fa f8fd 	bl	800142e <_write>
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d102      	bne.n	800723e <_write_r+0x1e>
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	b103      	cbz	r3, 800723e <_write_r+0x1e>
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	200002c8 	.word	0x200002c8

08007244 <_close_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4d06      	ldr	r5, [pc, #24]	; (8007260 <_close_r+0x1c>)
 8007248:	2300      	movs	r3, #0
 800724a:	4604      	mov	r4, r0
 800724c:	4608      	mov	r0, r1
 800724e:	602b      	str	r3, [r5, #0]
 8007250:	f7fa f909 	bl	8001466 <_close>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_close_r+0x1a>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	b103      	cbz	r3, 800725e <_close_r+0x1a>
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	200002c8 	.word	0x200002c8

08007264 <_fstat_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d07      	ldr	r5, [pc, #28]	; (8007284 <_fstat_r+0x20>)
 8007268:	2300      	movs	r3, #0
 800726a:	4604      	mov	r4, r0
 800726c:	4608      	mov	r0, r1
 800726e:	4611      	mov	r1, r2
 8007270:	602b      	str	r3, [r5, #0]
 8007272:	f7fa f904 	bl	800147e <_fstat>
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	d102      	bne.n	8007280 <_fstat_r+0x1c>
 800727a:	682b      	ldr	r3, [r5, #0]
 800727c:	b103      	cbz	r3, 8007280 <_fstat_r+0x1c>
 800727e:	6023      	str	r3, [r4, #0]
 8007280:	bd38      	pop	{r3, r4, r5, pc}
 8007282:	bf00      	nop
 8007284:	200002c8 	.word	0x200002c8

08007288 <_isatty_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	4d06      	ldr	r5, [pc, #24]	; (80072a4 <_isatty_r+0x1c>)
 800728c:	2300      	movs	r3, #0
 800728e:	4604      	mov	r4, r0
 8007290:	4608      	mov	r0, r1
 8007292:	602b      	str	r3, [r5, #0]
 8007294:	f7fa f903 	bl	800149e <_isatty>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d102      	bne.n	80072a2 <_isatty_r+0x1a>
 800729c:	682b      	ldr	r3, [r5, #0]
 800729e:	b103      	cbz	r3, 80072a2 <_isatty_r+0x1a>
 80072a0:	6023      	str	r3, [r4, #0]
 80072a2:	bd38      	pop	{r3, r4, r5, pc}
 80072a4:	200002c8 	.word	0x200002c8

080072a8 <_lseek_r>:
 80072a8:	b538      	push	{r3, r4, r5, lr}
 80072aa:	4d07      	ldr	r5, [pc, #28]	; (80072c8 <_lseek_r+0x20>)
 80072ac:	4604      	mov	r4, r0
 80072ae:	4608      	mov	r0, r1
 80072b0:	4611      	mov	r1, r2
 80072b2:	2200      	movs	r2, #0
 80072b4:	602a      	str	r2, [r5, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	f7fa f8fc 	bl	80014b4 <_lseek>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d102      	bne.n	80072c6 <_lseek_r+0x1e>
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	b103      	cbz	r3, 80072c6 <_lseek_r+0x1e>
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	bd38      	pop	{r3, r4, r5, pc}
 80072c8:	200002c8 	.word	0x200002c8

080072cc <_read_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4d07      	ldr	r5, [pc, #28]	; (80072ec <_read_r+0x20>)
 80072d0:	4604      	mov	r4, r0
 80072d2:	4608      	mov	r0, r1
 80072d4:	4611      	mov	r1, r2
 80072d6:	2200      	movs	r2, #0
 80072d8:	602a      	str	r2, [r5, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	f7fa f88a 	bl	80013f4 <_read>
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d102      	bne.n	80072ea <_read_r+0x1e>
 80072e4:	682b      	ldr	r3, [r5, #0]
 80072e6:	b103      	cbz	r3, 80072ea <_read_r+0x1e>
 80072e8:	6023      	str	r3, [r4, #0]
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
 80072ec:	200002c8 	.word	0x200002c8

080072f0 <_init>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr

080072fc <_fini>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr
