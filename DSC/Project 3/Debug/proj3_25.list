
proj3_25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000abc  08007d78  08007d78  00017d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008834  08008834  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008834  08008834  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008834  08008834  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008834  08008834  00018834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008838  08008838  00018838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800883c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          0000007c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000025c  2000025c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006949  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011d0  00000000  00000000  00026b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  00027d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000660  00000000  00000000  00028418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af43  00000000  00000000  00028a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000554d  00000000  00000000  000439bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d467  00000000  00000000  00048f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000d636f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003444  00000000  00000000  000d63c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d60 	.word	0x08007d60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08007d60 	.word	0x08007d60

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff23 	bl	8000b0c <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc99 	bl	8000628 <__aeabi_dmul>
 8000cf6:	f7ff ff6f 	bl	8000bd8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc1a 	bl	8000534 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc90 	bl	8000628 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff fad2 	bl	80002b8 <__aeabi_dsub>
 8000d14:	f7ff ff60 	bl	8000bd8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <LL_RCC_HSI_Enable+0x1c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <LL_RCC_HSI_Enable+0x1c>)
 8000d2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40021000 	.word	0x40021000

08000d44 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <LL_RCC_HSI_IsReady+0x24>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d54:	d101      	bne.n	8000d5a <LL_RCC_HSI_IsReady+0x16>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <LL_RCC_HSI_IsReady+0x18>
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000

08000d6c <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <LL_RCC_LSE_Enable+0x20>)
 8000d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <LL_RCC_LSE_Enable+0x20>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000

08000d90 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <LL_RCC_LSE_DisableBypass+0x20>)
 8000d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <LL_RCC_LSE_DisableBypass+0x20>)
 8000d9c:	f023 0304 	bic.w	r3, r3, #4
 8000da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000

08000db4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <LL_RCC_LSE_IsReady+0x24>)
 8000dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d101      	bne.n	8000dca <LL_RCC_LSE_IsReady+0x16>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e000      	b.n	8000dcc <LL_RCC_LSE_IsReady+0x18>
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40021000 	.word	0x40021000

08000ddc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <LL_RCC_MSI_Enable+0x1c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <LL_RCC_MSI_Enable+0x1c>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000

08000dfc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <LL_RCC_MSI_IsReady+0x20>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d101      	bne.n	8000e10 <LL_RCC_MSI_IsReady+0x14>
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e000      	b.n	8000e12 <LL_RCC_MSI_IsReady+0x16>
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	40021000 	.word	0x40021000

08000e20 <LL_RCC_MSI_EnablePLLMode>:
  *       ready
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_EnablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnablePLLMode(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000

08000e40 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000

08000e60 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <LL_RCC_MSI_SetRange+0x24>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e70:	4904      	ldr	r1, [pc, #16]	; (8000e84 <LL_RCC_MSI_SetRange+0x24>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	600b      	str	r3, [r1, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	40021000 	.word	0x40021000

08000e88 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <LL_RCC_SetSysClkSource+0x24>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f023 0203 	bic.w	r2, r3, #3
 8000e98:	4904      	ldr	r1, [pc, #16]	; (8000eac <LL_RCC_SetSysClkSource+0x24>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	608b      	str	r3, [r1, #8]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	40021000 	.word	0x40021000

08000eb0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <LL_RCC_GetSysClkSource+0x18>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000

08000ecc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000edc:	4904      	ldr	r1, [pc, #16]	; (8000ef0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	608b      	str	r3, [r1, #8]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f04:	4904      	ldr	r1, [pc, #16]	; (8000f18 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	608b      	str	r3, [r1, #8]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	40021000 	.word	0x40021000

08000f1c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f2c:	4904      	ldr	r1, [pc, #16]	; (8000f40 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	608b      	str	r3, [r1, #8]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	40021000 	.word	0x40021000

08000f44 <LL_RCC_ConfigMCO>:
  *         @arg @ref LL_RCC_MCO1_DIV_8
  *         @arg @ref LL_RCC_MCO1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ConfigMCO(uint32_t MCOxSource, uint32_t MCOxPrescaler)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <LL_RCC_ConfigMCO+0x2c>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	430b      	orrs	r3, r1
 8000f5c:	4904      	ldr	r1, [pc, #16]	; (8000f70 <LL_RCC_ConfigMCO+0x2c>)
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	608b      	str	r3, [r1, #8]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000

08000f74 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <LL_RCC_PLL_Enable+0x1c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <LL_RCC_PLL_Enable+0x1c>)
 8000f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <LL_RCC_PLL_Disable+0x1c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <LL_RCC_PLL_Disable+0x1c>)
 8000f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <LL_RCC_PLL_IsReady+0x24>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000fc4:	d101      	bne.n	8000fca <LL_RCC_PLL_IsReady+0x16>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <LL_RCC_PLL_IsReady+0x18>
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	68f9      	ldr	r1, [r7, #12]
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	4311      	orrs	r1, r2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	0212      	lsls	r2, r2, #8
 8000ffc:	4311      	orrs	r1, r2
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	430a      	orrs	r2, r1
 8001002:	4904      	ldr	r1, [pc, #16]	; (8001014 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001004:	4313      	orrs	r3, r2
 8001006:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	40021000 	.word	0x40021000
 8001018:	f9ff808c 	.word	0xf9ff808c

0800101c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001046:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4313      	orrs	r3, r2
 800104e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4013      	ands	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40021000 	.word	0x40021000

0800106c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001076:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001078:	4907      	ldr	r1, [pc, #28]	; (8001098 <LL_APB1_GRP1_EnableClock+0x2c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001082:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4013      	ands	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	40021000 	.word	0x40021000

0800109c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <LL_InitTick+0x30>)
 80010b0:	3b01      	subs	r3, #1
 80010b2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <LL_InitTick+0x30>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <LL_InitTick+0x30>)
 80010bc:	2205      	movs	r2, #5
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b08b      	sub	sp, #44	; 0x2c
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa93 f3a3 	rbit	r3, r3
 80010ea:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80010f6:	2320      	movs	r3, #32
 80010f8:	e003      	b.n	8001102 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	fab3 f383 	clz	r3, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2103      	movs	r1, #3
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	401a      	ands	r2, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	61fb      	str	r3, [r7, #28]
  return result;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001124:	2320      	movs	r3, #32
 8001126:	e003      	b.n	8001130 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	fab3 f383 	clz	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	431a      	orrs	r2, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	601a      	str	r2, [r3, #0]
}
 800113e:	bf00      	nop
 8001140:	372c      	adds	r7, #44	; 0x2c
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800114a:	b480      	push	{r7}
 800114c:	b08b      	sub	sp, #44	; 0x2c
 800114e:	af00      	add	r7, sp, #0
 8001150:	60f8      	str	r0, [r7, #12]
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	fa93 f3a3 	rbit	r3, r3
 8001164:	613b      	str	r3, [r7, #16]
  return result;
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001170:	2320      	movs	r3, #32
 8001172:	e003      	b.n	800117c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fab3 f383 	clz	r3, r3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2103      	movs	r1, #3
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	401a      	ands	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	61fb      	str	r3, [r7, #28]
  return result;
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800119e:	2320      	movs	r3, #32
 80011a0:	e003      	b.n	80011aa <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	fab3 f383 	clz	r3, r3
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	431a      	orrs	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80011b8:	bf00      	nop
 80011ba:	372c      	adds	r7, #44	; 0x2c
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b08b      	sub	sp, #44	; 0x2c
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a1a      	ldr	r2, [r3, #32]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa93 f3a3 	rbit	r3, r3
 80011de:	613b      	str	r3, [r7, #16]
  return result;
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80011ea:	2320      	movs	r3, #32
 80011ec:	e003      	b.n	80011f6 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	fab3 f383 	clz	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	210f      	movs	r1, #15
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	401a      	ands	r2, r3
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	fa93 f3a3 	rbit	r3, r3
 800120c:	61fb      	str	r3, [r7, #28]
  return result;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001218:	2320      	movs	r3, #32
 800121a:	e003      	b.n	8001224 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	fab3 f383 	clz	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	431a      	orrs	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001232:	bf00      	nop
 8001234:	372c      	adds	r7, #44	; 0x2c
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f043 0201 	orr.w	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 0201 	bic.w	r2, r3, #1
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	601a      	str	r2, [r3, #0]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 0320 	and.w	r3, r3, #32
 800128e:	2b20      	cmp	r3, #32
 8001290:	d101      	bne.n	8001296 <LL_USART_IsActiveFlag_RXNE+0x18>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b4:	2b40      	cmp	r3, #64	; 0x40
 80012b6:	d101      	bne.n	80012bc <LL_USART_IsActiveFlag_TC+0x18>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <LL_USART_IsActiveFlag_TC+0x1a>
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012da:	2b80      	cmp	r3, #128	; 0x80
 80012dc:	d101      	bne.n	80012e2 <LL_USART_IsActiveFlag_TXE+0x18>
 80012de:	2301      	movs	r3, #1
 80012e0:	e000      	b.n	80012e4 <LL_USART_IsActiveFlag_TXE+0x1a>
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	b29a      	uxth	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800133c:	4904      	ldr	r1, [pc, #16]	; (8001350 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40007000 	.word	0x40007000

08001354 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <LL_PWR_EnableBkUpAccess+0x1c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <LL_PWR_EnableBkUpAccess+0x1c>)
 800135e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40007000 	.word	0x40007000

08001374 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001384:	d101      	bne.n	800138a <LL_PWR_IsActiveFlag_VOS+0x16>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <LL_PWR_IsActiveFlag_VOS+0x18>
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40007000 	.word	0x40007000

0800139c <MCO_Init>:
const char *mco_source = "off";
uint32_t mco_prescaler = 1;
bool lse_ready = false;

// Inicjalizacja MCO na PA8
void MCO_Init(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff fe4b 	bl	800103c <LL_AHB2_GRP1_EnableClock>
    LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_8, LL_GPIO_MODE_ALTERNATE);
 80013a6:	2202      	movs	r2, #2
 80013a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f7ff fe8e 	bl	80010d0 <LL_GPIO_SetPinMode>
    LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_8, LL_GPIO_AF_0);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013be:	f7ff ff01 	bl	80011c4 <LL_GPIO_SetAFPin_0_7>
    LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_8, LL_GPIO_SPEED_FREQ_HIGH); //maksymalna szybkosc przelaczania
 80013c2:	2202      	movs	r2, #2
 80013c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013cc:	f7ff febd 	bl	800114a <LL_GPIO_SetPinSpeed>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <LSE_Init>:

// Inicjalizacja LSE
void LSE_Init(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
    LL_PWR_EnableBkUpAccess(); //Odblokowanie
 80013da:	f7ff ffbb 	bl	8001354 <LL_PWR_EnableBkUpAccess>
    LL_RCC_LSE_DisableBypass(); //Wylacza bypass
 80013de:	f7ff fcd7 	bl	8000d90 <LL_RCC_LSE_DisableBypass>
    LL_RCC_LSE_Enable();
 80013e2:	f7ff fcc3 	bl	8000d6c <LL_RCC_LSE_Enable>

    // Timeout 5 sekund
    uint32_t timeout = 500;
 80013e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013ea:	607b      	str	r3, [r7, #4]
    SystemCoreClockUpdate();
 80013ec:	f000 fd22 	bl	8001e34 <SystemCoreClockUpdate>
    LL_Init1msTick(SystemCoreClock);
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <LSE_Init+0x6c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f001 fb99 	bl	8002b2c <LL_Init1msTick>
    while (!LL_RCC_LSE_IsReady() && timeout--){
 80013fa:	e002      	b.n	8001402 <LSE_Init+0x2e>
    	LL_mDelay(10);
 80013fc:	200a      	movs	r0, #10
 80013fe:	f001 fba3 	bl	8002b48 <LL_mDelay>
    while (!LL_RCC_LSE_IsReady() && timeout--){
 8001402:	f7ff fcd7 	bl	8000db4 <LL_RCC_LSE_IsReady>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d104      	bne.n	8001416 <LSE_Init+0x42>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	1e5a      	subs	r2, r3, #1
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f2      	bne.n	80013fc <LSE_Init+0x28>
    }

    UART_Init();
 8001416:	f000 f81b 	bl	8001450 <UART_Init>
    if(LL_RCC_LSE_IsReady()) {
 800141a:	f7ff fccb 	bl	8000db4 <LL_RCC_LSE_IsReady>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <LSE_Init+0x5e>
        lse_ready = true;
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <LSE_Init+0x70>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
        UART_SendString("LSE gotowe (32.768 kHz)\r\n");
 800142a:	4807      	ldr	r0, [pc, #28]	; (8001448 <LSE_Init+0x74>)
 800142c:	f000 f86e 	bl	800150c <UART_SendString>
    } else {
        UART_SendString("Blad inicjalizacji LSE!\r\n");
    }
}
 8001430:	e002      	b.n	8001438 <LSE_Init+0x64>
        UART_SendString("Blad inicjalizacji LSE!\r\n");
 8001432:	4806      	ldr	r0, [pc, #24]	; (800144c <LSE_Init+0x78>)
 8001434:	f000 f86a 	bl	800150c <UART_SendString>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000008 	.word	0x20000008
 8001444:	200001fd 	.word	0x200001fd
 8001448:	08007d7c 	.word	0x08007d7c
 800144c:	08007d98 	.word	0x08007d98

08001450 <UART_Init>:

void UART_Init(void){
 8001450:	b580      	push	{r7, lr}
 8001452:	b098      	sub	sp, #96	; 0x60
 8001454:	af00      	add	r7, sp, #0
    // 1) Wlaczenie zegarow dla GPIOA i USART2
    LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001456:	2001      	movs	r0, #1
 8001458:	f7ff fdf0 	bl	800103c <LL_AHB2_GRP1_EnableClock>
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800145c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001460:	f7ff fe04 	bl	800106c <LL_APB1_GRP1_EnableClock>

    // 2) Konfiguracja PA2 jako TX (AF7) i PA15 jako RX (AF3)
    LL_GPIO_InitTypeDef gpio_tx;
    LL_GPIO_StructInit(&gpio_tx);
 8001464:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001468:	4618      	mov	r0, r3
 800146a:	f000 ff4a 	bl	8002302 <LL_GPIO_StructInit>
    gpio_tx.Pin       = LL_GPIO_PIN_2;
 800146e:	2304      	movs	r3, #4
 8001470:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_tx.Mode      = LL_GPIO_MODE_ALTERNATE;
 8001472:	2302      	movs	r3, #2
 8001474:	64fb      	str	r3, [r7, #76]	; 0x4c
    gpio_tx.Alternate = LL_GPIO_AF_7;
 8001476:	2307      	movs	r3, #7
 8001478:	65fb      	str	r3, [r7, #92]	; 0x5c
    LL_GPIO_Init(GPIOA, &gpio_tx);
 800147a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800147e:	4619      	mov	r1, r3
 8001480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001484:	f000 fecf 	bl	8002226 <LL_GPIO_Init>

    LL_GPIO_InitTypeDef gpio_rx;
    LL_GPIO_StructInit(&gpio_rx);
 8001488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800148c:	4618      	mov	r0, r3
 800148e:	f000 ff38 	bl	8002302 <LL_GPIO_StructInit>
    gpio_rx.Pin       = LL_GPIO_PIN_15;
 8001492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001496:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_rx.Mode      = LL_GPIO_MODE_ALTERNATE;
 8001498:	2302      	movs	r3, #2
 800149a:	637b      	str	r3, [r7, #52]	; 0x34
    gpio_rx.Alternate = LL_GPIO_AF_3;
 800149c:	2303      	movs	r3, #3
 800149e:	647b      	str	r3, [r7, #68]	; 0x44
    LL_GPIO_Init(GPIOA, &gpio_rx);
 80014a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a4:	4619      	mov	r1, r3
 80014a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014aa:	f000 febc 	bl	8002226 <LL_GPIO_Init>

    LL_USART_Disable(USART2);
 80014ae:	4815      	ldr	r0, [pc, #84]	; (8001504 <UART_Init+0xb4>)
 80014b0:	f7ff fed5 	bl	800125e <LL_USART_Disable>

    // 3) Inicjalizacja USART2
    LL_USART_InitTypeDef usart;
    LL_USART_StructInit(&usart);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4618      	mov	r0, r3
 80014ba:	f001 fafd 	bl	8002ab8 <LL_USART_StructInit>
    usart.BaudRate            = 115200;
 80014be:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80014c2:	617b      	str	r3, [r7, #20]
    usart.TransferDirection   = LL_USART_DIRECTION_TX_RX;
 80014c4:	230c      	movs	r3, #12
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
    usart.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
    usart.OverSampling = LL_USART_OVERSAMPLING_16;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    LL_USART_Init(USART2, &usart);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	480b      	ldr	r0, [pc, #44]	; (8001504 <UART_Init+0xb4>)
 80014d8:	f001 fa94 	bl	8002a04 <LL_USART_Init>

    LL_RCC_ClocksTypeDef clocks;
    LL_RCC_GetSystemClocksFreq(&clocks);
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 f806 	bl	80024f0 <LL_RCC_GetSystemClocksFreq>
    USART2->BRR = (clocks.PCLK1_Frequency + (115200/2U))/115200;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80014ea:	4a06      	ldr	r2, [pc, #24]	; (8001504 <UART_Init+0xb4>)
 80014ec:	4906      	ldr	r1, [pc, #24]	; (8001508 <UART_Init+0xb8>)
 80014ee:	fba1 1303 	umull	r1, r3, r1, r3
 80014f2:	0c1b      	lsrs	r3, r3, #16
 80014f4:	60d3      	str	r3, [r2, #12]
    LL_USART_Enable(USART2);
 80014f6:	4803      	ldr	r0, [pc, #12]	; (8001504 <UART_Init+0xb4>)
 80014f8:	f7ff fea1 	bl	800123e <LL_USART_Enable>
}
 80014fc:	bf00      	nop
 80014fe:	3760      	adds	r7, #96	; 0x60
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40004400 	.word	0x40004400
 8001508:	91a2b3c5 	.word	0x91a2b3c5

0800150c <UART_SendString>:

void UART_SendString(const char *s){
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    while(*s){
 8001514:	e00e      	b.n	8001534 <UART_SendString+0x28>
        while(!LL_USART_IsActiveFlag_TXE(USART2));
 8001516:	bf00      	nop
 8001518:	480e      	ldr	r0, [pc, #56]	; (8001554 <UART_SendString+0x48>)
 800151a:	f7ff fed6 	bl	80012ca <LL_USART_IsActiveFlag_TXE>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f9      	beq.n	8001518 <UART_SendString+0xc>
        LL_USART_TransmitData8(USART2, *s++);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	4809      	ldr	r0, [pc, #36]	; (8001554 <UART_SendString+0x48>)
 8001530:	f7ff feec 	bl	800130c <LL_USART_TransmitData8>
    while(*s){
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1ec      	bne.n	8001516 <UART_SendString+0xa>
    }
    //Poczekaj na zakonczenie transmisji ostatniego znaku
    while(!LL_USART_IsActiveFlag_TC(USART2));
 800153c:	bf00      	nop
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <UART_SendString+0x48>)
 8001540:	f7ff feb0 	bl	80012a4 <LL_USART_IsActiveFlag_TC>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f9      	beq.n	800153e <UART_SendString+0x32>
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40004400 	.word	0x40004400

08001558 <SetFlashLatency>:

void SetFlashLatency(uint32_t frequency){
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    //CPU dziala za syzbko dla pamieci wiec CPU musi czekac za pomoca wait states
    FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <SetFlashLatency+0x54>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a11      	ldr	r2, [pc, #68]	; (80015ac <SetFlashLatency+0x54>)
 8001566:	f023 0307 	bic.w	r3, r3, #7
 800156a:	6013      	str	r3, [r2, #0]
    if(frequency > 16000000) FLASH->ACR |= FLASH_ACR_LATENCY_4WS;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <SetFlashLatency+0x58>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d906      	bls.n	8001582 <SetFlashLatency+0x2a>
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <SetFlashLatency+0x54>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <SetFlashLatency+0x54>)
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	6013      	str	r3, [r2, #0]
    else if(frequency > 8000000) FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
    else FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
}
 8001580:	e00e      	b.n	80015a0 <SetFlashLatency+0x48>
    else if(frequency > 8000000) FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <SetFlashLatency+0x5c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d906      	bls.n	8001598 <SetFlashLatency+0x40>
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <SetFlashLatency+0x54>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a07      	ldr	r2, [pc, #28]	; (80015ac <SetFlashLatency+0x54>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6013      	str	r3, [r2, #0]
}
 8001596:	e003      	b.n	80015a0 <SetFlashLatency+0x48>
    else FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <SetFlashLatency+0x54>)
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <SetFlashLatency+0x54>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	40022000 	.word	0x40022000
 80015b0:	00f42400 	.word	0x00f42400
 80015b4:	007a1200 	.word	0x007a1200

080015b8 <SetMCO>:

void SetMCO(const char *source, uint32_t prescaler){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
    if (strcmp(source, "off") == 0) {
 80015c2:	492f      	ldr	r1, [pc, #188]	; (8001680 <SetMCO+0xc8>)
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7fe fe0b 	bl	80001e0 <strcmp>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d107      	bne.n	80015e0 <SetMCO+0x28>
        LL_RCC_ConfigMCO(LL_RCC_MCO1SOURCE_NOCLOCK, LL_RCC_MCO1_DIV_1);
 80015d0:	2100      	movs	r1, #0
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff fcb6 	bl	8000f44 <LL_RCC_ConfigMCO>
        mco_source = "off";
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <SetMCO+0xcc>)
 80015da:	4a29      	ldr	r2, [pc, #164]	; (8001680 <SetMCO+0xc8>)
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	e04b      	b.n	8001678 <SetMCO+0xc0>
    }else{
        uint32_t mco_src = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
        if(strcmp(source, "sys") == 0) mco_src = LL_RCC_MCO1SOURCE_SYSCLK;
 80015e4:	4928      	ldr	r1, [pc, #160]	; (8001688 <SetMCO+0xd0>)
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7fe fdfa 	bl	80001e0 <strcmp>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d103      	bne.n	80015fa <SetMCO+0x42>
 80015f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	e02f      	b.n	800165a <SetMCO+0xa2>
        else if(strcmp(source, "hsi") == 0) mco_src = LL_RCC_MCO1SOURCE_HSI;
 80015fa:	4924      	ldr	r1, [pc, #144]	; (800168c <SetMCO+0xd4>)
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7fe fdef 	bl	80001e0 <strcmp>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d103      	bne.n	8001610 <SetMCO+0x58>
 8001608:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	e024      	b.n	800165a <SetMCO+0xa2>
        else if(strcmp(source, "msi") == 0) mco_src = LL_RCC_MCO1SOURCE_MSI;
 8001610:	491f      	ldr	r1, [pc, #124]	; (8001690 <SetMCO+0xd8>)
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7fe fde4 	bl	80001e0 <strcmp>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d103      	bne.n	8001626 <SetMCO+0x6e>
 800161e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	e019      	b.n	800165a <SetMCO+0xa2>
        else if(strcmp(source, "pll") == 0) mco_src = LL_RCC_MCO1SOURCE_PLLCLK;
 8001626:	491b      	ldr	r1, [pc, #108]	; (8001694 <SetMCO+0xdc>)
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7fe fdd9 	bl	80001e0 <strcmp>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d103      	bne.n	800163c <SetMCO+0x84>
 8001634:	f04f 63a0 	mov.w	r3, #83886080	; 0x5000000
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	e00e      	b.n	800165a <SetMCO+0xa2>
        else if(strcmp(source, "lse") == 0) mco_src = LL_RCC_MCO1SOURCE_LSE;
 800163c:	4916      	ldr	r1, [pc, #88]	; (8001698 <SetMCO+0xe0>)
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7fe fdce 	bl	80001e0 <strcmp>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d103      	bne.n	8001652 <SetMCO+0x9a>
 800164a:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e003      	b.n	800165a <SetMCO+0xa2>
        else {
            UART_SendString("Nieznane zrodlo MCO\r\n");
 8001652:	4812      	ldr	r0, [pc, #72]	; (800169c <SetMCO+0xe4>)
 8001654:	f7ff ff5a 	bl	800150c <UART_SendString>
            return;
 8001658:	e00e      	b.n	8001678 <SetMCO+0xc0>
        }

        LL_RCC_ConfigMCO(mco_src, prescaler);
 800165a:	6839      	ldr	r1, [r7, #0]
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7ff fc71 	bl	8000f44 <LL_RCC_ConfigMCO>
        mco_source = source;
 8001662:	4a08      	ldr	r2, [pc, #32]	; (8001684 <SetMCO+0xcc>)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6013      	str	r3, [r2, #0]
        mco_prescaler = (1 << (prescaler >> RCC_CFGR_MCOPRE_Pos));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	0f1b      	lsrs	r3, r3, #28
 800166c:	2201      	movs	r2, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	461a      	mov	r2, r3
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <SetMCO+0xe8>)
 8001676:	601a      	str	r2, [r3, #0]
    }
}
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	08007d78 	.word	0x08007d78
 8001684:	20000000 	.word	0x20000000
 8001688:	08007db4 	.word	0x08007db4
 800168c:	08007db8 	.word	0x08007db8
 8001690:	08007dbc 	.word	0x08007dbc
 8001694:	08007dc0 	.word	0x08007dc0
 8001698:	08007dc4 	.word	0x08007dc4
 800169c:	08007dc8 	.word	0x08007dc8
 80016a0:	20000004 	.word	0x20000004

080016a4 <CalibrateMSI>:

// Kalibracja MSI za pomoca LSE
void CalibrateMSI(void) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b092      	sub	sp, #72	; 0x48
 80016a8:	af00      	add	r7, sp, #0
    if(!lse_ready) {
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <CalibrateMSI+0x74>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	f083 0301 	eor.w	r3, r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <CalibrateMSI+0x1c>
        UART_SendString("LSE nieaktywne! Wlacz najpierw LSE\r\n");
 80016b8:	4818      	ldr	r0, [pc, #96]	; (800171c <CalibrateMSI+0x78>)
 80016ba:	f7ff ff27 	bl	800150c <UART_SendString>
        return;
 80016be:	e027      	b.n	8001710 <CalibrateMSI+0x6c>
    }

    // Wlacz kalibracje przez PLLMSI
    LL_RCC_MSI_EnablePLLMode();
 80016c0:	f7ff fbae 	bl	8000e20 <LL_RCC_MSI_EnablePLLMode>
    while(!LL_RCC_MSI_IsReady());
 80016c4:	bf00      	nop
 80016c6:	f7ff fb99 	bl	8000dfc <LL_RCC_MSI_IsReady>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0fa      	beq.n	80016c6 <CalibrateMSI+0x22>

    UART_SendString("Kalibracja MSI w toku...\r\n");
 80016d0:	4813      	ldr	r0, [pc, #76]	; (8001720 <CalibrateMSI+0x7c>)
 80016d2:	f7ff ff1b 	bl	800150c <UART_SendString>

    // Czekaj na stabilizacje (moze zajac do 100 ms)
    uint32_t timeout = 100000;
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <CalibrateMSI+0x80>)
 80016d8:	647b      	str	r3, [r7, #68]	; 0x44
    while(!LL_RCC_MSI_IsReady() && timeout--);
 80016da:	bf00      	nop
 80016dc:	f7ff fb8e 	bl	8000dfc <LL_RCC_MSI_IsReady>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d104      	bne.n	80016f0 <CalibrateMSI+0x4c>
 80016e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016e8:	1e5a      	subs	r2, r3, #1
 80016ea:	647a      	str	r2, [r7, #68]	; 0x44
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f5      	bne.n	80016dc <CalibrateMSI+0x38>

    if(timeout > 0) {
 80016f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d009      	beq.n	800170a <CalibrateMSI+0x66>
        char msg[64];
        sprintf(msg, "MSI skalibrowane! Dokladnosc: +-0.25%%\r\n");
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	490b      	ldr	r1, [pc, #44]	; (8001728 <CalibrateMSI+0x84>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 f92c 	bl	8003958 <siprintf>
        UART_SendString(msg);
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff02 	bl	800150c <UART_SendString>
 8001708:	e002      	b.n	8001710 <CalibrateMSI+0x6c>
    } else {
        UART_SendString("Blad kalibracji!\r\n");
 800170a:	4808      	ldr	r0, [pc, #32]	; (800172c <CalibrateMSI+0x88>)
 800170c:	f7ff fefe 	bl	800150c <UART_SendString>
    }
}
 8001710:	3748      	adds	r7, #72	; 0x48
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200001fd 	.word	0x200001fd
 800171c:	08007de0 	.word	0x08007de0
 8001720:	08007e08 	.word	0x08007e08
 8001724:	000186a0 	.word	0x000186a0
 8001728:	08007e24 	.word	0x08007e24
 800172c:	08007e50 	.word	0x08007e50

08001730 <processCommand>:

void processCommand(char *cmd){
 8001730:	b5b0      	push	{r4, r5, r7, lr}
 8001732:	b0b0      	sub	sp, #192	; 0xc0
 8001734:	af04      	add	r7, sp, #16
 8001736:	6078      	str	r0, [r7, #4]
    // Pomoc
    if (strcmp(cmd, "help") == 0) {
 8001738:	49d2      	ldr	r1, [pc, #840]	; (8001a84 <processCommand+0x354>)
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7fe fd50 	bl	80001e0 <strcmp>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d103      	bne.n	800174e <processCommand+0x1e>
        UART_SendString(
 8001746:	48d0      	ldr	r0, [pc, #832]	; (8001a88 <processCommand+0x358>)
 8001748:	f7ff fee0 	bl	800150c <UART_SendString>
 800174c:	e225      	b.n	8001b9a <processCommand+0x46a>
            " mcooff   - Wylacz MCO\r\n"
        );
    }

    // MSI
    else if (strstr(cmd, "msi") == cmd) {
 800174e:	49cf      	ldr	r1, [pc, #828]	; (8001a8c <processCommand+0x35c>)
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f002 f992 	bl	8003a7a <strstr>
 8001756:	4602      	mov	r2, r0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4293      	cmp	r3, r2
 800175c:	f040 8094 	bne.w	8001888 <processCommand+0x158>
        int freq = atoi(cmd + 3);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3303      	adds	r3, #3
 8001764:	4618      	mov	r0, r3
 8001766:	f001 fa40 	bl	8002bea <atoi>
 800176a:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
        LL_RCC_MSI_Enable();
 800176e:	f7ff fb35 	bl	8000ddc <LL_RCC_MSI_Enable>
        while (!LL_RCC_MSI_IsReady());
 8001772:	bf00      	nop
 8001774:	f7ff fb42 	bl	8000dfc <LL_RCC_MSI_IsReady>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0fa      	beq.n	8001774 <processCommand+0x44>

        uint32_t range;
        switch(freq){
 800177e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001782:	2b18      	cmp	r3, #24
 8001784:	dc36      	bgt.n	80017f4 <processCommand+0xc4>
 8001786:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800178a:	2b04      	cmp	r3, #4
 800178c:	db4b      	blt.n	8001826 <processCommand+0xf6>
 800178e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001792:	3b04      	subs	r3, #4
 8001794:	2b14      	cmp	r3, #20
 8001796:	d846      	bhi.n	8001826 <processCommand+0xf6>
 8001798:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <processCommand+0x70>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	080017ff 	.word	0x080017ff
 80017a4:	08001827 	.word	0x08001827
 80017a8:	08001827 	.word	0x08001827
 80017ac:	08001827 	.word	0x08001827
 80017b0:	08001807 	.word	0x08001807
 80017b4:	08001827 	.word	0x08001827
 80017b8:	08001827 	.word	0x08001827
 80017bc:	08001827 	.word	0x08001827
 80017c0:	08001827 	.word	0x08001827
 80017c4:	08001827 	.word	0x08001827
 80017c8:	08001827 	.word	0x08001827
 80017cc:	08001827 	.word	0x08001827
 80017d0:	0800180f 	.word	0x0800180f
 80017d4:	08001827 	.word	0x08001827
 80017d8:	08001827 	.word	0x08001827
 80017dc:	08001827 	.word	0x08001827
 80017e0:	08001827 	.word	0x08001827
 80017e4:	08001827 	.word	0x08001827
 80017e8:	08001827 	.word	0x08001827
 80017ec:	08001827 	.word	0x08001827
 80017f0:	08001817 	.word	0x08001817
 80017f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017f8:	2b30      	cmp	r3, #48	; 0x30
 80017fa:	d010      	beq.n	800181e <processCommand+0xee>
 80017fc:	e013      	b.n	8001826 <processCommand+0xf6>
            case 4:  range = LL_RCC_MSIRANGE_6; break;
 80017fe:	2360      	movs	r3, #96	; 0x60
 8001800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001804:	e013      	b.n	800182e <processCommand+0xfe>
            case 8:  range = LL_RCC_MSIRANGE_7; break;
 8001806:	2370      	movs	r3, #112	; 0x70
 8001808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800180c:	e00f      	b.n	800182e <processCommand+0xfe>
            case 16: range = LL_RCC_MSIRANGE_8; break;
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001814:	e00b      	b.n	800182e <processCommand+0xfe>
            case 24: range = LL_RCC_MSIRANGE_9; break;
 8001816:	2390      	movs	r3, #144	; 0x90
 8001818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800181c:	e007      	b.n	800182e <processCommand+0xfe>
            case 48: range = LL_RCC_MSIRANGE_11; break;
 800181e:	23b0      	movs	r3, #176	; 0xb0
 8001820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001824:	e003      	b.n	800182e <processCommand+0xfe>
            default:
                UART_SendString("Niepoprawna czestotliwosc MSI (4/8/16/24/48 MHz)\r\n");
 8001826:	489a      	ldr	r0, [pc, #616]	; (8001a90 <processCommand+0x360>)
 8001828:	f7ff fe70 	bl	800150c <UART_SendString>
 800182c:	e1b5      	b.n	8001b9a <processCommand+0x46a>
                return;
        }

        SetFlashLatency(freq * 1000000);
 800182e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001832:	4a98      	ldr	r2, [pc, #608]	; (8001a94 <processCommand+0x364>)
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fe8d 	bl	8001558 <SetFlashLatency>

        LL_RCC_MSI_EnableRangeSelection();
 800183e:	f7ff faff 	bl	8000e40 <LL_RCC_MSI_EnableRangeSelection>
        LL_RCC_MSI_SetRange(range);
 8001842:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8001846:	f7ff fb0b 	bl	8000e60 <LL_RCC_MSI_SetRange>

        LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff fb1c 	bl	8000e88 <LL_RCC_SetSysClkSource>
        while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI);
 8001850:	bf00      	nop
 8001852:	f7ff fb2d 	bl	8000eb0 <LL_RCC_GetSysClkSource>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1fa      	bne.n	8001852 <processCommand+0x122>
        SystemCoreClockUpdate();
 800185c:	f000 faea 	bl	8001e34 <SystemCoreClockUpdate>
        UART_Init();
 8001860:	f7ff fdf6 	bl	8001450 <UART_Init>

        char msg[64];
        sprintf(msg, "SYSCLK: %lu MHz (MSI)\r\n", SystemCoreClock/1000000);
 8001864:	4b8c      	ldr	r3, [pc, #560]	; (8001a98 <processCommand+0x368>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a8c      	ldr	r2, [pc, #560]	; (8001a9c <processCommand+0x36c>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0c9a      	lsrs	r2, r3, #18
 8001870:	f107 0308 	add.w	r3, r7, #8
 8001874:	498a      	ldr	r1, [pc, #552]	; (8001aa0 <processCommand+0x370>)
 8001876:	4618      	mov	r0, r3
 8001878:	f002 f86e 	bl	8003958 <siprintf>
        UART_SendString(msg);
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fe43 	bl	800150c <UART_SendString>
 8001886:	e188      	b.n	8001b9a <processCommand+0x46a>
    }

    // HSI
    else if (strcmp(cmd, "hsi") == 0) {
 8001888:	4986      	ldr	r1, [pc, #536]	; (8001aa4 <processCommand+0x374>)
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7fe fca8 	bl	80001e0 <strcmp>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d124      	bne.n	80018e0 <processCommand+0x1b0>
        LL_RCC_HSI_Enable();
 8001896:	f7ff fa45 	bl	8000d24 <LL_RCC_HSI_Enable>
        while (!LL_RCC_HSI_IsReady());
 800189a:	bf00      	nop
 800189c:	f7ff fa52 	bl	8000d44 <LL_RCC_HSI_IsReady>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0fa      	beq.n	800189c <processCommand+0x16c>

        LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f7ff fb10 	bl	8000ecc <LL_RCC_SetAHBPrescaler>
        LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f7ff fb21 	bl	8000ef4 <LL_RCC_SetAPB1Prescaler>
        LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff fb32 	bl	8000f1c <LL_RCC_SetAPB2Prescaler>

        SetFlashLatency(16000000);
 80018b8:	487b      	ldr	r0, [pc, #492]	; (8001aa8 <processCommand+0x378>)
 80018ba:	f7ff fe4d 	bl	8001558 <SetFlashLatency>

        LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80018be:	2001      	movs	r0, #1
 80018c0:	f7ff fae2 	bl	8000e88 <LL_RCC_SetSysClkSource>
        while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 80018c4:	bf00      	nop
 80018c6:	f7ff faf3 	bl	8000eb0 <LL_RCC_GetSysClkSource>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d1fa      	bne.n	80018c6 <processCommand+0x196>
        SystemCoreClockUpdate();
 80018d0:	f000 fab0 	bl	8001e34 <SystemCoreClockUpdate>
        UART_Init();
 80018d4:	f7ff fdbc 	bl	8001450 <UART_Init>
        UART_SendString("SYSCLK: 16 MHz (HSI)\r\n");
 80018d8:	4874      	ldr	r0, [pc, #464]	; (8001aac <processCommand+0x37c>)
 80018da:	f7ff fe17 	bl	800150c <UART_SendString>
 80018de:	e15c      	b.n	8001b9a <processCommand+0x46a>
    }

    // PLL
    else if (strcmp(cmd, "pll") == 0) {
 80018e0:	4973      	ldr	r1, [pc, #460]	; (8001ab0 <processCommand+0x380>)
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7fe fc7c 	bl	80001e0 <strcmp>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d17a      	bne.n	80019e4 <processCommand+0x2b4>
    	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80018ee:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80018f2:	f7ff fbbb 	bl	800106c <LL_APB1_GRP1_EnableClock>

    	SetFlashLatency(80000000);
 80018f6:	486f      	ldr	r0, [pc, #444]	; (8001ab4 <processCommand+0x384>)
 80018f8:	f7ff fe2e 	bl	8001558 <SetFlashLatency>

    	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80018fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001900:	f7ff fd14 	bl	800132c <LL_PWR_SetRegulVoltageScaling>
    	while(LL_PWR_IsActiveFlag_VOS() != 0);
 8001904:	bf00      	nop
 8001906:	f7ff fd35 	bl	8001374 <LL_PWR_IsActiveFlag_VOS>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1fa      	bne.n	8001906 <processCommand+0x1d6>

    	UART_SendString("PLL: Enable HSI\r\n");
 8001910:	4869      	ldr	r0, [pc, #420]	; (8001ab8 <processCommand+0x388>)
 8001912:	f7ff fdfb 	bl	800150c <UART_SendString>
        LL_RCC_HSI_Enable();
 8001916:	f7ff fa05 	bl	8000d24 <LL_RCC_HSI_Enable>
        while (!LL_RCC_HSI_IsReady());
 800191a:	bf00      	nop
 800191c:	f7ff fa12 	bl	8000d44 <LL_RCC_HSI_IsReady>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0fa      	beq.n	800191c <processCommand+0x1ec>

        UART_SendString("PLL: Switch SYSCLK to HSI\r\n");
 8001926:	4865      	ldr	r0, [pc, #404]	; (8001abc <processCommand+0x38c>)
 8001928:	f7ff fdf0 	bl	800150c <UART_SendString>
        LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800192c:	2001      	movs	r0, #1
 800192e:	f7ff faab 	bl	8000e88 <LL_RCC_SetSysClkSource>
        while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001932:	bf00      	nop
 8001934:	f7ff fabc 	bl	8000eb0 <LL_RCC_GetSysClkSource>
 8001938:	4603      	mov	r3, r0
 800193a:	2b04      	cmp	r3, #4
 800193c:	d1fa      	bne.n	8001934 <processCommand+0x204>

        UART_Init();
 800193e:	f7ff fd87 	bl	8001450 <UART_Init>

        UART_SendString("PLL: Disable PLL\r\n");
 8001942:	485f      	ldr	r0, [pc, #380]	; (8001ac0 <processCommand+0x390>)
 8001944:	f7ff fde2 	bl	800150c <UART_SendString>
        LL_RCC_PLL_Disable();
 8001948:	f7ff fb24 	bl	8000f94 <LL_RCC_PLL_Disable>
        while(LL_RCC_PLL_IsReady());
 800194c:	bf00      	nop
 800194e:	f7ff fb31 	bl	8000fb4 <LL_RCC_PLL_IsReady>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1fa      	bne.n	800194e <processCommand+0x21e>

        UART_SendString("PLL: Set prescalers\r\n");
 8001958:	485a      	ldr	r0, [pc, #360]	; (8001ac4 <processCommand+0x394>)
 800195a:	f7ff fdd7 	bl	800150c <UART_SendString>
        LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff fab4 	bl	8000ecc <LL_RCC_SetAHBPrescaler>
        LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001964:	2000      	movs	r0, #0
 8001966:	f7ff fac5 	bl	8000ef4 <LL_RCC_SetAPB1Prescaler>
        LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800196a:	2000      	movs	r0, #0
 800196c:	f7ff fad6 	bl	8000f1c <LL_RCC_SetAPB2Prescaler>

        LL_RCC_PLL_ConfigDomain_SYS(
 8001970:	2300      	movs	r3, #0
 8001972:	220a      	movs	r2, #10
 8001974:	2100      	movs	r1, #0
 8001976:	2002      	movs	r0, #2
 8001978:	f7ff fb30 	bl	8000fdc <LL_RCC_PLL_ConfigDomain_SYS>
        		LL_RCC_PLLSOURCE_HSI,
				LL_RCC_PLLM_DIV_1,
				10,
				LL_RCC_PLLR_DIV_2);

        UART_SendString("PLL: Enable PLL\r\n");
 800197c:	4852      	ldr	r0, [pc, #328]	; (8001ac8 <processCommand+0x398>)
 800197e:	f7ff fdc5 	bl	800150c <UART_SendString>
        LL_RCC_PLL_Enable();
 8001982:	f7ff faf7 	bl	8000f74 <LL_RCC_PLL_Enable>
        LL_RCC_PLL_EnableDomain_SYS();
 8001986:	f7ff fb49 	bl	800101c <LL_RCC_PLL_EnableDomain_SYS>
        while (!LL_RCC_PLL_IsReady());
 800198a:	bf00      	nop
 800198c:	f7ff fb12 	bl	8000fb4 <LL_RCC_PLL_IsReady>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0fa      	beq.n	800198c <processCommand+0x25c>

        UART_SendString("PLL: Switch SYSCLK to PLL\r\n");
 8001996:	484d      	ldr	r0, [pc, #308]	; (8001acc <processCommand+0x39c>)
 8001998:	f7ff fdb8 	bl	800150c <UART_SendString>
        LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800199c:	2003      	movs	r0, #3
 800199e:	f7ff fa73 	bl	8000e88 <LL_RCC_SetSysClkSource>

        uint32_t timeout = 2000000;
 80019a2:	4b4b      	ldr	r3, [pc, #300]	; (8001ad0 <processCommand+0x3a0>)
 80019a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        while((LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) && timeout--);
 80019a8:	bf00      	nop
 80019aa:	f7ff fa81 	bl	8000eb0 <LL_RCC_GetSysClkSource>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b0c      	cmp	r3, #12
 80019b2:	d006      	beq.n	80019c2 <processCommand+0x292>
 80019b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019b8:	1e5a      	subs	r2, r3, #1
 80019ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f3      	bne.n	80019aa <processCommand+0x27a>

        if(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL){
 80019c2:	f7ff fa75 	bl	8000eb0 <LL_RCC_GetSysClkSource>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d003      	beq.n	80019d4 <processCommand+0x2a4>
        	UART_SendString("Błąd: nie udalo sie przelaczyc na PLL\r\n");
 80019cc:	4841      	ldr	r0, [pc, #260]	; (8001ad4 <processCommand+0x3a4>)
 80019ce:	f7ff fd9d 	bl	800150c <UART_SendString>
        	return;
 80019d2:	e0e2      	b.n	8001b9a <processCommand+0x46a>
        }

        SystemCoreClockUpdate();
 80019d4:	f000 fa2e 	bl	8001e34 <SystemCoreClockUpdate>
        UART_Init();
 80019d8:	f7ff fd3a 	bl	8001450 <UART_Init>
        UART_SendString("SYSCLK: 80 MHz (PLL)\r\n");
 80019dc:	483e      	ldr	r0, [pc, #248]	; (8001ad8 <processCommand+0x3a8>)
 80019de:	f7ff fd95 	bl	800150c <UART_SendString>
 80019e2:	e0da      	b.n	8001b9a <processCommand+0x46a>
    }

    // LSE
    else if (strcmp(cmd, "lseon") == 0) {
 80019e4:	493d      	ldr	r1, [pc, #244]	; (8001adc <processCommand+0x3ac>)
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7fe fbfa 	bl	80001e0 <strcmp>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <processCommand+0x2c8>
        LSE_Init();
 80019f2:	f7ff fcef 	bl	80013d4 <LSE_Init>
 80019f6:	e0d0      	b.n	8001b9a <processCommand+0x46a>
    }

    // Kalibracja
    else if (strcmp(cmd, "calibrate") == 0) {
 80019f8:	4939      	ldr	r1, [pc, #228]	; (8001ae0 <processCommand+0x3b0>)
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7fe fbf0 	bl	80001e0 <strcmp>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <processCommand+0x2dc>
        CalibrateMSI();
 8001a06:	f7ff fe4d 	bl	80016a4 <CalibrateMSI>
 8001a0a:	e0c6      	b.n	8001b9a <processCommand+0x46a>
    }

    // MCO
    else if (strstr(cmd, "mco") == cmd) {
 8001a0c:	4935      	ldr	r1, [pc, #212]	; (8001ae4 <processCommand+0x3b4>)
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f002 f833 	bl	8003a7a <strstr>
 8001a14:	4602      	mov	r2, r0
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	f040 808a 	bne.w	8001b32 <processCommand+0x402>
        char source[8] = {0};
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        uint32_t prescaler = LL_RCC_MCO1_DIV_1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

        // Parsowanie
        if(strstr(cmd, "mcooff")) {
 8001a30:	492d      	ldr	r1, [pc, #180]	; (8001ae8 <processCommand+0x3b8>)
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f002 f821 	bl	8003a7a <strstr>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <processCommand+0x318>
            strcpy(source, "off");
 8001a3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a42:	4a2a      	ldr	r2, [pc, #168]	; (8001aec <processCommand+0x3bc>)
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	e059      	b.n	8001afc <processCommand+0x3cc>
        }
        else if(sscanf(cmd, "mco%3[^0-9]%lu", source, &prescaler) >= 1) {
 8001a48:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a4c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001a50:	4927      	ldr	r1, [pc, #156]	; (8001af0 <processCommand+0x3c0>)
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f001 ffa0 	bl	8003998 <siscanf>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	dd4a      	ble.n	8001af4 <processCommand+0x3c4>
            prescaler = (prescaler == 2) ? LL_RCC_MCO1_DIV_2 :
 8001a5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d008      	beq.n	8001a78 <processCommand+0x348>
                       (prescaler == 4) ? LL_RCC_MCO1_DIV_4 :
 8001a66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d102      	bne.n	8001a74 <processCommand+0x344>
 8001a6e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001a72:	e003      	b.n	8001a7c <processCommand+0x34c>
 8001a74:	2300      	movs	r3, #0
 8001a76:	e001      	b.n	8001a7c <processCommand+0x34c>
            prescaler = (prescaler == 2) ? LL_RCC_MCO1_DIV_2 :
 8001a78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a80:	e03c      	b.n	8001afc <processCommand+0x3cc>
 8001a82:	bf00      	nop
 8001a84:	08007e64 	.word	0x08007e64
 8001a88:	08007e6c 	.word	0x08007e6c
 8001a8c:	08007dbc 	.word	0x08007dbc
 8001a90:	08008070 	.word	0x08008070
 8001a94:	000f4240 	.word	0x000f4240
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	431bde83 	.word	0x431bde83
 8001aa0:	080080a4 	.word	0x080080a4
 8001aa4:	08007db8 	.word	0x08007db8
 8001aa8:	00f42400 	.word	0x00f42400
 8001aac:	080080bc 	.word	0x080080bc
 8001ab0:	08007dc0 	.word	0x08007dc0
 8001ab4:	04c4b400 	.word	0x04c4b400
 8001ab8:	080080d4 	.word	0x080080d4
 8001abc:	080080e8 	.word	0x080080e8
 8001ac0:	08008104 	.word	0x08008104
 8001ac4:	08008118 	.word	0x08008118
 8001ac8:	08008130 	.word	0x08008130
 8001acc:	08008144 	.word	0x08008144
 8001ad0:	001e8480 	.word	0x001e8480
 8001ad4:	08008160 	.word	0x08008160
 8001ad8:	0800818c 	.word	0x0800818c
 8001adc:	080081a4 	.word	0x080081a4
 8001ae0:	080081ac 	.word	0x080081ac
 8001ae4:	080081b8 	.word	0x080081b8
 8001ae8:	080081bc 	.word	0x080081bc
 8001aec:	0066666f 	.word	0x0066666f
 8001af0:	080081c4 	.word	0x080081c4
                       LL_RCC_MCO1_DIV_1;
        }
        else {
            UART_SendString("Niepoprawna skladnia MCO! Przyklad: mcosys2\r\n");
 8001af4:	482a      	ldr	r0, [pc, #168]	; (8001ba0 <processCommand+0x470>)
 8001af6:	f7ff fd09 	bl	800150c <UART_SendString>
 8001afa:	e04e      	b.n	8001b9a <processCommand+0x46a>
            return;
        }

        SetMCO(source, prescaler);
 8001afc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fd56 	bl	80015b8 <SetMCO>
        char msg[64];
        sprintf(msg, "MCO: %s /%lu\r\n", source, (1 << (prescaler >> RCC_CFGR_MCOPRE_Pos)));
 8001b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b10:	0f1b      	lsrs	r3, r3, #28
 8001b12:	2201      	movs	r2, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001b1c:	f107 0008 	add.w	r0, r7, #8
 8001b20:	4920      	ldr	r1, [pc, #128]	; (8001ba4 <processCommand+0x474>)
 8001b22:	f001 ff19 	bl	8003958 <siprintf>
        UART_SendString(msg);
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fcee 	bl	800150c <UART_SendString>
 8001b30:	e033      	b.n	8001b9a <processCommand+0x46a>
    }

    // Status
    else if (strcmp(cmd, "status") == 0) {
 8001b32:	491d      	ldr	r1, [pc, #116]	; (8001ba8 <processCommand+0x478>)
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7fe fb53 	bl	80001e0 <strcmp>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d129      	bne.n	8001b94 <processCommand+0x464>
        LL_RCC_ClocksTypeDef clocks;
        LL_RCC_GetSystemClocksFreq(&clocks);
 8001b40:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fcd3 	bl	80024f0 <LL_RCC_GetSystemClocksFreq>
            "\r\n--- Status ---\r\n"
            "SYSCLK: %lu MHz\r\n"
            "MCO: %s /%lu\r\n"
            "Flash latency: %lu WS\r\n"
            "LSE: %s\r\n",
            clocks.SYSCLK_Frequency/1000000,
 8001b4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
        sprintf(msg,
 8001b4e:	4a17      	ldr	r2, [pc, #92]	; (8001bac <processCommand+0x47c>)
 8001b50:	fba2 2303 	umull	r2, r3, r2, r3
 8001b54:	0c9c      	lsrs	r4, r3, #18
 8001b56:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <processCommand+0x480>)
 8001b58:	681d      	ldr	r5, [r3, #0]
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <processCommand+0x484>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
            mco_source,
            mco_prescaler,
            (FLASH->ACR & FLASH_ACR_LATENCY) >> FLASH_ACR_LATENCY_Pos,
 8001b5e:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <processCommand+0x488>)
 8001b60:	6812      	ldr	r2, [r2, #0]
        sprintf(msg,
 8001b62:	f002 0207 	and.w	r2, r2, #7
            lse_ready ? "aktywne" : "nieaktywne"
 8001b66:	4915      	ldr	r1, [pc, #84]	; (8001bbc <processCommand+0x48c>)
 8001b68:	7809      	ldrb	r1, [r1, #0]
        sprintf(msg,
 8001b6a:	2900      	cmp	r1, #0
 8001b6c:	d001      	beq.n	8001b72 <processCommand+0x442>
 8001b6e:	4914      	ldr	r1, [pc, #80]	; (8001bc0 <processCommand+0x490>)
 8001b70:	e000      	b.n	8001b74 <processCommand+0x444>
 8001b72:	4914      	ldr	r1, [pc, #80]	; (8001bc4 <processCommand+0x494>)
 8001b74:	f107 0008 	add.w	r0, r7, #8
 8001b78:	9102      	str	r1, [sp, #8]
 8001b7a:	9201      	str	r2, [sp, #4]
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	462b      	mov	r3, r5
 8001b80:	4622      	mov	r2, r4
 8001b82:	4911      	ldr	r1, [pc, #68]	; (8001bc8 <processCommand+0x498>)
 8001b84:	f001 fee8 	bl	8003958 <siprintf>
        );
        UART_SendString(msg);
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fcbd 	bl	800150c <UART_SendString>
 8001b92:	e002      	b.n	8001b9a <processCommand+0x46a>
    }

    else {
        UART_SendString("Nieznana komenda! Wpisz 'help' aby wyswietlic pomoc\r\n");
 8001b94:	480d      	ldr	r0, [pc, #52]	; (8001bcc <processCommand+0x49c>)
 8001b96:	f7ff fcb9 	bl	800150c <UART_SendString>
    }
}
 8001b9a:	37b0      	adds	r7, #176	; 0xb0
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba0:	080081d4 	.word	0x080081d4
 8001ba4:	08008204 	.word	0x08008204
 8001ba8:	08008214 	.word	0x08008214
 8001bac:	431bde83 	.word	0x431bde83
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000004 	.word	0x20000004
 8001bb8:	40022000 	.word	0x40022000
 8001bbc:	200001fd 	.word	0x200001fd
 8001bc0:	0800821c 	.word	0x0800821c
 8001bc4:	08008224 	.word	0x08008224
 8001bc8:	08008230 	.word	0x08008230
 8001bcc:	08008284 	.word	0x08008284

08001bd0 <main>:

int main(void){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
    SystemCoreClockUpdate();
 8001bd6:	f000 f92d 	bl	8001e34 <SystemCoreClockUpdate>
    LL_InitTick(SystemCoreClock, 1000);
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <main+0x9c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fa5a 	bl	800109c <LL_InitTick>
    UART_Init();
 8001be8:	f7ff fc32 	bl	8001450 <UART_Init>
    MCO_Init();
 8001bec:	f7ff fbd6 	bl	800139c <MCO_Init>

    UART_SendString(
 8001bf0:	481f      	ldr	r0, [pc, #124]	; (8001c70 <main+0xa0>)
 8001bf2:	f7ff fc8b 	bl	800150c <UART_SendString>
        "\r\n==== System Zegarowy STM32L432KC ====\r\n"
        "Wpisz 'help' aby wyswietlic dostepne komendy\r\n"
    );

    while (1){
        if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8001bf6:	481f      	ldr	r0, [pc, #124]	; (8001c74 <main+0xa4>)
 8001bf8:	f7ff fb41 	bl	800127e <LL_USART_IsActiveFlag_RXNE>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f9      	beq.n	8001bf6 <main+0x26>
            char ch = LL_USART_ReceiveData8(USART2);
 8001c02:	481c      	ldr	r0, [pc, #112]	; (8001c74 <main+0xa4>)
 8001c04:	f7ff fb74 	bl	80012f0 <LL_USART_ReceiveData8>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]
            if (ch == '\r' || ch == '\n') {
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	2b0d      	cmp	r3, #13
 8001c10:	d002      	beq.n	8001c18 <main+0x48>
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2b0a      	cmp	r3, #10
 8001c16:	d10c      	bne.n	8001c32 <main+0x62>
                uart_buf[uart_buf_idx] = '\0';
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <main+0xa8>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <main+0xac>)
 8001c20:	2100      	movs	r1, #0
 8001c22:	5499      	strb	r1, [r3, r2]
                processCommand((char*)uart_buf);
 8001c24:	4815      	ldr	r0, [pc, #84]	; (8001c7c <main+0xac>)
 8001c26:	f7ff fd83 	bl	8001730 <processCommand>
                uart_buf_idx = 0;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <main+0xa8>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
 8001c30:	e01b      	b.n	8001c6a <main+0x9a>
            }
            else if (uart_buf_idx < UART_BUF_SIZE - 1) {
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <main+0xa8>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b3e      	cmp	r3, #62	; 0x3e
 8001c38:	d8dd      	bhi.n	8001bf6 <main+0x26>
                uart_buf[uart_buf_idx++] = tolower(ch);
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	71bb      	strb	r3, [r7, #6]
 8001c3e:	79bb      	ldrb	r3, [r7, #6]
 8001c40:	3301      	adds	r3, #1
 8001c42:	4a0f      	ldr	r2, [pc, #60]	; (8001c80 <main+0xb0>)
 8001c44:	4413      	add	r3, r2
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d102      	bne.n	8001c56 <main+0x86>
 8001c50:	79bb      	ldrb	r3, [r7, #6]
 8001c52:	3320      	adds	r3, #32
 8001c54:	e000      	b.n	8001c58 <main+0x88>
 8001c56:	79bb      	ldrb	r3, [r7, #6]
 8001c58:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <main+0xa8>)
 8001c5a:	7812      	ldrb	r2, [r2, #0]
 8001c5c:	1c51      	adds	r1, r2, #1
 8001c5e:	b2c8      	uxtb	r0, r1
 8001c60:	4905      	ldr	r1, [pc, #20]	; (8001c78 <main+0xa8>)
 8001c62:	7008      	strb	r0, [r1, #0]
 8001c64:	b2d9      	uxtb	r1, r3
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <main+0xac>)
 8001c68:	5499      	strb	r1, [r3, r2]
        if (LL_USART_IsActiveFlag_RXNE(USART2)) {
 8001c6a:	e7c4      	b.n	8001bf6 <main+0x26>
 8001c6c:	20000008 	.word	0x20000008
 8001c70:	080082bc 	.word	0x080082bc
 8001c74:	40004400 	.word	0x40004400
 8001c78:	200001fc 	.word	0x200001fc
 8001c7c:	2000020c 	.word	0x2000020c
 8001c80:	08008368 	.word	0x08008368

08001c84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
	return 1;
 8001c88:	2301      	movs	r3, #1
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_kill>:

int _kill(int pid, int sig)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c9e:	f000 ffa9 	bl	8002bf4 <__errno>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2216      	movs	r2, #22
 8001ca6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_exit>:

void _exit (int status)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ffe7 	bl	8001c94 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cc6:	e7fe      	b.n	8001cc6 <_exit+0x12>

08001cc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e00a      	b.n	8001cf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cda:	f3af 8000 	nop.w
 8001cde:	4601      	mov	r1, r0
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	60ba      	str	r2, [r7, #8]
 8001ce6:	b2ca      	uxtb	r2, r1
 8001ce8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3301      	adds	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	dbf0      	blt.n	8001cda <_read+0x12>
	}

return len;
 8001cf8:	687b      	ldr	r3, [r7, #4]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	e009      	b.n	8001d28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	60ba      	str	r2, [r7, #8]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	3301      	adds	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	dbf1      	blt.n	8001d14 <_write+0x12>
	}
	return len;
 8001d30:	687b      	ldr	r3, [r7, #4]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_close>:

int _close(int file)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
	return -1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d62:	605a      	str	r2, [r3, #4]
	return 0;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <_isatty>:

int _isatty(int file)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
	return 1;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
	return 0;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dac:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <_sbrk+0x5c>)
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <_sbrk+0x60>)
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <_sbrk+0x64>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <_sbrk+0x68>)
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <_sbrk+0x64>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d207      	bcs.n	8001de4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd4:	f000 ff0e 	bl	8002bf4 <__errno>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	220c      	movs	r2, #12
 8001ddc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
 8001de2:	e009      	b.n	8001df8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <_sbrk+0x64>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <_sbrk+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <_sbrk+0x64>)
 8001df4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df6:	68fb      	ldr	r3, [r7, #12]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20010000 	.word	0x20010000
 8001e04:	00000400 	.word	0x00000400
 8001e08:	20000200 	.word	0x20000200
 8001e0c:	20000260 	.word	0x20000260

08001e10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <SystemInit+0x20>)
 8001e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1a:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <SystemInit+0x20>)
 8001e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001e3a:	4b4f      	ldr	r3, [pc, #316]	; (8001f78 <SystemCoreClockUpdate+0x144>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d107      	bne.n	8001e56 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001e46:	4b4c      	ldr	r3, [pc, #304]	; (8001f78 <SystemCoreClockUpdate+0x144>)
 8001e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	e005      	b.n	8001e62 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001e56:	4b48      	ldr	r3, [pc, #288]	; (8001f78 <SystemCoreClockUpdate+0x144>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001e62:	4a46      	ldr	r2, [pc, #280]	; (8001f7c <SystemCoreClockUpdate+0x148>)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e6c:	4b42      	ldr	r3, [pc, #264]	; (8001f78 <SystemCoreClockUpdate+0x144>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	d866      	bhi.n	8001f46 <SystemCoreClockUpdate+0x112>
 8001e78:	a201      	add	r2, pc, #4	; (adr r2, 8001e80 <SystemCoreClockUpdate+0x4c>)
 8001e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7e:	bf00      	nop
 8001e80:	08001eb5 	.word	0x08001eb5
 8001e84:	08001f47 	.word	0x08001f47
 8001e88:	08001f47 	.word	0x08001f47
 8001e8c:	08001f47 	.word	0x08001f47
 8001e90:	08001ebd 	.word	0x08001ebd
 8001e94:	08001f47 	.word	0x08001f47
 8001e98:	08001f47 	.word	0x08001f47
 8001e9c:	08001f47 	.word	0x08001f47
 8001ea0:	08001ec5 	.word	0x08001ec5
 8001ea4:	08001f47 	.word	0x08001f47
 8001ea8:	08001f47 	.word	0x08001f47
 8001eac:	08001f47 	.word	0x08001f47
 8001eb0:	08001ecd 	.word	0x08001ecd
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001eb4:	4a32      	ldr	r2, [pc, #200]	; (8001f80 <SystemCoreClockUpdate+0x14c>)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	6013      	str	r3, [r2, #0]
      break;
 8001eba:	e048      	b.n	8001f4e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001ebc:	4b30      	ldr	r3, [pc, #192]	; (8001f80 <SystemCoreClockUpdate+0x14c>)
 8001ebe:	4a31      	ldr	r2, [pc, #196]	; (8001f84 <SystemCoreClockUpdate+0x150>)
 8001ec0:	601a      	str	r2, [r3, #0]
      break;
 8001ec2:	e044      	b.n	8001f4e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	; (8001f80 <SystemCoreClockUpdate+0x14c>)
 8001ec6:	4a30      	ldr	r2, [pc, #192]	; (8001f88 <SystemCoreClockUpdate+0x154>)
 8001ec8:	601a      	str	r2, [r3, #0]
      break;
 8001eca:	e040      	b.n	8001f4e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <SystemCoreClockUpdate+0x144>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001ed6:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <SystemCoreClockUpdate+0x144>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	091b      	lsrs	r3, r3, #4
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d003      	beq.n	8001ef2 <SystemCoreClockUpdate+0xbe>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d006      	beq.n	8001efe <SystemCoreClockUpdate+0xca>
 8001ef0:	e00b      	b.n	8001f0a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001ef2:	4a24      	ldr	r2, [pc, #144]	; (8001f84 <SystemCoreClockUpdate+0x150>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efa:	613b      	str	r3, [r7, #16]
          break;
 8001efc:	e00b      	b.n	8001f16 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001efe:	4a22      	ldr	r2, [pc, #136]	; (8001f88 <SystemCoreClockUpdate+0x154>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	613b      	str	r3, [r7, #16]
          break;
 8001f08:	e005      	b.n	8001f16 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	613b      	str	r3, [r7, #16]
          break;
 8001f14:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <SystemCoreClockUpdate+0x144>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <SystemCoreClockUpdate+0x144>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0e5b      	lsrs	r3, r3, #25
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	3301      	adds	r3, #1
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	4a0f      	ldr	r2, [pc, #60]	; (8001f80 <SystemCoreClockUpdate+0x14c>)
 8001f42:	6013      	str	r3, [r2, #0]
      break;
 8001f44:	e003      	b.n	8001f4e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001f46:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <SystemCoreClockUpdate+0x14c>)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	6013      	str	r3, [r2, #0]
      break;
 8001f4c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <SystemCoreClockUpdate+0x144>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	091b      	lsrs	r3, r3, #4
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <SystemCoreClockUpdate+0x158>)
 8001f5a:	5cd3      	ldrb	r3, [r2, r3]
 8001f5c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <SystemCoreClockUpdate+0x14c>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
 8001f68:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <SystemCoreClockUpdate+0x14c>)
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	08008338 	.word	0x08008338
 8001f80:	20000008 	.word	0x20000008
 8001f84:	00f42400 	.word	0x00f42400
 8001f88:	007a1200 	.word	0x007a1200
 8001f8c:	08008320 	.word	0x08008320

08001f90 <LL_GPIO_SetPinMode>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	b08b      	sub	sp, #44	; 0x2c
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	613b      	str	r3, [r7, #16]
  return result;
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001fb6:	2320      	movs	r3, #32
 8001fb8:	e003      	b.n	8001fc2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	fab3 f383 	clz	r3, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2103      	movs	r1, #3
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	401a      	ands	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	fa93 f3a3 	rbit	r3, r3
 8001fd8:	61fb      	str	r3, [r7, #28]
  return result;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	e003      	b.n	8001ff0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	601a      	str	r2, [r3, #0]
}
 8001ffe:	bf00      	nop
 8002000:	372c      	adds	r7, #44	; 0x2c
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <LL_GPIO_SetPinOutputType>:
{
 800200a:	b480      	push	{r7}
 800200c:	b085      	sub	sp, #20
 800200e:	af00      	add	r7, sp, #0
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	43db      	mvns	r3, r3
 800201e:	401a      	ands	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	431a      	orrs	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	605a      	str	r2, [r3, #4]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_GPIO_SetPinSpeed>:
{
 800203a:	b480      	push	{r7}
 800203c:	b08b      	sub	sp, #44	; 0x2c
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	613b      	str	r3, [r7, #16]
  return result;
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002060:	2320      	movs	r3, #32
 8002062:	e003      	b.n	800206c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2103      	movs	r1, #3
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	401a      	ands	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	fa93 f3a3 	rbit	r3, r3
 8002082:	61fb      	str	r3, [r7, #28]
  return result;
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800208e:	2320      	movs	r3, #32
 8002090:	e003      	b.n	800209a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	fab3 f383 	clz	r3, r3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	431a      	orrs	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	609a      	str	r2, [r3, #8]
}
 80020a8:	bf00      	nop
 80020aa:	372c      	adds	r7, #44	; 0x2c
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_GPIO_SetPinPull>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	b08b      	sub	sp, #44	; 0x2c
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	613b      	str	r3, [r7, #16]
  return result;
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80020da:	2320      	movs	r3, #32
 80020dc:	e003      	b.n	80020e6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2103      	movs	r1, #3
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	401a      	ands	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	61fb      	str	r3, [r7, #28]
  return result;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002108:	2320      	movs	r3, #32
 800210a:	e003      	b.n	8002114 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	431a      	orrs	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	60da      	str	r2, [r3, #12]
}
 8002122:	bf00      	nop
 8002124:	372c      	adds	r7, #44	; 0x2c
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <LL_GPIO_SetAFPin_0_7>:
{
 800212e:	b480      	push	{r7}
 8002130:	b08b      	sub	sp, #44	; 0x2c
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a1a      	ldr	r2, [r3, #32]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	613b      	str	r3, [r7, #16]
  return result;
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e003      	b.n	8002160 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	210f      	movs	r1, #15
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	401a      	ands	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	61fb      	str	r3, [r7, #28]
  return result;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002182:	2320      	movs	r3, #32
 8002184:	e003      	b.n	800218e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	431a      	orrs	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	621a      	str	r2, [r3, #32]
}
 800219c:	bf00      	nop
 800219e:	372c      	adds	r7, #44	; 0x2c
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b08b      	sub	sp, #44	; 0x2c
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	613b      	str	r3, [r7, #16]
  return result;
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e003      	b.n	80021dc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	210f      	movs	r1, #15
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	401a      	ands	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	61fb      	str	r3, [r7, #28]
  return result;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002200:	2320      	movs	r3, #32
 8002202:	e003      	b.n	800220c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	431a      	orrs	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800221a:	bf00      	nop
 800221c:	372c      	adds	r7, #44	; 0x2c
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b088      	sub	sp, #32
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	60fb      	str	r3, [r7, #12]
  return result;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <LL_GPIO_Init+0x26>
    return 32U;
 8002248:	2320      	movs	r3, #32
 800224a:	e003      	b.n	8002254 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002256:	e048      	b.n	80022ea <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d03a      	beq.n	80022e4 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d003      	beq.n	800227e <LL_GPIO_Init+0x58>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d10e      	bne.n	800229c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	461a      	mov	r2, r3
 8002284:	69b9      	ldr	r1, [r7, #24]
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fed7 	bl	800203a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	6819      	ldr	r1, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	461a      	mov	r2, r3
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff feb7 	bl	800200a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	461a      	mov	r2, r3
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ff05 	bl	80020b4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d111      	bne.n	80022d6 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2bff      	cmp	r3, #255	; 0xff
 80022b6:	d807      	bhi.n	80022c8 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	461a      	mov	r2, r3
 80022be:	69b9      	ldr	r1, [r7, #24]
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff34 	bl	800212e <LL_GPIO_SetAFPin_0_7>
 80022c6:	e006      	b.n	80022d6 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	461a      	mov	r2, r3
 80022ce:	69b9      	ldr	r1, [r7, #24]
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff69 	bl	80021a8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	461a      	mov	r2, r3
 80022dc:	69b9      	ldr	r1, [r7, #24]
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7ff fe56 	bl	8001f90 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	3301      	adds	r3, #1
 80022e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1af      	bne.n	8002258 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <LL_GPIO_StructInit>:
  *                          whose fields will be set to default values.
  * @retval None
  */

void LL_GPIO_StructInit(LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->Pin        = LL_GPIO_PIN_ALL;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002310:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_ANALOG;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2203      	movs	r2, #3
 8002316:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct->Speed      = LL_GPIO_SPEED_FREQ_LOW;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct->OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct->Pull       = LL_GPIO_PULL_NO;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct->Alternate  = LL_GPIO_AF_0;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	615a      	str	r2, [r3, #20]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_RCC_HSI_IsReady>:
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <LL_RCC_HSI_IsReady+0x24>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234c:	d101      	bne.n	8002352 <LL_RCC_HSI_IsReady+0x16>
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <LL_RCC_HSI_IsReady+0x18>
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000

08002364 <LL_RCC_LSE_IsReady>:
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8002368:	4b07      	ldr	r3, [pc, #28]	; (8002388 <LL_RCC_LSE_IsReady+0x24>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b02      	cmp	r3, #2
 8002374:	d101      	bne.n	800237a <LL_RCC_LSE_IsReady+0x16>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <LL_RCC_LSE_IsReady+0x18>
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000

0800238c <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b08      	cmp	r3, #8
 800239a:	d101      	bne.n	80023a0 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	40021000 	.word	0x40021000

080023b0 <LL_RCC_MSI_GetRange>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <LL_RCC_MSI_GetRange+0x18>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000

080023cc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80023d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	40021000 	.word	0x40021000

080023e8 <LL_RCC_GetSysClkSource>:
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <LL_RCC_GetSysClkSource+0x18>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 030c 	and.w	r3, r3, #12
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000

08002404 <LL_RCC_GetAHBPrescaler>:
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <LL_RCC_GetAHBPrescaler+0x18>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000

08002420 <LL_RCC_GetAPB1Prescaler>:
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000

0800243c <LL_RCC_GetAPB2Prescaler>:
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000

08002458 <LL_RCC_GetUSARTClockSource>:
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <LL_RCC_GetUSARTClockSource+0x24>)
 8002462:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	401a      	ands	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	041b      	lsls	r3, r3, #16
 800246e:	4313      	orrs	r3, r2
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	40021000 	.word	0x40021000

08002480 <LL_RCC_PLL_GetMainSource>:
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <LL_RCC_PLL_GetMainSource+0x18>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0303 	and.w	r3, r3, #3
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000

0800249c <LL_RCC_PLL_GetN>:
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <LL_RCC_PLL_GetN+0x18>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	40021000 	.word	0x40021000

080024b8 <LL_RCC_PLL_GetR>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <LL_RCC_PLL_GetR+0x18>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000

080024d4 <LL_RCC_PLL_GetDivider>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <LL_RCC_PLL_GetDivider+0x18>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000

080024f0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80024f8:	f000 f8ba 	bl	8002670 <RCC_GetSystemClockFreq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f942 	bl	8002790 <RCC_GetHCLKClockFreq>
 800250c:	4602      	mov	r2, r0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f950 	bl	80027bc <RCC_GetPCLK1ClockFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f95c 	bl	80027e4 <RCC_GetPCLK2ClockFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	60da      	str	r2, [r3, #12]
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d133      	bne.n	80025b6 <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff ff82 	bl	8002458 <LL_RCC_GetUSARTClockSource>
 8002554:	4603      	mov	r3, r0
 8002556:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800255a:	2b03      	cmp	r3, #3
 800255c:	d875      	bhi.n	800264a <LL_RCC_GetUSARTClockFreq+0x10e>
 800255e:	a201      	add	r2, pc, #4	; (adr r2, 8002564 <LL_RCC_GetUSARTClockFreq+0x28>)
 8002560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002564:	0800259f 	.word	0x0800259f
 8002568:	08002575 	.word	0x08002575
 800256c:	0800257d 	.word	0x0800257d
 8002570:	0800258d 	.word	0x0800258d
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002574:	f000 f87c 	bl	8002670 <RCC_GetSystemClockFreq>
 8002578:	60f8      	str	r0, [r7, #12]
        break;
 800257a:	e071      	b.n	8002660 <LL_RCC_GetUSARTClockFreq+0x124>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800257c:	f7ff fede 	bl	800233c <LL_RCC_HSI_IsReady>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d063      	beq.n	800264e <LL_RCC_GetUSARTClockFreq+0x112>
        {
          usart_frequency = HSI_VALUE;
 8002586:	4b39      	ldr	r3, [pc, #228]	; (800266c <LL_RCC_GetUSARTClockFreq+0x130>)
 8002588:	60fb      	str	r3, [r7, #12]
        }
        break;
 800258a:	e060      	b.n	800264e <LL_RCC_GetUSARTClockFreq+0x112>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800258c:	f7ff feea 	bl	8002364 <LL_RCC_LSE_IsReady>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d05d      	beq.n	8002652 <LL_RCC_GetUSARTClockFreq+0x116>
        {
          usart_frequency = LSE_VALUE;
 8002596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800259a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800259c:	e059      	b.n	8002652 <LL_RCC_GetUSARTClockFreq+0x116>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800259e:	f000 f867 	bl	8002670 <RCC_GetSystemClockFreq>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 f8f3 	bl	8002790 <RCC_GetHCLKClockFreq>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f000 f919 	bl	80027e4 <RCC_GetPCLK2ClockFreq>
 80025b2:	60f8      	str	r0, [r7, #12]
        break;
 80025b4:	e054      	b.n	8002660 <LL_RCC_GetUSARTClockFreq+0x124>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b0c      	cmp	r3, #12
 80025ba:	d151      	bne.n	8002660 <LL_RCC_GetUSARTClockFreq+0x124>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ff4b 	bl	8002458 <LL_RCC_GetUSARTClockSource>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80025c8:	2b0c      	cmp	r3, #12
 80025ca:	d844      	bhi.n	8002656 <LL_RCC_GetUSARTClockFreq+0x11a>
 80025cc:	a201      	add	r2, pc, #4	; (adr r2, 80025d4 <LL_RCC_GetUSARTClockFreq+0x98>)
 80025ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d2:	bf00      	nop
 80025d4:	08002633 	.word	0x08002633
 80025d8:	08002657 	.word	0x08002657
 80025dc:	08002657 	.word	0x08002657
 80025e0:	08002657 	.word	0x08002657
 80025e4:	08002609 	.word	0x08002609
 80025e8:	08002657 	.word	0x08002657
 80025ec:	08002657 	.word	0x08002657
 80025f0:	08002657 	.word	0x08002657
 80025f4:	08002611 	.word	0x08002611
 80025f8:	08002657 	.word	0x08002657
 80025fc:	08002657 	.word	0x08002657
 8002600:	08002657 	.word	0x08002657
 8002604:	08002621 	.word	0x08002621
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002608:	f000 f832 	bl	8002670 <RCC_GetSystemClockFreq>
 800260c:	60f8      	str	r0, [r7, #12]
        break;
 800260e:	e027      	b.n	8002660 <LL_RCC_GetUSARTClockFreq+0x124>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002610:	f7ff fe94 	bl	800233c <LL_RCC_HSI_IsReady>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d01f      	beq.n	800265a <LL_RCC_GetUSARTClockFreq+0x11e>
        {
          usart_frequency = HSI_VALUE;
 800261a:	4b14      	ldr	r3, [pc, #80]	; (800266c <LL_RCC_GetUSARTClockFreq+0x130>)
 800261c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800261e:	e01c      	b.n	800265a <LL_RCC_GetUSARTClockFreq+0x11e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002620:	f7ff fea0 	bl	8002364 <LL_RCC_LSE_IsReady>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d019      	beq.n	800265e <LL_RCC_GetUSARTClockFreq+0x122>
        {
          usart_frequency = LSE_VALUE;
 800262a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800262e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002630:	e015      	b.n	800265e <LL_RCC_GetUSARTClockFreq+0x122>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002632:	f000 f81d 	bl	8002670 <RCC_GetSystemClockFreq>
 8002636:	4603      	mov	r3, r0
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f8a9 	bl	8002790 <RCC_GetHCLKClockFreq>
 800263e:	4603      	mov	r3, r0
 8002640:	4618      	mov	r0, r3
 8002642:	f000 f8bb 	bl	80027bc <RCC_GetPCLK1ClockFreq>
 8002646:	60f8      	str	r0, [r7, #12]
        break;
 8002648:	e00a      	b.n	8002660 <LL_RCC_GetUSARTClockFreq+0x124>
        break;
 800264a:	bf00      	nop
 800264c:	e008      	b.n	8002660 <LL_RCC_GetUSARTClockFreq+0x124>
        break;
 800264e:	bf00      	nop
 8002650:	e006      	b.n	8002660 <LL_RCC_GetUSARTClockFreq+0x124>
        break;
 8002652:	bf00      	nop
 8002654:	e004      	b.n	8002660 <LL_RCC_GetUSARTClockFreq+0x124>

      default:
        break;
 8002656:	bf00      	nop
 8002658:	e002      	b.n	8002660 <LL_RCC_GetUSARTClockFreq+0x124>
        break;
 800265a:	bf00      	nop
 800265c:	e000      	b.n	8002660 <LL_RCC_GetUSARTClockFreq+0x124>
        break;
 800265e:	bf00      	nop
          break;
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8002660:	68fb      	ldr	r3, [r7, #12]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	00f42400 	.word	0x00f42400

08002670 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002676:	f7ff feb7 	bl	80023e8 <LL_RCC_GetSysClkSource>
 800267a:	4603      	mov	r3, r0
 800267c:	2b0c      	cmp	r3, #12
 800267e:	d851      	bhi.n	8002724 <RCC_GetSystemClockFreq+0xb4>
 8002680:	a201      	add	r2, pc, #4	; (adr r2, 8002688 <RCC_GetSystemClockFreq+0x18>)
 8002682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002686:	bf00      	nop
 8002688:	080026bd 	.word	0x080026bd
 800268c:	08002725 	.word	0x08002725
 8002690:	08002725 	.word	0x08002725
 8002694:	08002725 	.word	0x08002725
 8002698:	08002711 	.word	0x08002711
 800269c:	08002725 	.word	0x08002725
 80026a0:	08002725 	.word	0x08002725
 80026a4:	08002725 	.word	0x08002725
 80026a8:	08002717 	.word	0x08002717
 80026ac:	08002725 	.word	0x08002725
 80026b0:	08002725 	.word	0x08002725
 80026b4:	08002725 	.word	0x08002725
 80026b8:	0800271d 	.word	0x0800271d
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80026bc:	f7ff fe66 	bl	800238c <LL_RCC_MSI_IsEnabledRangeSelect>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d111      	bne.n	80026ea <RCC_GetSystemClockFreq+0x7a>
 80026c6:	f7ff fe61 	bl	800238c <LL_RCC_MSI_IsEnabledRangeSelect>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d004      	beq.n	80026da <RCC_GetSystemClockFreq+0x6a>
 80026d0:	f7ff fe6e 	bl	80023b0 <LL_RCC_MSI_GetRange>
 80026d4:	4603      	mov	r3, r0
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	e003      	b.n	80026e2 <RCC_GetSystemClockFreq+0x72>
 80026da:	f7ff fe77 	bl	80023cc <LL_RCC_MSI_GetRangeAfterStandby>
 80026de:	4603      	mov	r3, r0
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	4a28      	ldr	r2, [pc, #160]	; (8002784 <RCC_GetSystemClockFreq+0x114>)
 80026e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e8:	e010      	b.n	800270c <RCC_GetSystemClockFreq+0x9c>
 80026ea:	f7ff fe4f 	bl	800238c <LL_RCC_MSI_IsEnabledRangeSelect>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d004      	beq.n	80026fe <RCC_GetSystemClockFreq+0x8e>
 80026f4:	f7ff fe5c 	bl	80023b0 <LL_RCC_MSI_GetRange>
 80026f8:	4603      	mov	r3, r0
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	e003      	b.n	8002706 <RCC_GetSystemClockFreq+0x96>
 80026fe:	f7ff fe65 	bl	80023cc <LL_RCC_MSI_GetRangeAfterStandby>
 8002702:	4603      	mov	r3, r0
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	4a1f      	ldr	r2, [pc, #124]	; (8002784 <RCC_GetSystemClockFreq+0x114>)
 8002708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800270e:	e033      	b.n	8002778 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002710:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <RCC_GetSystemClockFreq+0x118>)
 8002712:	607b      	str	r3, [r7, #4]
      break;
 8002714:	e030      	b.n	8002778 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <RCC_GetSystemClockFreq+0x11c>)
 8002718:	607b      	str	r3, [r7, #4]
      break;
 800271a:	e02d      	b.n	8002778 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800271c:	f000 f876 	bl	800280c <RCC_PLL_GetFreqDomain_SYS>
 8002720:	6078      	str	r0, [r7, #4]
      break;
 8002722:	e029      	b.n	8002778 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002724:	f7ff fe32 	bl	800238c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d111      	bne.n	8002752 <RCC_GetSystemClockFreq+0xe2>
 800272e:	f7ff fe2d 	bl	800238c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <RCC_GetSystemClockFreq+0xd2>
 8002738:	f7ff fe3a 	bl	80023b0 <LL_RCC_MSI_GetRange>
 800273c:	4603      	mov	r3, r0
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	e003      	b.n	800274a <RCC_GetSystemClockFreq+0xda>
 8002742:	f7ff fe43 	bl	80023cc <LL_RCC_MSI_GetRangeAfterStandby>
 8002746:	4603      	mov	r3, r0
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <RCC_GetSystemClockFreq+0x114>)
 800274c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002750:	e010      	b.n	8002774 <RCC_GetSystemClockFreq+0x104>
 8002752:	f7ff fe1b 	bl	800238c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <RCC_GetSystemClockFreq+0xf6>
 800275c:	f7ff fe28 	bl	80023b0 <LL_RCC_MSI_GetRange>
 8002760:	4603      	mov	r3, r0
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	e003      	b.n	800276e <RCC_GetSystemClockFreq+0xfe>
 8002766:	f7ff fe31 	bl	80023cc <LL_RCC_MSI_GetRangeAfterStandby>
 800276a:	4603      	mov	r3, r0
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	4a05      	ldr	r2, [pc, #20]	; (8002784 <RCC_GetSystemClockFreq+0x114>)
 8002770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002774:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002776:	bf00      	nop
  }

  return frequency;
 8002778:	687b      	ldr	r3, [r7, #4]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	08008338 	.word	0x08008338
 8002788:	00f42400 	.word	0x00f42400
 800278c:	007a1200 	.word	0x007a1200

08002790 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002798:	f7ff fe34 	bl	8002404 <LL_RCC_GetAHBPrescaler>
 800279c:	4603      	mov	r3, r0
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <RCC_GetHCLKClockFreq+0x28>)
 80027a6:	5cd3      	ldrb	r3, [r2, r3]
 80027a8:	461a      	mov	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	40d3      	lsrs	r3, r2
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	08008320 	.word	0x08008320

080027bc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80027c4:	f7ff fe2c 	bl	8002420 <LL_RCC_GetAPB1Prescaler>
 80027c8:	4603      	mov	r3, r0
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <RCC_GetPCLK1ClockFreq+0x24>)
 80027ce:	5cd3      	ldrb	r3, [r2, r3]
 80027d0:	461a      	mov	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	40d3      	lsrs	r3, r2
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	08008330 	.word	0x08008330

080027e4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80027ec:	f7ff fe26 	bl	800243c <LL_RCC_GetAPB2Prescaler>
 80027f0:	4603      	mov	r3, r0
 80027f2:	0adb      	lsrs	r3, r3, #11
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <RCC_GetPCLK2ClockFreq+0x24>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	461a      	mov	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	40d3      	lsrs	r3, r2
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	08008330 	.word	0x08008330

0800280c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002812:	f7ff fe35 	bl	8002480 <LL_RCC_PLL_GetMainSource>
 8002816:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2b03      	cmp	r3, #3
 800281c:	d036      	beq.n	800288c <RCC_PLL_GetFreqDomain_SYS+0x80>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d836      	bhi.n	8002892 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d003      	beq.n	8002832 <RCC_PLL_GetFreqDomain_SYS+0x26>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d02a      	beq.n	8002886 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8002830:	e02f      	b.n	8002892 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002832:	f7ff fdab 	bl	800238c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d111      	bne.n	8002860 <RCC_PLL_GetFreqDomain_SYS+0x54>
 800283c:	f7ff fda6 	bl	800238c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d004      	beq.n	8002850 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8002846:	f7ff fdb3 	bl	80023b0 <LL_RCC_MSI_GetRange>
 800284a:	4603      	mov	r3, r0
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	e003      	b.n	8002858 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8002850:	f7ff fdbc 	bl	80023cc <LL_RCC_MSI_GetRangeAfterStandby>
 8002854:	4603      	mov	r3, r0
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	4a2f      	ldr	r2, [pc, #188]	; (8002918 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285e:	e010      	b.n	8002882 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8002860:	f7ff fd94 	bl	800238c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d004      	beq.n	8002874 <RCC_PLL_GetFreqDomain_SYS+0x68>
 800286a:	f7ff fda1 	bl	80023b0 <LL_RCC_MSI_GetRange>
 800286e:	4603      	mov	r3, r0
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	e003      	b.n	800287c <RCC_PLL_GetFreqDomain_SYS+0x70>
 8002874:	f7ff fdaa 	bl	80023cc <LL_RCC_MSI_GetRangeAfterStandby>
 8002878:	4603      	mov	r3, r0
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	4a26      	ldr	r2, [pc, #152]	; (8002918 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800287e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002882:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002884:	e02f      	b.n	80028e6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002886:	4b25      	ldr	r3, [pc, #148]	; (800291c <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8002888:	607b      	str	r3, [r7, #4]
      break;
 800288a:	e02c      	b.n	80028e6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800288e:	607b      	str	r3, [r7, #4]
      break;
 8002890:	e029      	b.n	80028e6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002892:	f7ff fd7b 	bl	800238c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d111      	bne.n	80028c0 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 800289c:	f7ff fd76 	bl	800238c <LL_RCC_MSI_IsEnabledRangeSelect>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d004      	beq.n	80028b0 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80028a6:	f7ff fd83 	bl	80023b0 <LL_RCC_MSI_GetRange>
 80028aa:	4603      	mov	r3, r0
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	e003      	b.n	80028b8 <RCC_PLL_GetFreqDomain_SYS+0xac>
 80028b0:	f7ff fd8c 	bl	80023cc <LL_RCC_MSI_GetRangeAfterStandby>
 80028b4:	4603      	mov	r3, r0
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	4a17      	ldr	r2, [pc, #92]	; (8002918 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80028ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028be:	e010      	b.n	80028e2 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80028c0:	f7ff fd64 	bl	800238c <LL_RCC_MSI_IsEnabledRangeSelect>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80028ca:	f7ff fd71 	bl	80023b0 <LL_RCC_MSI_GetRange>
 80028ce:	4603      	mov	r3, r0
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	e003      	b.n	80028dc <RCC_PLL_GetFreqDomain_SYS+0xd0>
 80028d4:	f7ff fd7a 	bl	80023cc <LL_RCC_MSI_GetRangeAfterStandby>
 80028d8:	4603      	mov	r3, r0
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80028e4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80028e6:	f7ff fdf5 	bl	80024d4 <LL_RCC_PLL_GetDivider>
 80028ea:	4603      	mov	r3, r0
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	3301      	adds	r3, #1
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	fbb2 f4f3 	udiv	r4, r2, r3
 80028f6:	f7ff fdd1 	bl	800249c <LL_RCC_PLL_GetN>
 80028fa:	4603      	mov	r3, r0
 80028fc:	fb03 f404 	mul.w	r4, r3, r4
 8002900:	f7ff fdda 	bl	80024b8 <LL_RCC_PLL_GetR>
 8002904:	4603      	mov	r3, r0
 8002906:	0e5b      	lsrs	r3, r3, #25
 8002908:	3301      	adds	r3, #1
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bd90      	pop	{r4, r7, pc}
 8002918:	08008338 	.word	0x08008338
 800291c:	00f42400 	.word	0x00f42400
 8002920:	007a1200 	.word	0x007a1200

08002924 <LL_USART_IsEnabled>:
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <LL_USART_IsEnabled+0x18>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <LL_USART_IsEnabled+0x1a>
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <LL_USART_SetStopBitsLength>:
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	605a      	str	r2, [r3, #4]
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_USART_SetHWFlowCtrl>:
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	609a      	str	r2, [r3, #8]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <LL_USART_SetBaudRate>:
{
 8002996:	b480      	push	{r7}
 8002998:	b087      	sub	sp, #28
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029aa:	d11a      	bne.n	80029e2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	005a      	lsls	r2, r3, #1
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	085b      	lsrs	r3, r3, #1
 80029b4:	441a      	add	r2, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029bc:	b29b      	uxth	r3, r3
 80029be:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	085b      	lsrs	r3, r3, #1
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	60da      	str	r2, [r3, #12]
}
 80029e0:	e00a      	b.n	80029f8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	085a      	lsrs	r2, r3, #1
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	441a      	add	r2, r3
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	60da      	str	r2, [r3, #12]
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ff84 	bl	8002924 <LL_USART_IsEnabled>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d13f      	bne.n	8002aa2 <LL_USART_Init+0x9e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	4b21      	ldr	r3, [pc, #132]	; (8002aac <LL_USART_Init+0xa8>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	6851      	ldr	r1, [r2, #4]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	68d2      	ldr	r2, [r2, #12]
 8002a32:	4311      	orrs	r1, r2
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	6912      	ldr	r2, [r2, #16]
 8002a38:	4311      	orrs	r1, r2
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	6992      	ldr	r2, [r2, #24]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff7c 	bl	800294a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	4619      	mov	r1, r3
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ff89 	bl	8002970 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <LL_USART_Init+0xac>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d104      	bne.n	8002a70 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002a66:	2003      	movs	r0, #3
 8002a68:	f7ff fd68 	bl	800253c <LL_RCC_GetUSARTClockFreq>
 8002a6c:	60b8      	str	r0, [r7, #8]
 8002a6e:	e007      	b.n	8002a80 <LL_USART_Init+0x7c>
    }
    else if (USARTx == USART2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a10      	ldr	r2, [pc, #64]	; (8002ab4 <LL_USART_Init+0xb0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d103      	bne.n	8002a80 <LL_USART_Init+0x7c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002a78:	200c      	movs	r0, #12
 8002a7a:	f7ff fd5f 	bl	800253c <LL_RCC_GetUSARTClockFreq>
 8002a7e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00d      	beq.n	8002aa2 <LL_USART_Init+0x9e>
        && (USART_InitStruct->BaudRate != 0U))
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <LL_USART_Init+0x9e>
    {
      status = SUCCESS;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ff7a 	bl	8002996 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	efff69f3 	.word	0xefff69f3
 8002ab0:	40013800 	.word	0x40013800
 8002ab4:	40004400 	.word	0x40004400

08002ab8 <LL_USART_StructInit>:
  *                         whose fields will be set to default values.
  * @retval None
  */

void LL_USART_StructInit(LL_USART_InitTypeDef *USART_InitStruct)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Set USART_InitStruct fields to default values */
#if defined(USART_PRESC_PRESCALER)
  USART_InitStruct->PrescalerValue      = LL_USART_PRESCALER_DIV1;
#endif /* USART_PRESC_PRESCALER */
  USART_InitStruct->BaudRate            = 9600U;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ac6:	601a      	str	r2, [r3, #0]
  USART_InitStruct->DataWidth           = LL_USART_DATAWIDTH_8B;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	605a      	str	r2, [r3, #4]
  USART_InitStruct->StopBits            = LL_USART_STOPBITS_1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  USART_InitStruct->Parity              = LL_USART_PARITY_NONE ;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60da      	str	r2, [r3, #12]
  USART_InitStruct->TransferDirection   = LL_USART_DIRECTION_TX_RX;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	220c      	movs	r2, #12
 8002ade:	611a      	str	r2, [r3, #16]
  USART_InitStruct->HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	615a      	str	r2, [r3, #20]
  USART_InitStruct->OverSampling        = LL_USART_OVERSAMPLING_16;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_InitTick>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0a:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <LL_InitTick+0x30>)
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <LL_InitTick+0x30>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b16:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <LL_InitTick+0x30>)
 8002b18:	2205      	movs	r2, #5
 8002b1a:	601a      	str	r2, [r3, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000e010 	.word	0xe000e010

08002b2c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002b34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff ffdd 	bl	8002af8 <LL_InitTick>
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002b50:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <LL_mDelay+0x4c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002b5a:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b62:	d00c      	beq.n	8002b7e <LL_mDelay+0x36>
  {
    tmpDelay++;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3301      	adds	r3, #1
 8002b68:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8002b6a:	e008      	b.n	8002b7e <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <LL_mDelay+0x4c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <LL_mDelay+0x36>
    {
      tmpDelay--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f3      	bne.n	8002b6c <LL_mDelay+0x24>
    }
  }
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000e010 	.word	0xe000e010

08002b98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b98:	480d      	ldr	r0, [pc, #52]	; (8002bd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b9a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b9c:	f7ff f938 	bl	8001e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ba0:	480c      	ldr	r0, [pc, #48]	; (8002bd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ba2:	490d      	ldr	r1, [pc, #52]	; (8002bd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	; (8002bdc <LoopForever+0xe>)
  movs r3, #0
 8002ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba8:	e002      	b.n	8002bb0 <LoopCopyDataInit>

08002baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bae:	3304      	adds	r3, #4

08002bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb4:	d3f9      	bcc.n	8002baa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bb8:	4c0a      	ldr	r4, [pc, #40]	; (8002be4 <LoopForever+0x16>)
  movs r3, #0
 8002bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bbc:	e001      	b.n	8002bc2 <LoopFillZerobss>

08002bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bc0:	3204      	adds	r2, #4

08002bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc4:	d3fb      	bcc.n	8002bbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002bc6:	f000 f81b 	bl	8002c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bca:	f7ff f801 	bl	8001bd0 <main>

08002bce <LoopForever>:

LoopForever:
    b LoopForever
 8002bce:	e7fe      	b.n	8002bce <LoopForever>
  ldr   r0, =_estack
 8002bd0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002bdc:	0800883c 	.word	0x0800883c
  ldr r2, =_sbss
 8002be0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002be4:	2000025c 	.word	0x2000025c

08002be8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002be8:	e7fe      	b.n	8002be8 <ADC1_IRQHandler>

08002bea <atoi>:
 8002bea:	220a      	movs	r2, #10
 8002bec:	2100      	movs	r1, #0
 8002bee:	f001 be0d 	b.w	800480c <strtol>
	...

08002bf4 <__errno>:
 8002bf4:	4b01      	ldr	r3, [pc, #4]	; (8002bfc <__errno+0x8>)
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	2000000c 	.word	0x2000000c

08002c00 <__libc_init_array>:
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	4d0d      	ldr	r5, [pc, #52]	; (8002c38 <__libc_init_array+0x38>)
 8002c04:	4c0d      	ldr	r4, [pc, #52]	; (8002c3c <__libc_init_array+0x3c>)
 8002c06:	1b64      	subs	r4, r4, r5
 8002c08:	10a4      	asrs	r4, r4, #2
 8002c0a:	2600      	movs	r6, #0
 8002c0c:	42a6      	cmp	r6, r4
 8002c0e:	d109      	bne.n	8002c24 <__libc_init_array+0x24>
 8002c10:	4d0b      	ldr	r5, [pc, #44]	; (8002c40 <__libc_init_array+0x40>)
 8002c12:	4c0c      	ldr	r4, [pc, #48]	; (8002c44 <__libc_init_array+0x44>)
 8002c14:	f005 f8a4 	bl	8007d60 <_init>
 8002c18:	1b64      	subs	r4, r4, r5
 8002c1a:	10a4      	asrs	r4, r4, #2
 8002c1c:	2600      	movs	r6, #0
 8002c1e:	42a6      	cmp	r6, r4
 8002c20:	d105      	bne.n	8002c2e <__libc_init_array+0x2e>
 8002c22:	bd70      	pop	{r4, r5, r6, pc}
 8002c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c28:	4798      	blx	r3
 8002c2a:	3601      	adds	r6, #1
 8002c2c:	e7ee      	b.n	8002c0c <__libc_init_array+0xc>
 8002c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c32:	4798      	blx	r3
 8002c34:	3601      	adds	r6, #1
 8002c36:	e7f2      	b.n	8002c1e <__libc_init_array+0x1e>
 8002c38:	08008834 	.word	0x08008834
 8002c3c:	08008834 	.word	0x08008834
 8002c40:	08008834 	.word	0x08008834
 8002c44:	08008838 	.word	0x08008838

08002c48 <memset>:
 8002c48:	4402      	add	r2, r0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d100      	bne.n	8002c52 <memset+0xa>
 8002c50:	4770      	bx	lr
 8002c52:	f803 1b01 	strb.w	r1, [r3], #1
 8002c56:	e7f9      	b.n	8002c4c <memset+0x4>

08002c58 <__cvt>:
 8002c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c5c:	ec55 4b10 	vmov	r4, r5, d0
 8002c60:	2d00      	cmp	r5, #0
 8002c62:	460e      	mov	r6, r1
 8002c64:	4619      	mov	r1, r3
 8002c66:	462b      	mov	r3, r5
 8002c68:	bfbb      	ittet	lt
 8002c6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002c6e:	461d      	movlt	r5, r3
 8002c70:	2300      	movge	r3, #0
 8002c72:	232d      	movlt	r3, #45	; 0x2d
 8002c74:	700b      	strb	r3, [r1, #0]
 8002c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002c7c:	4691      	mov	r9, r2
 8002c7e:	f023 0820 	bic.w	r8, r3, #32
 8002c82:	bfbc      	itt	lt
 8002c84:	4622      	movlt	r2, r4
 8002c86:	4614      	movlt	r4, r2
 8002c88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002c8c:	d005      	beq.n	8002c9a <__cvt+0x42>
 8002c8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002c92:	d100      	bne.n	8002c96 <__cvt+0x3e>
 8002c94:	3601      	adds	r6, #1
 8002c96:	2102      	movs	r1, #2
 8002c98:	e000      	b.n	8002c9c <__cvt+0x44>
 8002c9a:	2103      	movs	r1, #3
 8002c9c:	ab03      	add	r3, sp, #12
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	ab02      	add	r3, sp, #8
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	ec45 4b10 	vmov	d0, r4, r5
 8002ca8:	4653      	mov	r3, sl
 8002caa:	4632      	mov	r2, r6
 8002cac:	f001 fe68 	bl	8004980 <_dtoa_r>
 8002cb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002cb4:	4607      	mov	r7, r0
 8002cb6:	d102      	bne.n	8002cbe <__cvt+0x66>
 8002cb8:	f019 0f01 	tst.w	r9, #1
 8002cbc:	d022      	beq.n	8002d04 <__cvt+0xac>
 8002cbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002cc2:	eb07 0906 	add.w	r9, r7, r6
 8002cc6:	d110      	bne.n	8002cea <__cvt+0x92>
 8002cc8:	783b      	ldrb	r3, [r7, #0]
 8002cca:	2b30      	cmp	r3, #48	; 0x30
 8002ccc:	d10a      	bne.n	8002ce4 <__cvt+0x8c>
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	f7fd ff0f 	bl	8000af8 <__aeabi_dcmpeq>
 8002cda:	b918      	cbnz	r0, 8002ce4 <__cvt+0x8c>
 8002cdc:	f1c6 0601 	rsb	r6, r6, #1
 8002ce0:	f8ca 6000 	str.w	r6, [sl]
 8002ce4:	f8da 3000 	ldr.w	r3, [sl]
 8002ce8:	4499      	add	r9, r3
 8002cea:	2200      	movs	r2, #0
 8002cec:	2300      	movs	r3, #0
 8002cee:	4620      	mov	r0, r4
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	f7fd ff01 	bl	8000af8 <__aeabi_dcmpeq>
 8002cf6:	b108      	cbz	r0, 8002cfc <__cvt+0xa4>
 8002cf8:	f8cd 900c 	str.w	r9, [sp, #12]
 8002cfc:	2230      	movs	r2, #48	; 0x30
 8002cfe:	9b03      	ldr	r3, [sp, #12]
 8002d00:	454b      	cmp	r3, r9
 8002d02:	d307      	bcc.n	8002d14 <__cvt+0xbc>
 8002d04:	9b03      	ldr	r3, [sp, #12]
 8002d06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d08:	1bdb      	subs	r3, r3, r7
 8002d0a:	4638      	mov	r0, r7
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	b004      	add	sp, #16
 8002d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d14:	1c59      	adds	r1, r3, #1
 8002d16:	9103      	str	r1, [sp, #12]
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	e7f0      	b.n	8002cfe <__cvt+0xa6>

08002d1c <__exponent>:
 8002d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2900      	cmp	r1, #0
 8002d22:	bfb8      	it	lt
 8002d24:	4249      	neglt	r1, r1
 8002d26:	f803 2b02 	strb.w	r2, [r3], #2
 8002d2a:	bfb4      	ite	lt
 8002d2c:	222d      	movlt	r2, #45	; 0x2d
 8002d2e:	222b      	movge	r2, #43	; 0x2b
 8002d30:	2909      	cmp	r1, #9
 8002d32:	7042      	strb	r2, [r0, #1]
 8002d34:	dd2a      	ble.n	8002d8c <__exponent+0x70>
 8002d36:	f10d 0407 	add.w	r4, sp, #7
 8002d3a:	46a4      	mov	ip, r4
 8002d3c:	270a      	movs	r7, #10
 8002d3e:	46a6      	mov	lr, r4
 8002d40:	460a      	mov	r2, r1
 8002d42:	fb91 f6f7 	sdiv	r6, r1, r7
 8002d46:	fb07 1516 	mls	r5, r7, r6, r1
 8002d4a:	3530      	adds	r5, #48	; 0x30
 8002d4c:	2a63      	cmp	r2, #99	; 0x63
 8002d4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8002d52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002d56:	4631      	mov	r1, r6
 8002d58:	dcf1      	bgt.n	8002d3e <__exponent+0x22>
 8002d5a:	3130      	adds	r1, #48	; 0x30
 8002d5c:	f1ae 0502 	sub.w	r5, lr, #2
 8002d60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002d64:	1c44      	adds	r4, r0, #1
 8002d66:	4629      	mov	r1, r5
 8002d68:	4561      	cmp	r1, ip
 8002d6a:	d30a      	bcc.n	8002d82 <__exponent+0x66>
 8002d6c:	f10d 0209 	add.w	r2, sp, #9
 8002d70:	eba2 020e 	sub.w	r2, r2, lr
 8002d74:	4565      	cmp	r5, ip
 8002d76:	bf88      	it	hi
 8002d78:	2200      	movhi	r2, #0
 8002d7a:	4413      	add	r3, r2
 8002d7c:	1a18      	subs	r0, r3, r0
 8002d7e:	b003      	add	sp, #12
 8002d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002d8a:	e7ed      	b.n	8002d68 <__exponent+0x4c>
 8002d8c:	2330      	movs	r3, #48	; 0x30
 8002d8e:	3130      	adds	r1, #48	; 0x30
 8002d90:	7083      	strb	r3, [r0, #2]
 8002d92:	70c1      	strb	r1, [r0, #3]
 8002d94:	1d03      	adds	r3, r0, #4
 8002d96:	e7f1      	b.n	8002d7c <__exponent+0x60>

08002d98 <_printf_float>:
 8002d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d9c:	ed2d 8b02 	vpush	{d8}
 8002da0:	b08d      	sub	sp, #52	; 0x34
 8002da2:	460c      	mov	r4, r1
 8002da4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002da8:	4616      	mov	r6, r2
 8002daa:	461f      	mov	r7, r3
 8002dac:	4605      	mov	r5, r0
 8002dae:	f002 ff43 	bl	8005c38 <_localeconv_r>
 8002db2:	f8d0 a000 	ldr.w	sl, [r0]
 8002db6:	4650      	mov	r0, sl
 8002db8:	f7fd fa1c 	bl	80001f4 <strlen>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	9305      	str	r3, [sp, #20]
 8002dc4:	f8d8 3000 	ldr.w	r3, [r8]
 8002dc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002dcc:	3307      	adds	r3, #7
 8002dce:	f023 0307 	bic.w	r3, r3, #7
 8002dd2:	f103 0208 	add.w	r2, r3, #8
 8002dd6:	f8c8 2000 	str.w	r2, [r8]
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002de2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002de6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002dea:	9307      	str	r3, [sp, #28]
 8002dec:	f8cd 8018 	str.w	r8, [sp, #24]
 8002df0:	ee08 0a10 	vmov	s16, r0
 8002df4:	4b9f      	ldr	r3, [pc, #636]	; (8003074 <_printf_float+0x2dc>)
 8002df6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfe:	f7fd fead 	bl	8000b5c <__aeabi_dcmpun>
 8002e02:	bb88      	cbnz	r0, 8002e68 <_printf_float+0xd0>
 8002e04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e08:	4b9a      	ldr	r3, [pc, #616]	; (8003074 <_printf_float+0x2dc>)
 8002e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0e:	f7fd fe87 	bl	8000b20 <__aeabi_dcmple>
 8002e12:	bb48      	cbnz	r0, 8002e68 <_printf_float+0xd0>
 8002e14:	2200      	movs	r2, #0
 8002e16:	2300      	movs	r3, #0
 8002e18:	4640      	mov	r0, r8
 8002e1a:	4649      	mov	r1, r9
 8002e1c:	f7fd fe76 	bl	8000b0c <__aeabi_dcmplt>
 8002e20:	b110      	cbz	r0, 8002e28 <_printf_float+0x90>
 8002e22:	232d      	movs	r3, #45	; 0x2d
 8002e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e28:	4b93      	ldr	r3, [pc, #588]	; (8003078 <_printf_float+0x2e0>)
 8002e2a:	4894      	ldr	r0, [pc, #592]	; (800307c <_printf_float+0x2e4>)
 8002e2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002e30:	bf94      	ite	ls
 8002e32:	4698      	movls	r8, r3
 8002e34:	4680      	movhi	r8, r0
 8002e36:	2303      	movs	r3, #3
 8002e38:	6123      	str	r3, [r4, #16]
 8002e3a:	9b05      	ldr	r3, [sp, #20]
 8002e3c:	f023 0204 	bic.w	r2, r3, #4
 8002e40:	6022      	str	r2, [r4, #0]
 8002e42:	f04f 0900 	mov.w	r9, #0
 8002e46:	9700      	str	r7, [sp, #0]
 8002e48:	4633      	mov	r3, r6
 8002e4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	4628      	mov	r0, r5
 8002e50:	f000 f9d8 	bl	8003204 <_printf_common>
 8002e54:	3001      	adds	r0, #1
 8002e56:	f040 8090 	bne.w	8002f7a <_printf_float+0x1e2>
 8002e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5e:	b00d      	add	sp, #52	; 0x34
 8002e60:	ecbd 8b02 	vpop	{d8}
 8002e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e68:	4642      	mov	r2, r8
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	4640      	mov	r0, r8
 8002e6e:	4649      	mov	r1, r9
 8002e70:	f7fd fe74 	bl	8000b5c <__aeabi_dcmpun>
 8002e74:	b140      	cbz	r0, 8002e88 <_printf_float+0xf0>
 8002e76:	464b      	mov	r3, r9
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bfbc      	itt	lt
 8002e7c:	232d      	movlt	r3, #45	; 0x2d
 8002e7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002e82:	487f      	ldr	r0, [pc, #508]	; (8003080 <_printf_float+0x2e8>)
 8002e84:	4b7f      	ldr	r3, [pc, #508]	; (8003084 <_printf_float+0x2ec>)
 8002e86:	e7d1      	b.n	8002e2c <_printf_float+0x94>
 8002e88:	6863      	ldr	r3, [r4, #4]
 8002e8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002e8e:	9206      	str	r2, [sp, #24]
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	d13f      	bne.n	8002f14 <_printf_float+0x17c>
 8002e94:	2306      	movs	r3, #6
 8002e96:	6063      	str	r3, [r4, #4]
 8002e98:	9b05      	ldr	r3, [sp, #20]
 8002e9a:	6861      	ldr	r1, [r4, #4]
 8002e9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	ab0a      	add	r3, sp, #40	; 0x28
 8002ea6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002eaa:	ab09      	add	r3, sp, #36	; 0x24
 8002eac:	ec49 8b10 	vmov	d0, r8, r9
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	6022      	str	r2, [r4, #0]
 8002eb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002eb8:	4628      	mov	r0, r5
 8002eba:	f7ff fecd 	bl	8002c58 <__cvt>
 8002ebe:	9b06      	ldr	r3, [sp, #24]
 8002ec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ec2:	2b47      	cmp	r3, #71	; 0x47
 8002ec4:	4680      	mov	r8, r0
 8002ec6:	d108      	bne.n	8002eda <_printf_float+0x142>
 8002ec8:	1cc8      	adds	r0, r1, #3
 8002eca:	db02      	blt.n	8002ed2 <_printf_float+0x13a>
 8002ecc:	6863      	ldr	r3, [r4, #4]
 8002ece:	4299      	cmp	r1, r3
 8002ed0:	dd41      	ble.n	8002f56 <_printf_float+0x1be>
 8002ed2:	f1ab 0b02 	sub.w	fp, fp, #2
 8002ed6:	fa5f fb8b 	uxtb.w	fp, fp
 8002eda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002ede:	d820      	bhi.n	8002f22 <_printf_float+0x18a>
 8002ee0:	3901      	subs	r1, #1
 8002ee2:	465a      	mov	r2, fp
 8002ee4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002ee8:	9109      	str	r1, [sp, #36]	; 0x24
 8002eea:	f7ff ff17 	bl	8002d1c <__exponent>
 8002eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ef0:	1813      	adds	r3, r2, r0
 8002ef2:	2a01      	cmp	r2, #1
 8002ef4:	4681      	mov	r9, r0
 8002ef6:	6123      	str	r3, [r4, #16]
 8002ef8:	dc02      	bgt.n	8002f00 <_printf_float+0x168>
 8002efa:	6822      	ldr	r2, [r4, #0]
 8002efc:	07d2      	lsls	r2, r2, #31
 8002efe:	d501      	bpl.n	8002f04 <_printf_float+0x16c>
 8002f00:	3301      	adds	r3, #1
 8002f02:	6123      	str	r3, [r4, #16]
 8002f04:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d09c      	beq.n	8002e46 <_printf_float+0xae>
 8002f0c:	232d      	movs	r3, #45	; 0x2d
 8002f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f12:	e798      	b.n	8002e46 <_printf_float+0xae>
 8002f14:	9a06      	ldr	r2, [sp, #24]
 8002f16:	2a47      	cmp	r2, #71	; 0x47
 8002f18:	d1be      	bne.n	8002e98 <_printf_float+0x100>
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1bc      	bne.n	8002e98 <_printf_float+0x100>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e7b9      	b.n	8002e96 <_printf_float+0xfe>
 8002f22:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002f26:	d118      	bne.n	8002f5a <_printf_float+0x1c2>
 8002f28:	2900      	cmp	r1, #0
 8002f2a:	6863      	ldr	r3, [r4, #4]
 8002f2c:	dd0b      	ble.n	8002f46 <_printf_float+0x1ae>
 8002f2e:	6121      	str	r1, [r4, #16]
 8002f30:	b913      	cbnz	r3, 8002f38 <_printf_float+0x1a0>
 8002f32:	6822      	ldr	r2, [r4, #0]
 8002f34:	07d0      	lsls	r0, r2, #31
 8002f36:	d502      	bpl.n	8002f3e <_printf_float+0x1a6>
 8002f38:	3301      	adds	r3, #1
 8002f3a:	440b      	add	r3, r1
 8002f3c:	6123      	str	r3, [r4, #16]
 8002f3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002f40:	f04f 0900 	mov.w	r9, #0
 8002f44:	e7de      	b.n	8002f04 <_printf_float+0x16c>
 8002f46:	b913      	cbnz	r3, 8002f4e <_printf_float+0x1b6>
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	07d2      	lsls	r2, r2, #31
 8002f4c:	d501      	bpl.n	8002f52 <_printf_float+0x1ba>
 8002f4e:	3302      	adds	r3, #2
 8002f50:	e7f4      	b.n	8002f3c <_printf_float+0x1a4>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e7f2      	b.n	8002f3c <_printf_float+0x1a4>
 8002f56:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f5c:	4299      	cmp	r1, r3
 8002f5e:	db05      	blt.n	8002f6c <_printf_float+0x1d4>
 8002f60:	6823      	ldr	r3, [r4, #0]
 8002f62:	6121      	str	r1, [r4, #16]
 8002f64:	07d8      	lsls	r0, r3, #31
 8002f66:	d5ea      	bpl.n	8002f3e <_printf_float+0x1a6>
 8002f68:	1c4b      	adds	r3, r1, #1
 8002f6a:	e7e7      	b.n	8002f3c <_printf_float+0x1a4>
 8002f6c:	2900      	cmp	r1, #0
 8002f6e:	bfd4      	ite	le
 8002f70:	f1c1 0202 	rsble	r2, r1, #2
 8002f74:	2201      	movgt	r2, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	e7e0      	b.n	8002f3c <_printf_float+0x1a4>
 8002f7a:	6823      	ldr	r3, [r4, #0]
 8002f7c:	055a      	lsls	r2, r3, #21
 8002f7e:	d407      	bmi.n	8002f90 <_printf_float+0x1f8>
 8002f80:	6923      	ldr	r3, [r4, #16]
 8002f82:	4642      	mov	r2, r8
 8002f84:	4631      	mov	r1, r6
 8002f86:	4628      	mov	r0, r5
 8002f88:	47b8      	blx	r7
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	d12c      	bne.n	8002fe8 <_printf_float+0x250>
 8002f8e:	e764      	b.n	8002e5a <_printf_float+0xc2>
 8002f90:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002f94:	f240 80e0 	bls.w	8003158 <_printf_float+0x3c0>
 8002f98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f7fd fdaa 	bl	8000af8 <__aeabi_dcmpeq>
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	d034      	beq.n	8003012 <_printf_float+0x27a>
 8002fa8:	4a37      	ldr	r2, [pc, #220]	; (8003088 <_printf_float+0x2f0>)
 8002faa:	2301      	movs	r3, #1
 8002fac:	4631      	mov	r1, r6
 8002fae:	4628      	mov	r0, r5
 8002fb0:	47b8      	blx	r7
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	f43f af51 	beq.w	8002e5a <_printf_float+0xc2>
 8002fb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	db02      	blt.n	8002fc6 <_printf_float+0x22e>
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	07d8      	lsls	r0, r3, #31
 8002fc4:	d510      	bpl.n	8002fe8 <_printf_float+0x250>
 8002fc6:	ee18 3a10 	vmov	r3, s16
 8002fca:	4652      	mov	r2, sl
 8002fcc:	4631      	mov	r1, r6
 8002fce:	4628      	mov	r0, r5
 8002fd0:	47b8      	blx	r7
 8002fd2:	3001      	adds	r0, #1
 8002fd4:	f43f af41 	beq.w	8002e5a <_printf_float+0xc2>
 8002fd8:	f04f 0800 	mov.w	r8, #0
 8002fdc:	f104 091a 	add.w	r9, r4, #26
 8002fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	4543      	cmp	r3, r8
 8002fe6:	dc09      	bgt.n	8002ffc <_printf_float+0x264>
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	079b      	lsls	r3, r3, #30
 8002fec:	f100 8105 	bmi.w	80031fa <_printf_float+0x462>
 8002ff0:	68e0      	ldr	r0, [r4, #12]
 8002ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ff4:	4298      	cmp	r0, r3
 8002ff6:	bfb8      	it	lt
 8002ff8:	4618      	movlt	r0, r3
 8002ffa:	e730      	b.n	8002e5e <_printf_float+0xc6>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	464a      	mov	r2, r9
 8003000:	4631      	mov	r1, r6
 8003002:	4628      	mov	r0, r5
 8003004:	47b8      	blx	r7
 8003006:	3001      	adds	r0, #1
 8003008:	f43f af27 	beq.w	8002e5a <_printf_float+0xc2>
 800300c:	f108 0801 	add.w	r8, r8, #1
 8003010:	e7e6      	b.n	8002fe0 <_printf_float+0x248>
 8003012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003014:	2b00      	cmp	r3, #0
 8003016:	dc39      	bgt.n	800308c <_printf_float+0x2f4>
 8003018:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <_printf_float+0x2f0>)
 800301a:	2301      	movs	r3, #1
 800301c:	4631      	mov	r1, r6
 800301e:	4628      	mov	r0, r5
 8003020:	47b8      	blx	r7
 8003022:	3001      	adds	r0, #1
 8003024:	f43f af19 	beq.w	8002e5a <_printf_float+0xc2>
 8003028:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800302c:	4313      	orrs	r3, r2
 800302e:	d102      	bne.n	8003036 <_printf_float+0x29e>
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	07d9      	lsls	r1, r3, #31
 8003034:	d5d8      	bpl.n	8002fe8 <_printf_float+0x250>
 8003036:	ee18 3a10 	vmov	r3, s16
 800303a:	4652      	mov	r2, sl
 800303c:	4631      	mov	r1, r6
 800303e:	4628      	mov	r0, r5
 8003040:	47b8      	blx	r7
 8003042:	3001      	adds	r0, #1
 8003044:	f43f af09 	beq.w	8002e5a <_printf_float+0xc2>
 8003048:	f04f 0900 	mov.w	r9, #0
 800304c:	f104 0a1a 	add.w	sl, r4, #26
 8003050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003052:	425b      	negs	r3, r3
 8003054:	454b      	cmp	r3, r9
 8003056:	dc01      	bgt.n	800305c <_printf_float+0x2c4>
 8003058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800305a:	e792      	b.n	8002f82 <_printf_float+0x1ea>
 800305c:	2301      	movs	r3, #1
 800305e:	4652      	mov	r2, sl
 8003060:	4631      	mov	r1, r6
 8003062:	4628      	mov	r0, r5
 8003064:	47b8      	blx	r7
 8003066:	3001      	adds	r0, #1
 8003068:	f43f aef7 	beq.w	8002e5a <_printf_float+0xc2>
 800306c:	f109 0901 	add.w	r9, r9, #1
 8003070:	e7ee      	b.n	8003050 <_printf_float+0x2b8>
 8003072:	bf00      	nop
 8003074:	7fefffff 	.word	0x7fefffff
 8003078:	08008470 	.word	0x08008470
 800307c:	08008474 	.word	0x08008474
 8003080:	0800847c 	.word	0x0800847c
 8003084:	08008478 	.word	0x08008478
 8003088:	08008781 	.word	0x08008781
 800308c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800308e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003090:	429a      	cmp	r2, r3
 8003092:	bfa8      	it	ge
 8003094:	461a      	movge	r2, r3
 8003096:	2a00      	cmp	r2, #0
 8003098:	4691      	mov	r9, r2
 800309a:	dc37      	bgt.n	800310c <_printf_float+0x374>
 800309c:	f04f 0b00 	mov.w	fp, #0
 80030a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030a4:	f104 021a 	add.w	r2, r4, #26
 80030a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030aa:	9305      	str	r3, [sp, #20]
 80030ac:	eba3 0309 	sub.w	r3, r3, r9
 80030b0:	455b      	cmp	r3, fp
 80030b2:	dc33      	bgt.n	800311c <_printf_float+0x384>
 80030b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030b8:	429a      	cmp	r2, r3
 80030ba:	db3b      	blt.n	8003134 <_printf_float+0x39c>
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	07da      	lsls	r2, r3, #31
 80030c0:	d438      	bmi.n	8003134 <_printf_float+0x39c>
 80030c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030c4:	9b05      	ldr	r3, [sp, #20]
 80030c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	eba2 0901 	sub.w	r9, r2, r1
 80030ce:	4599      	cmp	r9, r3
 80030d0:	bfa8      	it	ge
 80030d2:	4699      	movge	r9, r3
 80030d4:	f1b9 0f00 	cmp.w	r9, #0
 80030d8:	dc35      	bgt.n	8003146 <_printf_float+0x3ae>
 80030da:	f04f 0800 	mov.w	r8, #0
 80030de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030e2:	f104 0a1a 	add.w	sl, r4, #26
 80030e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	eba3 0309 	sub.w	r3, r3, r9
 80030f0:	4543      	cmp	r3, r8
 80030f2:	f77f af79 	ble.w	8002fe8 <_printf_float+0x250>
 80030f6:	2301      	movs	r3, #1
 80030f8:	4652      	mov	r2, sl
 80030fa:	4631      	mov	r1, r6
 80030fc:	4628      	mov	r0, r5
 80030fe:	47b8      	blx	r7
 8003100:	3001      	adds	r0, #1
 8003102:	f43f aeaa 	beq.w	8002e5a <_printf_float+0xc2>
 8003106:	f108 0801 	add.w	r8, r8, #1
 800310a:	e7ec      	b.n	80030e6 <_printf_float+0x34e>
 800310c:	4613      	mov	r3, r2
 800310e:	4631      	mov	r1, r6
 8003110:	4642      	mov	r2, r8
 8003112:	4628      	mov	r0, r5
 8003114:	47b8      	blx	r7
 8003116:	3001      	adds	r0, #1
 8003118:	d1c0      	bne.n	800309c <_printf_float+0x304>
 800311a:	e69e      	b.n	8002e5a <_printf_float+0xc2>
 800311c:	2301      	movs	r3, #1
 800311e:	4631      	mov	r1, r6
 8003120:	4628      	mov	r0, r5
 8003122:	9205      	str	r2, [sp, #20]
 8003124:	47b8      	blx	r7
 8003126:	3001      	adds	r0, #1
 8003128:	f43f ae97 	beq.w	8002e5a <_printf_float+0xc2>
 800312c:	9a05      	ldr	r2, [sp, #20]
 800312e:	f10b 0b01 	add.w	fp, fp, #1
 8003132:	e7b9      	b.n	80030a8 <_printf_float+0x310>
 8003134:	ee18 3a10 	vmov	r3, s16
 8003138:	4652      	mov	r2, sl
 800313a:	4631      	mov	r1, r6
 800313c:	4628      	mov	r0, r5
 800313e:	47b8      	blx	r7
 8003140:	3001      	adds	r0, #1
 8003142:	d1be      	bne.n	80030c2 <_printf_float+0x32a>
 8003144:	e689      	b.n	8002e5a <_printf_float+0xc2>
 8003146:	9a05      	ldr	r2, [sp, #20]
 8003148:	464b      	mov	r3, r9
 800314a:	4442      	add	r2, r8
 800314c:	4631      	mov	r1, r6
 800314e:	4628      	mov	r0, r5
 8003150:	47b8      	blx	r7
 8003152:	3001      	adds	r0, #1
 8003154:	d1c1      	bne.n	80030da <_printf_float+0x342>
 8003156:	e680      	b.n	8002e5a <_printf_float+0xc2>
 8003158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800315a:	2a01      	cmp	r2, #1
 800315c:	dc01      	bgt.n	8003162 <_printf_float+0x3ca>
 800315e:	07db      	lsls	r3, r3, #31
 8003160:	d538      	bpl.n	80031d4 <_printf_float+0x43c>
 8003162:	2301      	movs	r3, #1
 8003164:	4642      	mov	r2, r8
 8003166:	4631      	mov	r1, r6
 8003168:	4628      	mov	r0, r5
 800316a:	47b8      	blx	r7
 800316c:	3001      	adds	r0, #1
 800316e:	f43f ae74 	beq.w	8002e5a <_printf_float+0xc2>
 8003172:	ee18 3a10 	vmov	r3, s16
 8003176:	4652      	mov	r2, sl
 8003178:	4631      	mov	r1, r6
 800317a:	4628      	mov	r0, r5
 800317c:	47b8      	blx	r7
 800317e:	3001      	adds	r0, #1
 8003180:	f43f ae6b 	beq.w	8002e5a <_printf_float+0xc2>
 8003184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003188:	2200      	movs	r2, #0
 800318a:	2300      	movs	r3, #0
 800318c:	f7fd fcb4 	bl	8000af8 <__aeabi_dcmpeq>
 8003190:	b9d8      	cbnz	r0, 80031ca <_printf_float+0x432>
 8003192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003194:	f108 0201 	add.w	r2, r8, #1
 8003198:	3b01      	subs	r3, #1
 800319a:	4631      	mov	r1, r6
 800319c:	4628      	mov	r0, r5
 800319e:	47b8      	blx	r7
 80031a0:	3001      	adds	r0, #1
 80031a2:	d10e      	bne.n	80031c2 <_printf_float+0x42a>
 80031a4:	e659      	b.n	8002e5a <_printf_float+0xc2>
 80031a6:	2301      	movs	r3, #1
 80031a8:	4652      	mov	r2, sl
 80031aa:	4631      	mov	r1, r6
 80031ac:	4628      	mov	r0, r5
 80031ae:	47b8      	blx	r7
 80031b0:	3001      	adds	r0, #1
 80031b2:	f43f ae52 	beq.w	8002e5a <_printf_float+0xc2>
 80031b6:	f108 0801 	add.w	r8, r8, #1
 80031ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031bc:	3b01      	subs	r3, #1
 80031be:	4543      	cmp	r3, r8
 80031c0:	dcf1      	bgt.n	80031a6 <_printf_float+0x40e>
 80031c2:	464b      	mov	r3, r9
 80031c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80031c8:	e6dc      	b.n	8002f84 <_printf_float+0x1ec>
 80031ca:	f04f 0800 	mov.w	r8, #0
 80031ce:	f104 0a1a 	add.w	sl, r4, #26
 80031d2:	e7f2      	b.n	80031ba <_printf_float+0x422>
 80031d4:	2301      	movs	r3, #1
 80031d6:	4642      	mov	r2, r8
 80031d8:	e7df      	b.n	800319a <_printf_float+0x402>
 80031da:	2301      	movs	r3, #1
 80031dc:	464a      	mov	r2, r9
 80031de:	4631      	mov	r1, r6
 80031e0:	4628      	mov	r0, r5
 80031e2:	47b8      	blx	r7
 80031e4:	3001      	adds	r0, #1
 80031e6:	f43f ae38 	beq.w	8002e5a <_printf_float+0xc2>
 80031ea:	f108 0801 	add.w	r8, r8, #1
 80031ee:	68e3      	ldr	r3, [r4, #12]
 80031f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031f2:	1a5b      	subs	r3, r3, r1
 80031f4:	4543      	cmp	r3, r8
 80031f6:	dcf0      	bgt.n	80031da <_printf_float+0x442>
 80031f8:	e6fa      	b.n	8002ff0 <_printf_float+0x258>
 80031fa:	f04f 0800 	mov.w	r8, #0
 80031fe:	f104 0919 	add.w	r9, r4, #25
 8003202:	e7f4      	b.n	80031ee <_printf_float+0x456>

08003204 <_printf_common>:
 8003204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003208:	4616      	mov	r6, r2
 800320a:	4699      	mov	r9, r3
 800320c:	688a      	ldr	r2, [r1, #8]
 800320e:	690b      	ldr	r3, [r1, #16]
 8003210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003214:	4293      	cmp	r3, r2
 8003216:	bfb8      	it	lt
 8003218:	4613      	movlt	r3, r2
 800321a:	6033      	str	r3, [r6, #0]
 800321c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003220:	4607      	mov	r7, r0
 8003222:	460c      	mov	r4, r1
 8003224:	b10a      	cbz	r2, 800322a <_printf_common+0x26>
 8003226:	3301      	adds	r3, #1
 8003228:	6033      	str	r3, [r6, #0]
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	0699      	lsls	r1, r3, #26
 800322e:	bf42      	ittt	mi
 8003230:	6833      	ldrmi	r3, [r6, #0]
 8003232:	3302      	addmi	r3, #2
 8003234:	6033      	strmi	r3, [r6, #0]
 8003236:	6825      	ldr	r5, [r4, #0]
 8003238:	f015 0506 	ands.w	r5, r5, #6
 800323c:	d106      	bne.n	800324c <_printf_common+0x48>
 800323e:	f104 0a19 	add.w	sl, r4, #25
 8003242:	68e3      	ldr	r3, [r4, #12]
 8003244:	6832      	ldr	r2, [r6, #0]
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	42ab      	cmp	r3, r5
 800324a:	dc26      	bgt.n	800329a <_printf_common+0x96>
 800324c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003250:	1e13      	subs	r3, r2, #0
 8003252:	6822      	ldr	r2, [r4, #0]
 8003254:	bf18      	it	ne
 8003256:	2301      	movne	r3, #1
 8003258:	0692      	lsls	r2, r2, #26
 800325a:	d42b      	bmi.n	80032b4 <_printf_common+0xb0>
 800325c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003260:	4649      	mov	r1, r9
 8003262:	4638      	mov	r0, r7
 8003264:	47c0      	blx	r8
 8003266:	3001      	adds	r0, #1
 8003268:	d01e      	beq.n	80032a8 <_printf_common+0xa4>
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	68e5      	ldr	r5, [r4, #12]
 800326e:	6832      	ldr	r2, [r6, #0]
 8003270:	f003 0306 	and.w	r3, r3, #6
 8003274:	2b04      	cmp	r3, #4
 8003276:	bf08      	it	eq
 8003278:	1aad      	subeq	r5, r5, r2
 800327a:	68a3      	ldr	r3, [r4, #8]
 800327c:	6922      	ldr	r2, [r4, #16]
 800327e:	bf0c      	ite	eq
 8003280:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003284:	2500      	movne	r5, #0
 8003286:	4293      	cmp	r3, r2
 8003288:	bfc4      	itt	gt
 800328a:	1a9b      	subgt	r3, r3, r2
 800328c:	18ed      	addgt	r5, r5, r3
 800328e:	2600      	movs	r6, #0
 8003290:	341a      	adds	r4, #26
 8003292:	42b5      	cmp	r5, r6
 8003294:	d11a      	bne.n	80032cc <_printf_common+0xc8>
 8003296:	2000      	movs	r0, #0
 8003298:	e008      	b.n	80032ac <_printf_common+0xa8>
 800329a:	2301      	movs	r3, #1
 800329c:	4652      	mov	r2, sl
 800329e:	4649      	mov	r1, r9
 80032a0:	4638      	mov	r0, r7
 80032a2:	47c0      	blx	r8
 80032a4:	3001      	adds	r0, #1
 80032a6:	d103      	bne.n	80032b0 <_printf_common+0xac>
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b0:	3501      	adds	r5, #1
 80032b2:	e7c6      	b.n	8003242 <_printf_common+0x3e>
 80032b4:	18e1      	adds	r1, r4, r3
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	2030      	movs	r0, #48	; 0x30
 80032ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032be:	4422      	add	r2, r4
 80032c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032c8:	3302      	adds	r3, #2
 80032ca:	e7c7      	b.n	800325c <_printf_common+0x58>
 80032cc:	2301      	movs	r3, #1
 80032ce:	4622      	mov	r2, r4
 80032d0:	4649      	mov	r1, r9
 80032d2:	4638      	mov	r0, r7
 80032d4:	47c0      	blx	r8
 80032d6:	3001      	adds	r0, #1
 80032d8:	d0e6      	beq.n	80032a8 <_printf_common+0xa4>
 80032da:	3601      	adds	r6, #1
 80032dc:	e7d9      	b.n	8003292 <_printf_common+0x8e>
	...

080032e0 <_printf_i>:
 80032e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032e4:	460c      	mov	r4, r1
 80032e6:	4691      	mov	r9, r2
 80032e8:	7e27      	ldrb	r7, [r4, #24]
 80032ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80032ec:	2f78      	cmp	r7, #120	; 0x78
 80032ee:	4680      	mov	r8, r0
 80032f0:	469a      	mov	sl, r3
 80032f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032f6:	d807      	bhi.n	8003308 <_printf_i+0x28>
 80032f8:	2f62      	cmp	r7, #98	; 0x62
 80032fa:	d80a      	bhi.n	8003312 <_printf_i+0x32>
 80032fc:	2f00      	cmp	r7, #0
 80032fe:	f000 80d8 	beq.w	80034b2 <_printf_i+0x1d2>
 8003302:	2f58      	cmp	r7, #88	; 0x58
 8003304:	f000 80a3 	beq.w	800344e <_printf_i+0x16e>
 8003308:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800330c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003310:	e03a      	b.n	8003388 <_printf_i+0xa8>
 8003312:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003316:	2b15      	cmp	r3, #21
 8003318:	d8f6      	bhi.n	8003308 <_printf_i+0x28>
 800331a:	a001      	add	r0, pc, #4	; (adr r0, 8003320 <_printf_i+0x40>)
 800331c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003320:	08003379 	.word	0x08003379
 8003324:	0800338d 	.word	0x0800338d
 8003328:	08003309 	.word	0x08003309
 800332c:	08003309 	.word	0x08003309
 8003330:	08003309 	.word	0x08003309
 8003334:	08003309 	.word	0x08003309
 8003338:	0800338d 	.word	0x0800338d
 800333c:	08003309 	.word	0x08003309
 8003340:	08003309 	.word	0x08003309
 8003344:	08003309 	.word	0x08003309
 8003348:	08003309 	.word	0x08003309
 800334c:	08003499 	.word	0x08003499
 8003350:	080033bd 	.word	0x080033bd
 8003354:	0800347b 	.word	0x0800347b
 8003358:	08003309 	.word	0x08003309
 800335c:	08003309 	.word	0x08003309
 8003360:	080034bb 	.word	0x080034bb
 8003364:	08003309 	.word	0x08003309
 8003368:	080033bd 	.word	0x080033bd
 800336c:	08003309 	.word	0x08003309
 8003370:	08003309 	.word	0x08003309
 8003374:	08003483 	.word	0x08003483
 8003378:	680b      	ldr	r3, [r1, #0]
 800337a:	1d1a      	adds	r2, r3, #4
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	600a      	str	r2, [r1, #0]
 8003380:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003388:	2301      	movs	r3, #1
 800338a:	e0a3      	b.n	80034d4 <_printf_i+0x1f4>
 800338c:	6825      	ldr	r5, [r4, #0]
 800338e:	6808      	ldr	r0, [r1, #0]
 8003390:	062e      	lsls	r6, r5, #24
 8003392:	f100 0304 	add.w	r3, r0, #4
 8003396:	d50a      	bpl.n	80033ae <_printf_i+0xce>
 8003398:	6805      	ldr	r5, [r0, #0]
 800339a:	600b      	str	r3, [r1, #0]
 800339c:	2d00      	cmp	r5, #0
 800339e:	da03      	bge.n	80033a8 <_printf_i+0xc8>
 80033a0:	232d      	movs	r3, #45	; 0x2d
 80033a2:	426d      	negs	r5, r5
 80033a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033a8:	485e      	ldr	r0, [pc, #376]	; (8003524 <_printf_i+0x244>)
 80033aa:	230a      	movs	r3, #10
 80033ac:	e019      	b.n	80033e2 <_printf_i+0x102>
 80033ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80033b2:	6805      	ldr	r5, [r0, #0]
 80033b4:	600b      	str	r3, [r1, #0]
 80033b6:	bf18      	it	ne
 80033b8:	b22d      	sxthne	r5, r5
 80033ba:	e7ef      	b.n	800339c <_printf_i+0xbc>
 80033bc:	680b      	ldr	r3, [r1, #0]
 80033be:	6825      	ldr	r5, [r4, #0]
 80033c0:	1d18      	adds	r0, r3, #4
 80033c2:	6008      	str	r0, [r1, #0]
 80033c4:	0628      	lsls	r0, r5, #24
 80033c6:	d501      	bpl.n	80033cc <_printf_i+0xec>
 80033c8:	681d      	ldr	r5, [r3, #0]
 80033ca:	e002      	b.n	80033d2 <_printf_i+0xf2>
 80033cc:	0669      	lsls	r1, r5, #25
 80033ce:	d5fb      	bpl.n	80033c8 <_printf_i+0xe8>
 80033d0:	881d      	ldrh	r5, [r3, #0]
 80033d2:	4854      	ldr	r0, [pc, #336]	; (8003524 <_printf_i+0x244>)
 80033d4:	2f6f      	cmp	r7, #111	; 0x6f
 80033d6:	bf0c      	ite	eq
 80033d8:	2308      	moveq	r3, #8
 80033da:	230a      	movne	r3, #10
 80033dc:	2100      	movs	r1, #0
 80033de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033e2:	6866      	ldr	r6, [r4, #4]
 80033e4:	60a6      	str	r6, [r4, #8]
 80033e6:	2e00      	cmp	r6, #0
 80033e8:	bfa2      	ittt	ge
 80033ea:	6821      	ldrge	r1, [r4, #0]
 80033ec:	f021 0104 	bicge.w	r1, r1, #4
 80033f0:	6021      	strge	r1, [r4, #0]
 80033f2:	b90d      	cbnz	r5, 80033f8 <_printf_i+0x118>
 80033f4:	2e00      	cmp	r6, #0
 80033f6:	d04d      	beq.n	8003494 <_printf_i+0x1b4>
 80033f8:	4616      	mov	r6, r2
 80033fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80033fe:	fb03 5711 	mls	r7, r3, r1, r5
 8003402:	5dc7      	ldrb	r7, [r0, r7]
 8003404:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003408:	462f      	mov	r7, r5
 800340a:	42bb      	cmp	r3, r7
 800340c:	460d      	mov	r5, r1
 800340e:	d9f4      	bls.n	80033fa <_printf_i+0x11a>
 8003410:	2b08      	cmp	r3, #8
 8003412:	d10b      	bne.n	800342c <_printf_i+0x14c>
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	07df      	lsls	r7, r3, #31
 8003418:	d508      	bpl.n	800342c <_printf_i+0x14c>
 800341a:	6923      	ldr	r3, [r4, #16]
 800341c:	6861      	ldr	r1, [r4, #4]
 800341e:	4299      	cmp	r1, r3
 8003420:	bfde      	ittt	le
 8003422:	2330      	movle	r3, #48	; 0x30
 8003424:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003428:	f106 36ff 	addle.w	r6, r6, #4294967295
 800342c:	1b92      	subs	r2, r2, r6
 800342e:	6122      	str	r2, [r4, #16]
 8003430:	f8cd a000 	str.w	sl, [sp]
 8003434:	464b      	mov	r3, r9
 8003436:	aa03      	add	r2, sp, #12
 8003438:	4621      	mov	r1, r4
 800343a:	4640      	mov	r0, r8
 800343c:	f7ff fee2 	bl	8003204 <_printf_common>
 8003440:	3001      	adds	r0, #1
 8003442:	d14c      	bne.n	80034de <_printf_i+0x1fe>
 8003444:	f04f 30ff 	mov.w	r0, #4294967295
 8003448:	b004      	add	sp, #16
 800344a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800344e:	4835      	ldr	r0, [pc, #212]	; (8003524 <_printf_i+0x244>)
 8003450:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	680e      	ldr	r6, [r1, #0]
 8003458:	061f      	lsls	r7, r3, #24
 800345a:	f856 5b04 	ldr.w	r5, [r6], #4
 800345e:	600e      	str	r6, [r1, #0]
 8003460:	d514      	bpl.n	800348c <_printf_i+0x1ac>
 8003462:	07d9      	lsls	r1, r3, #31
 8003464:	bf44      	itt	mi
 8003466:	f043 0320 	orrmi.w	r3, r3, #32
 800346a:	6023      	strmi	r3, [r4, #0]
 800346c:	b91d      	cbnz	r5, 8003476 <_printf_i+0x196>
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	f023 0320 	bic.w	r3, r3, #32
 8003474:	6023      	str	r3, [r4, #0]
 8003476:	2310      	movs	r3, #16
 8003478:	e7b0      	b.n	80033dc <_printf_i+0xfc>
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	f043 0320 	orr.w	r3, r3, #32
 8003480:	6023      	str	r3, [r4, #0]
 8003482:	2378      	movs	r3, #120	; 0x78
 8003484:	4828      	ldr	r0, [pc, #160]	; (8003528 <_printf_i+0x248>)
 8003486:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800348a:	e7e3      	b.n	8003454 <_printf_i+0x174>
 800348c:	065e      	lsls	r6, r3, #25
 800348e:	bf48      	it	mi
 8003490:	b2ad      	uxthmi	r5, r5
 8003492:	e7e6      	b.n	8003462 <_printf_i+0x182>
 8003494:	4616      	mov	r6, r2
 8003496:	e7bb      	b.n	8003410 <_printf_i+0x130>
 8003498:	680b      	ldr	r3, [r1, #0]
 800349a:	6826      	ldr	r6, [r4, #0]
 800349c:	6960      	ldr	r0, [r4, #20]
 800349e:	1d1d      	adds	r5, r3, #4
 80034a0:	600d      	str	r5, [r1, #0]
 80034a2:	0635      	lsls	r5, r6, #24
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	d501      	bpl.n	80034ac <_printf_i+0x1cc>
 80034a8:	6018      	str	r0, [r3, #0]
 80034aa:	e002      	b.n	80034b2 <_printf_i+0x1d2>
 80034ac:	0671      	lsls	r1, r6, #25
 80034ae:	d5fb      	bpl.n	80034a8 <_printf_i+0x1c8>
 80034b0:	8018      	strh	r0, [r3, #0]
 80034b2:	2300      	movs	r3, #0
 80034b4:	6123      	str	r3, [r4, #16]
 80034b6:	4616      	mov	r6, r2
 80034b8:	e7ba      	b.n	8003430 <_printf_i+0x150>
 80034ba:	680b      	ldr	r3, [r1, #0]
 80034bc:	1d1a      	adds	r2, r3, #4
 80034be:	600a      	str	r2, [r1, #0]
 80034c0:	681e      	ldr	r6, [r3, #0]
 80034c2:	6862      	ldr	r2, [r4, #4]
 80034c4:	2100      	movs	r1, #0
 80034c6:	4630      	mov	r0, r6
 80034c8:	f7fc fea2 	bl	8000210 <memchr>
 80034cc:	b108      	cbz	r0, 80034d2 <_printf_i+0x1f2>
 80034ce:	1b80      	subs	r0, r0, r6
 80034d0:	6060      	str	r0, [r4, #4]
 80034d2:	6863      	ldr	r3, [r4, #4]
 80034d4:	6123      	str	r3, [r4, #16]
 80034d6:	2300      	movs	r3, #0
 80034d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034dc:	e7a8      	b.n	8003430 <_printf_i+0x150>
 80034de:	6923      	ldr	r3, [r4, #16]
 80034e0:	4632      	mov	r2, r6
 80034e2:	4649      	mov	r1, r9
 80034e4:	4640      	mov	r0, r8
 80034e6:	47d0      	blx	sl
 80034e8:	3001      	adds	r0, #1
 80034ea:	d0ab      	beq.n	8003444 <_printf_i+0x164>
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	079b      	lsls	r3, r3, #30
 80034f0:	d413      	bmi.n	800351a <_printf_i+0x23a>
 80034f2:	68e0      	ldr	r0, [r4, #12]
 80034f4:	9b03      	ldr	r3, [sp, #12]
 80034f6:	4298      	cmp	r0, r3
 80034f8:	bfb8      	it	lt
 80034fa:	4618      	movlt	r0, r3
 80034fc:	e7a4      	b.n	8003448 <_printf_i+0x168>
 80034fe:	2301      	movs	r3, #1
 8003500:	4632      	mov	r2, r6
 8003502:	4649      	mov	r1, r9
 8003504:	4640      	mov	r0, r8
 8003506:	47d0      	blx	sl
 8003508:	3001      	adds	r0, #1
 800350a:	d09b      	beq.n	8003444 <_printf_i+0x164>
 800350c:	3501      	adds	r5, #1
 800350e:	68e3      	ldr	r3, [r4, #12]
 8003510:	9903      	ldr	r1, [sp, #12]
 8003512:	1a5b      	subs	r3, r3, r1
 8003514:	42ab      	cmp	r3, r5
 8003516:	dcf2      	bgt.n	80034fe <_printf_i+0x21e>
 8003518:	e7eb      	b.n	80034f2 <_printf_i+0x212>
 800351a:	2500      	movs	r5, #0
 800351c:	f104 0619 	add.w	r6, r4, #25
 8003520:	e7f5      	b.n	800350e <_printf_i+0x22e>
 8003522:	bf00      	nop
 8003524:	08008480 	.word	0x08008480
 8003528:	08008491 	.word	0x08008491

0800352c <_scanf_float>:
 800352c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003530:	b087      	sub	sp, #28
 8003532:	4617      	mov	r7, r2
 8003534:	9303      	str	r3, [sp, #12]
 8003536:	688b      	ldr	r3, [r1, #8]
 8003538:	1e5a      	subs	r2, r3, #1
 800353a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800353e:	bf83      	ittte	hi
 8003540:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003544:	195b      	addhi	r3, r3, r5
 8003546:	9302      	strhi	r3, [sp, #8]
 8003548:	2300      	movls	r3, #0
 800354a:	bf86      	itte	hi
 800354c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003550:	608b      	strhi	r3, [r1, #8]
 8003552:	9302      	strls	r3, [sp, #8]
 8003554:	680b      	ldr	r3, [r1, #0]
 8003556:	468b      	mov	fp, r1
 8003558:	2500      	movs	r5, #0
 800355a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800355e:	f84b 3b1c 	str.w	r3, [fp], #28
 8003562:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003566:	4680      	mov	r8, r0
 8003568:	460c      	mov	r4, r1
 800356a:	465e      	mov	r6, fp
 800356c:	46aa      	mov	sl, r5
 800356e:	46a9      	mov	r9, r5
 8003570:	9501      	str	r5, [sp, #4]
 8003572:	68a2      	ldr	r2, [r4, #8]
 8003574:	b152      	cbz	r2, 800358c <_scanf_float+0x60>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b4e      	cmp	r3, #78	; 0x4e
 800357c:	d864      	bhi.n	8003648 <_scanf_float+0x11c>
 800357e:	2b40      	cmp	r3, #64	; 0x40
 8003580:	d83c      	bhi.n	80035fc <_scanf_float+0xd0>
 8003582:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003586:	b2c8      	uxtb	r0, r1
 8003588:	280e      	cmp	r0, #14
 800358a:	d93a      	bls.n	8003602 <_scanf_float+0xd6>
 800358c:	f1b9 0f00 	cmp.w	r9, #0
 8003590:	d003      	beq.n	800359a <_scanf_float+0x6e>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003598:	6023      	str	r3, [r4, #0]
 800359a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800359e:	f1ba 0f01 	cmp.w	sl, #1
 80035a2:	f200 8113 	bhi.w	80037cc <_scanf_float+0x2a0>
 80035a6:	455e      	cmp	r6, fp
 80035a8:	f200 8105 	bhi.w	80037b6 <_scanf_float+0x28a>
 80035ac:	2501      	movs	r5, #1
 80035ae:	4628      	mov	r0, r5
 80035b0:	b007      	add	sp, #28
 80035b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80035ba:	2a0d      	cmp	r2, #13
 80035bc:	d8e6      	bhi.n	800358c <_scanf_float+0x60>
 80035be:	a101      	add	r1, pc, #4	; (adr r1, 80035c4 <_scanf_float+0x98>)
 80035c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80035c4:	08003703 	.word	0x08003703
 80035c8:	0800358d 	.word	0x0800358d
 80035cc:	0800358d 	.word	0x0800358d
 80035d0:	0800358d 	.word	0x0800358d
 80035d4:	08003763 	.word	0x08003763
 80035d8:	0800373b 	.word	0x0800373b
 80035dc:	0800358d 	.word	0x0800358d
 80035e0:	0800358d 	.word	0x0800358d
 80035e4:	08003711 	.word	0x08003711
 80035e8:	0800358d 	.word	0x0800358d
 80035ec:	0800358d 	.word	0x0800358d
 80035f0:	0800358d 	.word	0x0800358d
 80035f4:	0800358d 	.word	0x0800358d
 80035f8:	080036c9 	.word	0x080036c9
 80035fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003600:	e7db      	b.n	80035ba <_scanf_float+0x8e>
 8003602:	290e      	cmp	r1, #14
 8003604:	d8c2      	bhi.n	800358c <_scanf_float+0x60>
 8003606:	a001      	add	r0, pc, #4	; (adr r0, 800360c <_scanf_float+0xe0>)
 8003608:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800360c:	080036bb 	.word	0x080036bb
 8003610:	0800358d 	.word	0x0800358d
 8003614:	080036bb 	.word	0x080036bb
 8003618:	0800374f 	.word	0x0800374f
 800361c:	0800358d 	.word	0x0800358d
 8003620:	08003669 	.word	0x08003669
 8003624:	080036a5 	.word	0x080036a5
 8003628:	080036a5 	.word	0x080036a5
 800362c:	080036a5 	.word	0x080036a5
 8003630:	080036a5 	.word	0x080036a5
 8003634:	080036a5 	.word	0x080036a5
 8003638:	080036a5 	.word	0x080036a5
 800363c:	080036a5 	.word	0x080036a5
 8003640:	080036a5 	.word	0x080036a5
 8003644:	080036a5 	.word	0x080036a5
 8003648:	2b6e      	cmp	r3, #110	; 0x6e
 800364a:	d809      	bhi.n	8003660 <_scanf_float+0x134>
 800364c:	2b60      	cmp	r3, #96	; 0x60
 800364e:	d8b2      	bhi.n	80035b6 <_scanf_float+0x8a>
 8003650:	2b54      	cmp	r3, #84	; 0x54
 8003652:	d077      	beq.n	8003744 <_scanf_float+0x218>
 8003654:	2b59      	cmp	r3, #89	; 0x59
 8003656:	d199      	bne.n	800358c <_scanf_float+0x60>
 8003658:	2d07      	cmp	r5, #7
 800365a:	d197      	bne.n	800358c <_scanf_float+0x60>
 800365c:	2508      	movs	r5, #8
 800365e:	e029      	b.n	80036b4 <_scanf_float+0x188>
 8003660:	2b74      	cmp	r3, #116	; 0x74
 8003662:	d06f      	beq.n	8003744 <_scanf_float+0x218>
 8003664:	2b79      	cmp	r3, #121	; 0x79
 8003666:	e7f6      	b.n	8003656 <_scanf_float+0x12a>
 8003668:	6821      	ldr	r1, [r4, #0]
 800366a:	05c8      	lsls	r0, r1, #23
 800366c:	d51a      	bpl.n	80036a4 <_scanf_float+0x178>
 800366e:	9b02      	ldr	r3, [sp, #8]
 8003670:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003674:	6021      	str	r1, [r4, #0]
 8003676:	f109 0901 	add.w	r9, r9, #1
 800367a:	b11b      	cbz	r3, 8003684 <_scanf_float+0x158>
 800367c:	3b01      	subs	r3, #1
 800367e:	3201      	adds	r2, #1
 8003680:	9302      	str	r3, [sp, #8]
 8003682:	60a2      	str	r2, [r4, #8]
 8003684:	68a3      	ldr	r3, [r4, #8]
 8003686:	3b01      	subs	r3, #1
 8003688:	60a3      	str	r3, [r4, #8]
 800368a:	6923      	ldr	r3, [r4, #16]
 800368c:	3301      	adds	r3, #1
 800368e:	6123      	str	r3, [r4, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3b01      	subs	r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	f340 8084 	ble.w	80037a4 <_scanf_float+0x278>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	3301      	adds	r3, #1
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	e766      	b.n	8003572 <_scanf_float+0x46>
 80036a4:	eb1a 0f05 	cmn.w	sl, r5
 80036a8:	f47f af70 	bne.w	800358c <_scanf_float+0x60>
 80036ac:	6822      	ldr	r2, [r4, #0]
 80036ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80036b2:	6022      	str	r2, [r4, #0]
 80036b4:	f806 3b01 	strb.w	r3, [r6], #1
 80036b8:	e7e4      	b.n	8003684 <_scanf_float+0x158>
 80036ba:	6822      	ldr	r2, [r4, #0]
 80036bc:	0610      	lsls	r0, r2, #24
 80036be:	f57f af65 	bpl.w	800358c <_scanf_float+0x60>
 80036c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036c6:	e7f4      	b.n	80036b2 <_scanf_float+0x186>
 80036c8:	f1ba 0f00 	cmp.w	sl, #0
 80036cc:	d10e      	bne.n	80036ec <_scanf_float+0x1c0>
 80036ce:	f1b9 0f00 	cmp.w	r9, #0
 80036d2:	d10e      	bne.n	80036f2 <_scanf_float+0x1c6>
 80036d4:	6822      	ldr	r2, [r4, #0]
 80036d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80036da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80036de:	d108      	bne.n	80036f2 <_scanf_float+0x1c6>
 80036e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80036e4:	6022      	str	r2, [r4, #0]
 80036e6:	f04f 0a01 	mov.w	sl, #1
 80036ea:	e7e3      	b.n	80036b4 <_scanf_float+0x188>
 80036ec:	f1ba 0f02 	cmp.w	sl, #2
 80036f0:	d055      	beq.n	800379e <_scanf_float+0x272>
 80036f2:	2d01      	cmp	r5, #1
 80036f4:	d002      	beq.n	80036fc <_scanf_float+0x1d0>
 80036f6:	2d04      	cmp	r5, #4
 80036f8:	f47f af48 	bne.w	800358c <_scanf_float+0x60>
 80036fc:	3501      	adds	r5, #1
 80036fe:	b2ed      	uxtb	r5, r5
 8003700:	e7d8      	b.n	80036b4 <_scanf_float+0x188>
 8003702:	f1ba 0f01 	cmp.w	sl, #1
 8003706:	f47f af41 	bne.w	800358c <_scanf_float+0x60>
 800370a:	f04f 0a02 	mov.w	sl, #2
 800370e:	e7d1      	b.n	80036b4 <_scanf_float+0x188>
 8003710:	b97d      	cbnz	r5, 8003732 <_scanf_float+0x206>
 8003712:	f1b9 0f00 	cmp.w	r9, #0
 8003716:	f47f af3c 	bne.w	8003592 <_scanf_float+0x66>
 800371a:	6822      	ldr	r2, [r4, #0]
 800371c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003720:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003724:	f47f af39 	bne.w	800359a <_scanf_float+0x6e>
 8003728:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800372c:	6022      	str	r2, [r4, #0]
 800372e:	2501      	movs	r5, #1
 8003730:	e7c0      	b.n	80036b4 <_scanf_float+0x188>
 8003732:	2d03      	cmp	r5, #3
 8003734:	d0e2      	beq.n	80036fc <_scanf_float+0x1d0>
 8003736:	2d05      	cmp	r5, #5
 8003738:	e7de      	b.n	80036f8 <_scanf_float+0x1cc>
 800373a:	2d02      	cmp	r5, #2
 800373c:	f47f af26 	bne.w	800358c <_scanf_float+0x60>
 8003740:	2503      	movs	r5, #3
 8003742:	e7b7      	b.n	80036b4 <_scanf_float+0x188>
 8003744:	2d06      	cmp	r5, #6
 8003746:	f47f af21 	bne.w	800358c <_scanf_float+0x60>
 800374a:	2507      	movs	r5, #7
 800374c:	e7b2      	b.n	80036b4 <_scanf_float+0x188>
 800374e:	6822      	ldr	r2, [r4, #0]
 8003750:	0591      	lsls	r1, r2, #22
 8003752:	f57f af1b 	bpl.w	800358c <_scanf_float+0x60>
 8003756:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800375a:	6022      	str	r2, [r4, #0]
 800375c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003760:	e7a8      	b.n	80036b4 <_scanf_float+0x188>
 8003762:	6822      	ldr	r2, [r4, #0]
 8003764:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003768:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800376c:	d006      	beq.n	800377c <_scanf_float+0x250>
 800376e:	0550      	lsls	r0, r2, #21
 8003770:	f57f af0c 	bpl.w	800358c <_scanf_float+0x60>
 8003774:	f1b9 0f00 	cmp.w	r9, #0
 8003778:	f43f af0f 	beq.w	800359a <_scanf_float+0x6e>
 800377c:	0591      	lsls	r1, r2, #22
 800377e:	bf58      	it	pl
 8003780:	9901      	ldrpl	r1, [sp, #4]
 8003782:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003786:	bf58      	it	pl
 8003788:	eba9 0101 	subpl.w	r1, r9, r1
 800378c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003790:	bf58      	it	pl
 8003792:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003796:	6022      	str	r2, [r4, #0]
 8003798:	f04f 0900 	mov.w	r9, #0
 800379c:	e78a      	b.n	80036b4 <_scanf_float+0x188>
 800379e:	f04f 0a03 	mov.w	sl, #3
 80037a2:	e787      	b.n	80036b4 <_scanf_float+0x188>
 80037a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80037a8:	4639      	mov	r1, r7
 80037aa:	4640      	mov	r0, r8
 80037ac:	4798      	blx	r3
 80037ae:	2800      	cmp	r0, #0
 80037b0:	f43f aedf 	beq.w	8003572 <_scanf_float+0x46>
 80037b4:	e6ea      	b.n	800358c <_scanf_float+0x60>
 80037b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80037ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80037be:	463a      	mov	r2, r7
 80037c0:	4640      	mov	r0, r8
 80037c2:	4798      	blx	r3
 80037c4:	6923      	ldr	r3, [r4, #16]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	6123      	str	r3, [r4, #16]
 80037ca:	e6ec      	b.n	80035a6 <_scanf_float+0x7a>
 80037cc:	1e6b      	subs	r3, r5, #1
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d825      	bhi.n	800381e <_scanf_float+0x2f2>
 80037d2:	2d02      	cmp	r5, #2
 80037d4:	d836      	bhi.n	8003844 <_scanf_float+0x318>
 80037d6:	455e      	cmp	r6, fp
 80037d8:	f67f aee8 	bls.w	80035ac <_scanf_float+0x80>
 80037dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80037e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80037e4:	463a      	mov	r2, r7
 80037e6:	4640      	mov	r0, r8
 80037e8:	4798      	blx	r3
 80037ea:	6923      	ldr	r3, [r4, #16]
 80037ec:	3b01      	subs	r3, #1
 80037ee:	6123      	str	r3, [r4, #16]
 80037f0:	e7f1      	b.n	80037d6 <_scanf_float+0x2aa>
 80037f2:	9802      	ldr	r0, [sp, #8]
 80037f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80037f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80037fc:	9002      	str	r0, [sp, #8]
 80037fe:	463a      	mov	r2, r7
 8003800:	4640      	mov	r0, r8
 8003802:	4798      	blx	r3
 8003804:	6923      	ldr	r3, [r4, #16]
 8003806:	3b01      	subs	r3, #1
 8003808:	6123      	str	r3, [r4, #16]
 800380a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800380e:	fa5f fa8a 	uxtb.w	sl, sl
 8003812:	f1ba 0f02 	cmp.w	sl, #2
 8003816:	d1ec      	bne.n	80037f2 <_scanf_float+0x2c6>
 8003818:	3d03      	subs	r5, #3
 800381a:	b2ed      	uxtb	r5, r5
 800381c:	1b76      	subs	r6, r6, r5
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	05da      	lsls	r2, r3, #23
 8003822:	d52f      	bpl.n	8003884 <_scanf_float+0x358>
 8003824:	055b      	lsls	r3, r3, #21
 8003826:	d510      	bpl.n	800384a <_scanf_float+0x31e>
 8003828:	455e      	cmp	r6, fp
 800382a:	f67f aebf 	bls.w	80035ac <_scanf_float+0x80>
 800382e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003832:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003836:	463a      	mov	r2, r7
 8003838:	4640      	mov	r0, r8
 800383a:	4798      	blx	r3
 800383c:	6923      	ldr	r3, [r4, #16]
 800383e:	3b01      	subs	r3, #1
 8003840:	6123      	str	r3, [r4, #16]
 8003842:	e7f1      	b.n	8003828 <_scanf_float+0x2fc>
 8003844:	46aa      	mov	sl, r5
 8003846:	9602      	str	r6, [sp, #8]
 8003848:	e7df      	b.n	800380a <_scanf_float+0x2de>
 800384a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800384e:	6923      	ldr	r3, [r4, #16]
 8003850:	2965      	cmp	r1, #101	; 0x65
 8003852:	f103 33ff 	add.w	r3, r3, #4294967295
 8003856:	f106 35ff 	add.w	r5, r6, #4294967295
 800385a:	6123      	str	r3, [r4, #16]
 800385c:	d00c      	beq.n	8003878 <_scanf_float+0x34c>
 800385e:	2945      	cmp	r1, #69	; 0x45
 8003860:	d00a      	beq.n	8003878 <_scanf_float+0x34c>
 8003862:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003866:	463a      	mov	r2, r7
 8003868:	4640      	mov	r0, r8
 800386a:	4798      	blx	r3
 800386c:	6923      	ldr	r3, [r4, #16]
 800386e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003872:	3b01      	subs	r3, #1
 8003874:	1eb5      	subs	r5, r6, #2
 8003876:	6123      	str	r3, [r4, #16]
 8003878:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800387c:	463a      	mov	r2, r7
 800387e:	4640      	mov	r0, r8
 8003880:	4798      	blx	r3
 8003882:	462e      	mov	r6, r5
 8003884:	6825      	ldr	r5, [r4, #0]
 8003886:	f015 0510 	ands.w	r5, r5, #16
 800388a:	d158      	bne.n	800393e <_scanf_float+0x412>
 800388c:	7035      	strb	r5, [r6, #0]
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003898:	d11c      	bne.n	80038d4 <_scanf_float+0x3a8>
 800389a:	9b01      	ldr	r3, [sp, #4]
 800389c:	454b      	cmp	r3, r9
 800389e:	eba3 0209 	sub.w	r2, r3, r9
 80038a2:	d124      	bne.n	80038ee <_scanf_float+0x3c2>
 80038a4:	2200      	movs	r2, #0
 80038a6:	4659      	mov	r1, fp
 80038a8:	4640      	mov	r0, r8
 80038aa:	f000 ff23 	bl	80046f4 <_strtod_r>
 80038ae:	9b03      	ldr	r3, [sp, #12]
 80038b0:	6821      	ldr	r1, [r4, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f011 0f02 	tst.w	r1, #2
 80038b8:	ec57 6b10 	vmov	r6, r7, d0
 80038bc:	f103 0204 	add.w	r2, r3, #4
 80038c0:	d020      	beq.n	8003904 <_scanf_float+0x3d8>
 80038c2:	9903      	ldr	r1, [sp, #12]
 80038c4:	600a      	str	r2, [r1, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	e9c3 6700 	strd	r6, r7, [r3]
 80038cc:	68e3      	ldr	r3, [r4, #12]
 80038ce:	3301      	adds	r3, #1
 80038d0:	60e3      	str	r3, [r4, #12]
 80038d2:	e66c      	b.n	80035ae <_scanf_float+0x82>
 80038d4:	9b04      	ldr	r3, [sp, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0e4      	beq.n	80038a4 <_scanf_float+0x378>
 80038da:	9905      	ldr	r1, [sp, #20]
 80038dc:	230a      	movs	r3, #10
 80038de:	462a      	mov	r2, r5
 80038e0:	3101      	adds	r1, #1
 80038e2:	4640      	mov	r0, r8
 80038e4:	f000 ff90 	bl	8004808 <_strtol_r>
 80038e8:	9b04      	ldr	r3, [sp, #16]
 80038ea:	9e05      	ldr	r6, [sp, #20]
 80038ec:	1ac2      	subs	r2, r0, r3
 80038ee:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80038f2:	429e      	cmp	r6, r3
 80038f4:	bf28      	it	cs
 80038f6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80038fa:	4912      	ldr	r1, [pc, #72]	; (8003944 <_scanf_float+0x418>)
 80038fc:	4630      	mov	r0, r6
 80038fe:	f000 f82b 	bl	8003958 <siprintf>
 8003902:	e7cf      	b.n	80038a4 <_scanf_float+0x378>
 8003904:	f011 0f04 	tst.w	r1, #4
 8003908:	9903      	ldr	r1, [sp, #12]
 800390a:	600a      	str	r2, [r1, #0]
 800390c:	d1db      	bne.n	80038c6 <_scanf_float+0x39a>
 800390e:	f8d3 8000 	ldr.w	r8, [r3]
 8003912:	ee10 2a10 	vmov	r2, s0
 8003916:	ee10 0a10 	vmov	r0, s0
 800391a:	463b      	mov	r3, r7
 800391c:	4639      	mov	r1, r7
 800391e:	f7fd f91d 	bl	8000b5c <__aeabi_dcmpun>
 8003922:	b128      	cbz	r0, 8003930 <_scanf_float+0x404>
 8003924:	4808      	ldr	r0, [pc, #32]	; (8003948 <_scanf_float+0x41c>)
 8003926:	f000 f811 	bl	800394c <nanf>
 800392a:	ed88 0a00 	vstr	s0, [r8]
 800392e:	e7cd      	b.n	80038cc <_scanf_float+0x3a0>
 8003930:	4630      	mov	r0, r6
 8003932:	4639      	mov	r1, r7
 8003934:	f7fd f970 	bl	8000c18 <__aeabi_d2f>
 8003938:	f8c8 0000 	str.w	r0, [r8]
 800393c:	e7c6      	b.n	80038cc <_scanf_float+0x3a0>
 800393e:	2500      	movs	r5, #0
 8003940:	e635      	b.n	80035ae <_scanf_float+0x82>
 8003942:	bf00      	nop
 8003944:	080084a2 	.word	0x080084a2
 8003948:	080087d3 	.word	0x080087d3

0800394c <nanf>:
 800394c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003954 <nanf+0x8>
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	7fc00000 	.word	0x7fc00000

08003958 <siprintf>:
 8003958:	b40e      	push	{r1, r2, r3}
 800395a:	b500      	push	{lr}
 800395c:	b09c      	sub	sp, #112	; 0x70
 800395e:	ab1d      	add	r3, sp, #116	; 0x74
 8003960:	9002      	str	r0, [sp, #8]
 8003962:	9006      	str	r0, [sp, #24]
 8003964:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003968:	4809      	ldr	r0, [pc, #36]	; (8003990 <siprintf+0x38>)
 800396a:	9107      	str	r1, [sp, #28]
 800396c:	9104      	str	r1, [sp, #16]
 800396e:	4909      	ldr	r1, [pc, #36]	; (8003994 <siprintf+0x3c>)
 8003970:	f853 2b04 	ldr.w	r2, [r3], #4
 8003974:	9105      	str	r1, [sp, #20]
 8003976:	6800      	ldr	r0, [r0, #0]
 8003978:	9301      	str	r3, [sp, #4]
 800397a:	a902      	add	r1, sp, #8
 800397c:	f002 ff6a 	bl	8006854 <_svfiprintf_r>
 8003980:	9b02      	ldr	r3, [sp, #8]
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	b01c      	add	sp, #112	; 0x70
 8003988:	f85d eb04 	ldr.w	lr, [sp], #4
 800398c:	b003      	add	sp, #12
 800398e:	4770      	bx	lr
 8003990:	2000000c 	.word	0x2000000c
 8003994:	ffff0208 	.word	0xffff0208

08003998 <siscanf>:
 8003998:	b40e      	push	{r1, r2, r3}
 800399a:	b510      	push	{r4, lr}
 800399c:	b09f      	sub	sp, #124	; 0x7c
 800399e:	ac21      	add	r4, sp, #132	; 0x84
 80039a0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80039a4:	f854 2b04 	ldr.w	r2, [r4], #4
 80039a8:	9201      	str	r2, [sp, #4]
 80039aa:	f8ad 101c 	strh.w	r1, [sp, #28]
 80039ae:	9004      	str	r0, [sp, #16]
 80039b0:	9008      	str	r0, [sp, #32]
 80039b2:	f7fc fc1f 	bl	80001f4 <strlen>
 80039b6:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <siscanf+0x50>)
 80039b8:	9005      	str	r0, [sp, #20]
 80039ba:	9009      	str	r0, [sp, #36]	; 0x24
 80039bc:	930d      	str	r3, [sp, #52]	; 0x34
 80039be:	480b      	ldr	r0, [pc, #44]	; (80039ec <siscanf+0x54>)
 80039c0:	9a01      	ldr	r2, [sp, #4]
 80039c2:	6800      	ldr	r0, [r0, #0]
 80039c4:	9403      	str	r4, [sp, #12]
 80039c6:	2300      	movs	r3, #0
 80039c8:	9311      	str	r3, [sp, #68]	; 0x44
 80039ca:	9316      	str	r3, [sp, #88]	; 0x58
 80039cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80039d4:	a904      	add	r1, sp, #16
 80039d6:	4623      	mov	r3, r4
 80039d8:	f003 f896 	bl	8006b08 <__ssvfiscanf_r>
 80039dc:	b01f      	add	sp, #124	; 0x7c
 80039de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039e2:	b003      	add	sp, #12
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	08003a13 	.word	0x08003a13
 80039ec:	2000000c 	.word	0x2000000c

080039f0 <__sread>:
 80039f0:	b510      	push	{r4, lr}
 80039f2:	460c      	mov	r4, r1
 80039f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039f8:	f003 fb4a 	bl	8007090 <_read_r>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	bfab      	itete	ge
 8003a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003a02:	89a3      	ldrhlt	r3, [r4, #12]
 8003a04:	181b      	addge	r3, r3, r0
 8003a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003a0a:	bfac      	ite	ge
 8003a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003a0e:	81a3      	strhlt	r3, [r4, #12]
 8003a10:	bd10      	pop	{r4, pc}

08003a12 <__seofread>:
 8003a12:	2000      	movs	r0, #0
 8003a14:	4770      	bx	lr

08003a16 <__swrite>:
 8003a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a1a:	461f      	mov	r7, r3
 8003a1c:	898b      	ldrh	r3, [r1, #12]
 8003a1e:	05db      	lsls	r3, r3, #23
 8003a20:	4605      	mov	r5, r0
 8003a22:	460c      	mov	r4, r1
 8003a24:	4616      	mov	r6, r2
 8003a26:	d505      	bpl.n	8003a34 <__swrite+0x1e>
 8003a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f002 f906 	bl	8005c40 <_lseek_r>
 8003a34:	89a3      	ldrh	r3, [r4, #12]
 8003a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a3e:	81a3      	strh	r3, [r4, #12]
 8003a40:	4632      	mov	r2, r6
 8003a42:	463b      	mov	r3, r7
 8003a44:	4628      	mov	r0, r5
 8003a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a4a:	f000 bee9 	b.w	8004820 <_write_r>

08003a4e <__sseek>:
 8003a4e:	b510      	push	{r4, lr}
 8003a50:	460c      	mov	r4, r1
 8003a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a56:	f002 f8f3 	bl	8005c40 <_lseek_r>
 8003a5a:	1c43      	adds	r3, r0, #1
 8003a5c:	89a3      	ldrh	r3, [r4, #12]
 8003a5e:	bf15      	itete	ne
 8003a60:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a6a:	81a3      	strheq	r3, [r4, #12]
 8003a6c:	bf18      	it	ne
 8003a6e:	81a3      	strhne	r3, [r4, #12]
 8003a70:	bd10      	pop	{r4, pc}

08003a72 <__sclose>:
 8003a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a76:	f000 bee5 	b.w	8004844 <_close_r>

08003a7a <strstr>:
 8003a7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7c:	780c      	ldrb	r4, [r1, #0]
 8003a7e:	b164      	cbz	r4, 8003a9a <strstr+0x20>
 8003a80:	4603      	mov	r3, r0
 8003a82:	781a      	ldrb	r2, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	1c5e      	adds	r6, r3, #1
 8003a88:	b90a      	cbnz	r2, 8003a8e <strstr+0x14>
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	e005      	b.n	8003a9a <strstr+0x20>
 8003a8e:	4294      	cmp	r4, r2
 8003a90:	d108      	bne.n	8003aa4 <strstr+0x2a>
 8003a92:	460d      	mov	r5, r1
 8003a94:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003a98:	b902      	cbnz	r2, 8003a9c <strstr+0x22>
 8003a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a9c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003aa0:	4297      	cmp	r7, r2
 8003aa2:	d0f7      	beq.n	8003a94 <strstr+0x1a>
 8003aa4:	4633      	mov	r3, r6
 8003aa6:	e7ec      	b.n	8003a82 <strstr+0x8>

08003aa8 <sulp>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	4604      	mov	r4, r0
 8003aac:	460d      	mov	r5, r1
 8003aae:	ec45 4b10 	vmov	d0, r4, r5
 8003ab2:	4616      	mov	r6, r2
 8003ab4:	f002 fc6a 	bl	800638c <__ulp>
 8003ab8:	ec51 0b10 	vmov	r0, r1, d0
 8003abc:	b17e      	cbz	r6, 8003ade <sulp+0x36>
 8003abe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003ac2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	dd09      	ble.n	8003ade <sulp+0x36>
 8003aca:	051b      	lsls	r3, r3, #20
 8003acc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003ad0:	2400      	movs	r4, #0
 8003ad2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003ad6:	4622      	mov	r2, r4
 8003ad8:	462b      	mov	r3, r5
 8003ada:	f7fc fda5 	bl	8000628 <__aeabi_dmul>
 8003ade:	bd70      	pop	{r4, r5, r6, pc}

08003ae0 <_strtod_l>:
 8003ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae4:	b0a3      	sub	sp, #140	; 0x8c
 8003ae6:	461f      	mov	r7, r3
 8003ae8:	2300      	movs	r3, #0
 8003aea:	931e      	str	r3, [sp, #120]	; 0x78
 8003aec:	4ba4      	ldr	r3, [pc, #656]	; (8003d80 <_strtod_l+0x2a0>)
 8003aee:	9219      	str	r2, [sp, #100]	; 0x64
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	9307      	str	r3, [sp, #28]
 8003af4:	4604      	mov	r4, r0
 8003af6:	4618      	mov	r0, r3
 8003af8:	4688      	mov	r8, r1
 8003afa:	f7fc fb7b 	bl	80001f4 <strlen>
 8003afe:	f04f 0a00 	mov.w	sl, #0
 8003b02:	4605      	mov	r5, r0
 8003b04:	f04f 0b00 	mov.w	fp, #0
 8003b08:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8003b0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b0e:	781a      	ldrb	r2, [r3, #0]
 8003b10:	2a2b      	cmp	r2, #43	; 0x2b
 8003b12:	d04c      	beq.n	8003bae <_strtod_l+0xce>
 8003b14:	d839      	bhi.n	8003b8a <_strtod_l+0xaa>
 8003b16:	2a0d      	cmp	r2, #13
 8003b18:	d832      	bhi.n	8003b80 <_strtod_l+0xa0>
 8003b1a:	2a08      	cmp	r2, #8
 8003b1c:	d832      	bhi.n	8003b84 <_strtod_l+0xa4>
 8003b1e:	2a00      	cmp	r2, #0
 8003b20:	d03c      	beq.n	8003b9c <_strtod_l+0xbc>
 8003b22:	2300      	movs	r3, #0
 8003b24:	930e      	str	r3, [sp, #56]	; 0x38
 8003b26:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8003b28:	7833      	ldrb	r3, [r6, #0]
 8003b2a:	2b30      	cmp	r3, #48	; 0x30
 8003b2c:	f040 80b4 	bne.w	8003c98 <_strtod_l+0x1b8>
 8003b30:	7873      	ldrb	r3, [r6, #1]
 8003b32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003b36:	2b58      	cmp	r3, #88	; 0x58
 8003b38:	d16c      	bne.n	8003c14 <_strtod_l+0x134>
 8003b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	ab1e      	add	r3, sp, #120	; 0x78
 8003b40:	9702      	str	r7, [sp, #8]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	4a8f      	ldr	r2, [pc, #572]	; (8003d84 <_strtod_l+0x2a4>)
 8003b46:	ab1f      	add	r3, sp, #124	; 0x7c
 8003b48:	a91d      	add	r1, sp, #116	; 0x74
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f001 fd6c 	bl	8005628 <__gethex>
 8003b50:	f010 0707 	ands.w	r7, r0, #7
 8003b54:	4605      	mov	r5, r0
 8003b56:	d005      	beq.n	8003b64 <_strtod_l+0x84>
 8003b58:	2f06      	cmp	r7, #6
 8003b5a:	d12a      	bne.n	8003bb2 <_strtod_l+0xd2>
 8003b5c:	3601      	adds	r6, #1
 8003b5e:	2300      	movs	r3, #0
 8003b60:	961d      	str	r6, [sp, #116]	; 0x74
 8003b62:	930e      	str	r3, [sp, #56]	; 0x38
 8003b64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f040 8596 	bne.w	8004698 <_strtod_l+0xbb8>
 8003b6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b6e:	b1db      	cbz	r3, 8003ba8 <_strtod_l+0xc8>
 8003b70:	4652      	mov	r2, sl
 8003b72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003b76:	ec43 2b10 	vmov	d0, r2, r3
 8003b7a:	b023      	add	sp, #140	; 0x8c
 8003b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b80:	2a20      	cmp	r2, #32
 8003b82:	d1ce      	bne.n	8003b22 <_strtod_l+0x42>
 8003b84:	3301      	adds	r3, #1
 8003b86:	931d      	str	r3, [sp, #116]	; 0x74
 8003b88:	e7c0      	b.n	8003b0c <_strtod_l+0x2c>
 8003b8a:	2a2d      	cmp	r2, #45	; 0x2d
 8003b8c:	d1c9      	bne.n	8003b22 <_strtod_l+0x42>
 8003b8e:	2201      	movs	r2, #1
 8003b90:	920e      	str	r2, [sp, #56]	; 0x38
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	921d      	str	r2, [sp, #116]	; 0x74
 8003b96:	785b      	ldrb	r3, [r3, #1]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1c4      	bne.n	8003b26 <_strtod_l+0x46>
 8003b9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b9e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f040 8576 	bne.w	8004694 <_strtod_l+0xbb4>
 8003ba8:	4652      	mov	r2, sl
 8003baa:	465b      	mov	r3, fp
 8003bac:	e7e3      	b.n	8003b76 <_strtod_l+0x96>
 8003bae:	2200      	movs	r2, #0
 8003bb0:	e7ee      	b.n	8003b90 <_strtod_l+0xb0>
 8003bb2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003bb4:	b13a      	cbz	r2, 8003bc6 <_strtod_l+0xe6>
 8003bb6:	2135      	movs	r1, #53	; 0x35
 8003bb8:	a820      	add	r0, sp, #128	; 0x80
 8003bba:	f002 fcf2 	bl	80065a2 <__copybits>
 8003bbe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f002 f8b7 	bl	8005d34 <_Bfree>
 8003bc6:	3f01      	subs	r7, #1
 8003bc8:	2f05      	cmp	r7, #5
 8003bca:	d807      	bhi.n	8003bdc <_strtod_l+0xfc>
 8003bcc:	e8df f007 	tbb	[pc, r7]
 8003bd0:	1d180b0e 	.word	0x1d180b0e
 8003bd4:	030e      	.short	0x030e
 8003bd6:	f04f 0b00 	mov.w	fp, #0
 8003bda:	46da      	mov	sl, fp
 8003bdc:	0728      	lsls	r0, r5, #28
 8003bde:	d5c1      	bpl.n	8003b64 <_strtod_l+0x84>
 8003be0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8003be4:	e7be      	b.n	8003b64 <_strtod_l+0x84>
 8003be6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8003bea:	e7f7      	b.n	8003bdc <_strtod_l+0xfc>
 8003bec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8003bf0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8003bf2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003bf6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003bfa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003bfe:	e7ed      	b.n	8003bdc <_strtod_l+0xfc>
 8003c00:	f8df b184 	ldr.w	fp, [pc, #388]	; 8003d88 <_strtod_l+0x2a8>
 8003c04:	f04f 0a00 	mov.w	sl, #0
 8003c08:	e7e8      	b.n	8003bdc <_strtod_l+0xfc>
 8003c0a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003c0e:	f04f 3aff 	mov.w	sl, #4294967295
 8003c12:	e7e3      	b.n	8003bdc <_strtod_l+0xfc>
 8003c14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	921d      	str	r2, [sp, #116]	; 0x74
 8003c1a:	785b      	ldrb	r3, [r3, #1]
 8003c1c:	2b30      	cmp	r3, #48	; 0x30
 8003c1e:	d0f9      	beq.n	8003c14 <_strtod_l+0x134>
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d09f      	beq.n	8003b64 <_strtod_l+0x84>
 8003c24:	2301      	movs	r3, #1
 8003c26:	f04f 0900 	mov.w	r9, #0
 8003c2a:	9304      	str	r3, [sp, #16]
 8003c2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8003c30:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8003c34:	464f      	mov	r7, r9
 8003c36:	220a      	movs	r2, #10
 8003c38:	981d      	ldr	r0, [sp, #116]	; 0x74
 8003c3a:	7806      	ldrb	r6, [r0, #0]
 8003c3c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8003c40:	b2d9      	uxtb	r1, r3
 8003c42:	2909      	cmp	r1, #9
 8003c44:	d92a      	bls.n	8003c9c <_strtod_l+0x1bc>
 8003c46:	9907      	ldr	r1, [sp, #28]
 8003c48:	462a      	mov	r2, r5
 8003c4a:	f003 fa87 	bl	800715c <strncmp>
 8003c4e:	b398      	cbz	r0, 8003cb8 <_strtod_l+0x1d8>
 8003c50:	2000      	movs	r0, #0
 8003c52:	4633      	mov	r3, r6
 8003c54:	463d      	mov	r5, r7
 8003c56:	9007      	str	r0, [sp, #28]
 8003c58:	4602      	mov	r2, r0
 8003c5a:	2b65      	cmp	r3, #101	; 0x65
 8003c5c:	d001      	beq.n	8003c62 <_strtod_l+0x182>
 8003c5e:	2b45      	cmp	r3, #69	; 0x45
 8003c60:	d118      	bne.n	8003c94 <_strtod_l+0x1b4>
 8003c62:	b91d      	cbnz	r5, 8003c6c <_strtod_l+0x18c>
 8003c64:	9b04      	ldr	r3, [sp, #16]
 8003c66:	4303      	orrs	r3, r0
 8003c68:	d098      	beq.n	8003b9c <_strtod_l+0xbc>
 8003c6a:	2500      	movs	r5, #0
 8003c6c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8003c70:	f108 0301 	add.w	r3, r8, #1
 8003c74:	931d      	str	r3, [sp, #116]	; 0x74
 8003c76:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003c7a:	2b2b      	cmp	r3, #43	; 0x2b
 8003c7c:	d075      	beq.n	8003d6a <_strtod_l+0x28a>
 8003c7e:	2b2d      	cmp	r3, #45	; 0x2d
 8003c80:	d07b      	beq.n	8003d7a <_strtod_l+0x29a>
 8003c82:	f04f 0c00 	mov.w	ip, #0
 8003c86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003c8a:	2909      	cmp	r1, #9
 8003c8c:	f240 8082 	bls.w	8003d94 <_strtod_l+0x2b4>
 8003c90:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8003c94:	2600      	movs	r6, #0
 8003c96:	e09d      	b.n	8003dd4 <_strtod_l+0x2f4>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e7c4      	b.n	8003c26 <_strtod_l+0x146>
 8003c9c:	2f08      	cmp	r7, #8
 8003c9e:	bfd8      	it	le
 8003ca0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8003ca2:	f100 0001 	add.w	r0, r0, #1
 8003ca6:	bfda      	itte	le
 8003ca8:	fb02 3301 	mlale	r3, r2, r1, r3
 8003cac:	9309      	strle	r3, [sp, #36]	; 0x24
 8003cae:	fb02 3909 	mlagt	r9, r2, r9, r3
 8003cb2:	3701      	adds	r7, #1
 8003cb4:	901d      	str	r0, [sp, #116]	; 0x74
 8003cb6:	e7bf      	b.n	8003c38 <_strtod_l+0x158>
 8003cb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003cba:	195a      	adds	r2, r3, r5
 8003cbc:	921d      	str	r2, [sp, #116]	; 0x74
 8003cbe:	5d5b      	ldrb	r3, [r3, r5]
 8003cc0:	2f00      	cmp	r7, #0
 8003cc2:	d037      	beq.n	8003d34 <_strtod_l+0x254>
 8003cc4:	9007      	str	r0, [sp, #28]
 8003cc6:	463d      	mov	r5, r7
 8003cc8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003ccc:	2a09      	cmp	r2, #9
 8003cce:	d912      	bls.n	8003cf6 <_strtod_l+0x216>
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	e7c2      	b.n	8003c5a <_strtod_l+0x17a>
 8003cd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	921d      	str	r2, [sp, #116]	; 0x74
 8003cda:	785b      	ldrb	r3, [r3, #1]
 8003cdc:	3001      	adds	r0, #1
 8003cde:	2b30      	cmp	r3, #48	; 0x30
 8003ce0:	d0f8      	beq.n	8003cd4 <_strtod_l+0x1f4>
 8003ce2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003ce6:	2a08      	cmp	r2, #8
 8003ce8:	f200 84db 	bhi.w	80046a2 <_strtod_l+0xbc2>
 8003cec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003cee:	9007      	str	r0, [sp, #28]
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	920a      	str	r2, [sp, #40]	; 0x28
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	3b30      	subs	r3, #48	; 0x30
 8003cf8:	f100 0201 	add.w	r2, r0, #1
 8003cfc:	d014      	beq.n	8003d28 <_strtod_l+0x248>
 8003cfe:	9907      	ldr	r1, [sp, #28]
 8003d00:	4411      	add	r1, r2
 8003d02:	9107      	str	r1, [sp, #28]
 8003d04:	462a      	mov	r2, r5
 8003d06:	eb00 0e05 	add.w	lr, r0, r5
 8003d0a:	210a      	movs	r1, #10
 8003d0c:	4572      	cmp	r2, lr
 8003d0e:	d113      	bne.n	8003d38 <_strtod_l+0x258>
 8003d10:	182a      	adds	r2, r5, r0
 8003d12:	2a08      	cmp	r2, #8
 8003d14:	f105 0501 	add.w	r5, r5, #1
 8003d18:	4405      	add	r5, r0
 8003d1a:	dc1c      	bgt.n	8003d56 <_strtod_l+0x276>
 8003d1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d1e:	220a      	movs	r2, #10
 8003d20:	fb02 3301 	mla	r3, r2, r1, r3
 8003d24:	9309      	str	r3, [sp, #36]	; 0x24
 8003d26:	2200      	movs	r2, #0
 8003d28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003d2a:	1c59      	adds	r1, r3, #1
 8003d2c:	911d      	str	r1, [sp, #116]	; 0x74
 8003d2e:	785b      	ldrb	r3, [r3, #1]
 8003d30:	4610      	mov	r0, r2
 8003d32:	e7c9      	b.n	8003cc8 <_strtod_l+0x1e8>
 8003d34:	4638      	mov	r0, r7
 8003d36:	e7d2      	b.n	8003cde <_strtod_l+0x1fe>
 8003d38:	2a08      	cmp	r2, #8
 8003d3a:	dc04      	bgt.n	8003d46 <_strtod_l+0x266>
 8003d3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003d3e:	434e      	muls	r6, r1
 8003d40:	9609      	str	r6, [sp, #36]	; 0x24
 8003d42:	3201      	adds	r2, #1
 8003d44:	e7e2      	b.n	8003d0c <_strtod_l+0x22c>
 8003d46:	f102 0c01 	add.w	ip, r2, #1
 8003d4a:	f1bc 0f10 	cmp.w	ip, #16
 8003d4e:	bfd8      	it	le
 8003d50:	fb01 f909 	mulle.w	r9, r1, r9
 8003d54:	e7f5      	b.n	8003d42 <_strtod_l+0x262>
 8003d56:	2d10      	cmp	r5, #16
 8003d58:	bfdc      	itt	le
 8003d5a:	220a      	movle	r2, #10
 8003d5c:	fb02 3909 	mlale	r9, r2, r9, r3
 8003d60:	e7e1      	b.n	8003d26 <_strtod_l+0x246>
 8003d62:	2300      	movs	r3, #0
 8003d64:	9307      	str	r3, [sp, #28]
 8003d66:	2201      	movs	r2, #1
 8003d68:	e77c      	b.n	8003c64 <_strtod_l+0x184>
 8003d6a:	f04f 0c00 	mov.w	ip, #0
 8003d6e:	f108 0302 	add.w	r3, r8, #2
 8003d72:	931d      	str	r3, [sp, #116]	; 0x74
 8003d74:	f898 3002 	ldrb.w	r3, [r8, #2]
 8003d78:	e785      	b.n	8003c86 <_strtod_l+0x1a6>
 8003d7a:	f04f 0c01 	mov.w	ip, #1
 8003d7e:	e7f6      	b.n	8003d6e <_strtod_l+0x28e>
 8003d80:	080085f8 	.word	0x080085f8
 8003d84:	080084a8 	.word	0x080084a8
 8003d88:	7ff00000 	.word	0x7ff00000
 8003d8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003d8e:	1c59      	adds	r1, r3, #1
 8003d90:	911d      	str	r1, [sp, #116]	; 0x74
 8003d92:	785b      	ldrb	r3, [r3, #1]
 8003d94:	2b30      	cmp	r3, #48	; 0x30
 8003d96:	d0f9      	beq.n	8003d8c <_strtod_l+0x2ac>
 8003d98:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8003d9c:	2908      	cmp	r1, #8
 8003d9e:	f63f af79 	bhi.w	8003c94 <_strtod_l+0x1b4>
 8003da2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8003da6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003da8:	9308      	str	r3, [sp, #32]
 8003daa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003dac:	1c59      	adds	r1, r3, #1
 8003dae:	911d      	str	r1, [sp, #116]	; 0x74
 8003db0:	785b      	ldrb	r3, [r3, #1]
 8003db2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8003db6:	2e09      	cmp	r6, #9
 8003db8:	d937      	bls.n	8003e2a <_strtod_l+0x34a>
 8003dba:	9e08      	ldr	r6, [sp, #32]
 8003dbc:	1b89      	subs	r1, r1, r6
 8003dbe:	2908      	cmp	r1, #8
 8003dc0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8003dc4:	dc02      	bgt.n	8003dcc <_strtod_l+0x2ec>
 8003dc6:	4576      	cmp	r6, lr
 8003dc8:	bfa8      	it	ge
 8003dca:	4676      	movge	r6, lr
 8003dcc:	f1bc 0f00 	cmp.w	ip, #0
 8003dd0:	d000      	beq.n	8003dd4 <_strtod_l+0x2f4>
 8003dd2:	4276      	negs	r6, r6
 8003dd4:	2d00      	cmp	r5, #0
 8003dd6:	d14f      	bne.n	8003e78 <_strtod_l+0x398>
 8003dd8:	9904      	ldr	r1, [sp, #16]
 8003dda:	4301      	orrs	r1, r0
 8003ddc:	f47f aec2 	bne.w	8003b64 <_strtod_l+0x84>
 8003de0:	2a00      	cmp	r2, #0
 8003de2:	f47f aedb 	bne.w	8003b9c <_strtod_l+0xbc>
 8003de6:	2b69      	cmp	r3, #105	; 0x69
 8003de8:	d027      	beq.n	8003e3a <_strtod_l+0x35a>
 8003dea:	dc24      	bgt.n	8003e36 <_strtod_l+0x356>
 8003dec:	2b49      	cmp	r3, #73	; 0x49
 8003dee:	d024      	beq.n	8003e3a <_strtod_l+0x35a>
 8003df0:	2b4e      	cmp	r3, #78	; 0x4e
 8003df2:	f47f aed3 	bne.w	8003b9c <_strtod_l+0xbc>
 8003df6:	499e      	ldr	r1, [pc, #632]	; (8004070 <_strtod_l+0x590>)
 8003df8:	a81d      	add	r0, sp, #116	; 0x74
 8003dfa:	f001 fe6d 	bl	8005ad8 <__match>
 8003dfe:	2800      	cmp	r0, #0
 8003e00:	f43f aecc 	beq.w	8003b9c <_strtod_l+0xbc>
 8003e04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b28      	cmp	r3, #40	; 0x28
 8003e0a:	d12d      	bne.n	8003e68 <_strtod_l+0x388>
 8003e0c:	4999      	ldr	r1, [pc, #612]	; (8004074 <_strtod_l+0x594>)
 8003e0e:	aa20      	add	r2, sp, #128	; 0x80
 8003e10:	a81d      	add	r0, sp, #116	; 0x74
 8003e12:	f001 fe75 	bl	8005b00 <__hexnan>
 8003e16:	2805      	cmp	r0, #5
 8003e18:	d126      	bne.n	8003e68 <_strtod_l+0x388>
 8003e1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e1c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8003e20:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003e24:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003e28:	e69c      	b.n	8003b64 <_strtod_l+0x84>
 8003e2a:	210a      	movs	r1, #10
 8003e2c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8003e30:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003e34:	e7b9      	b.n	8003daa <_strtod_l+0x2ca>
 8003e36:	2b6e      	cmp	r3, #110	; 0x6e
 8003e38:	e7db      	b.n	8003df2 <_strtod_l+0x312>
 8003e3a:	498f      	ldr	r1, [pc, #572]	; (8004078 <_strtod_l+0x598>)
 8003e3c:	a81d      	add	r0, sp, #116	; 0x74
 8003e3e:	f001 fe4b 	bl	8005ad8 <__match>
 8003e42:	2800      	cmp	r0, #0
 8003e44:	f43f aeaa 	beq.w	8003b9c <_strtod_l+0xbc>
 8003e48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003e4a:	498c      	ldr	r1, [pc, #560]	; (800407c <_strtod_l+0x59c>)
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	a81d      	add	r0, sp, #116	; 0x74
 8003e50:	931d      	str	r3, [sp, #116]	; 0x74
 8003e52:	f001 fe41 	bl	8005ad8 <__match>
 8003e56:	b910      	cbnz	r0, 8003e5e <_strtod_l+0x37e>
 8003e58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	931d      	str	r3, [sp, #116]	; 0x74
 8003e5e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800408c <_strtod_l+0x5ac>
 8003e62:	f04f 0a00 	mov.w	sl, #0
 8003e66:	e67d      	b.n	8003b64 <_strtod_l+0x84>
 8003e68:	4885      	ldr	r0, [pc, #532]	; (8004080 <_strtod_l+0x5a0>)
 8003e6a:	f003 f925 	bl	80070b8 <nan>
 8003e6e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003e72:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003e76:	e675      	b.n	8003b64 <_strtod_l+0x84>
 8003e78:	9b07      	ldr	r3, [sp, #28]
 8003e7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e7c:	1af3      	subs	r3, r6, r3
 8003e7e:	2f00      	cmp	r7, #0
 8003e80:	bf08      	it	eq
 8003e82:	462f      	moveq	r7, r5
 8003e84:	2d10      	cmp	r5, #16
 8003e86:	9308      	str	r3, [sp, #32]
 8003e88:	46a8      	mov	r8, r5
 8003e8a:	bfa8      	it	ge
 8003e8c:	f04f 0810 	movge.w	r8, #16
 8003e90:	f7fc fb50 	bl	8000534 <__aeabi_ui2d>
 8003e94:	2d09      	cmp	r5, #9
 8003e96:	4682      	mov	sl, r0
 8003e98:	468b      	mov	fp, r1
 8003e9a:	dd13      	ble.n	8003ec4 <_strtod_l+0x3e4>
 8003e9c:	4b79      	ldr	r3, [pc, #484]	; (8004084 <_strtod_l+0x5a4>)
 8003e9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003ea2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003ea6:	f7fc fbbf 	bl	8000628 <__aeabi_dmul>
 8003eaa:	4682      	mov	sl, r0
 8003eac:	4648      	mov	r0, r9
 8003eae:	468b      	mov	fp, r1
 8003eb0:	f7fc fb40 	bl	8000534 <__aeabi_ui2d>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4650      	mov	r0, sl
 8003eba:	4659      	mov	r1, fp
 8003ebc:	f7fc f9fe 	bl	80002bc <__adddf3>
 8003ec0:	4682      	mov	sl, r0
 8003ec2:	468b      	mov	fp, r1
 8003ec4:	2d0f      	cmp	r5, #15
 8003ec6:	dc38      	bgt.n	8003f3a <_strtod_l+0x45a>
 8003ec8:	9b08      	ldr	r3, [sp, #32]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f43f ae4a 	beq.w	8003b64 <_strtod_l+0x84>
 8003ed0:	dd24      	ble.n	8003f1c <_strtod_l+0x43c>
 8003ed2:	2b16      	cmp	r3, #22
 8003ed4:	dc0b      	bgt.n	8003eee <_strtod_l+0x40e>
 8003ed6:	4d6b      	ldr	r5, [pc, #428]	; (8004084 <_strtod_l+0x5a4>)
 8003ed8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8003edc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003ee0:	4652      	mov	r2, sl
 8003ee2:	465b      	mov	r3, fp
 8003ee4:	f7fc fba0 	bl	8000628 <__aeabi_dmul>
 8003ee8:	4682      	mov	sl, r0
 8003eea:	468b      	mov	fp, r1
 8003eec:	e63a      	b.n	8003b64 <_strtod_l+0x84>
 8003eee:	9a08      	ldr	r2, [sp, #32]
 8003ef0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	db20      	blt.n	8003f3a <_strtod_l+0x45a>
 8003ef8:	4c62      	ldr	r4, [pc, #392]	; (8004084 <_strtod_l+0x5a4>)
 8003efa:	f1c5 050f 	rsb	r5, r5, #15
 8003efe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003f02:	4652      	mov	r2, sl
 8003f04:	465b      	mov	r3, fp
 8003f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f0a:	f7fc fb8d 	bl	8000628 <__aeabi_dmul>
 8003f0e:	9b08      	ldr	r3, [sp, #32]
 8003f10:	1b5d      	subs	r5, r3, r5
 8003f12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003f16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003f1a:	e7e3      	b.n	8003ee4 <_strtod_l+0x404>
 8003f1c:	9b08      	ldr	r3, [sp, #32]
 8003f1e:	3316      	adds	r3, #22
 8003f20:	db0b      	blt.n	8003f3a <_strtod_l+0x45a>
 8003f22:	9b07      	ldr	r3, [sp, #28]
 8003f24:	4a57      	ldr	r2, [pc, #348]	; (8004084 <_strtod_l+0x5a4>)
 8003f26:	1b9e      	subs	r6, r3, r6
 8003f28:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8003f2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003f30:	4650      	mov	r0, sl
 8003f32:	4659      	mov	r1, fp
 8003f34:	f7fc fca2 	bl	800087c <__aeabi_ddiv>
 8003f38:	e7d6      	b.n	8003ee8 <_strtod_l+0x408>
 8003f3a:	9b08      	ldr	r3, [sp, #32]
 8003f3c:	eba5 0808 	sub.w	r8, r5, r8
 8003f40:	4498      	add	r8, r3
 8003f42:	f1b8 0f00 	cmp.w	r8, #0
 8003f46:	dd71      	ble.n	800402c <_strtod_l+0x54c>
 8003f48:	f018 030f 	ands.w	r3, r8, #15
 8003f4c:	d00a      	beq.n	8003f64 <_strtod_l+0x484>
 8003f4e:	494d      	ldr	r1, [pc, #308]	; (8004084 <_strtod_l+0x5a4>)
 8003f50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003f54:	4652      	mov	r2, sl
 8003f56:	465b      	mov	r3, fp
 8003f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f5c:	f7fc fb64 	bl	8000628 <__aeabi_dmul>
 8003f60:	4682      	mov	sl, r0
 8003f62:	468b      	mov	fp, r1
 8003f64:	f038 080f 	bics.w	r8, r8, #15
 8003f68:	d04d      	beq.n	8004006 <_strtod_l+0x526>
 8003f6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003f6e:	dd22      	ble.n	8003fb6 <_strtod_l+0x4d6>
 8003f70:	2500      	movs	r5, #0
 8003f72:	462e      	mov	r6, r5
 8003f74:	9509      	str	r5, [sp, #36]	; 0x24
 8003f76:	9507      	str	r5, [sp, #28]
 8003f78:	2322      	movs	r3, #34	; 0x22
 8003f7a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800408c <_strtod_l+0x5ac>
 8003f7e:	6023      	str	r3, [r4, #0]
 8003f80:	f04f 0a00 	mov.w	sl, #0
 8003f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f43f adec 	beq.w	8003b64 <_strtod_l+0x84>
 8003f8c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f001 fed0 	bl	8005d34 <_Bfree>
 8003f94:	9907      	ldr	r1, [sp, #28]
 8003f96:	4620      	mov	r0, r4
 8003f98:	f001 fecc 	bl	8005d34 <_Bfree>
 8003f9c:	4631      	mov	r1, r6
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	f001 fec8 	bl	8005d34 <_Bfree>
 8003fa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f001 fec4 	bl	8005d34 <_Bfree>
 8003fac:	4629      	mov	r1, r5
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f001 fec0 	bl	8005d34 <_Bfree>
 8003fb4:	e5d6      	b.n	8003b64 <_strtod_l+0x84>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003fbc:	4650      	mov	r0, sl
 8003fbe:	4659      	mov	r1, fp
 8003fc0:	4699      	mov	r9, r3
 8003fc2:	f1b8 0f01 	cmp.w	r8, #1
 8003fc6:	dc21      	bgt.n	800400c <_strtod_l+0x52c>
 8003fc8:	b10b      	cbz	r3, 8003fce <_strtod_l+0x4ee>
 8003fca:	4682      	mov	sl, r0
 8003fcc:	468b      	mov	fp, r1
 8003fce:	4b2e      	ldr	r3, [pc, #184]	; (8004088 <_strtod_l+0x5a8>)
 8003fd0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003fd4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003fd8:	4652      	mov	r2, sl
 8003fda:	465b      	mov	r3, fp
 8003fdc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003fe0:	f7fc fb22 	bl	8000628 <__aeabi_dmul>
 8003fe4:	4b29      	ldr	r3, [pc, #164]	; (800408c <_strtod_l+0x5ac>)
 8003fe6:	460a      	mov	r2, r1
 8003fe8:	400b      	ands	r3, r1
 8003fea:	4929      	ldr	r1, [pc, #164]	; (8004090 <_strtod_l+0x5b0>)
 8003fec:	428b      	cmp	r3, r1
 8003fee:	4682      	mov	sl, r0
 8003ff0:	d8be      	bhi.n	8003f70 <_strtod_l+0x490>
 8003ff2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003ff6:	428b      	cmp	r3, r1
 8003ff8:	bf86      	itte	hi
 8003ffa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004094 <_strtod_l+0x5b4>
 8003ffe:	f04f 3aff 	movhi.w	sl, #4294967295
 8004002:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004006:	2300      	movs	r3, #0
 8004008:	9304      	str	r3, [sp, #16]
 800400a:	e081      	b.n	8004110 <_strtod_l+0x630>
 800400c:	f018 0f01 	tst.w	r8, #1
 8004010:	d007      	beq.n	8004022 <_strtod_l+0x542>
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <_strtod_l+0x5a8>)
 8004014:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f7fc fb04 	bl	8000628 <__aeabi_dmul>
 8004020:	2301      	movs	r3, #1
 8004022:	f109 0901 	add.w	r9, r9, #1
 8004026:	ea4f 0868 	mov.w	r8, r8, asr #1
 800402a:	e7ca      	b.n	8003fc2 <_strtod_l+0x4e2>
 800402c:	d0eb      	beq.n	8004006 <_strtod_l+0x526>
 800402e:	f1c8 0800 	rsb	r8, r8, #0
 8004032:	f018 020f 	ands.w	r2, r8, #15
 8004036:	d00a      	beq.n	800404e <_strtod_l+0x56e>
 8004038:	4b12      	ldr	r3, [pc, #72]	; (8004084 <_strtod_l+0x5a4>)
 800403a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800403e:	4650      	mov	r0, sl
 8004040:	4659      	mov	r1, fp
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f7fc fc19 	bl	800087c <__aeabi_ddiv>
 800404a:	4682      	mov	sl, r0
 800404c:	468b      	mov	fp, r1
 800404e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004052:	d0d8      	beq.n	8004006 <_strtod_l+0x526>
 8004054:	f1b8 0f1f 	cmp.w	r8, #31
 8004058:	dd1e      	ble.n	8004098 <_strtod_l+0x5b8>
 800405a:	2500      	movs	r5, #0
 800405c:	462e      	mov	r6, r5
 800405e:	9509      	str	r5, [sp, #36]	; 0x24
 8004060:	9507      	str	r5, [sp, #28]
 8004062:	2322      	movs	r3, #34	; 0x22
 8004064:	f04f 0a00 	mov.w	sl, #0
 8004068:	f04f 0b00 	mov.w	fp, #0
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	e789      	b.n	8003f84 <_strtod_l+0x4a4>
 8004070:	0800847d 	.word	0x0800847d
 8004074:	080084bc 	.word	0x080084bc
 8004078:	08008475 	.word	0x08008475
 800407c:	080084fb 	.word	0x080084fb
 8004080:	080087d3 	.word	0x080087d3
 8004084:	08008698 	.word	0x08008698
 8004088:	08008670 	.word	0x08008670
 800408c:	7ff00000 	.word	0x7ff00000
 8004090:	7ca00000 	.word	0x7ca00000
 8004094:	7fefffff 	.word	0x7fefffff
 8004098:	f018 0310 	ands.w	r3, r8, #16
 800409c:	bf18      	it	ne
 800409e:	236a      	movne	r3, #106	; 0x6a
 80040a0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8004458 <_strtod_l+0x978>
 80040a4:	9304      	str	r3, [sp, #16]
 80040a6:	4650      	mov	r0, sl
 80040a8:	4659      	mov	r1, fp
 80040aa:	2300      	movs	r3, #0
 80040ac:	f018 0f01 	tst.w	r8, #1
 80040b0:	d004      	beq.n	80040bc <_strtod_l+0x5dc>
 80040b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80040b6:	f7fc fab7 	bl	8000628 <__aeabi_dmul>
 80040ba:	2301      	movs	r3, #1
 80040bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80040c0:	f109 0908 	add.w	r9, r9, #8
 80040c4:	d1f2      	bne.n	80040ac <_strtod_l+0x5cc>
 80040c6:	b10b      	cbz	r3, 80040cc <_strtod_l+0x5ec>
 80040c8:	4682      	mov	sl, r0
 80040ca:	468b      	mov	fp, r1
 80040cc:	9b04      	ldr	r3, [sp, #16]
 80040ce:	b1bb      	cbz	r3, 8004100 <_strtod_l+0x620>
 80040d0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80040d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80040d8:	2b00      	cmp	r3, #0
 80040da:	4659      	mov	r1, fp
 80040dc:	dd10      	ble.n	8004100 <_strtod_l+0x620>
 80040de:	2b1f      	cmp	r3, #31
 80040e0:	f340 8128 	ble.w	8004334 <_strtod_l+0x854>
 80040e4:	2b34      	cmp	r3, #52	; 0x34
 80040e6:	bfde      	ittt	le
 80040e8:	3b20      	suble	r3, #32
 80040ea:	f04f 32ff 	movle.w	r2, #4294967295
 80040ee:	fa02 f303 	lslle.w	r3, r2, r3
 80040f2:	f04f 0a00 	mov.w	sl, #0
 80040f6:	bfcc      	ite	gt
 80040f8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80040fc:	ea03 0b01 	andle.w	fp, r3, r1
 8004100:	2200      	movs	r2, #0
 8004102:	2300      	movs	r3, #0
 8004104:	4650      	mov	r0, sl
 8004106:	4659      	mov	r1, fp
 8004108:	f7fc fcf6 	bl	8000af8 <__aeabi_dcmpeq>
 800410c:	2800      	cmp	r0, #0
 800410e:	d1a4      	bne.n	800405a <_strtod_l+0x57a>
 8004110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004116:	462b      	mov	r3, r5
 8004118:	463a      	mov	r2, r7
 800411a:	4620      	mov	r0, r4
 800411c:	f001 fe76 	bl	8005e0c <__s2b>
 8004120:	9009      	str	r0, [sp, #36]	; 0x24
 8004122:	2800      	cmp	r0, #0
 8004124:	f43f af24 	beq.w	8003f70 <_strtod_l+0x490>
 8004128:	9b07      	ldr	r3, [sp, #28]
 800412a:	1b9e      	subs	r6, r3, r6
 800412c:	9b08      	ldr	r3, [sp, #32]
 800412e:	2b00      	cmp	r3, #0
 8004130:	bfb4      	ite	lt
 8004132:	4633      	movlt	r3, r6
 8004134:	2300      	movge	r3, #0
 8004136:	9310      	str	r3, [sp, #64]	; 0x40
 8004138:	9b08      	ldr	r3, [sp, #32]
 800413a:	2500      	movs	r5, #0
 800413c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004140:	9318      	str	r3, [sp, #96]	; 0x60
 8004142:	462e      	mov	r6, r5
 8004144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004146:	4620      	mov	r0, r4
 8004148:	6859      	ldr	r1, [r3, #4]
 800414a:	f001 fdb3 	bl	8005cb4 <_Balloc>
 800414e:	9007      	str	r0, [sp, #28]
 8004150:	2800      	cmp	r0, #0
 8004152:	f43f af11 	beq.w	8003f78 <_strtod_l+0x498>
 8004156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	3202      	adds	r2, #2
 800415c:	f103 010c 	add.w	r1, r3, #12
 8004160:	0092      	lsls	r2, r2, #2
 8004162:	300c      	adds	r0, #12
 8004164:	f001 fd98 	bl	8005c98 <memcpy>
 8004168:	ec4b ab10 	vmov	d0, sl, fp
 800416c:	aa20      	add	r2, sp, #128	; 0x80
 800416e:	a91f      	add	r1, sp, #124	; 0x7c
 8004170:	4620      	mov	r0, r4
 8004172:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004176:	f002 f985 	bl	8006484 <__d2b>
 800417a:	901e      	str	r0, [sp, #120]	; 0x78
 800417c:	2800      	cmp	r0, #0
 800417e:	f43f aefb 	beq.w	8003f78 <_strtod_l+0x498>
 8004182:	2101      	movs	r1, #1
 8004184:	4620      	mov	r0, r4
 8004186:	f001 fedb 	bl	8005f40 <__i2b>
 800418a:	4606      	mov	r6, r0
 800418c:	2800      	cmp	r0, #0
 800418e:	f43f aef3 	beq.w	8003f78 <_strtod_l+0x498>
 8004192:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004194:	9904      	ldr	r1, [sp, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	bfab      	itete	ge
 800419a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800419c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800419e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80041a0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80041a4:	bfac      	ite	ge
 80041a6:	eb03 0902 	addge.w	r9, r3, r2
 80041aa:	1ad7      	sublt	r7, r2, r3
 80041ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80041ae:	eba3 0801 	sub.w	r8, r3, r1
 80041b2:	4490      	add	r8, r2
 80041b4:	4ba3      	ldr	r3, [pc, #652]	; (8004444 <_strtod_l+0x964>)
 80041b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80041ba:	4598      	cmp	r8, r3
 80041bc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80041c0:	f280 80cc 	bge.w	800435c <_strtod_l+0x87c>
 80041c4:	eba3 0308 	sub.w	r3, r3, r8
 80041c8:	2b1f      	cmp	r3, #31
 80041ca:	eba2 0203 	sub.w	r2, r2, r3
 80041ce:	f04f 0101 	mov.w	r1, #1
 80041d2:	f300 80b6 	bgt.w	8004342 <_strtod_l+0x862>
 80041d6:	fa01 f303 	lsl.w	r3, r1, r3
 80041da:	9311      	str	r3, [sp, #68]	; 0x44
 80041dc:	2300      	movs	r3, #0
 80041de:	930c      	str	r3, [sp, #48]	; 0x30
 80041e0:	eb09 0802 	add.w	r8, r9, r2
 80041e4:	9b04      	ldr	r3, [sp, #16]
 80041e6:	45c1      	cmp	r9, r8
 80041e8:	4417      	add	r7, r2
 80041ea:	441f      	add	r7, r3
 80041ec:	464b      	mov	r3, r9
 80041ee:	bfa8      	it	ge
 80041f0:	4643      	movge	r3, r8
 80041f2:	42bb      	cmp	r3, r7
 80041f4:	bfa8      	it	ge
 80041f6:	463b      	movge	r3, r7
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bfc2      	ittt	gt
 80041fc:	eba8 0803 	subgt.w	r8, r8, r3
 8004200:	1aff      	subgt	r7, r7, r3
 8004202:	eba9 0903 	subgt.w	r9, r9, r3
 8004206:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004208:	2b00      	cmp	r3, #0
 800420a:	dd17      	ble.n	800423c <_strtod_l+0x75c>
 800420c:	4631      	mov	r1, r6
 800420e:	461a      	mov	r2, r3
 8004210:	4620      	mov	r0, r4
 8004212:	f001 ff51 	bl	80060b8 <__pow5mult>
 8004216:	4606      	mov	r6, r0
 8004218:	2800      	cmp	r0, #0
 800421a:	f43f aead 	beq.w	8003f78 <_strtod_l+0x498>
 800421e:	4601      	mov	r1, r0
 8004220:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004222:	4620      	mov	r0, r4
 8004224:	f001 fea2 	bl	8005f6c <__multiply>
 8004228:	900f      	str	r0, [sp, #60]	; 0x3c
 800422a:	2800      	cmp	r0, #0
 800422c:	f43f aea4 	beq.w	8003f78 <_strtod_l+0x498>
 8004230:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004232:	4620      	mov	r0, r4
 8004234:	f001 fd7e 	bl	8005d34 <_Bfree>
 8004238:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800423a:	931e      	str	r3, [sp, #120]	; 0x78
 800423c:	f1b8 0f00 	cmp.w	r8, #0
 8004240:	f300 8091 	bgt.w	8004366 <_strtod_l+0x886>
 8004244:	9b08      	ldr	r3, [sp, #32]
 8004246:	2b00      	cmp	r3, #0
 8004248:	dd08      	ble.n	800425c <_strtod_l+0x77c>
 800424a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800424c:	9907      	ldr	r1, [sp, #28]
 800424e:	4620      	mov	r0, r4
 8004250:	f001 ff32 	bl	80060b8 <__pow5mult>
 8004254:	9007      	str	r0, [sp, #28]
 8004256:	2800      	cmp	r0, #0
 8004258:	f43f ae8e 	beq.w	8003f78 <_strtod_l+0x498>
 800425c:	2f00      	cmp	r7, #0
 800425e:	dd08      	ble.n	8004272 <_strtod_l+0x792>
 8004260:	9907      	ldr	r1, [sp, #28]
 8004262:	463a      	mov	r2, r7
 8004264:	4620      	mov	r0, r4
 8004266:	f001 ff81 	bl	800616c <__lshift>
 800426a:	9007      	str	r0, [sp, #28]
 800426c:	2800      	cmp	r0, #0
 800426e:	f43f ae83 	beq.w	8003f78 <_strtod_l+0x498>
 8004272:	f1b9 0f00 	cmp.w	r9, #0
 8004276:	dd08      	ble.n	800428a <_strtod_l+0x7aa>
 8004278:	4631      	mov	r1, r6
 800427a:	464a      	mov	r2, r9
 800427c:	4620      	mov	r0, r4
 800427e:	f001 ff75 	bl	800616c <__lshift>
 8004282:	4606      	mov	r6, r0
 8004284:	2800      	cmp	r0, #0
 8004286:	f43f ae77 	beq.w	8003f78 <_strtod_l+0x498>
 800428a:	9a07      	ldr	r2, [sp, #28]
 800428c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800428e:	4620      	mov	r0, r4
 8004290:	f001 fff4 	bl	800627c <__mdiff>
 8004294:	4605      	mov	r5, r0
 8004296:	2800      	cmp	r0, #0
 8004298:	f43f ae6e 	beq.w	8003f78 <_strtod_l+0x498>
 800429c:	68c3      	ldr	r3, [r0, #12]
 800429e:	930f      	str	r3, [sp, #60]	; 0x3c
 80042a0:	2300      	movs	r3, #0
 80042a2:	60c3      	str	r3, [r0, #12]
 80042a4:	4631      	mov	r1, r6
 80042a6:	f001 ffcd 	bl	8006244 <__mcmp>
 80042aa:	2800      	cmp	r0, #0
 80042ac:	da65      	bge.n	800437a <_strtod_l+0x89a>
 80042ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042b0:	ea53 030a 	orrs.w	r3, r3, sl
 80042b4:	f040 8087 	bne.w	80043c6 <_strtod_l+0x8e6>
 80042b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f040 8082 	bne.w	80043c6 <_strtod_l+0x8e6>
 80042c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80042c6:	0d1b      	lsrs	r3, r3, #20
 80042c8:	051b      	lsls	r3, r3, #20
 80042ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80042ce:	d97a      	bls.n	80043c6 <_strtod_l+0x8e6>
 80042d0:	696b      	ldr	r3, [r5, #20]
 80042d2:	b913      	cbnz	r3, 80042da <_strtod_l+0x7fa>
 80042d4:	692b      	ldr	r3, [r5, #16]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	dd75      	ble.n	80043c6 <_strtod_l+0x8e6>
 80042da:	4629      	mov	r1, r5
 80042dc:	2201      	movs	r2, #1
 80042de:	4620      	mov	r0, r4
 80042e0:	f001 ff44 	bl	800616c <__lshift>
 80042e4:	4631      	mov	r1, r6
 80042e6:	4605      	mov	r5, r0
 80042e8:	f001 ffac 	bl	8006244 <__mcmp>
 80042ec:	2800      	cmp	r0, #0
 80042ee:	dd6a      	ble.n	80043c6 <_strtod_l+0x8e6>
 80042f0:	9904      	ldr	r1, [sp, #16]
 80042f2:	4a55      	ldr	r2, [pc, #340]	; (8004448 <_strtod_l+0x968>)
 80042f4:	465b      	mov	r3, fp
 80042f6:	2900      	cmp	r1, #0
 80042f8:	f000 8085 	beq.w	8004406 <_strtod_l+0x926>
 80042fc:	ea02 010b 	and.w	r1, r2, fp
 8004300:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004304:	dc7f      	bgt.n	8004406 <_strtod_l+0x926>
 8004306:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800430a:	f77f aeaa 	ble.w	8004062 <_strtod_l+0x582>
 800430e:	4a4f      	ldr	r2, [pc, #316]	; (800444c <_strtod_l+0x96c>)
 8004310:	2300      	movs	r3, #0
 8004312:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8004316:	4650      	mov	r0, sl
 8004318:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800431c:	4659      	mov	r1, fp
 800431e:	f7fc f983 	bl	8000628 <__aeabi_dmul>
 8004322:	460b      	mov	r3, r1
 8004324:	4303      	orrs	r3, r0
 8004326:	bf08      	it	eq
 8004328:	2322      	moveq	r3, #34	; 0x22
 800432a:	4682      	mov	sl, r0
 800432c:	468b      	mov	fp, r1
 800432e:	bf08      	it	eq
 8004330:	6023      	streq	r3, [r4, #0]
 8004332:	e62b      	b.n	8003f8c <_strtod_l+0x4ac>
 8004334:	f04f 32ff 	mov.w	r2, #4294967295
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	ea03 0a0a 	and.w	sl, r3, sl
 8004340:	e6de      	b.n	8004100 <_strtod_l+0x620>
 8004342:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004346:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800434a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800434e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004352:	fa01 f308 	lsl.w	r3, r1, r8
 8004356:	930c      	str	r3, [sp, #48]	; 0x30
 8004358:	9111      	str	r1, [sp, #68]	; 0x44
 800435a:	e741      	b.n	80041e0 <_strtod_l+0x700>
 800435c:	2300      	movs	r3, #0
 800435e:	930c      	str	r3, [sp, #48]	; 0x30
 8004360:	2301      	movs	r3, #1
 8004362:	9311      	str	r3, [sp, #68]	; 0x44
 8004364:	e73c      	b.n	80041e0 <_strtod_l+0x700>
 8004366:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004368:	4642      	mov	r2, r8
 800436a:	4620      	mov	r0, r4
 800436c:	f001 fefe 	bl	800616c <__lshift>
 8004370:	901e      	str	r0, [sp, #120]	; 0x78
 8004372:	2800      	cmp	r0, #0
 8004374:	f47f af66 	bne.w	8004244 <_strtod_l+0x764>
 8004378:	e5fe      	b.n	8003f78 <_strtod_l+0x498>
 800437a:	465f      	mov	r7, fp
 800437c:	d16e      	bne.n	800445c <_strtod_l+0x97c>
 800437e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004380:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004384:	b342      	cbz	r2, 80043d8 <_strtod_l+0x8f8>
 8004386:	4a32      	ldr	r2, [pc, #200]	; (8004450 <_strtod_l+0x970>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d128      	bne.n	80043de <_strtod_l+0x8fe>
 800438c:	9b04      	ldr	r3, [sp, #16]
 800438e:	4650      	mov	r0, sl
 8004390:	b1eb      	cbz	r3, 80043ce <_strtod_l+0x8ee>
 8004392:	4a2d      	ldr	r2, [pc, #180]	; (8004448 <_strtod_l+0x968>)
 8004394:	403a      	ands	r2, r7
 8004396:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800439a:	f04f 31ff 	mov.w	r1, #4294967295
 800439e:	d819      	bhi.n	80043d4 <_strtod_l+0x8f4>
 80043a0:	0d12      	lsrs	r2, r2, #20
 80043a2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	4298      	cmp	r0, r3
 80043ac:	d117      	bne.n	80043de <_strtod_l+0x8fe>
 80043ae:	4b29      	ldr	r3, [pc, #164]	; (8004454 <_strtod_l+0x974>)
 80043b0:	429f      	cmp	r7, r3
 80043b2:	d102      	bne.n	80043ba <_strtod_l+0x8da>
 80043b4:	3001      	adds	r0, #1
 80043b6:	f43f addf 	beq.w	8003f78 <_strtod_l+0x498>
 80043ba:	4b23      	ldr	r3, [pc, #140]	; (8004448 <_strtod_l+0x968>)
 80043bc:	403b      	ands	r3, r7
 80043be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80043c2:	f04f 0a00 	mov.w	sl, #0
 80043c6:	9b04      	ldr	r3, [sp, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1a0      	bne.n	800430e <_strtod_l+0x82e>
 80043cc:	e5de      	b.n	8003f8c <_strtod_l+0x4ac>
 80043ce:	f04f 33ff 	mov.w	r3, #4294967295
 80043d2:	e7ea      	b.n	80043aa <_strtod_l+0x8ca>
 80043d4:	460b      	mov	r3, r1
 80043d6:	e7e8      	b.n	80043aa <_strtod_l+0x8ca>
 80043d8:	ea53 030a 	orrs.w	r3, r3, sl
 80043dc:	d088      	beq.n	80042f0 <_strtod_l+0x810>
 80043de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043e0:	b1db      	cbz	r3, 800441a <_strtod_l+0x93a>
 80043e2:	423b      	tst	r3, r7
 80043e4:	d0ef      	beq.n	80043c6 <_strtod_l+0x8e6>
 80043e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043e8:	9a04      	ldr	r2, [sp, #16]
 80043ea:	4650      	mov	r0, sl
 80043ec:	4659      	mov	r1, fp
 80043ee:	b1c3      	cbz	r3, 8004422 <_strtod_l+0x942>
 80043f0:	f7ff fb5a 	bl	8003aa8 <sulp>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80043fc:	f7fb ff5e 	bl	80002bc <__adddf3>
 8004400:	4682      	mov	sl, r0
 8004402:	468b      	mov	fp, r1
 8004404:	e7df      	b.n	80043c6 <_strtod_l+0x8e6>
 8004406:	4013      	ands	r3, r2
 8004408:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800440c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004410:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004414:	f04f 3aff 	mov.w	sl, #4294967295
 8004418:	e7d5      	b.n	80043c6 <_strtod_l+0x8e6>
 800441a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800441c:	ea13 0f0a 	tst.w	r3, sl
 8004420:	e7e0      	b.n	80043e4 <_strtod_l+0x904>
 8004422:	f7ff fb41 	bl	8003aa8 <sulp>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800442e:	f7fb ff43 	bl	80002b8 <__aeabi_dsub>
 8004432:	2200      	movs	r2, #0
 8004434:	2300      	movs	r3, #0
 8004436:	4682      	mov	sl, r0
 8004438:	468b      	mov	fp, r1
 800443a:	f7fc fb5d 	bl	8000af8 <__aeabi_dcmpeq>
 800443e:	2800      	cmp	r0, #0
 8004440:	d0c1      	beq.n	80043c6 <_strtod_l+0x8e6>
 8004442:	e60e      	b.n	8004062 <_strtod_l+0x582>
 8004444:	fffffc02 	.word	0xfffffc02
 8004448:	7ff00000 	.word	0x7ff00000
 800444c:	39500000 	.word	0x39500000
 8004450:	000fffff 	.word	0x000fffff
 8004454:	7fefffff 	.word	0x7fefffff
 8004458:	080084d0 	.word	0x080084d0
 800445c:	4631      	mov	r1, r6
 800445e:	4628      	mov	r0, r5
 8004460:	f002 f86c 	bl	800653c <__ratio>
 8004464:	ec59 8b10 	vmov	r8, r9, d0
 8004468:	ee10 0a10 	vmov	r0, s0
 800446c:	2200      	movs	r2, #0
 800446e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004472:	4649      	mov	r1, r9
 8004474:	f7fc fb54 	bl	8000b20 <__aeabi_dcmple>
 8004478:	2800      	cmp	r0, #0
 800447a:	d07c      	beq.n	8004576 <_strtod_l+0xa96>
 800447c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800447e:	2b00      	cmp	r3, #0
 8004480:	d04c      	beq.n	800451c <_strtod_l+0xa3c>
 8004482:	4b95      	ldr	r3, [pc, #596]	; (80046d8 <_strtod_l+0xbf8>)
 8004484:	2200      	movs	r2, #0
 8004486:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800448a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80046d8 <_strtod_l+0xbf8>
 800448e:	f04f 0800 	mov.w	r8, #0
 8004492:	4b92      	ldr	r3, [pc, #584]	; (80046dc <_strtod_l+0xbfc>)
 8004494:	403b      	ands	r3, r7
 8004496:	9311      	str	r3, [sp, #68]	; 0x44
 8004498:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800449a:	4b91      	ldr	r3, [pc, #580]	; (80046e0 <_strtod_l+0xc00>)
 800449c:	429a      	cmp	r2, r3
 800449e:	f040 80b2 	bne.w	8004606 <_strtod_l+0xb26>
 80044a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80044a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044aa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80044ae:	ec4b ab10 	vmov	d0, sl, fp
 80044b2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80044b6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80044ba:	f001 ff67 	bl	800638c <__ulp>
 80044be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044c2:	ec53 2b10 	vmov	r2, r3, d0
 80044c6:	f7fc f8af 	bl	8000628 <__aeabi_dmul>
 80044ca:	4652      	mov	r2, sl
 80044cc:	465b      	mov	r3, fp
 80044ce:	f7fb fef5 	bl	80002bc <__adddf3>
 80044d2:	460b      	mov	r3, r1
 80044d4:	4981      	ldr	r1, [pc, #516]	; (80046dc <_strtod_l+0xbfc>)
 80044d6:	4a83      	ldr	r2, [pc, #524]	; (80046e4 <_strtod_l+0xc04>)
 80044d8:	4019      	ands	r1, r3
 80044da:	4291      	cmp	r1, r2
 80044dc:	4682      	mov	sl, r0
 80044de:	d95e      	bls.n	800459e <_strtod_l+0xabe>
 80044e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044e2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d103      	bne.n	80044f2 <_strtod_l+0xa12>
 80044ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ec:	3301      	adds	r3, #1
 80044ee:	f43f ad43 	beq.w	8003f78 <_strtod_l+0x498>
 80044f2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80046f0 <_strtod_l+0xc10>
 80044f6:	f04f 3aff 	mov.w	sl, #4294967295
 80044fa:	991e      	ldr	r1, [sp, #120]	; 0x78
 80044fc:	4620      	mov	r0, r4
 80044fe:	f001 fc19 	bl	8005d34 <_Bfree>
 8004502:	9907      	ldr	r1, [sp, #28]
 8004504:	4620      	mov	r0, r4
 8004506:	f001 fc15 	bl	8005d34 <_Bfree>
 800450a:	4631      	mov	r1, r6
 800450c:	4620      	mov	r0, r4
 800450e:	f001 fc11 	bl	8005d34 <_Bfree>
 8004512:	4629      	mov	r1, r5
 8004514:	4620      	mov	r0, r4
 8004516:	f001 fc0d 	bl	8005d34 <_Bfree>
 800451a:	e613      	b.n	8004144 <_strtod_l+0x664>
 800451c:	f1ba 0f00 	cmp.w	sl, #0
 8004520:	d11b      	bne.n	800455a <_strtod_l+0xa7a>
 8004522:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004526:	b9f3      	cbnz	r3, 8004566 <_strtod_l+0xa86>
 8004528:	4b6b      	ldr	r3, [pc, #428]	; (80046d8 <_strtod_l+0xbf8>)
 800452a:	2200      	movs	r2, #0
 800452c:	4640      	mov	r0, r8
 800452e:	4649      	mov	r1, r9
 8004530:	f7fc faec 	bl	8000b0c <__aeabi_dcmplt>
 8004534:	b9d0      	cbnz	r0, 800456c <_strtod_l+0xa8c>
 8004536:	4640      	mov	r0, r8
 8004538:	4649      	mov	r1, r9
 800453a:	4b6b      	ldr	r3, [pc, #428]	; (80046e8 <_strtod_l+0xc08>)
 800453c:	2200      	movs	r2, #0
 800453e:	f7fc f873 	bl	8000628 <__aeabi_dmul>
 8004542:	4680      	mov	r8, r0
 8004544:	4689      	mov	r9, r1
 8004546:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800454a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800454e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004550:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8004554:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004558:	e79b      	b.n	8004492 <_strtod_l+0x9b2>
 800455a:	f1ba 0f01 	cmp.w	sl, #1
 800455e:	d102      	bne.n	8004566 <_strtod_l+0xa86>
 8004560:	2f00      	cmp	r7, #0
 8004562:	f43f ad7e 	beq.w	8004062 <_strtod_l+0x582>
 8004566:	4b61      	ldr	r3, [pc, #388]	; (80046ec <_strtod_l+0xc0c>)
 8004568:	2200      	movs	r2, #0
 800456a:	e78c      	b.n	8004486 <_strtod_l+0x9a6>
 800456c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80046e8 <_strtod_l+0xc08>
 8004570:	f04f 0800 	mov.w	r8, #0
 8004574:	e7e7      	b.n	8004546 <_strtod_l+0xa66>
 8004576:	4b5c      	ldr	r3, [pc, #368]	; (80046e8 <_strtod_l+0xc08>)
 8004578:	4640      	mov	r0, r8
 800457a:	4649      	mov	r1, r9
 800457c:	2200      	movs	r2, #0
 800457e:	f7fc f853 	bl	8000628 <__aeabi_dmul>
 8004582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004584:	4680      	mov	r8, r0
 8004586:	4689      	mov	r9, r1
 8004588:	b933      	cbnz	r3, 8004598 <_strtod_l+0xab8>
 800458a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800458e:	9012      	str	r0, [sp, #72]	; 0x48
 8004590:	9313      	str	r3, [sp, #76]	; 0x4c
 8004592:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8004596:	e7dd      	b.n	8004554 <_strtod_l+0xa74>
 8004598:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800459c:	e7f9      	b.n	8004592 <_strtod_l+0xab2>
 800459e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80045a2:	9b04      	ldr	r3, [sp, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1a8      	bne.n	80044fa <_strtod_l+0xa1a>
 80045a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80045ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80045ae:	0d1b      	lsrs	r3, r3, #20
 80045b0:	051b      	lsls	r3, r3, #20
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d1a1      	bne.n	80044fa <_strtod_l+0xa1a>
 80045b6:	4640      	mov	r0, r8
 80045b8:	4649      	mov	r1, r9
 80045ba:	f7fc fb7d 	bl	8000cb8 <__aeabi_d2lz>
 80045be:	f7fc f805 	bl	80005cc <__aeabi_l2d>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4640      	mov	r0, r8
 80045c8:	4649      	mov	r1, r9
 80045ca:	f7fb fe75 	bl	80002b8 <__aeabi_dsub>
 80045ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80045d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80045d4:	ea43 030a 	orr.w	r3, r3, sl
 80045d8:	4313      	orrs	r3, r2
 80045da:	4680      	mov	r8, r0
 80045dc:	4689      	mov	r9, r1
 80045de:	d053      	beq.n	8004688 <_strtod_l+0xba8>
 80045e0:	a335      	add	r3, pc, #212	; (adr r3, 80046b8 <_strtod_l+0xbd8>)
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f7fc fa91 	bl	8000b0c <__aeabi_dcmplt>
 80045ea:	2800      	cmp	r0, #0
 80045ec:	f47f acce 	bne.w	8003f8c <_strtod_l+0x4ac>
 80045f0:	a333      	add	r3, pc, #204	; (adr r3, 80046c0 <_strtod_l+0xbe0>)
 80045f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f6:	4640      	mov	r0, r8
 80045f8:	4649      	mov	r1, r9
 80045fa:	f7fc faa5 	bl	8000b48 <__aeabi_dcmpgt>
 80045fe:	2800      	cmp	r0, #0
 8004600:	f43f af7b 	beq.w	80044fa <_strtod_l+0xa1a>
 8004604:	e4c2      	b.n	8003f8c <_strtod_l+0x4ac>
 8004606:	9b04      	ldr	r3, [sp, #16]
 8004608:	b333      	cbz	r3, 8004658 <_strtod_l+0xb78>
 800460a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800460c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004610:	d822      	bhi.n	8004658 <_strtod_l+0xb78>
 8004612:	a32d      	add	r3, pc, #180	; (adr r3, 80046c8 <_strtod_l+0xbe8>)
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	4640      	mov	r0, r8
 800461a:	4649      	mov	r1, r9
 800461c:	f7fc fa80 	bl	8000b20 <__aeabi_dcmple>
 8004620:	b1a0      	cbz	r0, 800464c <_strtod_l+0xb6c>
 8004622:	4649      	mov	r1, r9
 8004624:	4640      	mov	r0, r8
 8004626:	f7fc fad7 	bl	8000bd8 <__aeabi_d2uiz>
 800462a:	2801      	cmp	r0, #1
 800462c:	bf38      	it	cc
 800462e:	2001      	movcc	r0, #1
 8004630:	f7fb ff80 	bl	8000534 <__aeabi_ui2d>
 8004634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004636:	4680      	mov	r8, r0
 8004638:	4689      	mov	r9, r1
 800463a:	bb13      	cbnz	r3, 8004682 <_strtod_l+0xba2>
 800463c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004640:	9014      	str	r0, [sp, #80]	; 0x50
 8004642:	9315      	str	r3, [sp, #84]	; 0x54
 8004644:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004648:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800464c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800464e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004650:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	930d      	str	r3, [sp, #52]	; 0x34
 8004658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800465c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004660:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004664:	f001 fe92 	bl	800638c <__ulp>
 8004668:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800466c:	ec53 2b10 	vmov	r2, r3, d0
 8004670:	f7fb ffda 	bl	8000628 <__aeabi_dmul>
 8004674:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004678:	f7fb fe20 	bl	80002bc <__adddf3>
 800467c:	4682      	mov	sl, r0
 800467e:	468b      	mov	fp, r1
 8004680:	e78f      	b.n	80045a2 <_strtod_l+0xac2>
 8004682:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8004686:	e7dd      	b.n	8004644 <_strtod_l+0xb64>
 8004688:	a311      	add	r3, pc, #68	; (adr r3, 80046d0 <_strtod_l+0xbf0>)
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f7fc fa3d 	bl	8000b0c <__aeabi_dcmplt>
 8004692:	e7b4      	b.n	80045fe <_strtod_l+0xb1e>
 8004694:	2300      	movs	r3, #0
 8004696:	930e      	str	r3, [sp, #56]	; 0x38
 8004698:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800469a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	f7ff ba65 	b.w	8003b6c <_strtod_l+0x8c>
 80046a2:	2b65      	cmp	r3, #101	; 0x65
 80046a4:	f43f ab5d 	beq.w	8003d62 <_strtod_l+0x282>
 80046a8:	2b45      	cmp	r3, #69	; 0x45
 80046aa:	f43f ab5a 	beq.w	8003d62 <_strtod_l+0x282>
 80046ae:	2201      	movs	r2, #1
 80046b0:	f7ff bb92 	b.w	8003dd8 <_strtod_l+0x2f8>
 80046b4:	f3af 8000 	nop.w
 80046b8:	94a03595 	.word	0x94a03595
 80046bc:	3fdfffff 	.word	0x3fdfffff
 80046c0:	35afe535 	.word	0x35afe535
 80046c4:	3fe00000 	.word	0x3fe00000
 80046c8:	ffc00000 	.word	0xffc00000
 80046cc:	41dfffff 	.word	0x41dfffff
 80046d0:	94a03595 	.word	0x94a03595
 80046d4:	3fcfffff 	.word	0x3fcfffff
 80046d8:	3ff00000 	.word	0x3ff00000
 80046dc:	7ff00000 	.word	0x7ff00000
 80046e0:	7fe00000 	.word	0x7fe00000
 80046e4:	7c9fffff 	.word	0x7c9fffff
 80046e8:	3fe00000 	.word	0x3fe00000
 80046ec:	bff00000 	.word	0xbff00000
 80046f0:	7fefffff 	.word	0x7fefffff

080046f4 <_strtod_r>:
 80046f4:	4b01      	ldr	r3, [pc, #4]	; (80046fc <_strtod_r+0x8>)
 80046f6:	f7ff b9f3 	b.w	8003ae0 <_strtod_l>
 80046fa:	bf00      	nop
 80046fc:	20000074 	.word	0x20000074

08004700 <_strtol_l.isra.0>:
 8004700:	2b01      	cmp	r3, #1
 8004702:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004706:	d001      	beq.n	800470c <_strtol_l.isra.0+0xc>
 8004708:	2b24      	cmp	r3, #36	; 0x24
 800470a:	d906      	bls.n	800471a <_strtol_l.isra.0+0x1a>
 800470c:	f7fe fa72 	bl	8002bf4 <__errno>
 8004710:	2316      	movs	r3, #22
 8004712:	6003      	str	r3, [r0, #0]
 8004714:	2000      	movs	r0, #0
 8004716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800471a:	4f3a      	ldr	r7, [pc, #232]	; (8004804 <_strtol_l.isra.0+0x104>)
 800471c:	468e      	mov	lr, r1
 800471e:	4676      	mov	r6, lr
 8004720:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004724:	5de5      	ldrb	r5, [r4, r7]
 8004726:	f015 0508 	ands.w	r5, r5, #8
 800472a:	d1f8      	bne.n	800471e <_strtol_l.isra.0+0x1e>
 800472c:	2c2d      	cmp	r4, #45	; 0x2d
 800472e:	d134      	bne.n	800479a <_strtol_l.isra.0+0x9a>
 8004730:	f89e 4000 	ldrb.w	r4, [lr]
 8004734:	f04f 0801 	mov.w	r8, #1
 8004738:	f106 0e02 	add.w	lr, r6, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d05c      	beq.n	80047fa <_strtol_l.isra.0+0xfa>
 8004740:	2b10      	cmp	r3, #16
 8004742:	d10c      	bne.n	800475e <_strtol_l.isra.0+0x5e>
 8004744:	2c30      	cmp	r4, #48	; 0x30
 8004746:	d10a      	bne.n	800475e <_strtol_l.isra.0+0x5e>
 8004748:	f89e 4000 	ldrb.w	r4, [lr]
 800474c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004750:	2c58      	cmp	r4, #88	; 0x58
 8004752:	d14d      	bne.n	80047f0 <_strtol_l.isra.0+0xf0>
 8004754:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004758:	2310      	movs	r3, #16
 800475a:	f10e 0e02 	add.w	lr, lr, #2
 800475e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004762:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004766:	2600      	movs	r6, #0
 8004768:	fbbc f9f3 	udiv	r9, ip, r3
 800476c:	4635      	mov	r5, r6
 800476e:	fb03 ca19 	mls	sl, r3, r9, ip
 8004772:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004776:	2f09      	cmp	r7, #9
 8004778:	d818      	bhi.n	80047ac <_strtol_l.isra.0+0xac>
 800477a:	463c      	mov	r4, r7
 800477c:	42a3      	cmp	r3, r4
 800477e:	dd24      	ble.n	80047ca <_strtol_l.isra.0+0xca>
 8004780:	2e00      	cmp	r6, #0
 8004782:	db1f      	blt.n	80047c4 <_strtol_l.isra.0+0xc4>
 8004784:	45a9      	cmp	r9, r5
 8004786:	d31d      	bcc.n	80047c4 <_strtol_l.isra.0+0xc4>
 8004788:	d101      	bne.n	800478e <_strtol_l.isra.0+0x8e>
 800478a:	45a2      	cmp	sl, r4
 800478c:	db1a      	blt.n	80047c4 <_strtol_l.isra.0+0xc4>
 800478e:	fb05 4503 	mla	r5, r5, r3, r4
 8004792:	2601      	movs	r6, #1
 8004794:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004798:	e7eb      	b.n	8004772 <_strtol_l.isra.0+0x72>
 800479a:	2c2b      	cmp	r4, #43	; 0x2b
 800479c:	bf08      	it	eq
 800479e:	f89e 4000 	ldrbeq.w	r4, [lr]
 80047a2:	46a8      	mov	r8, r5
 80047a4:	bf08      	it	eq
 80047a6:	f106 0e02 	addeq.w	lr, r6, #2
 80047aa:	e7c7      	b.n	800473c <_strtol_l.isra.0+0x3c>
 80047ac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80047b0:	2f19      	cmp	r7, #25
 80047b2:	d801      	bhi.n	80047b8 <_strtol_l.isra.0+0xb8>
 80047b4:	3c37      	subs	r4, #55	; 0x37
 80047b6:	e7e1      	b.n	800477c <_strtol_l.isra.0+0x7c>
 80047b8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80047bc:	2f19      	cmp	r7, #25
 80047be:	d804      	bhi.n	80047ca <_strtol_l.isra.0+0xca>
 80047c0:	3c57      	subs	r4, #87	; 0x57
 80047c2:	e7db      	b.n	800477c <_strtol_l.isra.0+0x7c>
 80047c4:	f04f 36ff 	mov.w	r6, #4294967295
 80047c8:	e7e4      	b.n	8004794 <_strtol_l.isra.0+0x94>
 80047ca:	2e00      	cmp	r6, #0
 80047cc:	da05      	bge.n	80047da <_strtol_l.isra.0+0xda>
 80047ce:	2322      	movs	r3, #34	; 0x22
 80047d0:	6003      	str	r3, [r0, #0]
 80047d2:	4665      	mov	r5, ip
 80047d4:	b942      	cbnz	r2, 80047e8 <_strtol_l.isra.0+0xe8>
 80047d6:	4628      	mov	r0, r5
 80047d8:	e79d      	b.n	8004716 <_strtol_l.isra.0+0x16>
 80047da:	f1b8 0f00 	cmp.w	r8, #0
 80047de:	d000      	beq.n	80047e2 <_strtol_l.isra.0+0xe2>
 80047e0:	426d      	negs	r5, r5
 80047e2:	2a00      	cmp	r2, #0
 80047e4:	d0f7      	beq.n	80047d6 <_strtol_l.isra.0+0xd6>
 80047e6:	b10e      	cbz	r6, 80047ec <_strtol_l.isra.0+0xec>
 80047e8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80047ec:	6011      	str	r1, [r2, #0]
 80047ee:	e7f2      	b.n	80047d6 <_strtol_l.isra.0+0xd6>
 80047f0:	2430      	movs	r4, #48	; 0x30
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1b3      	bne.n	800475e <_strtol_l.isra.0+0x5e>
 80047f6:	2308      	movs	r3, #8
 80047f8:	e7b1      	b.n	800475e <_strtol_l.isra.0+0x5e>
 80047fa:	2c30      	cmp	r4, #48	; 0x30
 80047fc:	d0a4      	beq.n	8004748 <_strtol_l.isra.0+0x48>
 80047fe:	230a      	movs	r3, #10
 8004800:	e7ad      	b.n	800475e <_strtol_l.isra.0+0x5e>
 8004802:	bf00      	nop
 8004804:	08008369 	.word	0x08008369

08004808 <_strtol_r>:
 8004808:	f7ff bf7a 	b.w	8004700 <_strtol_l.isra.0>

0800480c <strtol>:
 800480c:	4613      	mov	r3, r2
 800480e:	460a      	mov	r2, r1
 8004810:	4601      	mov	r1, r0
 8004812:	4802      	ldr	r0, [pc, #8]	; (800481c <strtol+0x10>)
 8004814:	6800      	ldr	r0, [r0, #0]
 8004816:	f7ff bf73 	b.w	8004700 <_strtol_l.isra.0>
 800481a:	bf00      	nop
 800481c:	2000000c 	.word	0x2000000c

08004820 <_write_r>:
 8004820:	b538      	push	{r3, r4, r5, lr}
 8004822:	4d07      	ldr	r5, [pc, #28]	; (8004840 <_write_r+0x20>)
 8004824:	4604      	mov	r4, r0
 8004826:	4608      	mov	r0, r1
 8004828:	4611      	mov	r1, r2
 800482a:	2200      	movs	r2, #0
 800482c:	602a      	str	r2, [r5, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	f7fd fa67 	bl	8001d02 <_write>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <_write_r+0x1e>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	b103      	cbz	r3, 800483e <_write_r+0x1e>
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	2000024c 	.word	0x2000024c

08004844 <_close_r>:
 8004844:	b538      	push	{r3, r4, r5, lr}
 8004846:	4d06      	ldr	r5, [pc, #24]	; (8004860 <_close_r+0x1c>)
 8004848:	2300      	movs	r3, #0
 800484a:	4604      	mov	r4, r0
 800484c:	4608      	mov	r0, r1
 800484e:	602b      	str	r3, [r5, #0]
 8004850:	f7fd fa73 	bl	8001d3a <_close>
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	d102      	bne.n	800485e <_close_r+0x1a>
 8004858:	682b      	ldr	r3, [r5, #0]
 800485a:	b103      	cbz	r3, 800485e <_close_r+0x1a>
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	bd38      	pop	{r3, r4, r5, pc}
 8004860:	2000024c 	.word	0x2000024c

08004864 <quorem>:
 8004864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004868:	6903      	ldr	r3, [r0, #16]
 800486a:	690c      	ldr	r4, [r1, #16]
 800486c:	42a3      	cmp	r3, r4
 800486e:	4607      	mov	r7, r0
 8004870:	f2c0 8081 	blt.w	8004976 <quorem+0x112>
 8004874:	3c01      	subs	r4, #1
 8004876:	f101 0814 	add.w	r8, r1, #20
 800487a:	f100 0514 	add.w	r5, r0, #20
 800487e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800488c:	3301      	adds	r3, #1
 800488e:	429a      	cmp	r2, r3
 8004890:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004894:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004898:	fbb2 f6f3 	udiv	r6, r2, r3
 800489c:	d331      	bcc.n	8004902 <quorem+0x9e>
 800489e:	f04f 0e00 	mov.w	lr, #0
 80048a2:	4640      	mov	r0, r8
 80048a4:	46ac      	mov	ip, r5
 80048a6:	46f2      	mov	sl, lr
 80048a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80048ac:	b293      	uxth	r3, r2
 80048ae:	fb06 e303 	mla	r3, r6, r3, lr
 80048b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	ebaa 0303 	sub.w	r3, sl, r3
 80048bc:	0c12      	lsrs	r2, r2, #16
 80048be:	f8dc a000 	ldr.w	sl, [ip]
 80048c2:	fb06 e202 	mla	r2, r6, r2, lr
 80048c6:	fa13 f38a 	uxtah	r3, r3, sl
 80048ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80048ce:	fa1f fa82 	uxth.w	sl, r2
 80048d2:	f8dc 2000 	ldr.w	r2, [ip]
 80048d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80048da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048de:	b29b      	uxth	r3, r3
 80048e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048e4:	4581      	cmp	r9, r0
 80048e6:	f84c 3b04 	str.w	r3, [ip], #4
 80048ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80048ee:	d2db      	bcs.n	80048a8 <quorem+0x44>
 80048f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80048f4:	b92b      	cbnz	r3, 8004902 <quorem+0x9e>
 80048f6:	9b01      	ldr	r3, [sp, #4]
 80048f8:	3b04      	subs	r3, #4
 80048fa:	429d      	cmp	r5, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	d32e      	bcc.n	800495e <quorem+0xfa>
 8004900:	613c      	str	r4, [r7, #16]
 8004902:	4638      	mov	r0, r7
 8004904:	f001 fc9e 	bl	8006244 <__mcmp>
 8004908:	2800      	cmp	r0, #0
 800490a:	db24      	blt.n	8004956 <quorem+0xf2>
 800490c:	3601      	adds	r6, #1
 800490e:	4628      	mov	r0, r5
 8004910:	f04f 0c00 	mov.w	ip, #0
 8004914:	f858 2b04 	ldr.w	r2, [r8], #4
 8004918:	f8d0 e000 	ldr.w	lr, [r0]
 800491c:	b293      	uxth	r3, r2
 800491e:	ebac 0303 	sub.w	r3, ip, r3
 8004922:	0c12      	lsrs	r2, r2, #16
 8004924:	fa13 f38e 	uxtah	r3, r3, lr
 8004928:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800492c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004930:	b29b      	uxth	r3, r3
 8004932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004936:	45c1      	cmp	r9, r8
 8004938:	f840 3b04 	str.w	r3, [r0], #4
 800493c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004940:	d2e8      	bcs.n	8004914 <quorem+0xb0>
 8004942:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004946:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800494a:	b922      	cbnz	r2, 8004956 <quorem+0xf2>
 800494c:	3b04      	subs	r3, #4
 800494e:	429d      	cmp	r5, r3
 8004950:	461a      	mov	r2, r3
 8004952:	d30a      	bcc.n	800496a <quorem+0x106>
 8004954:	613c      	str	r4, [r7, #16]
 8004956:	4630      	mov	r0, r6
 8004958:	b003      	add	sp, #12
 800495a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800495e:	6812      	ldr	r2, [r2, #0]
 8004960:	3b04      	subs	r3, #4
 8004962:	2a00      	cmp	r2, #0
 8004964:	d1cc      	bne.n	8004900 <quorem+0x9c>
 8004966:	3c01      	subs	r4, #1
 8004968:	e7c7      	b.n	80048fa <quorem+0x96>
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	3b04      	subs	r3, #4
 800496e:	2a00      	cmp	r2, #0
 8004970:	d1f0      	bne.n	8004954 <quorem+0xf0>
 8004972:	3c01      	subs	r4, #1
 8004974:	e7eb      	b.n	800494e <quorem+0xea>
 8004976:	2000      	movs	r0, #0
 8004978:	e7ee      	b.n	8004958 <quorem+0xf4>
 800497a:	0000      	movs	r0, r0
 800497c:	0000      	movs	r0, r0
	...

08004980 <_dtoa_r>:
 8004980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004984:	ed2d 8b02 	vpush	{d8}
 8004988:	ec57 6b10 	vmov	r6, r7, d0
 800498c:	b095      	sub	sp, #84	; 0x54
 800498e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004990:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004994:	9105      	str	r1, [sp, #20]
 8004996:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800499a:	4604      	mov	r4, r0
 800499c:	9209      	str	r2, [sp, #36]	; 0x24
 800499e:	930f      	str	r3, [sp, #60]	; 0x3c
 80049a0:	b975      	cbnz	r5, 80049c0 <_dtoa_r+0x40>
 80049a2:	2010      	movs	r0, #16
 80049a4:	f001 f95e 	bl	8005c64 <malloc>
 80049a8:	4602      	mov	r2, r0
 80049aa:	6260      	str	r0, [r4, #36]	; 0x24
 80049ac:	b920      	cbnz	r0, 80049b8 <_dtoa_r+0x38>
 80049ae:	4bb2      	ldr	r3, [pc, #712]	; (8004c78 <_dtoa_r+0x2f8>)
 80049b0:	21ea      	movs	r1, #234	; 0xea
 80049b2:	48b2      	ldr	r0, [pc, #712]	; (8004c7c <_dtoa_r+0x2fc>)
 80049b4:	f002 fcaa 	bl	800730c <__assert_func>
 80049b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80049bc:	6005      	str	r5, [r0, #0]
 80049be:	60c5      	str	r5, [r0, #12]
 80049c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	b151      	cbz	r1, 80049dc <_dtoa_r+0x5c>
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	604a      	str	r2, [r1, #4]
 80049ca:	2301      	movs	r3, #1
 80049cc:	4093      	lsls	r3, r2
 80049ce:	608b      	str	r3, [r1, #8]
 80049d0:	4620      	mov	r0, r4
 80049d2:	f001 f9af 	bl	8005d34 <_Bfree>
 80049d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	1e3b      	subs	r3, r7, #0
 80049de:	bfb9      	ittee	lt
 80049e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80049e4:	9303      	strlt	r3, [sp, #12]
 80049e6:	2300      	movge	r3, #0
 80049e8:	f8c8 3000 	strge.w	r3, [r8]
 80049ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80049f0:	4ba3      	ldr	r3, [pc, #652]	; (8004c80 <_dtoa_r+0x300>)
 80049f2:	bfbc      	itt	lt
 80049f4:	2201      	movlt	r2, #1
 80049f6:	f8c8 2000 	strlt.w	r2, [r8]
 80049fa:	ea33 0309 	bics.w	r3, r3, r9
 80049fe:	d11b      	bne.n	8004a38 <_dtoa_r+0xb8>
 8004a00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a02:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a0c:	4333      	orrs	r3, r6
 8004a0e:	f000 857a 	beq.w	8005506 <_dtoa_r+0xb86>
 8004a12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a14:	b963      	cbnz	r3, 8004a30 <_dtoa_r+0xb0>
 8004a16:	4b9b      	ldr	r3, [pc, #620]	; (8004c84 <_dtoa_r+0x304>)
 8004a18:	e024      	b.n	8004a64 <_dtoa_r+0xe4>
 8004a1a:	4b9b      	ldr	r3, [pc, #620]	; (8004c88 <_dtoa_r+0x308>)
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	3308      	adds	r3, #8
 8004a20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	9800      	ldr	r0, [sp, #0]
 8004a26:	b015      	add	sp, #84	; 0x54
 8004a28:	ecbd 8b02 	vpop	{d8}
 8004a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a30:	4b94      	ldr	r3, [pc, #592]	; (8004c84 <_dtoa_r+0x304>)
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	3303      	adds	r3, #3
 8004a36:	e7f3      	b.n	8004a20 <_dtoa_r+0xa0>
 8004a38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	ec51 0b17 	vmov	r0, r1, d7
 8004a42:	2300      	movs	r3, #0
 8004a44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004a48:	f7fc f856 	bl	8000af8 <__aeabi_dcmpeq>
 8004a4c:	4680      	mov	r8, r0
 8004a4e:	b158      	cbz	r0, 8004a68 <_dtoa_r+0xe8>
 8004a50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a52:	2301      	movs	r3, #1
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 8551 	beq.w	8005500 <_dtoa_r+0xb80>
 8004a5e:	488b      	ldr	r0, [pc, #556]	; (8004c8c <_dtoa_r+0x30c>)
 8004a60:	6018      	str	r0, [r3, #0]
 8004a62:	1e43      	subs	r3, r0, #1
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	e7dd      	b.n	8004a24 <_dtoa_r+0xa4>
 8004a68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004a6c:	aa12      	add	r2, sp, #72	; 0x48
 8004a6e:	a913      	add	r1, sp, #76	; 0x4c
 8004a70:	4620      	mov	r0, r4
 8004a72:	f001 fd07 	bl	8006484 <__d2b>
 8004a76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004a7a:	4683      	mov	fp, r0
 8004a7c:	2d00      	cmp	r5, #0
 8004a7e:	d07c      	beq.n	8004b7a <_dtoa_r+0x1fa>
 8004a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004a86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004a8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004a92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004a96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004a9a:	4b7d      	ldr	r3, [pc, #500]	; (8004c90 <_dtoa_r+0x310>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	4639      	mov	r1, r7
 8004aa2:	f7fb fc09 	bl	80002b8 <__aeabi_dsub>
 8004aa6:	a36e      	add	r3, pc, #440	; (adr r3, 8004c60 <_dtoa_r+0x2e0>)
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	f7fb fdbc 	bl	8000628 <__aeabi_dmul>
 8004ab0:	a36d      	add	r3, pc, #436	; (adr r3, 8004c68 <_dtoa_r+0x2e8>)
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	f7fb fc01 	bl	80002bc <__adddf3>
 8004aba:	4606      	mov	r6, r0
 8004abc:	4628      	mov	r0, r5
 8004abe:	460f      	mov	r7, r1
 8004ac0:	f7fb fd48 	bl	8000554 <__aeabi_i2d>
 8004ac4:	a36a      	add	r3, pc, #424	; (adr r3, 8004c70 <_dtoa_r+0x2f0>)
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	f7fb fdad 	bl	8000628 <__aeabi_dmul>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	4639      	mov	r1, r7
 8004ad6:	f7fb fbf1 	bl	80002bc <__adddf3>
 8004ada:	4606      	mov	r6, r0
 8004adc:	460f      	mov	r7, r1
 8004ade:	f7fc f853 	bl	8000b88 <__aeabi_d2iz>
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	4682      	mov	sl, r0
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	4630      	mov	r0, r6
 8004aea:	4639      	mov	r1, r7
 8004aec:	f7fc f80e 	bl	8000b0c <__aeabi_dcmplt>
 8004af0:	b148      	cbz	r0, 8004b06 <_dtoa_r+0x186>
 8004af2:	4650      	mov	r0, sl
 8004af4:	f7fb fd2e 	bl	8000554 <__aeabi_i2d>
 8004af8:	4632      	mov	r2, r6
 8004afa:	463b      	mov	r3, r7
 8004afc:	f7fb fffc 	bl	8000af8 <__aeabi_dcmpeq>
 8004b00:	b908      	cbnz	r0, 8004b06 <_dtoa_r+0x186>
 8004b02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b06:	f1ba 0f16 	cmp.w	sl, #22
 8004b0a:	d854      	bhi.n	8004bb6 <_dtoa_r+0x236>
 8004b0c:	4b61      	ldr	r3, [pc, #388]	; (8004c94 <_dtoa_r+0x314>)
 8004b0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b1a:	f7fb fff7 	bl	8000b0c <__aeabi_dcmplt>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d04b      	beq.n	8004bba <_dtoa_r+0x23a>
 8004b22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b26:	2300      	movs	r3, #0
 8004b28:	930e      	str	r3, [sp, #56]	; 0x38
 8004b2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b2c:	1b5d      	subs	r5, r3, r5
 8004b2e:	1e6b      	subs	r3, r5, #1
 8004b30:	9304      	str	r3, [sp, #16]
 8004b32:	bf43      	ittte	mi
 8004b34:	2300      	movmi	r3, #0
 8004b36:	f1c5 0801 	rsbmi	r8, r5, #1
 8004b3a:	9304      	strmi	r3, [sp, #16]
 8004b3c:	f04f 0800 	movpl.w	r8, #0
 8004b40:	f1ba 0f00 	cmp.w	sl, #0
 8004b44:	db3b      	blt.n	8004bbe <_dtoa_r+0x23e>
 8004b46:	9b04      	ldr	r3, [sp, #16]
 8004b48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004b4c:	4453      	add	r3, sl
 8004b4e:	9304      	str	r3, [sp, #16]
 8004b50:	2300      	movs	r3, #0
 8004b52:	9306      	str	r3, [sp, #24]
 8004b54:	9b05      	ldr	r3, [sp, #20]
 8004b56:	2b09      	cmp	r3, #9
 8004b58:	d869      	bhi.n	8004c2e <_dtoa_r+0x2ae>
 8004b5a:	2b05      	cmp	r3, #5
 8004b5c:	bfc4      	itt	gt
 8004b5e:	3b04      	subgt	r3, #4
 8004b60:	9305      	strgt	r3, [sp, #20]
 8004b62:	9b05      	ldr	r3, [sp, #20]
 8004b64:	f1a3 0302 	sub.w	r3, r3, #2
 8004b68:	bfcc      	ite	gt
 8004b6a:	2500      	movgt	r5, #0
 8004b6c:	2501      	movle	r5, #1
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d869      	bhi.n	8004c46 <_dtoa_r+0x2c6>
 8004b72:	e8df f003 	tbb	[pc, r3]
 8004b76:	4e2c      	.short	0x4e2c
 8004b78:	5a4c      	.short	0x5a4c
 8004b7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004b7e:	441d      	add	r5, r3
 8004b80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	bfc1      	itttt	gt
 8004b88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004b8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004b90:	fa09 f303 	lslgt.w	r3, r9, r3
 8004b94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004b98:	bfda      	itte	le
 8004b9a:	f1c3 0320 	rsble	r3, r3, #32
 8004b9e:	fa06 f003 	lslle.w	r0, r6, r3
 8004ba2:	4318      	orrgt	r0, r3
 8004ba4:	f7fb fcc6 	bl	8000534 <__aeabi_ui2d>
 8004ba8:	2301      	movs	r3, #1
 8004baa:	4606      	mov	r6, r0
 8004bac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004bb0:	3d01      	subs	r5, #1
 8004bb2:	9310      	str	r3, [sp, #64]	; 0x40
 8004bb4:	e771      	b.n	8004a9a <_dtoa_r+0x11a>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e7b6      	b.n	8004b28 <_dtoa_r+0x1a8>
 8004bba:	900e      	str	r0, [sp, #56]	; 0x38
 8004bbc:	e7b5      	b.n	8004b2a <_dtoa_r+0x1aa>
 8004bbe:	f1ca 0300 	rsb	r3, sl, #0
 8004bc2:	9306      	str	r3, [sp, #24]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	eba8 080a 	sub.w	r8, r8, sl
 8004bca:	930d      	str	r3, [sp, #52]	; 0x34
 8004bcc:	e7c2      	b.n	8004b54 <_dtoa_r+0x1d4>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	9308      	str	r3, [sp, #32]
 8004bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	dc39      	bgt.n	8004c4c <_dtoa_r+0x2cc>
 8004bd8:	f04f 0901 	mov.w	r9, #1
 8004bdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8004be0:	464b      	mov	r3, r9
 8004be2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004be6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004be8:	2200      	movs	r2, #0
 8004bea:	6042      	str	r2, [r0, #4]
 8004bec:	2204      	movs	r2, #4
 8004bee:	f102 0614 	add.w	r6, r2, #20
 8004bf2:	429e      	cmp	r6, r3
 8004bf4:	6841      	ldr	r1, [r0, #4]
 8004bf6:	d92f      	bls.n	8004c58 <_dtoa_r+0x2d8>
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f001 f85b 	bl	8005cb4 <_Balloc>
 8004bfe:	9000      	str	r0, [sp, #0]
 8004c00:	2800      	cmp	r0, #0
 8004c02:	d14b      	bne.n	8004c9c <_dtoa_r+0x31c>
 8004c04:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <_dtoa_r+0x318>)
 8004c06:	4602      	mov	r2, r0
 8004c08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c0c:	e6d1      	b.n	80049b2 <_dtoa_r+0x32>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e7de      	b.n	8004bd0 <_dtoa_r+0x250>
 8004c12:	2300      	movs	r3, #0
 8004c14:	9308      	str	r3, [sp, #32]
 8004c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c18:	eb0a 0903 	add.w	r9, sl, r3
 8004c1c:	f109 0301 	add.w	r3, r9, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	9301      	str	r3, [sp, #4]
 8004c24:	bfb8      	it	lt
 8004c26:	2301      	movlt	r3, #1
 8004c28:	e7dd      	b.n	8004be6 <_dtoa_r+0x266>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e7f2      	b.n	8004c14 <_dtoa_r+0x294>
 8004c2e:	2501      	movs	r5, #1
 8004c30:	2300      	movs	r3, #0
 8004c32:	9305      	str	r3, [sp, #20]
 8004c34:	9508      	str	r5, [sp, #32]
 8004c36:	f04f 39ff 	mov.w	r9, #4294967295
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004c40:	2312      	movs	r3, #18
 8004c42:	9209      	str	r2, [sp, #36]	; 0x24
 8004c44:	e7cf      	b.n	8004be6 <_dtoa_r+0x266>
 8004c46:	2301      	movs	r3, #1
 8004c48:	9308      	str	r3, [sp, #32]
 8004c4a:	e7f4      	b.n	8004c36 <_dtoa_r+0x2b6>
 8004c4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004c50:	f8cd 9004 	str.w	r9, [sp, #4]
 8004c54:	464b      	mov	r3, r9
 8004c56:	e7c6      	b.n	8004be6 <_dtoa_r+0x266>
 8004c58:	3101      	adds	r1, #1
 8004c5a:	6041      	str	r1, [r0, #4]
 8004c5c:	0052      	lsls	r2, r2, #1
 8004c5e:	e7c6      	b.n	8004bee <_dtoa_r+0x26e>
 8004c60:	636f4361 	.word	0x636f4361
 8004c64:	3fd287a7 	.word	0x3fd287a7
 8004c68:	8b60c8b3 	.word	0x8b60c8b3
 8004c6c:	3fc68a28 	.word	0x3fc68a28
 8004c70:	509f79fb 	.word	0x509f79fb
 8004c74:	3fd34413 	.word	0x3fd34413
 8004c78:	08008505 	.word	0x08008505
 8004c7c:	0800851c 	.word	0x0800851c
 8004c80:	7ff00000 	.word	0x7ff00000
 8004c84:	08008501 	.word	0x08008501
 8004c88:	080084f8 	.word	0x080084f8
 8004c8c:	08008782 	.word	0x08008782
 8004c90:	3ff80000 	.word	0x3ff80000
 8004c94:	08008698 	.word	0x08008698
 8004c98:	0800857b 	.word	0x0800857b
 8004c9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c9e:	9a00      	ldr	r2, [sp, #0]
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	9b01      	ldr	r3, [sp, #4]
 8004ca4:	2b0e      	cmp	r3, #14
 8004ca6:	f200 80ad 	bhi.w	8004e04 <_dtoa_r+0x484>
 8004caa:	2d00      	cmp	r5, #0
 8004cac:	f000 80aa 	beq.w	8004e04 <_dtoa_r+0x484>
 8004cb0:	f1ba 0f00 	cmp.w	sl, #0
 8004cb4:	dd36      	ble.n	8004d24 <_dtoa_r+0x3a4>
 8004cb6:	4ac3      	ldr	r2, [pc, #780]	; (8004fc4 <_dtoa_r+0x644>)
 8004cb8:	f00a 030f 	and.w	r3, sl, #15
 8004cbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004cc0:	ed93 7b00 	vldr	d7, [r3]
 8004cc4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004cc8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004ccc:	eeb0 8a47 	vmov.f32	s16, s14
 8004cd0:	eef0 8a67 	vmov.f32	s17, s15
 8004cd4:	d016      	beq.n	8004d04 <_dtoa_r+0x384>
 8004cd6:	4bbc      	ldr	r3, [pc, #752]	; (8004fc8 <_dtoa_r+0x648>)
 8004cd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004cdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ce0:	f7fb fdcc 	bl	800087c <__aeabi_ddiv>
 8004ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ce8:	f007 070f 	and.w	r7, r7, #15
 8004cec:	2503      	movs	r5, #3
 8004cee:	4eb6      	ldr	r6, [pc, #728]	; (8004fc8 <_dtoa_r+0x648>)
 8004cf0:	b957      	cbnz	r7, 8004d08 <_dtoa_r+0x388>
 8004cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cf6:	ec53 2b18 	vmov	r2, r3, d8
 8004cfa:	f7fb fdbf 	bl	800087c <__aeabi_ddiv>
 8004cfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d02:	e029      	b.n	8004d58 <_dtoa_r+0x3d8>
 8004d04:	2502      	movs	r5, #2
 8004d06:	e7f2      	b.n	8004cee <_dtoa_r+0x36e>
 8004d08:	07f9      	lsls	r1, r7, #31
 8004d0a:	d508      	bpl.n	8004d1e <_dtoa_r+0x39e>
 8004d0c:	ec51 0b18 	vmov	r0, r1, d8
 8004d10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d14:	f7fb fc88 	bl	8000628 <__aeabi_dmul>
 8004d18:	ec41 0b18 	vmov	d8, r0, r1
 8004d1c:	3501      	adds	r5, #1
 8004d1e:	107f      	asrs	r7, r7, #1
 8004d20:	3608      	adds	r6, #8
 8004d22:	e7e5      	b.n	8004cf0 <_dtoa_r+0x370>
 8004d24:	f000 80a6 	beq.w	8004e74 <_dtoa_r+0x4f4>
 8004d28:	f1ca 0600 	rsb	r6, sl, #0
 8004d2c:	4ba5      	ldr	r3, [pc, #660]	; (8004fc4 <_dtoa_r+0x644>)
 8004d2e:	4fa6      	ldr	r7, [pc, #664]	; (8004fc8 <_dtoa_r+0x648>)
 8004d30:	f006 020f 	and.w	r2, r6, #15
 8004d34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d40:	f7fb fc72 	bl	8000628 <__aeabi_dmul>
 8004d44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d48:	1136      	asrs	r6, r6, #4
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	2502      	movs	r5, #2
 8004d4e:	2e00      	cmp	r6, #0
 8004d50:	f040 8085 	bne.w	8004e5e <_dtoa_r+0x4de>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1d2      	bne.n	8004cfe <_dtoa_r+0x37e>
 8004d58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 808c 	beq.w	8004e78 <_dtoa_r+0x4f8>
 8004d60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004d64:	4b99      	ldr	r3, [pc, #612]	; (8004fcc <_dtoa_r+0x64c>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	4630      	mov	r0, r6
 8004d6a:	4639      	mov	r1, r7
 8004d6c:	f7fb fece 	bl	8000b0c <__aeabi_dcmplt>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	f000 8081 	beq.w	8004e78 <_dtoa_r+0x4f8>
 8004d76:	9b01      	ldr	r3, [sp, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d07d      	beq.n	8004e78 <_dtoa_r+0x4f8>
 8004d7c:	f1b9 0f00 	cmp.w	r9, #0
 8004d80:	dd3c      	ble.n	8004dfc <_dtoa_r+0x47c>
 8004d82:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004d86:	9307      	str	r3, [sp, #28]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	4b91      	ldr	r3, [pc, #580]	; (8004fd0 <_dtoa_r+0x650>)
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	4639      	mov	r1, r7
 8004d90:	f7fb fc4a 	bl	8000628 <__aeabi_dmul>
 8004d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d98:	3501      	adds	r5, #1
 8004d9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004d9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004da2:	4628      	mov	r0, r5
 8004da4:	f7fb fbd6 	bl	8000554 <__aeabi_i2d>
 8004da8:	4632      	mov	r2, r6
 8004daa:	463b      	mov	r3, r7
 8004dac:	f7fb fc3c 	bl	8000628 <__aeabi_dmul>
 8004db0:	4b88      	ldr	r3, [pc, #544]	; (8004fd4 <_dtoa_r+0x654>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	f7fb fa82 	bl	80002bc <__adddf3>
 8004db8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dc0:	9303      	str	r3, [sp, #12]
 8004dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d15c      	bne.n	8004e82 <_dtoa_r+0x502>
 8004dc8:	4b83      	ldr	r3, [pc, #524]	; (8004fd8 <_dtoa_r+0x658>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	4630      	mov	r0, r6
 8004dce:	4639      	mov	r1, r7
 8004dd0:	f7fb fa72 	bl	80002b8 <__aeabi_dsub>
 8004dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dd8:	4606      	mov	r6, r0
 8004dda:	460f      	mov	r7, r1
 8004ddc:	f7fb feb4 	bl	8000b48 <__aeabi_dcmpgt>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	f040 8296 	bne.w	8005312 <_dtoa_r+0x992>
 8004de6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004dea:	4630      	mov	r0, r6
 8004dec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004df0:	4639      	mov	r1, r7
 8004df2:	f7fb fe8b 	bl	8000b0c <__aeabi_dcmplt>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	f040 8288 	bne.w	800530c <_dtoa_r+0x98c>
 8004dfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f2c0 8158 	blt.w	80050bc <_dtoa_r+0x73c>
 8004e0c:	f1ba 0f0e 	cmp.w	sl, #14
 8004e10:	f300 8154 	bgt.w	80050bc <_dtoa_r+0x73c>
 8004e14:	4b6b      	ldr	r3, [pc, #428]	; (8004fc4 <_dtoa_r+0x644>)
 8004e16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f280 80e3 	bge.w	8004fec <_dtoa_r+0x66c>
 8004e26:	9b01      	ldr	r3, [sp, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f300 80df 	bgt.w	8004fec <_dtoa_r+0x66c>
 8004e2e:	f040 826d 	bne.w	800530c <_dtoa_r+0x98c>
 8004e32:	4b69      	ldr	r3, [pc, #420]	; (8004fd8 <_dtoa_r+0x658>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	4640      	mov	r0, r8
 8004e38:	4649      	mov	r1, r9
 8004e3a:	f7fb fbf5 	bl	8000628 <__aeabi_dmul>
 8004e3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e42:	f7fb fe77 	bl	8000b34 <__aeabi_dcmpge>
 8004e46:	9e01      	ldr	r6, [sp, #4]
 8004e48:	4637      	mov	r7, r6
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	f040 8243 	bne.w	80052d6 <_dtoa_r+0x956>
 8004e50:	9d00      	ldr	r5, [sp, #0]
 8004e52:	2331      	movs	r3, #49	; 0x31
 8004e54:	f805 3b01 	strb.w	r3, [r5], #1
 8004e58:	f10a 0a01 	add.w	sl, sl, #1
 8004e5c:	e23f      	b.n	80052de <_dtoa_r+0x95e>
 8004e5e:	07f2      	lsls	r2, r6, #31
 8004e60:	d505      	bpl.n	8004e6e <_dtoa_r+0x4ee>
 8004e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e66:	f7fb fbdf 	bl	8000628 <__aeabi_dmul>
 8004e6a:	3501      	adds	r5, #1
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	1076      	asrs	r6, r6, #1
 8004e70:	3708      	adds	r7, #8
 8004e72:	e76c      	b.n	8004d4e <_dtoa_r+0x3ce>
 8004e74:	2502      	movs	r5, #2
 8004e76:	e76f      	b.n	8004d58 <_dtoa_r+0x3d8>
 8004e78:	9b01      	ldr	r3, [sp, #4]
 8004e7a:	f8cd a01c 	str.w	sl, [sp, #28]
 8004e7e:	930c      	str	r3, [sp, #48]	; 0x30
 8004e80:	e78d      	b.n	8004d9e <_dtoa_r+0x41e>
 8004e82:	9900      	ldr	r1, [sp, #0]
 8004e84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004e86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e88:	4b4e      	ldr	r3, [pc, #312]	; (8004fc4 <_dtoa_r+0x644>)
 8004e8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e8e:	4401      	add	r1, r0
 8004e90:	9102      	str	r1, [sp, #8]
 8004e92:	9908      	ldr	r1, [sp, #32]
 8004e94:	eeb0 8a47 	vmov.f32	s16, s14
 8004e98:	eef0 8a67 	vmov.f32	s17, s15
 8004e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ea0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ea4:	2900      	cmp	r1, #0
 8004ea6:	d045      	beq.n	8004f34 <_dtoa_r+0x5b4>
 8004ea8:	494c      	ldr	r1, [pc, #304]	; (8004fdc <_dtoa_r+0x65c>)
 8004eaa:	2000      	movs	r0, #0
 8004eac:	f7fb fce6 	bl	800087c <__aeabi_ddiv>
 8004eb0:	ec53 2b18 	vmov	r2, r3, d8
 8004eb4:	f7fb fa00 	bl	80002b8 <__aeabi_dsub>
 8004eb8:	9d00      	ldr	r5, [sp, #0]
 8004eba:	ec41 0b18 	vmov	d8, r0, r1
 8004ebe:	4639      	mov	r1, r7
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	f7fb fe61 	bl	8000b88 <__aeabi_d2iz>
 8004ec6:	900c      	str	r0, [sp, #48]	; 0x30
 8004ec8:	f7fb fb44 	bl	8000554 <__aeabi_i2d>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	4639      	mov	r1, r7
 8004ed4:	f7fb f9f0 	bl	80002b8 <__aeabi_dsub>
 8004ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004eda:	3330      	adds	r3, #48	; 0x30
 8004edc:	f805 3b01 	strb.w	r3, [r5], #1
 8004ee0:	ec53 2b18 	vmov	r2, r3, d8
 8004ee4:	4606      	mov	r6, r0
 8004ee6:	460f      	mov	r7, r1
 8004ee8:	f7fb fe10 	bl	8000b0c <__aeabi_dcmplt>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d165      	bne.n	8004fbc <_dtoa_r+0x63c>
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	4935      	ldr	r1, [pc, #212]	; (8004fcc <_dtoa_r+0x64c>)
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	f7fb f9de 	bl	80002b8 <__aeabi_dsub>
 8004efc:	ec53 2b18 	vmov	r2, r3, d8
 8004f00:	f7fb fe04 	bl	8000b0c <__aeabi_dcmplt>
 8004f04:	2800      	cmp	r0, #0
 8004f06:	f040 80b9 	bne.w	800507c <_dtoa_r+0x6fc>
 8004f0a:	9b02      	ldr	r3, [sp, #8]
 8004f0c:	429d      	cmp	r5, r3
 8004f0e:	f43f af75 	beq.w	8004dfc <_dtoa_r+0x47c>
 8004f12:	4b2f      	ldr	r3, [pc, #188]	; (8004fd0 <_dtoa_r+0x650>)
 8004f14:	ec51 0b18 	vmov	r0, r1, d8
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f7fb fb85 	bl	8000628 <__aeabi_dmul>
 8004f1e:	4b2c      	ldr	r3, [pc, #176]	; (8004fd0 <_dtoa_r+0x650>)
 8004f20:	ec41 0b18 	vmov	d8, r0, r1
 8004f24:	2200      	movs	r2, #0
 8004f26:	4630      	mov	r0, r6
 8004f28:	4639      	mov	r1, r7
 8004f2a:	f7fb fb7d 	bl	8000628 <__aeabi_dmul>
 8004f2e:	4606      	mov	r6, r0
 8004f30:	460f      	mov	r7, r1
 8004f32:	e7c4      	b.n	8004ebe <_dtoa_r+0x53e>
 8004f34:	ec51 0b17 	vmov	r0, r1, d7
 8004f38:	f7fb fb76 	bl	8000628 <__aeabi_dmul>
 8004f3c:	9b02      	ldr	r3, [sp, #8]
 8004f3e:	9d00      	ldr	r5, [sp, #0]
 8004f40:	930c      	str	r3, [sp, #48]	; 0x30
 8004f42:	ec41 0b18 	vmov	d8, r0, r1
 8004f46:	4639      	mov	r1, r7
 8004f48:	4630      	mov	r0, r6
 8004f4a:	f7fb fe1d 	bl	8000b88 <__aeabi_d2iz>
 8004f4e:	9011      	str	r0, [sp, #68]	; 0x44
 8004f50:	f7fb fb00 	bl	8000554 <__aeabi_i2d>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4630      	mov	r0, r6
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	f7fb f9ac 	bl	80002b8 <__aeabi_dsub>
 8004f60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f62:	3330      	adds	r3, #48	; 0x30
 8004f64:	f805 3b01 	strb.w	r3, [r5], #1
 8004f68:	9b02      	ldr	r3, [sp, #8]
 8004f6a:	429d      	cmp	r5, r3
 8004f6c:	4606      	mov	r6, r0
 8004f6e:	460f      	mov	r7, r1
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	d134      	bne.n	8004fe0 <_dtoa_r+0x660>
 8004f76:	4b19      	ldr	r3, [pc, #100]	; (8004fdc <_dtoa_r+0x65c>)
 8004f78:	ec51 0b18 	vmov	r0, r1, d8
 8004f7c:	f7fb f99e 	bl	80002bc <__adddf3>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4630      	mov	r0, r6
 8004f86:	4639      	mov	r1, r7
 8004f88:	f7fb fdde 	bl	8000b48 <__aeabi_dcmpgt>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d175      	bne.n	800507c <_dtoa_r+0x6fc>
 8004f90:	ec53 2b18 	vmov	r2, r3, d8
 8004f94:	4911      	ldr	r1, [pc, #68]	; (8004fdc <_dtoa_r+0x65c>)
 8004f96:	2000      	movs	r0, #0
 8004f98:	f7fb f98e 	bl	80002b8 <__aeabi_dsub>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	4639      	mov	r1, r7
 8004fa4:	f7fb fdb2 	bl	8000b0c <__aeabi_dcmplt>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	f43f af27 	beq.w	8004dfc <_dtoa_r+0x47c>
 8004fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fb0:	1e6b      	subs	r3, r5, #1
 8004fb2:	930c      	str	r3, [sp, #48]	; 0x30
 8004fb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004fb8:	2b30      	cmp	r3, #48	; 0x30
 8004fba:	d0f8      	beq.n	8004fae <_dtoa_r+0x62e>
 8004fbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004fc0:	e04a      	b.n	8005058 <_dtoa_r+0x6d8>
 8004fc2:	bf00      	nop
 8004fc4:	08008698 	.word	0x08008698
 8004fc8:	08008670 	.word	0x08008670
 8004fcc:	3ff00000 	.word	0x3ff00000
 8004fd0:	40240000 	.word	0x40240000
 8004fd4:	401c0000 	.word	0x401c0000
 8004fd8:	40140000 	.word	0x40140000
 8004fdc:	3fe00000 	.word	0x3fe00000
 8004fe0:	4baf      	ldr	r3, [pc, #700]	; (80052a0 <_dtoa_r+0x920>)
 8004fe2:	f7fb fb21 	bl	8000628 <__aeabi_dmul>
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	460f      	mov	r7, r1
 8004fea:	e7ac      	b.n	8004f46 <_dtoa_r+0x5c6>
 8004fec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004ff0:	9d00      	ldr	r5, [sp, #0]
 8004ff2:	4642      	mov	r2, r8
 8004ff4:	464b      	mov	r3, r9
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	4639      	mov	r1, r7
 8004ffa:	f7fb fc3f 	bl	800087c <__aeabi_ddiv>
 8004ffe:	f7fb fdc3 	bl	8000b88 <__aeabi_d2iz>
 8005002:	9002      	str	r0, [sp, #8]
 8005004:	f7fb faa6 	bl	8000554 <__aeabi_i2d>
 8005008:	4642      	mov	r2, r8
 800500a:	464b      	mov	r3, r9
 800500c:	f7fb fb0c 	bl	8000628 <__aeabi_dmul>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4630      	mov	r0, r6
 8005016:	4639      	mov	r1, r7
 8005018:	f7fb f94e 	bl	80002b8 <__aeabi_dsub>
 800501c:	9e02      	ldr	r6, [sp, #8]
 800501e:	9f01      	ldr	r7, [sp, #4]
 8005020:	3630      	adds	r6, #48	; 0x30
 8005022:	f805 6b01 	strb.w	r6, [r5], #1
 8005026:	9e00      	ldr	r6, [sp, #0]
 8005028:	1bae      	subs	r6, r5, r6
 800502a:	42b7      	cmp	r7, r6
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	d137      	bne.n	80050a2 <_dtoa_r+0x722>
 8005032:	f7fb f943 	bl	80002bc <__adddf3>
 8005036:	4642      	mov	r2, r8
 8005038:	464b      	mov	r3, r9
 800503a:	4606      	mov	r6, r0
 800503c:	460f      	mov	r7, r1
 800503e:	f7fb fd83 	bl	8000b48 <__aeabi_dcmpgt>
 8005042:	b9c8      	cbnz	r0, 8005078 <_dtoa_r+0x6f8>
 8005044:	4642      	mov	r2, r8
 8005046:	464b      	mov	r3, r9
 8005048:	4630      	mov	r0, r6
 800504a:	4639      	mov	r1, r7
 800504c:	f7fb fd54 	bl	8000af8 <__aeabi_dcmpeq>
 8005050:	b110      	cbz	r0, 8005058 <_dtoa_r+0x6d8>
 8005052:	9b02      	ldr	r3, [sp, #8]
 8005054:	07d9      	lsls	r1, r3, #31
 8005056:	d40f      	bmi.n	8005078 <_dtoa_r+0x6f8>
 8005058:	4620      	mov	r0, r4
 800505a:	4659      	mov	r1, fp
 800505c:	f000 fe6a 	bl	8005d34 <_Bfree>
 8005060:	2300      	movs	r3, #0
 8005062:	702b      	strb	r3, [r5, #0]
 8005064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005066:	f10a 0001 	add.w	r0, sl, #1
 800506a:	6018      	str	r0, [r3, #0]
 800506c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800506e:	2b00      	cmp	r3, #0
 8005070:	f43f acd8 	beq.w	8004a24 <_dtoa_r+0xa4>
 8005074:	601d      	str	r5, [r3, #0]
 8005076:	e4d5      	b.n	8004a24 <_dtoa_r+0xa4>
 8005078:	f8cd a01c 	str.w	sl, [sp, #28]
 800507c:	462b      	mov	r3, r5
 800507e:	461d      	mov	r5, r3
 8005080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005084:	2a39      	cmp	r2, #57	; 0x39
 8005086:	d108      	bne.n	800509a <_dtoa_r+0x71a>
 8005088:	9a00      	ldr	r2, [sp, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d1f7      	bne.n	800507e <_dtoa_r+0x6fe>
 800508e:	9a07      	ldr	r2, [sp, #28]
 8005090:	9900      	ldr	r1, [sp, #0]
 8005092:	3201      	adds	r2, #1
 8005094:	9207      	str	r2, [sp, #28]
 8005096:	2230      	movs	r2, #48	; 0x30
 8005098:	700a      	strb	r2, [r1, #0]
 800509a:	781a      	ldrb	r2, [r3, #0]
 800509c:	3201      	adds	r2, #1
 800509e:	701a      	strb	r2, [r3, #0]
 80050a0:	e78c      	b.n	8004fbc <_dtoa_r+0x63c>
 80050a2:	4b7f      	ldr	r3, [pc, #508]	; (80052a0 <_dtoa_r+0x920>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	f7fb fabf 	bl	8000628 <__aeabi_dmul>
 80050aa:	2200      	movs	r2, #0
 80050ac:	2300      	movs	r3, #0
 80050ae:	4606      	mov	r6, r0
 80050b0:	460f      	mov	r7, r1
 80050b2:	f7fb fd21 	bl	8000af8 <__aeabi_dcmpeq>
 80050b6:	2800      	cmp	r0, #0
 80050b8:	d09b      	beq.n	8004ff2 <_dtoa_r+0x672>
 80050ba:	e7cd      	b.n	8005058 <_dtoa_r+0x6d8>
 80050bc:	9a08      	ldr	r2, [sp, #32]
 80050be:	2a00      	cmp	r2, #0
 80050c0:	f000 80c4 	beq.w	800524c <_dtoa_r+0x8cc>
 80050c4:	9a05      	ldr	r2, [sp, #20]
 80050c6:	2a01      	cmp	r2, #1
 80050c8:	f300 80a8 	bgt.w	800521c <_dtoa_r+0x89c>
 80050cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050ce:	2a00      	cmp	r2, #0
 80050d0:	f000 80a0 	beq.w	8005214 <_dtoa_r+0x894>
 80050d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80050d8:	9e06      	ldr	r6, [sp, #24]
 80050da:	4645      	mov	r5, r8
 80050dc:	9a04      	ldr	r2, [sp, #16]
 80050de:	2101      	movs	r1, #1
 80050e0:	441a      	add	r2, r3
 80050e2:	4620      	mov	r0, r4
 80050e4:	4498      	add	r8, r3
 80050e6:	9204      	str	r2, [sp, #16]
 80050e8:	f000 ff2a 	bl	8005f40 <__i2b>
 80050ec:	4607      	mov	r7, r0
 80050ee:	2d00      	cmp	r5, #0
 80050f0:	dd0b      	ble.n	800510a <_dtoa_r+0x78a>
 80050f2:	9b04      	ldr	r3, [sp, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	dd08      	ble.n	800510a <_dtoa_r+0x78a>
 80050f8:	42ab      	cmp	r3, r5
 80050fa:	9a04      	ldr	r2, [sp, #16]
 80050fc:	bfa8      	it	ge
 80050fe:	462b      	movge	r3, r5
 8005100:	eba8 0803 	sub.w	r8, r8, r3
 8005104:	1aed      	subs	r5, r5, r3
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	9304      	str	r3, [sp, #16]
 800510a:	9b06      	ldr	r3, [sp, #24]
 800510c:	b1fb      	cbz	r3, 800514e <_dtoa_r+0x7ce>
 800510e:	9b08      	ldr	r3, [sp, #32]
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 809f 	beq.w	8005254 <_dtoa_r+0x8d4>
 8005116:	2e00      	cmp	r6, #0
 8005118:	dd11      	ble.n	800513e <_dtoa_r+0x7be>
 800511a:	4639      	mov	r1, r7
 800511c:	4632      	mov	r2, r6
 800511e:	4620      	mov	r0, r4
 8005120:	f000 ffca 	bl	80060b8 <__pow5mult>
 8005124:	465a      	mov	r2, fp
 8005126:	4601      	mov	r1, r0
 8005128:	4607      	mov	r7, r0
 800512a:	4620      	mov	r0, r4
 800512c:	f000 ff1e 	bl	8005f6c <__multiply>
 8005130:	4659      	mov	r1, fp
 8005132:	9007      	str	r0, [sp, #28]
 8005134:	4620      	mov	r0, r4
 8005136:	f000 fdfd 	bl	8005d34 <_Bfree>
 800513a:	9b07      	ldr	r3, [sp, #28]
 800513c:	469b      	mov	fp, r3
 800513e:	9b06      	ldr	r3, [sp, #24]
 8005140:	1b9a      	subs	r2, r3, r6
 8005142:	d004      	beq.n	800514e <_dtoa_r+0x7ce>
 8005144:	4659      	mov	r1, fp
 8005146:	4620      	mov	r0, r4
 8005148:	f000 ffb6 	bl	80060b8 <__pow5mult>
 800514c:	4683      	mov	fp, r0
 800514e:	2101      	movs	r1, #1
 8005150:	4620      	mov	r0, r4
 8005152:	f000 fef5 	bl	8005f40 <__i2b>
 8005156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005158:	2b00      	cmp	r3, #0
 800515a:	4606      	mov	r6, r0
 800515c:	dd7c      	ble.n	8005258 <_dtoa_r+0x8d8>
 800515e:	461a      	mov	r2, r3
 8005160:	4601      	mov	r1, r0
 8005162:	4620      	mov	r0, r4
 8005164:	f000 ffa8 	bl	80060b8 <__pow5mult>
 8005168:	9b05      	ldr	r3, [sp, #20]
 800516a:	2b01      	cmp	r3, #1
 800516c:	4606      	mov	r6, r0
 800516e:	dd76      	ble.n	800525e <_dtoa_r+0x8de>
 8005170:	2300      	movs	r3, #0
 8005172:	9306      	str	r3, [sp, #24]
 8005174:	6933      	ldr	r3, [r6, #16]
 8005176:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800517a:	6918      	ldr	r0, [r3, #16]
 800517c:	f000 fe90 	bl	8005ea0 <__hi0bits>
 8005180:	f1c0 0020 	rsb	r0, r0, #32
 8005184:	9b04      	ldr	r3, [sp, #16]
 8005186:	4418      	add	r0, r3
 8005188:	f010 001f 	ands.w	r0, r0, #31
 800518c:	f000 8086 	beq.w	800529c <_dtoa_r+0x91c>
 8005190:	f1c0 0320 	rsb	r3, r0, #32
 8005194:	2b04      	cmp	r3, #4
 8005196:	dd7f      	ble.n	8005298 <_dtoa_r+0x918>
 8005198:	f1c0 001c 	rsb	r0, r0, #28
 800519c:	9b04      	ldr	r3, [sp, #16]
 800519e:	4403      	add	r3, r0
 80051a0:	4480      	add	r8, r0
 80051a2:	4405      	add	r5, r0
 80051a4:	9304      	str	r3, [sp, #16]
 80051a6:	f1b8 0f00 	cmp.w	r8, #0
 80051aa:	dd05      	ble.n	80051b8 <_dtoa_r+0x838>
 80051ac:	4659      	mov	r1, fp
 80051ae:	4642      	mov	r2, r8
 80051b0:	4620      	mov	r0, r4
 80051b2:	f000 ffdb 	bl	800616c <__lshift>
 80051b6:	4683      	mov	fp, r0
 80051b8:	9b04      	ldr	r3, [sp, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	dd05      	ble.n	80051ca <_dtoa_r+0x84a>
 80051be:	4631      	mov	r1, r6
 80051c0:	461a      	mov	r2, r3
 80051c2:	4620      	mov	r0, r4
 80051c4:	f000 ffd2 	bl	800616c <__lshift>
 80051c8:	4606      	mov	r6, r0
 80051ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d069      	beq.n	80052a4 <_dtoa_r+0x924>
 80051d0:	4631      	mov	r1, r6
 80051d2:	4658      	mov	r0, fp
 80051d4:	f001 f836 	bl	8006244 <__mcmp>
 80051d8:	2800      	cmp	r0, #0
 80051da:	da63      	bge.n	80052a4 <_dtoa_r+0x924>
 80051dc:	2300      	movs	r3, #0
 80051de:	4659      	mov	r1, fp
 80051e0:	220a      	movs	r2, #10
 80051e2:	4620      	mov	r0, r4
 80051e4:	f000 fdc8 	bl	8005d78 <__multadd>
 80051e8:	9b08      	ldr	r3, [sp, #32]
 80051ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051ee:	4683      	mov	fp, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 818f 	beq.w	8005514 <_dtoa_r+0xb94>
 80051f6:	4639      	mov	r1, r7
 80051f8:	2300      	movs	r3, #0
 80051fa:	220a      	movs	r2, #10
 80051fc:	4620      	mov	r0, r4
 80051fe:	f000 fdbb 	bl	8005d78 <__multadd>
 8005202:	f1b9 0f00 	cmp.w	r9, #0
 8005206:	4607      	mov	r7, r0
 8005208:	f300 808e 	bgt.w	8005328 <_dtoa_r+0x9a8>
 800520c:	9b05      	ldr	r3, [sp, #20]
 800520e:	2b02      	cmp	r3, #2
 8005210:	dc50      	bgt.n	80052b4 <_dtoa_r+0x934>
 8005212:	e089      	b.n	8005328 <_dtoa_r+0x9a8>
 8005214:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005216:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800521a:	e75d      	b.n	80050d8 <_dtoa_r+0x758>
 800521c:	9b01      	ldr	r3, [sp, #4]
 800521e:	1e5e      	subs	r6, r3, #1
 8005220:	9b06      	ldr	r3, [sp, #24]
 8005222:	42b3      	cmp	r3, r6
 8005224:	bfbf      	itttt	lt
 8005226:	9b06      	ldrlt	r3, [sp, #24]
 8005228:	9606      	strlt	r6, [sp, #24]
 800522a:	1af2      	sublt	r2, r6, r3
 800522c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800522e:	bfb6      	itet	lt
 8005230:	189b      	addlt	r3, r3, r2
 8005232:	1b9e      	subge	r6, r3, r6
 8005234:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005236:	9b01      	ldr	r3, [sp, #4]
 8005238:	bfb8      	it	lt
 800523a:	2600      	movlt	r6, #0
 800523c:	2b00      	cmp	r3, #0
 800523e:	bfb5      	itete	lt
 8005240:	eba8 0503 	sublt.w	r5, r8, r3
 8005244:	9b01      	ldrge	r3, [sp, #4]
 8005246:	2300      	movlt	r3, #0
 8005248:	4645      	movge	r5, r8
 800524a:	e747      	b.n	80050dc <_dtoa_r+0x75c>
 800524c:	9e06      	ldr	r6, [sp, #24]
 800524e:	9f08      	ldr	r7, [sp, #32]
 8005250:	4645      	mov	r5, r8
 8005252:	e74c      	b.n	80050ee <_dtoa_r+0x76e>
 8005254:	9a06      	ldr	r2, [sp, #24]
 8005256:	e775      	b.n	8005144 <_dtoa_r+0x7c4>
 8005258:	9b05      	ldr	r3, [sp, #20]
 800525a:	2b01      	cmp	r3, #1
 800525c:	dc18      	bgt.n	8005290 <_dtoa_r+0x910>
 800525e:	9b02      	ldr	r3, [sp, #8]
 8005260:	b9b3      	cbnz	r3, 8005290 <_dtoa_r+0x910>
 8005262:	9b03      	ldr	r3, [sp, #12]
 8005264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005268:	b9a3      	cbnz	r3, 8005294 <_dtoa_r+0x914>
 800526a:	9b03      	ldr	r3, [sp, #12]
 800526c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005270:	0d1b      	lsrs	r3, r3, #20
 8005272:	051b      	lsls	r3, r3, #20
 8005274:	b12b      	cbz	r3, 8005282 <_dtoa_r+0x902>
 8005276:	9b04      	ldr	r3, [sp, #16]
 8005278:	3301      	adds	r3, #1
 800527a:	9304      	str	r3, [sp, #16]
 800527c:	f108 0801 	add.w	r8, r8, #1
 8005280:	2301      	movs	r3, #1
 8005282:	9306      	str	r3, [sp, #24]
 8005284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005286:	2b00      	cmp	r3, #0
 8005288:	f47f af74 	bne.w	8005174 <_dtoa_r+0x7f4>
 800528c:	2001      	movs	r0, #1
 800528e:	e779      	b.n	8005184 <_dtoa_r+0x804>
 8005290:	2300      	movs	r3, #0
 8005292:	e7f6      	b.n	8005282 <_dtoa_r+0x902>
 8005294:	9b02      	ldr	r3, [sp, #8]
 8005296:	e7f4      	b.n	8005282 <_dtoa_r+0x902>
 8005298:	d085      	beq.n	80051a6 <_dtoa_r+0x826>
 800529a:	4618      	mov	r0, r3
 800529c:	301c      	adds	r0, #28
 800529e:	e77d      	b.n	800519c <_dtoa_r+0x81c>
 80052a0:	40240000 	.word	0x40240000
 80052a4:	9b01      	ldr	r3, [sp, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	dc38      	bgt.n	800531c <_dtoa_r+0x99c>
 80052aa:	9b05      	ldr	r3, [sp, #20]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	dd35      	ble.n	800531c <_dtoa_r+0x99c>
 80052b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80052b4:	f1b9 0f00 	cmp.w	r9, #0
 80052b8:	d10d      	bne.n	80052d6 <_dtoa_r+0x956>
 80052ba:	4631      	mov	r1, r6
 80052bc:	464b      	mov	r3, r9
 80052be:	2205      	movs	r2, #5
 80052c0:	4620      	mov	r0, r4
 80052c2:	f000 fd59 	bl	8005d78 <__multadd>
 80052c6:	4601      	mov	r1, r0
 80052c8:	4606      	mov	r6, r0
 80052ca:	4658      	mov	r0, fp
 80052cc:	f000 ffba 	bl	8006244 <__mcmp>
 80052d0:	2800      	cmp	r0, #0
 80052d2:	f73f adbd 	bgt.w	8004e50 <_dtoa_r+0x4d0>
 80052d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052d8:	9d00      	ldr	r5, [sp, #0]
 80052da:	ea6f 0a03 	mvn.w	sl, r3
 80052de:	f04f 0800 	mov.w	r8, #0
 80052e2:	4631      	mov	r1, r6
 80052e4:	4620      	mov	r0, r4
 80052e6:	f000 fd25 	bl	8005d34 <_Bfree>
 80052ea:	2f00      	cmp	r7, #0
 80052ec:	f43f aeb4 	beq.w	8005058 <_dtoa_r+0x6d8>
 80052f0:	f1b8 0f00 	cmp.w	r8, #0
 80052f4:	d005      	beq.n	8005302 <_dtoa_r+0x982>
 80052f6:	45b8      	cmp	r8, r7
 80052f8:	d003      	beq.n	8005302 <_dtoa_r+0x982>
 80052fa:	4641      	mov	r1, r8
 80052fc:	4620      	mov	r0, r4
 80052fe:	f000 fd19 	bl	8005d34 <_Bfree>
 8005302:	4639      	mov	r1, r7
 8005304:	4620      	mov	r0, r4
 8005306:	f000 fd15 	bl	8005d34 <_Bfree>
 800530a:	e6a5      	b.n	8005058 <_dtoa_r+0x6d8>
 800530c:	2600      	movs	r6, #0
 800530e:	4637      	mov	r7, r6
 8005310:	e7e1      	b.n	80052d6 <_dtoa_r+0x956>
 8005312:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005314:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005318:	4637      	mov	r7, r6
 800531a:	e599      	b.n	8004e50 <_dtoa_r+0x4d0>
 800531c:	9b08      	ldr	r3, [sp, #32]
 800531e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 80fd 	beq.w	8005522 <_dtoa_r+0xba2>
 8005328:	2d00      	cmp	r5, #0
 800532a:	dd05      	ble.n	8005338 <_dtoa_r+0x9b8>
 800532c:	4639      	mov	r1, r7
 800532e:	462a      	mov	r2, r5
 8005330:	4620      	mov	r0, r4
 8005332:	f000 ff1b 	bl	800616c <__lshift>
 8005336:	4607      	mov	r7, r0
 8005338:	9b06      	ldr	r3, [sp, #24]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d05c      	beq.n	80053f8 <_dtoa_r+0xa78>
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4620      	mov	r0, r4
 8005342:	f000 fcb7 	bl	8005cb4 <_Balloc>
 8005346:	4605      	mov	r5, r0
 8005348:	b928      	cbnz	r0, 8005356 <_dtoa_r+0x9d6>
 800534a:	4b80      	ldr	r3, [pc, #512]	; (800554c <_dtoa_r+0xbcc>)
 800534c:	4602      	mov	r2, r0
 800534e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005352:	f7ff bb2e 	b.w	80049b2 <_dtoa_r+0x32>
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	3202      	adds	r2, #2
 800535a:	0092      	lsls	r2, r2, #2
 800535c:	f107 010c 	add.w	r1, r7, #12
 8005360:	300c      	adds	r0, #12
 8005362:	f000 fc99 	bl	8005c98 <memcpy>
 8005366:	2201      	movs	r2, #1
 8005368:	4629      	mov	r1, r5
 800536a:	4620      	mov	r0, r4
 800536c:	f000 fefe 	bl	800616c <__lshift>
 8005370:	9b00      	ldr	r3, [sp, #0]
 8005372:	3301      	adds	r3, #1
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	9b00      	ldr	r3, [sp, #0]
 8005378:	444b      	add	r3, r9
 800537a:	9307      	str	r3, [sp, #28]
 800537c:	9b02      	ldr	r3, [sp, #8]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	46b8      	mov	r8, r7
 8005384:	9306      	str	r3, [sp, #24]
 8005386:	4607      	mov	r7, r0
 8005388:	9b01      	ldr	r3, [sp, #4]
 800538a:	4631      	mov	r1, r6
 800538c:	3b01      	subs	r3, #1
 800538e:	4658      	mov	r0, fp
 8005390:	9302      	str	r3, [sp, #8]
 8005392:	f7ff fa67 	bl	8004864 <quorem>
 8005396:	4603      	mov	r3, r0
 8005398:	3330      	adds	r3, #48	; 0x30
 800539a:	9004      	str	r0, [sp, #16]
 800539c:	4641      	mov	r1, r8
 800539e:	4658      	mov	r0, fp
 80053a0:	9308      	str	r3, [sp, #32]
 80053a2:	f000 ff4f 	bl	8006244 <__mcmp>
 80053a6:	463a      	mov	r2, r7
 80053a8:	4681      	mov	r9, r0
 80053aa:	4631      	mov	r1, r6
 80053ac:	4620      	mov	r0, r4
 80053ae:	f000 ff65 	bl	800627c <__mdiff>
 80053b2:	68c2      	ldr	r2, [r0, #12]
 80053b4:	9b08      	ldr	r3, [sp, #32]
 80053b6:	4605      	mov	r5, r0
 80053b8:	bb02      	cbnz	r2, 80053fc <_dtoa_r+0xa7c>
 80053ba:	4601      	mov	r1, r0
 80053bc:	4658      	mov	r0, fp
 80053be:	f000 ff41 	bl	8006244 <__mcmp>
 80053c2:	9b08      	ldr	r3, [sp, #32]
 80053c4:	4602      	mov	r2, r0
 80053c6:	4629      	mov	r1, r5
 80053c8:	4620      	mov	r0, r4
 80053ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80053ce:	f000 fcb1 	bl	8005d34 <_Bfree>
 80053d2:	9b05      	ldr	r3, [sp, #20]
 80053d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053d6:	9d01      	ldr	r5, [sp, #4]
 80053d8:	ea43 0102 	orr.w	r1, r3, r2
 80053dc:	9b06      	ldr	r3, [sp, #24]
 80053de:	430b      	orrs	r3, r1
 80053e0:	9b08      	ldr	r3, [sp, #32]
 80053e2:	d10d      	bne.n	8005400 <_dtoa_r+0xa80>
 80053e4:	2b39      	cmp	r3, #57	; 0x39
 80053e6:	d029      	beq.n	800543c <_dtoa_r+0xabc>
 80053e8:	f1b9 0f00 	cmp.w	r9, #0
 80053ec:	dd01      	ble.n	80053f2 <_dtoa_r+0xa72>
 80053ee:	9b04      	ldr	r3, [sp, #16]
 80053f0:	3331      	adds	r3, #49	; 0x31
 80053f2:	9a02      	ldr	r2, [sp, #8]
 80053f4:	7013      	strb	r3, [r2, #0]
 80053f6:	e774      	b.n	80052e2 <_dtoa_r+0x962>
 80053f8:	4638      	mov	r0, r7
 80053fa:	e7b9      	b.n	8005370 <_dtoa_r+0x9f0>
 80053fc:	2201      	movs	r2, #1
 80053fe:	e7e2      	b.n	80053c6 <_dtoa_r+0xa46>
 8005400:	f1b9 0f00 	cmp.w	r9, #0
 8005404:	db06      	blt.n	8005414 <_dtoa_r+0xa94>
 8005406:	9905      	ldr	r1, [sp, #20]
 8005408:	ea41 0909 	orr.w	r9, r1, r9
 800540c:	9906      	ldr	r1, [sp, #24]
 800540e:	ea59 0101 	orrs.w	r1, r9, r1
 8005412:	d120      	bne.n	8005456 <_dtoa_r+0xad6>
 8005414:	2a00      	cmp	r2, #0
 8005416:	ddec      	ble.n	80053f2 <_dtoa_r+0xa72>
 8005418:	4659      	mov	r1, fp
 800541a:	2201      	movs	r2, #1
 800541c:	4620      	mov	r0, r4
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	f000 fea4 	bl	800616c <__lshift>
 8005424:	4631      	mov	r1, r6
 8005426:	4683      	mov	fp, r0
 8005428:	f000 ff0c 	bl	8006244 <__mcmp>
 800542c:	2800      	cmp	r0, #0
 800542e:	9b01      	ldr	r3, [sp, #4]
 8005430:	dc02      	bgt.n	8005438 <_dtoa_r+0xab8>
 8005432:	d1de      	bne.n	80053f2 <_dtoa_r+0xa72>
 8005434:	07da      	lsls	r2, r3, #31
 8005436:	d5dc      	bpl.n	80053f2 <_dtoa_r+0xa72>
 8005438:	2b39      	cmp	r3, #57	; 0x39
 800543a:	d1d8      	bne.n	80053ee <_dtoa_r+0xa6e>
 800543c:	9a02      	ldr	r2, [sp, #8]
 800543e:	2339      	movs	r3, #57	; 0x39
 8005440:	7013      	strb	r3, [r2, #0]
 8005442:	462b      	mov	r3, r5
 8005444:	461d      	mov	r5, r3
 8005446:	3b01      	subs	r3, #1
 8005448:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800544c:	2a39      	cmp	r2, #57	; 0x39
 800544e:	d050      	beq.n	80054f2 <_dtoa_r+0xb72>
 8005450:	3201      	adds	r2, #1
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	e745      	b.n	80052e2 <_dtoa_r+0x962>
 8005456:	2a00      	cmp	r2, #0
 8005458:	dd03      	ble.n	8005462 <_dtoa_r+0xae2>
 800545a:	2b39      	cmp	r3, #57	; 0x39
 800545c:	d0ee      	beq.n	800543c <_dtoa_r+0xabc>
 800545e:	3301      	adds	r3, #1
 8005460:	e7c7      	b.n	80053f2 <_dtoa_r+0xa72>
 8005462:	9a01      	ldr	r2, [sp, #4]
 8005464:	9907      	ldr	r1, [sp, #28]
 8005466:	f802 3c01 	strb.w	r3, [r2, #-1]
 800546a:	428a      	cmp	r2, r1
 800546c:	d02a      	beq.n	80054c4 <_dtoa_r+0xb44>
 800546e:	4659      	mov	r1, fp
 8005470:	2300      	movs	r3, #0
 8005472:	220a      	movs	r2, #10
 8005474:	4620      	mov	r0, r4
 8005476:	f000 fc7f 	bl	8005d78 <__multadd>
 800547a:	45b8      	cmp	r8, r7
 800547c:	4683      	mov	fp, r0
 800547e:	f04f 0300 	mov.w	r3, #0
 8005482:	f04f 020a 	mov.w	r2, #10
 8005486:	4641      	mov	r1, r8
 8005488:	4620      	mov	r0, r4
 800548a:	d107      	bne.n	800549c <_dtoa_r+0xb1c>
 800548c:	f000 fc74 	bl	8005d78 <__multadd>
 8005490:	4680      	mov	r8, r0
 8005492:	4607      	mov	r7, r0
 8005494:	9b01      	ldr	r3, [sp, #4]
 8005496:	3301      	adds	r3, #1
 8005498:	9301      	str	r3, [sp, #4]
 800549a:	e775      	b.n	8005388 <_dtoa_r+0xa08>
 800549c:	f000 fc6c 	bl	8005d78 <__multadd>
 80054a0:	4639      	mov	r1, r7
 80054a2:	4680      	mov	r8, r0
 80054a4:	2300      	movs	r3, #0
 80054a6:	220a      	movs	r2, #10
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 fc65 	bl	8005d78 <__multadd>
 80054ae:	4607      	mov	r7, r0
 80054b0:	e7f0      	b.n	8005494 <_dtoa_r+0xb14>
 80054b2:	f1b9 0f00 	cmp.w	r9, #0
 80054b6:	9a00      	ldr	r2, [sp, #0]
 80054b8:	bfcc      	ite	gt
 80054ba:	464d      	movgt	r5, r9
 80054bc:	2501      	movle	r5, #1
 80054be:	4415      	add	r5, r2
 80054c0:	f04f 0800 	mov.w	r8, #0
 80054c4:	4659      	mov	r1, fp
 80054c6:	2201      	movs	r2, #1
 80054c8:	4620      	mov	r0, r4
 80054ca:	9301      	str	r3, [sp, #4]
 80054cc:	f000 fe4e 	bl	800616c <__lshift>
 80054d0:	4631      	mov	r1, r6
 80054d2:	4683      	mov	fp, r0
 80054d4:	f000 feb6 	bl	8006244 <__mcmp>
 80054d8:	2800      	cmp	r0, #0
 80054da:	dcb2      	bgt.n	8005442 <_dtoa_r+0xac2>
 80054dc:	d102      	bne.n	80054e4 <_dtoa_r+0xb64>
 80054de:	9b01      	ldr	r3, [sp, #4]
 80054e0:	07db      	lsls	r3, r3, #31
 80054e2:	d4ae      	bmi.n	8005442 <_dtoa_r+0xac2>
 80054e4:	462b      	mov	r3, r5
 80054e6:	461d      	mov	r5, r3
 80054e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054ec:	2a30      	cmp	r2, #48	; 0x30
 80054ee:	d0fa      	beq.n	80054e6 <_dtoa_r+0xb66>
 80054f0:	e6f7      	b.n	80052e2 <_dtoa_r+0x962>
 80054f2:	9a00      	ldr	r2, [sp, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d1a5      	bne.n	8005444 <_dtoa_r+0xac4>
 80054f8:	f10a 0a01 	add.w	sl, sl, #1
 80054fc:	2331      	movs	r3, #49	; 0x31
 80054fe:	e779      	b.n	80053f4 <_dtoa_r+0xa74>
 8005500:	4b13      	ldr	r3, [pc, #76]	; (8005550 <_dtoa_r+0xbd0>)
 8005502:	f7ff baaf 	b.w	8004a64 <_dtoa_r+0xe4>
 8005506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005508:	2b00      	cmp	r3, #0
 800550a:	f47f aa86 	bne.w	8004a1a <_dtoa_r+0x9a>
 800550e:	4b11      	ldr	r3, [pc, #68]	; (8005554 <_dtoa_r+0xbd4>)
 8005510:	f7ff baa8 	b.w	8004a64 <_dtoa_r+0xe4>
 8005514:	f1b9 0f00 	cmp.w	r9, #0
 8005518:	dc03      	bgt.n	8005522 <_dtoa_r+0xba2>
 800551a:	9b05      	ldr	r3, [sp, #20]
 800551c:	2b02      	cmp	r3, #2
 800551e:	f73f aec9 	bgt.w	80052b4 <_dtoa_r+0x934>
 8005522:	9d00      	ldr	r5, [sp, #0]
 8005524:	4631      	mov	r1, r6
 8005526:	4658      	mov	r0, fp
 8005528:	f7ff f99c 	bl	8004864 <quorem>
 800552c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005530:	f805 3b01 	strb.w	r3, [r5], #1
 8005534:	9a00      	ldr	r2, [sp, #0]
 8005536:	1aaa      	subs	r2, r5, r2
 8005538:	4591      	cmp	r9, r2
 800553a:	ddba      	ble.n	80054b2 <_dtoa_r+0xb32>
 800553c:	4659      	mov	r1, fp
 800553e:	2300      	movs	r3, #0
 8005540:	220a      	movs	r2, #10
 8005542:	4620      	mov	r0, r4
 8005544:	f000 fc18 	bl	8005d78 <__multadd>
 8005548:	4683      	mov	fp, r0
 800554a:	e7eb      	b.n	8005524 <_dtoa_r+0xba4>
 800554c:	0800857b 	.word	0x0800857b
 8005550:	08008781 	.word	0x08008781
 8005554:	080084f8 	.word	0x080084f8

08005558 <rshift>:
 8005558:	6903      	ldr	r3, [r0, #16]
 800555a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800555e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005562:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005566:	f100 0414 	add.w	r4, r0, #20
 800556a:	dd45      	ble.n	80055f8 <rshift+0xa0>
 800556c:	f011 011f 	ands.w	r1, r1, #31
 8005570:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005574:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005578:	d10c      	bne.n	8005594 <rshift+0x3c>
 800557a:	f100 0710 	add.w	r7, r0, #16
 800557e:	4629      	mov	r1, r5
 8005580:	42b1      	cmp	r1, r6
 8005582:	d334      	bcc.n	80055ee <rshift+0x96>
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	1eea      	subs	r2, r5, #3
 800558a:	4296      	cmp	r6, r2
 800558c:	bf38      	it	cc
 800558e:	2300      	movcc	r3, #0
 8005590:	4423      	add	r3, r4
 8005592:	e015      	b.n	80055c0 <rshift+0x68>
 8005594:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005598:	f1c1 0820 	rsb	r8, r1, #32
 800559c:	40cf      	lsrs	r7, r1
 800559e:	f105 0e04 	add.w	lr, r5, #4
 80055a2:	46a1      	mov	r9, r4
 80055a4:	4576      	cmp	r6, lr
 80055a6:	46f4      	mov	ip, lr
 80055a8:	d815      	bhi.n	80055d6 <rshift+0x7e>
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	009a      	lsls	r2, r3, #2
 80055ae:	3a04      	subs	r2, #4
 80055b0:	3501      	adds	r5, #1
 80055b2:	42ae      	cmp	r6, r5
 80055b4:	bf38      	it	cc
 80055b6:	2200      	movcc	r2, #0
 80055b8:	18a3      	adds	r3, r4, r2
 80055ba:	50a7      	str	r7, [r4, r2]
 80055bc:	b107      	cbz	r7, 80055c0 <rshift+0x68>
 80055be:	3304      	adds	r3, #4
 80055c0:	1b1a      	subs	r2, r3, r4
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80055c8:	bf08      	it	eq
 80055ca:	2300      	moveq	r3, #0
 80055cc:	6102      	str	r2, [r0, #16]
 80055ce:	bf08      	it	eq
 80055d0:	6143      	streq	r3, [r0, #20]
 80055d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055d6:	f8dc c000 	ldr.w	ip, [ip]
 80055da:	fa0c fc08 	lsl.w	ip, ip, r8
 80055de:	ea4c 0707 	orr.w	r7, ip, r7
 80055e2:	f849 7b04 	str.w	r7, [r9], #4
 80055e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80055ea:	40cf      	lsrs	r7, r1
 80055ec:	e7da      	b.n	80055a4 <rshift+0x4c>
 80055ee:	f851 cb04 	ldr.w	ip, [r1], #4
 80055f2:	f847 cf04 	str.w	ip, [r7, #4]!
 80055f6:	e7c3      	b.n	8005580 <rshift+0x28>
 80055f8:	4623      	mov	r3, r4
 80055fa:	e7e1      	b.n	80055c0 <rshift+0x68>

080055fc <__hexdig_fun>:
 80055fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005600:	2b09      	cmp	r3, #9
 8005602:	d802      	bhi.n	800560a <__hexdig_fun+0xe>
 8005604:	3820      	subs	r0, #32
 8005606:	b2c0      	uxtb	r0, r0
 8005608:	4770      	bx	lr
 800560a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800560e:	2b05      	cmp	r3, #5
 8005610:	d801      	bhi.n	8005616 <__hexdig_fun+0x1a>
 8005612:	3847      	subs	r0, #71	; 0x47
 8005614:	e7f7      	b.n	8005606 <__hexdig_fun+0xa>
 8005616:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800561a:	2b05      	cmp	r3, #5
 800561c:	d801      	bhi.n	8005622 <__hexdig_fun+0x26>
 800561e:	3827      	subs	r0, #39	; 0x27
 8005620:	e7f1      	b.n	8005606 <__hexdig_fun+0xa>
 8005622:	2000      	movs	r0, #0
 8005624:	4770      	bx	lr
	...

08005628 <__gethex>:
 8005628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562c:	ed2d 8b02 	vpush	{d8}
 8005630:	b089      	sub	sp, #36	; 0x24
 8005632:	ee08 0a10 	vmov	s16, r0
 8005636:	9304      	str	r3, [sp, #16]
 8005638:	4bbc      	ldr	r3, [pc, #752]	; (800592c <__gethex+0x304>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	4618      	mov	r0, r3
 8005640:	468b      	mov	fp, r1
 8005642:	4690      	mov	r8, r2
 8005644:	f7fa fdd6 	bl	80001f4 <strlen>
 8005648:	9b01      	ldr	r3, [sp, #4]
 800564a:	f8db 2000 	ldr.w	r2, [fp]
 800564e:	4403      	add	r3, r0
 8005650:	4682      	mov	sl, r0
 8005652:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005656:	9305      	str	r3, [sp, #20]
 8005658:	1c93      	adds	r3, r2, #2
 800565a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800565e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005662:	32fe      	adds	r2, #254	; 0xfe
 8005664:	18d1      	adds	r1, r2, r3
 8005666:	461f      	mov	r7, r3
 8005668:	f813 0b01 	ldrb.w	r0, [r3], #1
 800566c:	9100      	str	r1, [sp, #0]
 800566e:	2830      	cmp	r0, #48	; 0x30
 8005670:	d0f8      	beq.n	8005664 <__gethex+0x3c>
 8005672:	f7ff ffc3 	bl	80055fc <__hexdig_fun>
 8005676:	4604      	mov	r4, r0
 8005678:	2800      	cmp	r0, #0
 800567a:	d13a      	bne.n	80056f2 <__gethex+0xca>
 800567c:	9901      	ldr	r1, [sp, #4]
 800567e:	4652      	mov	r2, sl
 8005680:	4638      	mov	r0, r7
 8005682:	f001 fd6b 	bl	800715c <strncmp>
 8005686:	4605      	mov	r5, r0
 8005688:	2800      	cmp	r0, #0
 800568a:	d168      	bne.n	800575e <__gethex+0x136>
 800568c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005690:	eb07 060a 	add.w	r6, r7, sl
 8005694:	f7ff ffb2 	bl	80055fc <__hexdig_fun>
 8005698:	2800      	cmp	r0, #0
 800569a:	d062      	beq.n	8005762 <__gethex+0x13a>
 800569c:	4633      	mov	r3, r6
 800569e:	7818      	ldrb	r0, [r3, #0]
 80056a0:	2830      	cmp	r0, #48	; 0x30
 80056a2:	461f      	mov	r7, r3
 80056a4:	f103 0301 	add.w	r3, r3, #1
 80056a8:	d0f9      	beq.n	800569e <__gethex+0x76>
 80056aa:	f7ff ffa7 	bl	80055fc <__hexdig_fun>
 80056ae:	2301      	movs	r3, #1
 80056b0:	fab0 f480 	clz	r4, r0
 80056b4:	0964      	lsrs	r4, r4, #5
 80056b6:	4635      	mov	r5, r6
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	463a      	mov	r2, r7
 80056bc:	4616      	mov	r6, r2
 80056be:	3201      	adds	r2, #1
 80056c0:	7830      	ldrb	r0, [r6, #0]
 80056c2:	f7ff ff9b 	bl	80055fc <__hexdig_fun>
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d1f8      	bne.n	80056bc <__gethex+0x94>
 80056ca:	9901      	ldr	r1, [sp, #4]
 80056cc:	4652      	mov	r2, sl
 80056ce:	4630      	mov	r0, r6
 80056d0:	f001 fd44 	bl	800715c <strncmp>
 80056d4:	b980      	cbnz	r0, 80056f8 <__gethex+0xd0>
 80056d6:	b94d      	cbnz	r5, 80056ec <__gethex+0xc4>
 80056d8:	eb06 050a 	add.w	r5, r6, sl
 80056dc:	462a      	mov	r2, r5
 80056de:	4616      	mov	r6, r2
 80056e0:	3201      	adds	r2, #1
 80056e2:	7830      	ldrb	r0, [r6, #0]
 80056e4:	f7ff ff8a 	bl	80055fc <__hexdig_fun>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d1f8      	bne.n	80056de <__gethex+0xb6>
 80056ec:	1bad      	subs	r5, r5, r6
 80056ee:	00ad      	lsls	r5, r5, #2
 80056f0:	e004      	b.n	80056fc <__gethex+0xd4>
 80056f2:	2400      	movs	r4, #0
 80056f4:	4625      	mov	r5, r4
 80056f6:	e7e0      	b.n	80056ba <__gethex+0x92>
 80056f8:	2d00      	cmp	r5, #0
 80056fa:	d1f7      	bne.n	80056ec <__gethex+0xc4>
 80056fc:	7833      	ldrb	r3, [r6, #0]
 80056fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005702:	2b50      	cmp	r3, #80	; 0x50
 8005704:	d13b      	bne.n	800577e <__gethex+0x156>
 8005706:	7873      	ldrb	r3, [r6, #1]
 8005708:	2b2b      	cmp	r3, #43	; 0x2b
 800570a:	d02c      	beq.n	8005766 <__gethex+0x13e>
 800570c:	2b2d      	cmp	r3, #45	; 0x2d
 800570e:	d02e      	beq.n	800576e <__gethex+0x146>
 8005710:	1c71      	adds	r1, r6, #1
 8005712:	f04f 0900 	mov.w	r9, #0
 8005716:	7808      	ldrb	r0, [r1, #0]
 8005718:	f7ff ff70 	bl	80055fc <__hexdig_fun>
 800571c:	1e43      	subs	r3, r0, #1
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b18      	cmp	r3, #24
 8005722:	d82c      	bhi.n	800577e <__gethex+0x156>
 8005724:	f1a0 0210 	sub.w	r2, r0, #16
 8005728:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800572c:	f7ff ff66 	bl	80055fc <__hexdig_fun>
 8005730:	1e43      	subs	r3, r0, #1
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b18      	cmp	r3, #24
 8005736:	d91d      	bls.n	8005774 <__gethex+0x14c>
 8005738:	f1b9 0f00 	cmp.w	r9, #0
 800573c:	d000      	beq.n	8005740 <__gethex+0x118>
 800573e:	4252      	negs	r2, r2
 8005740:	4415      	add	r5, r2
 8005742:	f8cb 1000 	str.w	r1, [fp]
 8005746:	b1e4      	cbz	r4, 8005782 <__gethex+0x15a>
 8005748:	9b00      	ldr	r3, [sp, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	bf14      	ite	ne
 800574e:	2700      	movne	r7, #0
 8005750:	2706      	moveq	r7, #6
 8005752:	4638      	mov	r0, r7
 8005754:	b009      	add	sp, #36	; 0x24
 8005756:	ecbd 8b02 	vpop	{d8}
 800575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575e:	463e      	mov	r6, r7
 8005760:	4625      	mov	r5, r4
 8005762:	2401      	movs	r4, #1
 8005764:	e7ca      	b.n	80056fc <__gethex+0xd4>
 8005766:	f04f 0900 	mov.w	r9, #0
 800576a:	1cb1      	adds	r1, r6, #2
 800576c:	e7d3      	b.n	8005716 <__gethex+0xee>
 800576e:	f04f 0901 	mov.w	r9, #1
 8005772:	e7fa      	b.n	800576a <__gethex+0x142>
 8005774:	230a      	movs	r3, #10
 8005776:	fb03 0202 	mla	r2, r3, r2, r0
 800577a:	3a10      	subs	r2, #16
 800577c:	e7d4      	b.n	8005728 <__gethex+0x100>
 800577e:	4631      	mov	r1, r6
 8005780:	e7df      	b.n	8005742 <__gethex+0x11a>
 8005782:	1bf3      	subs	r3, r6, r7
 8005784:	3b01      	subs	r3, #1
 8005786:	4621      	mov	r1, r4
 8005788:	2b07      	cmp	r3, #7
 800578a:	dc0b      	bgt.n	80057a4 <__gethex+0x17c>
 800578c:	ee18 0a10 	vmov	r0, s16
 8005790:	f000 fa90 	bl	8005cb4 <_Balloc>
 8005794:	4604      	mov	r4, r0
 8005796:	b940      	cbnz	r0, 80057aa <__gethex+0x182>
 8005798:	4b65      	ldr	r3, [pc, #404]	; (8005930 <__gethex+0x308>)
 800579a:	4602      	mov	r2, r0
 800579c:	21de      	movs	r1, #222	; 0xde
 800579e:	4865      	ldr	r0, [pc, #404]	; (8005934 <__gethex+0x30c>)
 80057a0:	f001 fdb4 	bl	800730c <__assert_func>
 80057a4:	3101      	adds	r1, #1
 80057a6:	105b      	asrs	r3, r3, #1
 80057a8:	e7ee      	b.n	8005788 <__gethex+0x160>
 80057aa:	f100 0914 	add.w	r9, r0, #20
 80057ae:	f04f 0b00 	mov.w	fp, #0
 80057b2:	f1ca 0301 	rsb	r3, sl, #1
 80057b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80057ba:	f8cd b000 	str.w	fp, [sp]
 80057be:	9306      	str	r3, [sp, #24]
 80057c0:	42b7      	cmp	r7, r6
 80057c2:	d340      	bcc.n	8005846 <__gethex+0x21e>
 80057c4:	9802      	ldr	r0, [sp, #8]
 80057c6:	9b00      	ldr	r3, [sp, #0]
 80057c8:	f840 3b04 	str.w	r3, [r0], #4
 80057cc:	eba0 0009 	sub.w	r0, r0, r9
 80057d0:	1080      	asrs	r0, r0, #2
 80057d2:	0146      	lsls	r6, r0, #5
 80057d4:	6120      	str	r0, [r4, #16]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fb62 	bl	8005ea0 <__hi0bits>
 80057dc:	1a30      	subs	r0, r6, r0
 80057de:	f8d8 6000 	ldr.w	r6, [r8]
 80057e2:	42b0      	cmp	r0, r6
 80057e4:	dd63      	ble.n	80058ae <__gethex+0x286>
 80057e6:	1b87      	subs	r7, r0, r6
 80057e8:	4639      	mov	r1, r7
 80057ea:	4620      	mov	r0, r4
 80057ec:	f000 fefc 	bl	80065e8 <__any_on>
 80057f0:	4682      	mov	sl, r0
 80057f2:	b1a8      	cbz	r0, 8005820 <__gethex+0x1f8>
 80057f4:	1e7b      	subs	r3, r7, #1
 80057f6:	1159      	asrs	r1, r3, #5
 80057f8:	f003 021f 	and.w	r2, r3, #31
 80057fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005800:	f04f 0a01 	mov.w	sl, #1
 8005804:	fa0a f202 	lsl.w	r2, sl, r2
 8005808:	420a      	tst	r2, r1
 800580a:	d009      	beq.n	8005820 <__gethex+0x1f8>
 800580c:	4553      	cmp	r3, sl
 800580e:	dd05      	ble.n	800581c <__gethex+0x1f4>
 8005810:	1eb9      	subs	r1, r7, #2
 8005812:	4620      	mov	r0, r4
 8005814:	f000 fee8 	bl	80065e8 <__any_on>
 8005818:	2800      	cmp	r0, #0
 800581a:	d145      	bne.n	80058a8 <__gethex+0x280>
 800581c:	f04f 0a02 	mov.w	sl, #2
 8005820:	4639      	mov	r1, r7
 8005822:	4620      	mov	r0, r4
 8005824:	f7ff fe98 	bl	8005558 <rshift>
 8005828:	443d      	add	r5, r7
 800582a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800582e:	42ab      	cmp	r3, r5
 8005830:	da4c      	bge.n	80058cc <__gethex+0x2a4>
 8005832:	ee18 0a10 	vmov	r0, s16
 8005836:	4621      	mov	r1, r4
 8005838:	f000 fa7c 	bl	8005d34 <_Bfree>
 800583c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800583e:	2300      	movs	r3, #0
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	27a3      	movs	r7, #163	; 0xa3
 8005844:	e785      	b.n	8005752 <__gethex+0x12a>
 8005846:	1e73      	subs	r3, r6, #1
 8005848:	9a05      	ldr	r2, [sp, #20]
 800584a:	9303      	str	r3, [sp, #12]
 800584c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005850:	4293      	cmp	r3, r2
 8005852:	d019      	beq.n	8005888 <__gethex+0x260>
 8005854:	f1bb 0f20 	cmp.w	fp, #32
 8005858:	d107      	bne.n	800586a <__gethex+0x242>
 800585a:	9b02      	ldr	r3, [sp, #8]
 800585c:	9a00      	ldr	r2, [sp, #0]
 800585e:	f843 2b04 	str.w	r2, [r3], #4
 8005862:	9302      	str	r3, [sp, #8]
 8005864:	2300      	movs	r3, #0
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	469b      	mov	fp, r3
 800586a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800586e:	f7ff fec5 	bl	80055fc <__hexdig_fun>
 8005872:	9b00      	ldr	r3, [sp, #0]
 8005874:	f000 000f 	and.w	r0, r0, #15
 8005878:	fa00 f00b 	lsl.w	r0, r0, fp
 800587c:	4303      	orrs	r3, r0
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	f10b 0b04 	add.w	fp, fp, #4
 8005884:	9b03      	ldr	r3, [sp, #12]
 8005886:	e00d      	b.n	80058a4 <__gethex+0x27c>
 8005888:	9b03      	ldr	r3, [sp, #12]
 800588a:	9a06      	ldr	r2, [sp, #24]
 800588c:	4413      	add	r3, r2
 800588e:	42bb      	cmp	r3, r7
 8005890:	d3e0      	bcc.n	8005854 <__gethex+0x22c>
 8005892:	4618      	mov	r0, r3
 8005894:	9901      	ldr	r1, [sp, #4]
 8005896:	9307      	str	r3, [sp, #28]
 8005898:	4652      	mov	r2, sl
 800589a:	f001 fc5f 	bl	800715c <strncmp>
 800589e:	9b07      	ldr	r3, [sp, #28]
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d1d7      	bne.n	8005854 <__gethex+0x22c>
 80058a4:	461e      	mov	r6, r3
 80058a6:	e78b      	b.n	80057c0 <__gethex+0x198>
 80058a8:	f04f 0a03 	mov.w	sl, #3
 80058ac:	e7b8      	b.n	8005820 <__gethex+0x1f8>
 80058ae:	da0a      	bge.n	80058c6 <__gethex+0x29e>
 80058b0:	1a37      	subs	r7, r6, r0
 80058b2:	4621      	mov	r1, r4
 80058b4:	ee18 0a10 	vmov	r0, s16
 80058b8:	463a      	mov	r2, r7
 80058ba:	f000 fc57 	bl	800616c <__lshift>
 80058be:	1bed      	subs	r5, r5, r7
 80058c0:	4604      	mov	r4, r0
 80058c2:	f100 0914 	add.w	r9, r0, #20
 80058c6:	f04f 0a00 	mov.w	sl, #0
 80058ca:	e7ae      	b.n	800582a <__gethex+0x202>
 80058cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80058d0:	42a8      	cmp	r0, r5
 80058d2:	dd72      	ble.n	80059ba <__gethex+0x392>
 80058d4:	1b45      	subs	r5, r0, r5
 80058d6:	42ae      	cmp	r6, r5
 80058d8:	dc36      	bgt.n	8005948 <__gethex+0x320>
 80058da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d02a      	beq.n	8005938 <__gethex+0x310>
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d02c      	beq.n	8005940 <__gethex+0x318>
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d115      	bne.n	8005916 <__gethex+0x2ee>
 80058ea:	42ae      	cmp	r6, r5
 80058ec:	d113      	bne.n	8005916 <__gethex+0x2ee>
 80058ee:	2e01      	cmp	r6, #1
 80058f0:	d10b      	bne.n	800590a <__gethex+0x2e2>
 80058f2:	9a04      	ldr	r2, [sp, #16]
 80058f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	2301      	movs	r3, #1
 80058fc:	6123      	str	r3, [r4, #16]
 80058fe:	f8c9 3000 	str.w	r3, [r9]
 8005902:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005904:	2762      	movs	r7, #98	; 0x62
 8005906:	601c      	str	r4, [r3, #0]
 8005908:	e723      	b.n	8005752 <__gethex+0x12a>
 800590a:	1e71      	subs	r1, r6, #1
 800590c:	4620      	mov	r0, r4
 800590e:	f000 fe6b 	bl	80065e8 <__any_on>
 8005912:	2800      	cmp	r0, #0
 8005914:	d1ed      	bne.n	80058f2 <__gethex+0x2ca>
 8005916:	ee18 0a10 	vmov	r0, s16
 800591a:	4621      	mov	r1, r4
 800591c:	f000 fa0a 	bl	8005d34 <_Bfree>
 8005920:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005922:	2300      	movs	r3, #0
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	2750      	movs	r7, #80	; 0x50
 8005928:	e713      	b.n	8005752 <__gethex+0x12a>
 800592a:	bf00      	nop
 800592c:	080085f8 	.word	0x080085f8
 8005930:	0800857b 	.word	0x0800857b
 8005934:	0800858c 	.word	0x0800858c
 8005938:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1eb      	bne.n	8005916 <__gethex+0x2ee>
 800593e:	e7d8      	b.n	80058f2 <__gethex+0x2ca>
 8005940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1d5      	bne.n	80058f2 <__gethex+0x2ca>
 8005946:	e7e6      	b.n	8005916 <__gethex+0x2ee>
 8005948:	1e6f      	subs	r7, r5, #1
 800594a:	f1ba 0f00 	cmp.w	sl, #0
 800594e:	d131      	bne.n	80059b4 <__gethex+0x38c>
 8005950:	b127      	cbz	r7, 800595c <__gethex+0x334>
 8005952:	4639      	mov	r1, r7
 8005954:	4620      	mov	r0, r4
 8005956:	f000 fe47 	bl	80065e8 <__any_on>
 800595a:	4682      	mov	sl, r0
 800595c:	117b      	asrs	r3, r7, #5
 800595e:	2101      	movs	r1, #1
 8005960:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005964:	f007 071f 	and.w	r7, r7, #31
 8005968:	fa01 f707 	lsl.w	r7, r1, r7
 800596c:	421f      	tst	r7, r3
 800596e:	4629      	mov	r1, r5
 8005970:	4620      	mov	r0, r4
 8005972:	bf18      	it	ne
 8005974:	f04a 0a02 	orrne.w	sl, sl, #2
 8005978:	1b76      	subs	r6, r6, r5
 800597a:	f7ff fded 	bl	8005558 <rshift>
 800597e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005982:	2702      	movs	r7, #2
 8005984:	f1ba 0f00 	cmp.w	sl, #0
 8005988:	d048      	beq.n	8005a1c <__gethex+0x3f4>
 800598a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d015      	beq.n	80059be <__gethex+0x396>
 8005992:	2b03      	cmp	r3, #3
 8005994:	d017      	beq.n	80059c6 <__gethex+0x39e>
 8005996:	2b01      	cmp	r3, #1
 8005998:	d109      	bne.n	80059ae <__gethex+0x386>
 800599a:	f01a 0f02 	tst.w	sl, #2
 800599e:	d006      	beq.n	80059ae <__gethex+0x386>
 80059a0:	f8d9 0000 	ldr.w	r0, [r9]
 80059a4:	ea4a 0a00 	orr.w	sl, sl, r0
 80059a8:	f01a 0f01 	tst.w	sl, #1
 80059ac:	d10e      	bne.n	80059cc <__gethex+0x3a4>
 80059ae:	f047 0710 	orr.w	r7, r7, #16
 80059b2:	e033      	b.n	8005a1c <__gethex+0x3f4>
 80059b4:	f04f 0a01 	mov.w	sl, #1
 80059b8:	e7d0      	b.n	800595c <__gethex+0x334>
 80059ba:	2701      	movs	r7, #1
 80059bc:	e7e2      	b.n	8005984 <__gethex+0x35c>
 80059be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059c0:	f1c3 0301 	rsb	r3, r3, #1
 80059c4:	9315      	str	r3, [sp, #84]	; 0x54
 80059c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0f0      	beq.n	80059ae <__gethex+0x386>
 80059cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80059d0:	f104 0314 	add.w	r3, r4, #20
 80059d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80059d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80059dc:	f04f 0c00 	mov.w	ip, #0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80059e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80059ea:	d01c      	beq.n	8005a26 <__gethex+0x3fe>
 80059ec:	3201      	adds	r2, #1
 80059ee:	6002      	str	r2, [r0, #0]
 80059f0:	2f02      	cmp	r7, #2
 80059f2:	f104 0314 	add.w	r3, r4, #20
 80059f6:	d13f      	bne.n	8005a78 <__gethex+0x450>
 80059f8:	f8d8 2000 	ldr.w	r2, [r8]
 80059fc:	3a01      	subs	r2, #1
 80059fe:	42b2      	cmp	r2, r6
 8005a00:	d10a      	bne.n	8005a18 <__gethex+0x3f0>
 8005a02:	1171      	asrs	r1, r6, #5
 8005a04:	2201      	movs	r2, #1
 8005a06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005a0a:	f006 061f 	and.w	r6, r6, #31
 8005a0e:	fa02 f606 	lsl.w	r6, r2, r6
 8005a12:	421e      	tst	r6, r3
 8005a14:	bf18      	it	ne
 8005a16:	4617      	movne	r7, r2
 8005a18:	f047 0720 	orr.w	r7, r7, #32
 8005a1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a1e:	601c      	str	r4, [r3, #0]
 8005a20:	9b04      	ldr	r3, [sp, #16]
 8005a22:	601d      	str	r5, [r3, #0]
 8005a24:	e695      	b.n	8005752 <__gethex+0x12a>
 8005a26:	4299      	cmp	r1, r3
 8005a28:	f843 cc04 	str.w	ip, [r3, #-4]
 8005a2c:	d8d8      	bhi.n	80059e0 <__gethex+0x3b8>
 8005a2e:	68a3      	ldr	r3, [r4, #8]
 8005a30:	459b      	cmp	fp, r3
 8005a32:	db19      	blt.n	8005a68 <__gethex+0x440>
 8005a34:	6861      	ldr	r1, [r4, #4]
 8005a36:	ee18 0a10 	vmov	r0, s16
 8005a3a:	3101      	adds	r1, #1
 8005a3c:	f000 f93a 	bl	8005cb4 <_Balloc>
 8005a40:	4681      	mov	r9, r0
 8005a42:	b918      	cbnz	r0, 8005a4c <__gethex+0x424>
 8005a44:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <__gethex+0x488>)
 8005a46:	4602      	mov	r2, r0
 8005a48:	2184      	movs	r1, #132	; 0x84
 8005a4a:	e6a8      	b.n	800579e <__gethex+0x176>
 8005a4c:	6922      	ldr	r2, [r4, #16]
 8005a4e:	3202      	adds	r2, #2
 8005a50:	f104 010c 	add.w	r1, r4, #12
 8005a54:	0092      	lsls	r2, r2, #2
 8005a56:	300c      	adds	r0, #12
 8005a58:	f000 f91e 	bl	8005c98 <memcpy>
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	ee18 0a10 	vmov	r0, s16
 8005a62:	f000 f967 	bl	8005d34 <_Bfree>
 8005a66:	464c      	mov	r4, r9
 8005a68:	6923      	ldr	r3, [r4, #16]
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a70:	6122      	str	r2, [r4, #16]
 8005a72:	2201      	movs	r2, #1
 8005a74:	615a      	str	r2, [r3, #20]
 8005a76:	e7bb      	b.n	80059f0 <__gethex+0x3c8>
 8005a78:	6922      	ldr	r2, [r4, #16]
 8005a7a:	455a      	cmp	r2, fp
 8005a7c:	dd0b      	ble.n	8005a96 <__gethex+0x46e>
 8005a7e:	2101      	movs	r1, #1
 8005a80:	4620      	mov	r0, r4
 8005a82:	f7ff fd69 	bl	8005558 <rshift>
 8005a86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a8a:	3501      	adds	r5, #1
 8005a8c:	42ab      	cmp	r3, r5
 8005a8e:	f6ff aed0 	blt.w	8005832 <__gethex+0x20a>
 8005a92:	2701      	movs	r7, #1
 8005a94:	e7c0      	b.n	8005a18 <__gethex+0x3f0>
 8005a96:	f016 061f 	ands.w	r6, r6, #31
 8005a9a:	d0fa      	beq.n	8005a92 <__gethex+0x46a>
 8005a9c:	449a      	add	sl, r3
 8005a9e:	f1c6 0620 	rsb	r6, r6, #32
 8005aa2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005aa6:	f000 f9fb 	bl	8005ea0 <__hi0bits>
 8005aaa:	42b0      	cmp	r0, r6
 8005aac:	dbe7      	blt.n	8005a7e <__gethex+0x456>
 8005aae:	e7f0      	b.n	8005a92 <__gethex+0x46a>
 8005ab0:	0800857b 	.word	0x0800857b

08005ab4 <L_shift>:
 8005ab4:	f1c2 0208 	rsb	r2, r2, #8
 8005ab8:	0092      	lsls	r2, r2, #2
 8005aba:	b570      	push	{r4, r5, r6, lr}
 8005abc:	f1c2 0620 	rsb	r6, r2, #32
 8005ac0:	6843      	ldr	r3, [r0, #4]
 8005ac2:	6804      	ldr	r4, [r0, #0]
 8005ac4:	fa03 f506 	lsl.w	r5, r3, r6
 8005ac8:	432c      	orrs	r4, r5
 8005aca:	40d3      	lsrs	r3, r2
 8005acc:	6004      	str	r4, [r0, #0]
 8005ace:	f840 3f04 	str.w	r3, [r0, #4]!
 8005ad2:	4288      	cmp	r0, r1
 8005ad4:	d3f4      	bcc.n	8005ac0 <L_shift+0xc>
 8005ad6:	bd70      	pop	{r4, r5, r6, pc}

08005ad8 <__match>:
 8005ad8:	b530      	push	{r4, r5, lr}
 8005ada:	6803      	ldr	r3, [r0, #0]
 8005adc:	3301      	adds	r3, #1
 8005ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ae2:	b914      	cbnz	r4, 8005aea <__match+0x12>
 8005ae4:	6003      	str	r3, [r0, #0]
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	bd30      	pop	{r4, r5, pc}
 8005aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005aee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005af2:	2d19      	cmp	r5, #25
 8005af4:	bf98      	it	ls
 8005af6:	3220      	addls	r2, #32
 8005af8:	42a2      	cmp	r2, r4
 8005afa:	d0f0      	beq.n	8005ade <__match+0x6>
 8005afc:	2000      	movs	r0, #0
 8005afe:	e7f3      	b.n	8005ae8 <__match+0x10>

08005b00 <__hexnan>:
 8005b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b04:	680b      	ldr	r3, [r1, #0]
 8005b06:	6801      	ldr	r1, [r0, #0]
 8005b08:	115e      	asrs	r6, r3, #5
 8005b0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005b0e:	f013 031f 	ands.w	r3, r3, #31
 8005b12:	b087      	sub	sp, #28
 8005b14:	bf18      	it	ne
 8005b16:	3604      	addne	r6, #4
 8005b18:	2500      	movs	r5, #0
 8005b1a:	1f37      	subs	r7, r6, #4
 8005b1c:	4682      	mov	sl, r0
 8005b1e:	4690      	mov	r8, r2
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	f846 5c04 	str.w	r5, [r6, #-4]
 8005b26:	46b9      	mov	r9, r7
 8005b28:	463c      	mov	r4, r7
 8005b2a:	9502      	str	r5, [sp, #8]
 8005b2c:	46ab      	mov	fp, r5
 8005b2e:	784a      	ldrb	r2, [r1, #1]
 8005b30:	1c4b      	adds	r3, r1, #1
 8005b32:	9303      	str	r3, [sp, #12]
 8005b34:	b342      	cbz	r2, 8005b88 <__hexnan+0x88>
 8005b36:	4610      	mov	r0, r2
 8005b38:	9105      	str	r1, [sp, #20]
 8005b3a:	9204      	str	r2, [sp, #16]
 8005b3c:	f7ff fd5e 	bl	80055fc <__hexdig_fun>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d14f      	bne.n	8005be4 <__hexnan+0xe4>
 8005b44:	9a04      	ldr	r2, [sp, #16]
 8005b46:	9905      	ldr	r1, [sp, #20]
 8005b48:	2a20      	cmp	r2, #32
 8005b4a:	d818      	bhi.n	8005b7e <__hexnan+0x7e>
 8005b4c:	9b02      	ldr	r3, [sp, #8]
 8005b4e:	459b      	cmp	fp, r3
 8005b50:	dd13      	ble.n	8005b7a <__hexnan+0x7a>
 8005b52:	454c      	cmp	r4, r9
 8005b54:	d206      	bcs.n	8005b64 <__hexnan+0x64>
 8005b56:	2d07      	cmp	r5, #7
 8005b58:	dc04      	bgt.n	8005b64 <__hexnan+0x64>
 8005b5a:	462a      	mov	r2, r5
 8005b5c:	4649      	mov	r1, r9
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f7ff ffa8 	bl	8005ab4 <L_shift>
 8005b64:	4544      	cmp	r4, r8
 8005b66:	d950      	bls.n	8005c0a <__hexnan+0x10a>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f1a4 0904 	sub.w	r9, r4, #4
 8005b6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005b72:	f8cd b008 	str.w	fp, [sp, #8]
 8005b76:	464c      	mov	r4, r9
 8005b78:	461d      	mov	r5, r3
 8005b7a:	9903      	ldr	r1, [sp, #12]
 8005b7c:	e7d7      	b.n	8005b2e <__hexnan+0x2e>
 8005b7e:	2a29      	cmp	r2, #41	; 0x29
 8005b80:	d156      	bne.n	8005c30 <__hexnan+0x130>
 8005b82:	3102      	adds	r1, #2
 8005b84:	f8ca 1000 	str.w	r1, [sl]
 8005b88:	f1bb 0f00 	cmp.w	fp, #0
 8005b8c:	d050      	beq.n	8005c30 <__hexnan+0x130>
 8005b8e:	454c      	cmp	r4, r9
 8005b90:	d206      	bcs.n	8005ba0 <__hexnan+0xa0>
 8005b92:	2d07      	cmp	r5, #7
 8005b94:	dc04      	bgt.n	8005ba0 <__hexnan+0xa0>
 8005b96:	462a      	mov	r2, r5
 8005b98:	4649      	mov	r1, r9
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f7ff ff8a 	bl	8005ab4 <L_shift>
 8005ba0:	4544      	cmp	r4, r8
 8005ba2:	d934      	bls.n	8005c0e <__hexnan+0x10e>
 8005ba4:	f1a8 0204 	sub.w	r2, r8, #4
 8005ba8:	4623      	mov	r3, r4
 8005baa:	f853 1b04 	ldr.w	r1, [r3], #4
 8005bae:	f842 1f04 	str.w	r1, [r2, #4]!
 8005bb2:	429f      	cmp	r7, r3
 8005bb4:	d2f9      	bcs.n	8005baa <__hexnan+0xaa>
 8005bb6:	1b3b      	subs	r3, r7, r4
 8005bb8:	f023 0303 	bic.w	r3, r3, #3
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	3401      	adds	r4, #1
 8005bc0:	3e03      	subs	r6, #3
 8005bc2:	42b4      	cmp	r4, r6
 8005bc4:	bf88      	it	hi
 8005bc6:	2304      	movhi	r3, #4
 8005bc8:	4443      	add	r3, r8
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f843 2b04 	str.w	r2, [r3], #4
 8005bd0:	429f      	cmp	r7, r3
 8005bd2:	d2fb      	bcs.n	8005bcc <__hexnan+0xcc>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	b91b      	cbnz	r3, 8005be0 <__hexnan+0xe0>
 8005bd8:	4547      	cmp	r7, r8
 8005bda:	d127      	bne.n	8005c2c <__hexnan+0x12c>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	2005      	movs	r0, #5
 8005be2:	e026      	b.n	8005c32 <__hexnan+0x132>
 8005be4:	3501      	adds	r5, #1
 8005be6:	2d08      	cmp	r5, #8
 8005be8:	f10b 0b01 	add.w	fp, fp, #1
 8005bec:	dd06      	ble.n	8005bfc <__hexnan+0xfc>
 8005bee:	4544      	cmp	r4, r8
 8005bf0:	d9c3      	bls.n	8005b7a <__hexnan+0x7a>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f844 3c04 	str.w	r3, [r4, #-4]
 8005bf8:	2501      	movs	r5, #1
 8005bfa:	3c04      	subs	r4, #4
 8005bfc:	6822      	ldr	r2, [r4, #0]
 8005bfe:	f000 000f 	and.w	r0, r0, #15
 8005c02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005c06:	6022      	str	r2, [r4, #0]
 8005c08:	e7b7      	b.n	8005b7a <__hexnan+0x7a>
 8005c0a:	2508      	movs	r5, #8
 8005c0c:	e7b5      	b.n	8005b7a <__hexnan+0x7a>
 8005c0e:	9b01      	ldr	r3, [sp, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0df      	beq.n	8005bd4 <__hexnan+0xd4>
 8005c14:	f04f 32ff 	mov.w	r2, #4294967295
 8005c18:	f1c3 0320 	rsb	r3, r3, #32
 8005c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005c24:	401a      	ands	r2, r3
 8005c26:	f846 2c04 	str.w	r2, [r6, #-4]
 8005c2a:	e7d3      	b.n	8005bd4 <__hexnan+0xd4>
 8005c2c:	3f04      	subs	r7, #4
 8005c2e:	e7d1      	b.n	8005bd4 <__hexnan+0xd4>
 8005c30:	2004      	movs	r0, #4
 8005c32:	b007      	add	sp, #28
 8005c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c38 <_localeconv_r>:
 8005c38:	4800      	ldr	r0, [pc, #0]	; (8005c3c <_localeconv_r+0x4>)
 8005c3a:	4770      	bx	lr
 8005c3c:	20000164 	.word	0x20000164

08005c40 <_lseek_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4d07      	ldr	r5, [pc, #28]	; (8005c60 <_lseek_r+0x20>)
 8005c44:	4604      	mov	r4, r0
 8005c46:	4608      	mov	r0, r1
 8005c48:	4611      	mov	r1, r2
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	602a      	str	r2, [r5, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f7fc f89a 	bl	8001d88 <_lseek>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d102      	bne.n	8005c5e <_lseek_r+0x1e>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	b103      	cbz	r3, 8005c5e <_lseek_r+0x1e>
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	2000024c 	.word	0x2000024c

08005c64 <malloc>:
 8005c64:	4b02      	ldr	r3, [pc, #8]	; (8005c70 <malloc+0xc>)
 8005c66:	4601      	mov	r1, r0
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	f000 bd3d 	b.w	80066e8 <_malloc_r>
 8005c6e:	bf00      	nop
 8005c70:	2000000c 	.word	0x2000000c

08005c74 <__ascii_mbtowc>:
 8005c74:	b082      	sub	sp, #8
 8005c76:	b901      	cbnz	r1, 8005c7a <__ascii_mbtowc+0x6>
 8005c78:	a901      	add	r1, sp, #4
 8005c7a:	b142      	cbz	r2, 8005c8e <__ascii_mbtowc+0x1a>
 8005c7c:	b14b      	cbz	r3, 8005c92 <__ascii_mbtowc+0x1e>
 8005c7e:	7813      	ldrb	r3, [r2, #0]
 8005c80:	600b      	str	r3, [r1, #0]
 8005c82:	7812      	ldrb	r2, [r2, #0]
 8005c84:	1e10      	subs	r0, r2, #0
 8005c86:	bf18      	it	ne
 8005c88:	2001      	movne	r0, #1
 8005c8a:	b002      	add	sp, #8
 8005c8c:	4770      	bx	lr
 8005c8e:	4610      	mov	r0, r2
 8005c90:	e7fb      	b.n	8005c8a <__ascii_mbtowc+0x16>
 8005c92:	f06f 0001 	mvn.w	r0, #1
 8005c96:	e7f8      	b.n	8005c8a <__ascii_mbtowc+0x16>

08005c98 <memcpy>:
 8005c98:	440a      	add	r2, r1
 8005c9a:	4291      	cmp	r1, r2
 8005c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ca0:	d100      	bne.n	8005ca4 <memcpy+0xc>
 8005ca2:	4770      	bx	lr
 8005ca4:	b510      	push	{r4, lr}
 8005ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cae:	4291      	cmp	r1, r2
 8005cb0:	d1f9      	bne.n	8005ca6 <memcpy+0xe>
 8005cb2:	bd10      	pop	{r4, pc}

08005cb4 <_Balloc>:
 8005cb4:	b570      	push	{r4, r5, r6, lr}
 8005cb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005cb8:	4604      	mov	r4, r0
 8005cba:	460d      	mov	r5, r1
 8005cbc:	b976      	cbnz	r6, 8005cdc <_Balloc+0x28>
 8005cbe:	2010      	movs	r0, #16
 8005cc0:	f7ff ffd0 	bl	8005c64 <malloc>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	6260      	str	r0, [r4, #36]	; 0x24
 8005cc8:	b920      	cbnz	r0, 8005cd4 <_Balloc+0x20>
 8005cca:	4b18      	ldr	r3, [pc, #96]	; (8005d2c <_Balloc+0x78>)
 8005ccc:	4818      	ldr	r0, [pc, #96]	; (8005d30 <_Balloc+0x7c>)
 8005cce:	2166      	movs	r1, #102	; 0x66
 8005cd0:	f001 fb1c 	bl	800730c <__assert_func>
 8005cd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cd8:	6006      	str	r6, [r0, #0]
 8005cda:	60c6      	str	r6, [r0, #12]
 8005cdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005cde:	68f3      	ldr	r3, [r6, #12]
 8005ce0:	b183      	cbz	r3, 8005d04 <_Balloc+0x50>
 8005ce2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005cea:	b9b8      	cbnz	r0, 8005d1c <_Balloc+0x68>
 8005cec:	2101      	movs	r1, #1
 8005cee:	fa01 f605 	lsl.w	r6, r1, r5
 8005cf2:	1d72      	adds	r2, r6, #5
 8005cf4:	0092      	lsls	r2, r2, #2
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f000 fc97 	bl	800662a <_calloc_r>
 8005cfc:	b160      	cbz	r0, 8005d18 <_Balloc+0x64>
 8005cfe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d02:	e00e      	b.n	8005d22 <_Balloc+0x6e>
 8005d04:	2221      	movs	r2, #33	; 0x21
 8005d06:	2104      	movs	r1, #4
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 fc8e 	bl	800662a <_calloc_r>
 8005d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d10:	60f0      	str	r0, [r6, #12]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e4      	bne.n	8005ce2 <_Balloc+0x2e>
 8005d18:	2000      	movs	r0, #0
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	6802      	ldr	r2, [r0, #0]
 8005d1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d22:	2300      	movs	r3, #0
 8005d24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d28:	e7f7      	b.n	8005d1a <_Balloc+0x66>
 8005d2a:	bf00      	nop
 8005d2c:	08008505 	.word	0x08008505
 8005d30:	0800860c 	.word	0x0800860c

08005d34 <_Bfree>:
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d38:	4605      	mov	r5, r0
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	b976      	cbnz	r6, 8005d5c <_Bfree+0x28>
 8005d3e:	2010      	movs	r0, #16
 8005d40:	f7ff ff90 	bl	8005c64 <malloc>
 8005d44:	4602      	mov	r2, r0
 8005d46:	6268      	str	r0, [r5, #36]	; 0x24
 8005d48:	b920      	cbnz	r0, 8005d54 <_Bfree+0x20>
 8005d4a:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <_Bfree+0x3c>)
 8005d4c:	4809      	ldr	r0, [pc, #36]	; (8005d74 <_Bfree+0x40>)
 8005d4e:	218a      	movs	r1, #138	; 0x8a
 8005d50:	f001 fadc 	bl	800730c <__assert_func>
 8005d54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d58:	6006      	str	r6, [r0, #0]
 8005d5a:	60c6      	str	r6, [r0, #12]
 8005d5c:	b13c      	cbz	r4, 8005d6e <_Bfree+0x3a>
 8005d5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d60:	6862      	ldr	r2, [r4, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d68:	6021      	str	r1, [r4, #0]
 8005d6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}
 8005d70:	08008505 	.word	0x08008505
 8005d74:	0800860c 	.word	0x0800860c

08005d78 <__multadd>:
 8005d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d7c:	690e      	ldr	r6, [r1, #16]
 8005d7e:	4607      	mov	r7, r0
 8005d80:	4698      	mov	r8, r3
 8005d82:	460c      	mov	r4, r1
 8005d84:	f101 0014 	add.w	r0, r1, #20
 8005d88:	2300      	movs	r3, #0
 8005d8a:	6805      	ldr	r5, [r0, #0]
 8005d8c:	b2a9      	uxth	r1, r5
 8005d8e:	fb02 8101 	mla	r1, r2, r1, r8
 8005d92:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005d96:	0c2d      	lsrs	r5, r5, #16
 8005d98:	fb02 c505 	mla	r5, r2, r5, ip
 8005d9c:	b289      	uxth	r1, r1
 8005d9e:	3301      	adds	r3, #1
 8005da0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005da4:	429e      	cmp	r6, r3
 8005da6:	f840 1b04 	str.w	r1, [r0], #4
 8005daa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005dae:	dcec      	bgt.n	8005d8a <__multadd+0x12>
 8005db0:	f1b8 0f00 	cmp.w	r8, #0
 8005db4:	d022      	beq.n	8005dfc <__multadd+0x84>
 8005db6:	68a3      	ldr	r3, [r4, #8]
 8005db8:	42b3      	cmp	r3, r6
 8005dba:	dc19      	bgt.n	8005df0 <__multadd+0x78>
 8005dbc:	6861      	ldr	r1, [r4, #4]
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	3101      	adds	r1, #1
 8005dc2:	f7ff ff77 	bl	8005cb4 <_Balloc>
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	b928      	cbnz	r0, 8005dd6 <__multadd+0x5e>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	4b0d      	ldr	r3, [pc, #52]	; (8005e04 <__multadd+0x8c>)
 8005dce:	480e      	ldr	r0, [pc, #56]	; (8005e08 <__multadd+0x90>)
 8005dd0:	21b5      	movs	r1, #181	; 0xb5
 8005dd2:	f001 fa9b 	bl	800730c <__assert_func>
 8005dd6:	6922      	ldr	r2, [r4, #16]
 8005dd8:	3202      	adds	r2, #2
 8005dda:	f104 010c 	add.w	r1, r4, #12
 8005dde:	0092      	lsls	r2, r2, #2
 8005de0:	300c      	adds	r0, #12
 8005de2:	f7ff ff59 	bl	8005c98 <memcpy>
 8005de6:	4621      	mov	r1, r4
 8005de8:	4638      	mov	r0, r7
 8005dea:	f7ff ffa3 	bl	8005d34 <_Bfree>
 8005dee:	462c      	mov	r4, r5
 8005df0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005df4:	3601      	adds	r6, #1
 8005df6:	f8c3 8014 	str.w	r8, [r3, #20]
 8005dfa:	6126      	str	r6, [r4, #16]
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e02:	bf00      	nop
 8005e04:	0800857b 	.word	0x0800857b
 8005e08:	0800860c 	.word	0x0800860c

08005e0c <__s2b>:
 8005e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e10:	460c      	mov	r4, r1
 8005e12:	4615      	mov	r5, r2
 8005e14:	461f      	mov	r7, r3
 8005e16:	2209      	movs	r2, #9
 8005e18:	3308      	adds	r3, #8
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e20:	2100      	movs	r1, #0
 8005e22:	2201      	movs	r2, #1
 8005e24:	429a      	cmp	r2, r3
 8005e26:	db09      	blt.n	8005e3c <__s2b+0x30>
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f7ff ff43 	bl	8005cb4 <_Balloc>
 8005e2e:	b940      	cbnz	r0, 8005e42 <__s2b+0x36>
 8005e30:	4602      	mov	r2, r0
 8005e32:	4b19      	ldr	r3, [pc, #100]	; (8005e98 <__s2b+0x8c>)
 8005e34:	4819      	ldr	r0, [pc, #100]	; (8005e9c <__s2b+0x90>)
 8005e36:	21ce      	movs	r1, #206	; 0xce
 8005e38:	f001 fa68 	bl	800730c <__assert_func>
 8005e3c:	0052      	lsls	r2, r2, #1
 8005e3e:	3101      	adds	r1, #1
 8005e40:	e7f0      	b.n	8005e24 <__s2b+0x18>
 8005e42:	9b08      	ldr	r3, [sp, #32]
 8005e44:	6143      	str	r3, [r0, #20]
 8005e46:	2d09      	cmp	r5, #9
 8005e48:	f04f 0301 	mov.w	r3, #1
 8005e4c:	6103      	str	r3, [r0, #16]
 8005e4e:	dd16      	ble.n	8005e7e <__s2b+0x72>
 8005e50:	f104 0909 	add.w	r9, r4, #9
 8005e54:	46c8      	mov	r8, r9
 8005e56:	442c      	add	r4, r5
 8005e58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005e5c:	4601      	mov	r1, r0
 8005e5e:	3b30      	subs	r3, #48	; 0x30
 8005e60:	220a      	movs	r2, #10
 8005e62:	4630      	mov	r0, r6
 8005e64:	f7ff ff88 	bl	8005d78 <__multadd>
 8005e68:	45a0      	cmp	r8, r4
 8005e6a:	d1f5      	bne.n	8005e58 <__s2b+0x4c>
 8005e6c:	f1a5 0408 	sub.w	r4, r5, #8
 8005e70:	444c      	add	r4, r9
 8005e72:	1b2d      	subs	r5, r5, r4
 8005e74:	1963      	adds	r3, r4, r5
 8005e76:	42bb      	cmp	r3, r7
 8005e78:	db04      	blt.n	8005e84 <__s2b+0x78>
 8005e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e7e:	340a      	adds	r4, #10
 8005e80:	2509      	movs	r5, #9
 8005e82:	e7f6      	b.n	8005e72 <__s2b+0x66>
 8005e84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e88:	4601      	mov	r1, r0
 8005e8a:	3b30      	subs	r3, #48	; 0x30
 8005e8c:	220a      	movs	r2, #10
 8005e8e:	4630      	mov	r0, r6
 8005e90:	f7ff ff72 	bl	8005d78 <__multadd>
 8005e94:	e7ee      	b.n	8005e74 <__s2b+0x68>
 8005e96:	bf00      	nop
 8005e98:	0800857b 	.word	0x0800857b
 8005e9c:	0800860c 	.word	0x0800860c

08005ea0 <__hi0bits>:
 8005ea0:	0c03      	lsrs	r3, r0, #16
 8005ea2:	041b      	lsls	r3, r3, #16
 8005ea4:	b9d3      	cbnz	r3, 8005edc <__hi0bits+0x3c>
 8005ea6:	0400      	lsls	r0, r0, #16
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005eae:	bf04      	itt	eq
 8005eb0:	0200      	lsleq	r0, r0, #8
 8005eb2:	3308      	addeq	r3, #8
 8005eb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005eb8:	bf04      	itt	eq
 8005eba:	0100      	lsleq	r0, r0, #4
 8005ebc:	3304      	addeq	r3, #4
 8005ebe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005ec2:	bf04      	itt	eq
 8005ec4:	0080      	lsleq	r0, r0, #2
 8005ec6:	3302      	addeq	r3, #2
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	db05      	blt.n	8005ed8 <__hi0bits+0x38>
 8005ecc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005ed0:	f103 0301 	add.w	r3, r3, #1
 8005ed4:	bf08      	it	eq
 8005ed6:	2320      	moveq	r3, #32
 8005ed8:	4618      	mov	r0, r3
 8005eda:	4770      	bx	lr
 8005edc:	2300      	movs	r3, #0
 8005ede:	e7e4      	b.n	8005eaa <__hi0bits+0xa>

08005ee0 <__lo0bits>:
 8005ee0:	6803      	ldr	r3, [r0, #0]
 8005ee2:	f013 0207 	ands.w	r2, r3, #7
 8005ee6:	4601      	mov	r1, r0
 8005ee8:	d00b      	beq.n	8005f02 <__lo0bits+0x22>
 8005eea:	07da      	lsls	r2, r3, #31
 8005eec:	d424      	bmi.n	8005f38 <__lo0bits+0x58>
 8005eee:	0798      	lsls	r0, r3, #30
 8005ef0:	bf49      	itett	mi
 8005ef2:	085b      	lsrmi	r3, r3, #1
 8005ef4:	089b      	lsrpl	r3, r3, #2
 8005ef6:	2001      	movmi	r0, #1
 8005ef8:	600b      	strmi	r3, [r1, #0]
 8005efa:	bf5c      	itt	pl
 8005efc:	600b      	strpl	r3, [r1, #0]
 8005efe:	2002      	movpl	r0, #2
 8005f00:	4770      	bx	lr
 8005f02:	b298      	uxth	r0, r3
 8005f04:	b9b0      	cbnz	r0, 8005f34 <__lo0bits+0x54>
 8005f06:	0c1b      	lsrs	r3, r3, #16
 8005f08:	2010      	movs	r0, #16
 8005f0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f0e:	bf04      	itt	eq
 8005f10:	0a1b      	lsreq	r3, r3, #8
 8005f12:	3008      	addeq	r0, #8
 8005f14:	071a      	lsls	r2, r3, #28
 8005f16:	bf04      	itt	eq
 8005f18:	091b      	lsreq	r3, r3, #4
 8005f1a:	3004      	addeq	r0, #4
 8005f1c:	079a      	lsls	r2, r3, #30
 8005f1e:	bf04      	itt	eq
 8005f20:	089b      	lsreq	r3, r3, #2
 8005f22:	3002      	addeq	r0, #2
 8005f24:	07da      	lsls	r2, r3, #31
 8005f26:	d403      	bmi.n	8005f30 <__lo0bits+0x50>
 8005f28:	085b      	lsrs	r3, r3, #1
 8005f2a:	f100 0001 	add.w	r0, r0, #1
 8005f2e:	d005      	beq.n	8005f3c <__lo0bits+0x5c>
 8005f30:	600b      	str	r3, [r1, #0]
 8005f32:	4770      	bx	lr
 8005f34:	4610      	mov	r0, r2
 8005f36:	e7e8      	b.n	8005f0a <__lo0bits+0x2a>
 8005f38:	2000      	movs	r0, #0
 8005f3a:	4770      	bx	lr
 8005f3c:	2020      	movs	r0, #32
 8005f3e:	4770      	bx	lr

08005f40 <__i2b>:
 8005f40:	b510      	push	{r4, lr}
 8005f42:	460c      	mov	r4, r1
 8005f44:	2101      	movs	r1, #1
 8005f46:	f7ff feb5 	bl	8005cb4 <_Balloc>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	b928      	cbnz	r0, 8005f5a <__i2b+0x1a>
 8005f4e:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <__i2b+0x24>)
 8005f50:	4805      	ldr	r0, [pc, #20]	; (8005f68 <__i2b+0x28>)
 8005f52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f56:	f001 f9d9 	bl	800730c <__assert_func>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	6144      	str	r4, [r0, #20]
 8005f5e:	6103      	str	r3, [r0, #16]
 8005f60:	bd10      	pop	{r4, pc}
 8005f62:	bf00      	nop
 8005f64:	0800857b 	.word	0x0800857b
 8005f68:	0800860c 	.word	0x0800860c

08005f6c <__multiply>:
 8005f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f70:	4614      	mov	r4, r2
 8005f72:	690a      	ldr	r2, [r1, #16]
 8005f74:	6923      	ldr	r3, [r4, #16]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	bfb8      	it	lt
 8005f7a:	460b      	movlt	r3, r1
 8005f7c:	460d      	mov	r5, r1
 8005f7e:	bfbc      	itt	lt
 8005f80:	4625      	movlt	r5, r4
 8005f82:	461c      	movlt	r4, r3
 8005f84:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005f88:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f8c:	68ab      	ldr	r3, [r5, #8]
 8005f8e:	6869      	ldr	r1, [r5, #4]
 8005f90:	eb0a 0709 	add.w	r7, sl, r9
 8005f94:	42bb      	cmp	r3, r7
 8005f96:	b085      	sub	sp, #20
 8005f98:	bfb8      	it	lt
 8005f9a:	3101      	addlt	r1, #1
 8005f9c:	f7ff fe8a 	bl	8005cb4 <_Balloc>
 8005fa0:	b930      	cbnz	r0, 8005fb0 <__multiply+0x44>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	4b42      	ldr	r3, [pc, #264]	; (80060b0 <__multiply+0x144>)
 8005fa6:	4843      	ldr	r0, [pc, #268]	; (80060b4 <__multiply+0x148>)
 8005fa8:	f240 115d 	movw	r1, #349	; 0x15d
 8005fac:	f001 f9ae 	bl	800730c <__assert_func>
 8005fb0:	f100 0614 	add.w	r6, r0, #20
 8005fb4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005fb8:	4633      	mov	r3, r6
 8005fba:	2200      	movs	r2, #0
 8005fbc:	4543      	cmp	r3, r8
 8005fbe:	d31e      	bcc.n	8005ffe <__multiply+0x92>
 8005fc0:	f105 0c14 	add.w	ip, r5, #20
 8005fc4:	f104 0314 	add.w	r3, r4, #20
 8005fc8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005fcc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005fd0:	9202      	str	r2, [sp, #8]
 8005fd2:	ebac 0205 	sub.w	r2, ip, r5
 8005fd6:	3a15      	subs	r2, #21
 8005fd8:	f022 0203 	bic.w	r2, r2, #3
 8005fdc:	3204      	adds	r2, #4
 8005fde:	f105 0115 	add.w	r1, r5, #21
 8005fe2:	458c      	cmp	ip, r1
 8005fe4:	bf38      	it	cc
 8005fe6:	2204      	movcc	r2, #4
 8005fe8:	9201      	str	r2, [sp, #4]
 8005fea:	9a02      	ldr	r2, [sp, #8]
 8005fec:	9303      	str	r3, [sp, #12]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d808      	bhi.n	8006004 <__multiply+0x98>
 8005ff2:	2f00      	cmp	r7, #0
 8005ff4:	dc55      	bgt.n	80060a2 <__multiply+0x136>
 8005ff6:	6107      	str	r7, [r0, #16]
 8005ff8:	b005      	add	sp, #20
 8005ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffe:	f843 2b04 	str.w	r2, [r3], #4
 8006002:	e7db      	b.n	8005fbc <__multiply+0x50>
 8006004:	f8b3 a000 	ldrh.w	sl, [r3]
 8006008:	f1ba 0f00 	cmp.w	sl, #0
 800600c:	d020      	beq.n	8006050 <__multiply+0xe4>
 800600e:	f105 0e14 	add.w	lr, r5, #20
 8006012:	46b1      	mov	r9, r6
 8006014:	2200      	movs	r2, #0
 8006016:	f85e 4b04 	ldr.w	r4, [lr], #4
 800601a:	f8d9 b000 	ldr.w	fp, [r9]
 800601e:	b2a1      	uxth	r1, r4
 8006020:	fa1f fb8b 	uxth.w	fp, fp
 8006024:	fb0a b101 	mla	r1, sl, r1, fp
 8006028:	4411      	add	r1, r2
 800602a:	f8d9 2000 	ldr.w	r2, [r9]
 800602e:	0c24      	lsrs	r4, r4, #16
 8006030:	0c12      	lsrs	r2, r2, #16
 8006032:	fb0a 2404 	mla	r4, sl, r4, r2
 8006036:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800603a:	b289      	uxth	r1, r1
 800603c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006040:	45f4      	cmp	ip, lr
 8006042:	f849 1b04 	str.w	r1, [r9], #4
 8006046:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800604a:	d8e4      	bhi.n	8006016 <__multiply+0xaa>
 800604c:	9901      	ldr	r1, [sp, #4]
 800604e:	5072      	str	r2, [r6, r1]
 8006050:	9a03      	ldr	r2, [sp, #12]
 8006052:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006056:	3304      	adds	r3, #4
 8006058:	f1b9 0f00 	cmp.w	r9, #0
 800605c:	d01f      	beq.n	800609e <__multiply+0x132>
 800605e:	6834      	ldr	r4, [r6, #0]
 8006060:	f105 0114 	add.w	r1, r5, #20
 8006064:	46b6      	mov	lr, r6
 8006066:	f04f 0a00 	mov.w	sl, #0
 800606a:	880a      	ldrh	r2, [r1, #0]
 800606c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006070:	fb09 b202 	mla	r2, r9, r2, fp
 8006074:	4492      	add	sl, r2
 8006076:	b2a4      	uxth	r4, r4
 8006078:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800607c:	f84e 4b04 	str.w	r4, [lr], #4
 8006080:	f851 4b04 	ldr.w	r4, [r1], #4
 8006084:	f8be 2000 	ldrh.w	r2, [lr]
 8006088:	0c24      	lsrs	r4, r4, #16
 800608a:	fb09 2404 	mla	r4, r9, r4, r2
 800608e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006092:	458c      	cmp	ip, r1
 8006094:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006098:	d8e7      	bhi.n	800606a <__multiply+0xfe>
 800609a:	9a01      	ldr	r2, [sp, #4]
 800609c:	50b4      	str	r4, [r6, r2]
 800609e:	3604      	adds	r6, #4
 80060a0:	e7a3      	b.n	8005fea <__multiply+0x7e>
 80060a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1a5      	bne.n	8005ff6 <__multiply+0x8a>
 80060aa:	3f01      	subs	r7, #1
 80060ac:	e7a1      	b.n	8005ff2 <__multiply+0x86>
 80060ae:	bf00      	nop
 80060b0:	0800857b 	.word	0x0800857b
 80060b4:	0800860c 	.word	0x0800860c

080060b8 <__pow5mult>:
 80060b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060bc:	4615      	mov	r5, r2
 80060be:	f012 0203 	ands.w	r2, r2, #3
 80060c2:	4606      	mov	r6, r0
 80060c4:	460f      	mov	r7, r1
 80060c6:	d007      	beq.n	80060d8 <__pow5mult+0x20>
 80060c8:	4c25      	ldr	r4, [pc, #148]	; (8006160 <__pow5mult+0xa8>)
 80060ca:	3a01      	subs	r2, #1
 80060cc:	2300      	movs	r3, #0
 80060ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060d2:	f7ff fe51 	bl	8005d78 <__multadd>
 80060d6:	4607      	mov	r7, r0
 80060d8:	10ad      	asrs	r5, r5, #2
 80060da:	d03d      	beq.n	8006158 <__pow5mult+0xa0>
 80060dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060de:	b97c      	cbnz	r4, 8006100 <__pow5mult+0x48>
 80060e0:	2010      	movs	r0, #16
 80060e2:	f7ff fdbf 	bl	8005c64 <malloc>
 80060e6:	4602      	mov	r2, r0
 80060e8:	6270      	str	r0, [r6, #36]	; 0x24
 80060ea:	b928      	cbnz	r0, 80060f8 <__pow5mult+0x40>
 80060ec:	4b1d      	ldr	r3, [pc, #116]	; (8006164 <__pow5mult+0xac>)
 80060ee:	481e      	ldr	r0, [pc, #120]	; (8006168 <__pow5mult+0xb0>)
 80060f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80060f4:	f001 f90a 	bl	800730c <__assert_func>
 80060f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060fc:	6004      	str	r4, [r0, #0]
 80060fe:	60c4      	str	r4, [r0, #12]
 8006100:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006104:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006108:	b94c      	cbnz	r4, 800611e <__pow5mult+0x66>
 800610a:	f240 2171 	movw	r1, #625	; 0x271
 800610e:	4630      	mov	r0, r6
 8006110:	f7ff ff16 	bl	8005f40 <__i2b>
 8006114:	2300      	movs	r3, #0
 8006116:	f8c8 0008 	str.w	r0, [r8, #8]
 800611a:	4604      	mov	r4, r0
 800611c:	6003      	str	r3, [r0, #0]
 800611e:	f04f 0900 	mov.w	r9, #0
 8006122:	07eb      	lsls	r3, r5, #31
 8006124:	d50a      	bpl.n	800613c <__pow5mult+0x84>
 8006126:	4639      	mov	r1, r7
 8006128:	4622      	mov	r2, r4
 800612a:	4630      	mov	r0, r6
 800612c:	f7ff ff1e 	bl	8005f6c <__multiply>
 8006130:	4639      	mov	r1, r7
 8006132:	4680      	mov	r8, r0
 8006134:	4630      	mov	r0, r6
 8006136:	f7ff fdfd 	bl	8005d34 <_Bfree>
 800613a:	4647      	mov	r7, r8
 800613c:	106d      	asrs	r5, r5, #1
 800613e:	d00b      	beq.n	8006158 <__pow5mult+0xa0>
 8006140:	6820      	ldr	r0, [r4, #0]
 8006142:	b938      	cbnz	r0, 8006154 <__pow5mult+0x9c>
 8006144:	4622      	mov	r2, r4
 8006146:	4621      	mov	r1, r4
 8006148:	4630      	mov	r0, r6
 800614a:	f7ff ff0f 	bl	8005f6c <__multiply>
 800614e:	6020      	str	r0, [r4, #0]
 8006150:	f8c0 9000 	str.w	r9, [r0]
 8006154:	4604      	mov	r4, r0
 8006156:	e7e4      	b.n	8006122 <__pow5mult+0x6a>
 8006158:	4638      	mov	r0, r7
 800615a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800615e:	bf00      	nop
 8006160:	08008760 	.word	0x08008760
 8006164:	08008505 	.word	0x08008505
 8006168:	0800860c 	.word	0x0800860c

0800616c <__lshift>:
 800616c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	460c      	mov	r4, r1
 8006172:	6849      	ldr	r1, [r1, #4]
 8006174:	6923      	ldr	r3, [r4, #16]
 8006176:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800617a:	68a3      	ldr	r3, [r4, #8]
 800617c:	4607      	mov	r7, r0
 800617e:	4691      	mov	r9, r2
 8006180:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006184:	f108 0601 	add.w	r6, r8, #1
 8006188:	42b3      	cmp	r3, r6
 800618a:	db0b      	blt.n	80061a4 <__lshift+0x38>
 800618c:	4638      	mov	r0, r7
 800618e:	f7ff fd91 	bl	8005cb4 <_Balloc>
 8006192:	4605      	mov	r5, r0
 8006194:	b948      	cbnz	r0, 80061aa <__lshift+0x3e>
 8006196:	4602      	mov	r2, r0
 8006198:	4b28      	ldr	r3, [pc, #160]	; (800623c <__lshift+0xd0>)
 800619a:	4829      	ldr	r0, [pc, #164]	; (8006240 <__lshift+0xd4>)
 800619c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80061a0:	f001 f8b4 	bl	800730c <__assert_func>
 80061a4:	3101      	adds	r1, #1
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	e7ee      	b.n	8006188 <__lshift+0x1c>
 80061aa:	2300      	movs	r3, #0
 80061ac:	f100 0114 	add.w	r1, r0, #20
 80061b0:	f100 0210 	add.w	r2, r0, #16
 80061b4:	4618      	mov	r0, r3
 80061b6:	4553      	cmp	r3, sl
 80061b8:	db33      	blt.n	8006222 <__lshift+0xb6>
 80061ba:	6920      	ldr	r0, [r4, #16]
 80061bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061c0:	f104 0314 	add.w	r3, r4, #20
 80061c4:	f019 091f 	ands.w	r9, r9, #31
 80061c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061d0:	d02b      	beq.n	800622a <__lshift+0xbe>
 80061d2:	f1c9 0e20 	rsb	lr, r9, #32
 80061d6:	468a      	mov	sl, r1
 80061d8:	2200      	movs	r2, #0
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	fa00 f009 	lsl.w	r0, r0, r9
 80061e0:	4302      	orrs	r2, r0
 80061e2:	f84a 2b04 	str.w	r2, [sl], #4
 80061e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ea:	459c      	cmp	ip, r3
 80061ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80061f0:	d8f3      	bhi.n	80061da <__lshift+0x6e>
 80061f2:	ebac 0304 	sub.w	r3, ip, r4
 80061f6:	3b15      	subs	r3, #21
 80061f8:	f023 0303 	bic.w	r3, r3, #3
 80061fc:	3304      	adds	r3, #4
 80061fe:	f104 0015 	add.w	r0, r4, #21
 8006202:	4584      	cmp	ip, r0
 8006204:	bf38      	it	cc
 8006206:	2304      	movcc	r3, #4
 8006208:	50ca      	str	r2, [r1, r3]
 800620a:	b10a      	cbz	r2, 8006210 <__lshift+0xa4>
 800620c:	f108 0602 	add.w	r6, r8, #2
 8006210:	3e01      	subs	r6, #1
 8006212:	4638      	mov	r0, r7
 8006214:	612e      	str	r6, [r5, #16]
 8006216:	4621      	mov	r1, r4
 8006218:	f7ff fd8c 	bl	8005d34 <_Bfree>
 800621c:	4628      	mov	r0, r5
 800621e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006222:	f842 0f04 	str.w	r0, [r2, #4]!
 8006226:	3301      	adds	r3, #1
 8006228:	e7c5      	b.n	80061b6 <__lshift+0x4a>
 800622a:	3904      	subs	r1, #4
 800622c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006230:	f841 2f04 	str.w	r2, [r1, #4]!
 8006234:	459c      	cmp	ip, r3
 8006236:	d8f9      	bhi.n	800622c <__lshift+0xc0>
 8006238:	e7ea      	b.n	8006210 <__lshift+0xa4>
 800623a:	bf00      	nop
 800623c:	0800857b 	.word	0x0800857b
 8006240:	0800860c 	.word	0x0800860c

08006244 <__mcmp>:
 8006244:	b530      	push	{r4, r5, lr}
 8006246:	6902      	ldr	r2, [r0, #16]
 8006248:	690c      	ldr	r4, [r1, #16]
 800624a:	1b12      	subs	r2, r2, r4
 800624c:	d10e      	bne.n	800626c <__mcmp+0x28>
 800624e:	f100 0314 	add.w	r3, r0, #20
 8006252:	3114      	adds	r1, #20
 8006254:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006258:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800625c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006260:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006264:	42a5      	cmp	r5, r4
 8006266:	d003      	beq.n	8006270 <__mcmp+0x2c>
 8006268:	d305      	bcc.n	8006276 <__mcmp+0x32>
 800626a:	2201      	movs	r2, #1
 800626c:	4610      	mov	r0, r2
 800626e:	bd30      	pop	{r4, r5, pc}
 8006270:	4283      	cmp	r3, r0
 8006272:	d3f3      	bcc.n	800625c <__mcmp+0x18>
 8006274:	e7fa      	b.n	800626c <__mcmp+0x28>
 8006276:	f04f 32ff 	mov.w	r2, #4294967295
 800627a:	e7f7      	b.n	800626c <__mcmp+0x28>

0800627c <__mdiff>:
 800627c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	460c      	mov	r4, r1
 8006282:	4606      	mov	r6, r0
 8006284:	4611      	mov	r1, r2
 8006286:	4620      	mov	r0, r4
 8006288:	4617      	mov	r7, r2
 800628a:	f7ff ffdb 	bl	8006244 <__mcmp>
 800628e:	1e05      	subs	r5, r0, #0
 8006290:	d110      	bne.n	80062b4 <__mdiff+0x38>
 8006292:	4629      	mov	r1, r5
 8006294:	4630      	mov	r0, r6
 8006296:	f7ff fd0d 	bl	8005cb4 <_Balloc>
 800629a:	b930      	cbnz	r0, 80062aa <__mdiff+0x2e>
 800629c:	4b39      	ldr	r3, [pc, #228]	; (8006384 <__mdiff+0x108>)
 800629e:	4602      	mov	r2, r0
 80062a0:	f240 2132 	movw	r1, #562	; 0x232
 80062a4:	4838      	ldr	r0, [pc, #224]	; (8006388 <__mdiff+0x10c>)
 80062a6:	f001 f831 	bl	800730c <__assert_func>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b4:	bfa4      	itt	ge
 80062b6:	463b      	movge	r3, r7
 80062b8:	4627      	movge	r7, r4
 80062ba:	4630      	mov	r0, r6
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	bfa6      	itte	ge
 80062c0:	461c      	movge	r4, r3
 80062c2:	2500      	movge	r5, #0
 80062c4:	2501      	movlt	r5, #1
 80062c6:	f7ff fcf5 	bl	8005cb4 <_Balloc>
 80062ca:	b920      	cbnz	r0, 80062d6 <__mdiff+0x5a>
 80062cc:	4b2d      	ldr	r3, [pc, #180]	; (8006384 <__mdiff+0x108>)
 80062ce:	4602      	mov	r2, r0
 80062d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80062d4:	e7e6      	b.n	80062a4 <__mdiff+0x28>
 80062d6:	693e      	ldr	r6, [r7, #16]
 80062d8:	60c5      	str	r5, [r0, #12]
 80062da:	6925      	ldr	r5, [r4, #16]
 80062dc:	f107 0114 	add.w	r1, r7, #20
 80062e0:	f104 0914 	add.w	r9, r4, #20
 80062e4:	f100 0e14 	add.w	lr, r0, #20
 80062e8:	f107 0210 	add.w	r2, r7, #16
 80062ec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80062f0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80062f4:	46f2      	mov	sl, lr
 80062f6:	2700      	movs	r7, #0
 80062f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80062fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006300:	fa1f f883 	uxth.w	r8, r3
 8006304:	fa17 f78b 	uxtah	r7, r7, fp
 8006308:	0c1b      	lsrs	r3, r3, #16
 800630a:	eba7 0808 	sub.w	r8, r7, r8
 800630e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006312:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006316:	fa1f f888 	uxth.w	r8, r8
 800631a:	141f      	asrs	r7, r3, #16
 800631c:	454d      	cmp	r5, r9
 800631e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006322:	f84a 3b04 	str.w	r3, [sl], #4
 8006326:	d8e7      	bhi.n	80062f8 <__mdiff+0x7c>
 8006328:	1b2b      	subs	r3, r5, r4
 800632a:	3b15      	subs	r3, #21
 800632c:	f023 0303 	bic.w	r3, r3, #3
 8006330:	3304      	adds	r3, #4
 8006332:	3415      	adds	r4, #21
 8006334:	42a5      	cmp	r5, r4
 8006336:	bf38      	it	cc
 8006338:	2304      	movcc	r3, #4
 800633a:	4419      	add	r1, r3
 800633c:	4473      	add	r3, lr
 800633e:	469e      	mov	lr, r3
 8006340:	460d      	mov	r5, r1
 8006342:	4565      	cmp	r5, ip
 8006344:	d30e      	bcc.n	8006364 <__mdiff+0xe8>
 8006346:	f10c 0203 	add.w	r2, ip, #3
 800634a:	1a52      	subs	r2, r2, r1
 800634c:	f022 0203 	bic.w	r2, r2, #3
 8006350:	3903      	subs	r1, #3
 8006352:	458c      	cmp	ip, r1
 8006354:	bf38      	it	cc
 8006356:	2200      	movcc	r2, #0
 8006358:	441a      	add	r2, r3
 800635a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800635e:	b17b      	cbz	r3, 8006380 <__mdiff+0x104>
 8006360:	6106      	str	r6, [r0, #16]
 8006362:	e7a5      	b.n	80062b0 <__mdiff+0x34>
 8006364:	f855 8b04 	ldr.w	r8, [r5], #4
 8006368:	fa17 f488 	uxtah	r4, r7, r8
 800636c:	1422      	asrs	r2, r4, #16
 800636e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006372:	b2a4      	uxth	r4, r4
 8006374:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006378:	f84e 4b04 	str.w	r4, [lr], #4
 800637c:	1417      	asrs	r7, r2, #16
 800637e:	e7e0      	b.n	8006342 <__mdiff+0xc6>
 8006380:	3e01      	subs	r6, #1
 8006382:	e7ea      	b.n	800635a <__mdiff+0xde>
 8006384:	0800857b 	.word	0x0800857b
 8006388:	0800860c 	.word	0x0800860c

0800638c <__ulp>:
 800638c:	b082      	sub	sp, #8
 800638e:	ed8d 0b00 	vstr	d0, [sp]
 8006392:	9b01      	ldr	r3, [sp, #4]
 8006394:	4912      	ldr	r1, [pc, #72]	; (80063e0 <__ulp+0x54>)
 8006396:	4019      	ands	r1, r3
 8006398:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800639c:	2900      	cmp	r1, #0
 800639e:	dd05      	ble.n	80063ac <__ulp+0x20>
 80063a0:	2200      	movs	r2, #0
 80063a2:	460b      	mov	r3, r1
 80063a4:	ec43 2b10 	vmov	d0, r2, r3
 80063a8:	b002      	add	sp, #8
 80063aa:	4770      	bx	lr
 80063ac:	4249      	negs	r1, r1
 80063ae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80063b2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80063b6:	f04f 0200 	mov.w	r2, #0
 80063ba:	f04f 0300 	mov.w	r3, #0
 80063be:	da04      	bge.n	80063ca <__ulp+0x3e>
 80063c0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80063c4:	fa41 f300 	asr.w	r3, r1, r0
 80063c8:	e7ec      	b.n	80063a4 <__ulp+0x18>
 80063ca:	f1a0 0114 	sub.w	r1, r0, #20
 80063ce:	291e      	cmp	r1, #30
 80063d0:	bfda      	itte	le
 80063d2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80063d6:	fa20 f101 	lsrle.w	r1, r0, r1
 80063da:	2101      	movgt	r1, #1
 80063dc:	460a      	mov	r2, r1
 80063de:	e7e1      	b.n	80063a4 <__ulp+0x18>
 80063e0:	7ff00000 	.word	0x7ff00000

080063e4 <__b2d>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	6905      	ldr	r5, [r0, #16]
 80063e8:	f100 0714 	add.w	r7, r0, #20
 80063ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80063f0:	1f2e      	subs	r6, r5, #4
 80063f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80063f6:	4620      	mov	r0, r4
 80063f8:	f7ff fd52 	bl	8005ea0 <__hi0bits>
 80063fc:	f1c0 0320 	rsb	r3, r0, #32
 8006400:	280a      	cmp	r0, #10
 8006402:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006480 <__b2d+0x9c>
 8006406:	600b      	str	r3, [r1, #0]
 8006408:	dc14      	bgt.n	8006434 <__b2d+0x50>
 800640a:	f1c0 0e0b 	rsb	lr, r0, #11
 800640e:	fa24 f10e 	lsr.w	r1, r4, lr
 8006412:	42b7      	cmp	r7, r6
 8006414:	ea41 030c 	orr.w	r3, r1, ip
 8006418:	bf34      	ite	cc
 800641a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800641e:	2100      	movcs	r1, #0
 8006420:	3015      	adds	r0, #21
 8006422:	fa04 f000 	lsl.w	r0, r4, r0
 8006426:	fa21 f10e 	lsr.w	r1, r1, lr
 800642a:	ea40 0201 	orr.w	r2, r0, r1
 800642e:	ec43 2b10 	vmov	d0, r2, r3
 8006432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006434:	42b7      	cmp	r7, r6
 8006436:	bf3a      	itte	cc
 8006438:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800643c:	f1a5 0608 	subcc.w	r6, r5, #8
 8006440:	2100      	movcs	r1, #0
 8006442:	380b      	subs	r0, #11
 8006444:	d017      	beq.n	8006476 <__b2d+0x92>
 8006446:	f1c0 0c20 	rsb	ip, r0, #32
 800644a:	fa04 f500 	lsl.w	r5, r4, r0
 800644e:	42be      	cmp	r6, r7
 8006450:	fa21 f40c 	lsr.w	r4, r1, ip
 8006454:	ea45 0504 	orr.w	r5, r5, r4
 8006458:	bf8c      	ite	hi
 800645a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800645e:	2400      	movls	r4, #0
 8006460:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006464:	fa01 f000 	lsl.w	r0, r1, r0
 8006468:	fa24 f40c 	lsr.w	r4, r4, ip
 800646c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006470:	ea40 0204 	orr.w	r2, r0, r4
 8006474:	e7db      	b.n	800642e <__b2d+0x4a>
 8006476:	ea44 030c 	orr.w	r3, r4, ip
 800647a:	460a      	mov	r2, r1
 800647c:	e7d7      	b.n	800642e <__b2d+0x4a>
 800647e:	bf00      	nop
 8006480:	3ff00000 	.word	0x3ff00000

08006484 <__d2b>:
 8006484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006488:	4689      	mov	r9, r1
 800648a:	2101      	movs	r1, #1
 800648c:	ec57 6b10 	vmov	r6, r7, d0
 8006490:	4690      	mov	r8, r2
 8006492:	f7ff fc0f 	bl	8005cb4 <_Balloc>
 8006496:	4604      	mov	r4, r0
 8006498:	b930      	cbnz	r0, 80064a8 <__d2b+0x24>
 800649a:	4602      	mov	r2, r0
 800649c:	4b25      	ldr	r3, [pc, #148]	; (8006534 <__d2b+0xb0>)
 800649e:	4826      	ldr	r0, [pc, #152]	; (8006538 <__d2b+0xb4>)
 80064a0:	f240 310a 	movw	r1, #778	; 0x30a
 80064a4:	f000 ff32 	bl	800730c <__assert_func>
 80064a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80064ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80064b0:	bb35      	cbnz	r5, 8006500 <__d2b+0x7c>
 80064b2:	2e00      	cmp	r6, #0
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	d028      	beq.n	800650a <__d2b+0x86>
 80064b8:	4668      	mov	r0, sp
 80064ba:	9600      	str	r6, [sp, #0]
 80064bc:	f7ff fd10 	bl	8005ee0 <__lo0bits>
 80064c0:	9900      	ldr	r1, [sp, #0]
 80064c2:	b300      	cbz	r0, 8006506 <__d2b+0x82>
 80064c4:	9a01      	ldr	r2, [sp, #4]
 80064c6:	f1c0 0320 	rsb	r3, r0, #32
 80064ca:	fa02 f303 	lsl.w	r3, r2, r3
 80064ce:	430b      	orrs	r3, r1
 80064d0:	40c2      	lsrs	r2, r0
 80064d2:	6163      	str	r3, [r4, #20]
 80064d4:	9201      	str	r2, [sp, #4]
 80064d6:	9b01      	ldr	r3, [sp, #4]
 80064d8:	61a3      	str	r3, [r4, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bf14      	ite	ne
 80064de:	2202      	movne	r2, #2
 80064e0:	2201      	moveq	r2, #1
 80064e2:	6122      	str	r2, [r4, #16]
 80064e4:	b1d5      	cbz	r5, 800651c <__d2b+0x98>
 80064e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80064ea:	4405      	add	r5, r0
 80064ec:	f8c9 5000 	str.w	r5, [r9]
 80064f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80064f4:	f8c8 0000 	str.w	r0, [r8]
 80064f8:	4620      	mov	r0, r4
 80064fa:	b003      	add	sp, #12
 80064fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006504:	e7d5      	b.n	80064b2 <__d2b+0x2e>
 8006506:	6161      	str	r1, [r4, #20]
 8006508:	e7e5      	b.n	80064d6 <__d2b+0x52>
 800650a:	a801      	add	r0, sp, #4
 800650c:	f7ff fce8 	bl	8005ee0 <__lo0bits>
 8006510:	9b01      	ldr	r3, [sp, #4]
 8006512:	6163      	str	r3, [r4, #20]
 8006514:	2201      	movs	r2, #1
 8006516:	6122      	str	r2, [r4, #16]
 8006518:	3020      	adds	r0, #32
 800651a:	e7e3      	b.n	80064e4 <__d2b+0x60>
 800651c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006520:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006524:	f8c9 0000 	str.w	r0, [r9]
 8006528:	6918      	ldr	r0, [r3, #16]
 800652a:	f7ff fcb9 	bl	8005ea0 <__hi0bits>
 800652e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006532:	e7df      	b.n	80064f4 <__d2b+0x70>
 8006534:	0800857b 	.word	0x0800857b
 8006538:	0800860c 	.word	0x0800860c

0800653c <__ratio>:
 800653c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006540:	4688      	mov	r8, r1
 8006542:	4669      	mov	r1, sp
 8006544:	4681      	mov	r9, r0
 8006546:	f7ff ff4d 	bl	80063e4 <__b2d>
 800654a:	a901      	add	r1, sp, #4
 800654c:	4640      	mov	r0, r8
 800654e:	ec55 4b10 	vmov	r4, r5, d0
 8006552:	f7ff ff47 	bl	80063e4 <__b2d>
 8006556:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800655a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800655e:	eba3 0c02 	sub.w	ip, r3, r2
 8006562:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006566:	1a9b      	subs	r3, r3, r2
 8006568:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800656c:	ec51 0b10 	vmov	r0, r1, d0
 8006570:	2b00      	cmp	r3, #0
 8006572:	bfd6      	itet	le
 8006574:	460a      	movle	r2, r1
 8006576:	462a      	movgt	r2, r5
 8006578:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800657c:	468b      	mov	fp, r1
 800657e:	462f      	mov	r7, r5
 8006580:	bfd4      	ite	le
 8006582:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006586:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800658a:	4620      	mov	r0, r4
 800658c:	ee10 2a10 	vmov	r2, s0
 8006590:	465b      	mov	r3, fp
 8006592:	4639      	mov	r1, r7
 8006594:	f7fa f972 	bl	800087c <__aeabi_ddiv>
 8006598:	ec41 0b10 	vmov	d0, r0, r1
 800659c:	b003      	add	sp, #12
 800659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080065a2 <__copybits>:
 80065a2:	3901      	subs	r1, #1
 80065a4:	b570      	push	{r4, r5, r6, lr}
 80065a6:	1149      	asrs	r1, r1, #5
 80065a8:	6914      	ldr	r4, [r2, #16]
 80065aa:	3101      	adds	r1, #1
 80065ac:	f102 0314 	add.w	r3, r2, #20
 80065b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80065b8:	1f05      	subs	r5, r0, #4
 80065ba:	42a3      	cmp	r3, r4
 80065bc:	d30c      	bcc.n	80065d8 <__copybits+0x36>
 80065be:	1aa3      	subs	r3, r4, r2
 80065c0:	3b11      	subs	r3, #17
 80065c2:	f023 0303 	bic.w	r3, r3, #3
 80065c6:	3211      	adds	r2, #17
 80065c8:	42a2      	cmp	r2, r4
 80065ca:	bf88      	it	hi
 80065cc:	2300      	movhi	r3, #0
 80065ce:	4418      	add	r0, r3
 80065d0:	2300      	movs	r3, #0
 80065d2:	4288      	cmp	r0, r1
 80065d4:	d305      	bcc.n	80065e2 <__copybits+0x40>
 80065d6:	bd70      	pop	{r4, r5, r6, pc}
 80065d8:	f853 6b04 	ldr.w	r6, [r3], #4
 80065dc:	f845 6f04 	str.w	r6, [r5, #4]!
 80065e0:	e7eb      	b.n	80065ba <__copybits+0x18>
 80065e2:	f840 3b04 	str.w	r3, [r0], #4
 80065e6:	e7f4      	b.n	80065d2 <__copybits+0x30>

080065e8 <__any_on>:
 80065e8:	f100 0214 	add.w	r2, r0, #20
 80065ec:	6900      	ldr	r0, [r0, #16]
 80065ee:	114b      	asrs	r3, r1, #5
 80065f0:	4298      	cmp	r0, r3
 80065f2:	b510      	push	{r4, lr}
 80065f4:	db11      	blt.n	800661a <__any_on+0x32>
 80065f6:	dd0a      	ble.n	800660e <__any_on+0x26>
 80065f8:	f011 011f 	ands.w	r1, r1, #31
 80065fc:	d007      	beq.n	800660e <__any_on+0x26>
 80065fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006602:	fa24 f001 	lsr.w	r0, r4, r1
 8006606:	fa00 f101 	lsl.w	r1, r0, r1
 800660a:	428c      	cmp	r4, r1
 800660c:	d10b      	bne.n	8006626 <__any_on+0x3e>
 800660e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006612:	4293      	cmp	r3, r2
 8006614:	d803      	bhi.n	800661e <__any_on+0x36>
 8006616:	2000      	movs	r0, #0
 8006618:	bd10      	pop	{r4, pc}
 800661a:	4603      	mov	r3, r0
 800661c:	e7f7      	b.n	800660e <__any_on+0x26>
 800661e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006622:	2900      	cmp	r1, #0
 8006624:	d0f5      	beq.n	8006612 <__any_on+0x2a>
 8006626:	2001      	movs	r0, #1
 8006628:	e7f6      	b.n	8006618 <__any_on+0x30>

0800662a <_calloc_r>:
 800662a:	b513      	push	{r0, r1, r4, lr}
 800662c:	434a      	muls	r2, r1
 800662e:	4611      	mov	r1, r2
 8006630:	9201      	str	r2, [sp, #4]
 8006632:	f000 f859 	bl	80066e8 <_malloc_r>
 8006636:	4604      	mov	r4, r0
 8006638:	b118      	cbz	r0, 8006642 <_calloc_r+0x18>
 800663a:	9a01      	ldr	r2, [sp, #4]
 800663c:	2100      	movs	r1, #0
 800663e:	f7fc fb03 	bl	8002c48 <memset>
 8006642:	4620      	mov	r0, r4
 8006644:	b002      	add	sp, #8
 8006646:	bd10      	pop	{r4, pc}

08006648 <_free_r>:
 8006648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800664a:	2900      	cmp	r1, #0
 800664c:	d048      	beq.n	80066e0 <_free_r+0x98>
 800664e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006652:	9001      	str	r0, [sp, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	f1a1 0404 	sub.w	r4, r1, #4
 800665a:	bfb8      	it	lt
 800665c:	18e4      	addlt	r4, r4, r3
 800665e:	f001 f859 	bl	8007714 <__malloc_lock>
 8006662:	4a20      	ldr	r2, [pc, #128]	; (80066e4 <_free_r+0x9c>)
 8006664:	9801      	ldr	r0, [sp, #4]
 8006666:	6813      	ldr	r3, [r2, #0]
 8006668:	4615      	mov	r5, r2
 800666a:	b933      	cbnz	r3, 800667a <_free_r+0x32>
 800666c:	6063      	str	r3, [r4, #4]
 800666e:	6014      	str	r4, [r2, #0]
 8006670:	b003      	add	sp, #12
 8006672:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006676:	f001 b853 	b.w	8007720 <__malloc_unlock>
 800667a:	42a3      	cmp	r3, r4
 800667c:	d90b      	bls.n	8006696 <_free_r+0x4e>
 800667e:	6821      	ldr	r1, [r4, #0]
 8006680:	1862      	adds	r2, r4, r1
 8006682:	4293      	cmp	r3, r2
 8006684:	bf04      	itt	eq
 8006686:	681a      	ldreq	r2, [r3, #0]
 8006688:	685b      	ldreq	r3, [r3, #4]
 800668a:	6063      	str	r3, [r4, #4]
 800668c:	bf04      	itt	eq
 800668e:	1852      	addeq	r2, r2, r1
 8006690:	6022      	streq	r2, [r4, #0]
 8006692:	602c      	str	r4, [r5, #0]
 8006694:	e7ec      	b.n	8006670 <_free_r+0x28>
 8006696:	461a      	mov	r2, r3
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	b10b      	cbz	r3, 80066a0 <_free_r+0x58>
 800669c:	42a3      	cmp	r3, r4
 800669e:	d9fa      	bls.n	8006696 <_free_r+0x4e>
 80066a0:	6811      	ldr	r1, [r2, #0]
 80066a2:	1855      	adds	r5, r2, r1
 80066a4:	42a5      	cmp	r5, r4
 80066a6:	d10b      	bne.n	80066c0 <_free_r+0x78>
 80066a8:	6824      	ldr	r4, [r4, #0]
 80066aa:	4421      	add	r1, r4
 80066ac:	1854      	adds	r4, r2, r1
 80066ae:	42a3      	cmp	r3, r4
 80066b0:	6011      	str	r1, [r2, #0]
 80066b2:	d1dd      	bne.n	8006670 <_free_r+0x28>
 80066b4:	681c      	ldr	r4, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	6053      	str	r3, [r2, #4]
 80066ba:	4421      	add	r1, r4
 80066bc:	6011      	str	r1, [r2, #0]
 80066be:	e7d7      	b.n	8006670 <_free_r+0x28>
 80066c0:	d902      	bls.n	80066c8 <_free_r+0x80>
 80066c2:	230c      	movs	r3, #12
 80066c4:	6003      	str	r3, [r0, #0]
 80066c6:	e7d3      	b.n	8006670 <_free_r+0x28>
 80066c8:	6825      	ldr	r5, [r4, #0]
 80066ca:	1961      	adds	r1, r4, r5
 80066cc:	428b      	cmp	r3, r1
 80066ce:	bf04      	itt	eq
 80066d0:	6819      	ldreq	r1, [r3, #0]
 80066d2:	685b      	ldreq	r3, [r3, #4]
 80066d4:	6063      	str	r3, [r4, #4]
 80066d6:	bf04      	itt	eq
 80066d8:	1949      	addeq	r1, r1, r5
 80066da:	6021      	streq	r1, [r4, #0]
 80066dc:	6054      	str	r4, [r2, #4]
 80066de:	e7c7      	b.n	8006670 <_free_r+0x28>
 80066e0:	b003      	add	sp, #12
 80066e2:	bd30      	pop	{r4, r5, pc}
 80066e4:	20000204 	.word	0x20000204

080066e8 <_malloc_r>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	1ccd      	adds	r5, r1, #3
 80066ec:	f025 0503 	bic.w	r5, r5, #3
 80066f0:	3508      	adds	r5, #8
 80066f2:	2d0c      	cmp	r5, #12
 80066f4:	bf38      	it	cc
 80066f6:	250c      	movcc	r5, #12
 80066f8:	2d00      	cmp	r5, #0
 80066fa:	4606      	mov	r6, r0
 80066fc:	db01      	blt.n	8006702 <_malloc_r+0x1a>
 80066fe:	42a9      	cmp	r1, r5
 8006700:	d903      	bls.n	800670a <_malloc_r+0x22>
 8006702:	230c      	movs	r3, #12
 8006704:	6033      	str	r3, [r6, #0]
 8006706:	2000      	movs	r0, #0
 8006708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800670a:	f001 f803 	bl	8007714 <__malloc_lock>
 800670e:	4921      	ldr	r1, [pc, #132]	; (8006794 <_malloc_r+0xac>)
 8006710:	680a      	ldr	r2, [r1, #0]
 8006712:	4614      	mov	r4, r2
 8006714:	b99c      	cbnz	r4, 800673e <_malloc_r+0x56>
 8006716:	4f20      	ldr	r7, [pc, #128]	; (8006798 <_malloc_r+0xb0>)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	b923      	cbnz	r3, 8006726 <_malloc_r+0x3e>
 800671c:	4621      	mov	r1, r4
 800671e:	4630      	mov	r0, r6
 8006720:	f000 fcd2 	bl	80070c8 <_sbrk_r>
 8006724:	6038      	str	r0, [r7, #0]
 8006726:	4629      	mov	r1, r5
 8006728:	4630      	mov	r0, r6
 800672a:	f000 fccd 	bl	80070c8 <_sbrk_r>
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	d123      	bne.n	800677a <_malloc_r+0x92>
 8006732:	230c      	movs	r3, #12
 8006734:	6033      	str	r3, [r6, #0]
 8006736:	4630      	mov	r0, r6
 8006738:	f000 fff2 	bl	8007720 <__malloc_unlock>
 800673c:	e7e3      	b.n	8006706 <_malloc_r+0x1e>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	1b5b      	subs	r3, r3, r5
 8006742:	d417      	bmi.n	8006774 <_malloc_r+0x8c>
 8006744:	2b0b      	cmp	r3, #11
 8006746:	d903      	bls.n	8006750 <_malloc_r+0x68>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	441c      	add	r4, r3
 800674c:	6025      	str	r5, [r4, #0]
 800674e:	e004      	b.n	800675a <_malloc_r+0x72>
 8006750:	6863      	ldr	r3, [r4, #4]
 8006752:	42a2      	cmp	r2, r4
 8006754:	bf0c      	ite	eq
 8006756:	600b      	streq	r3, [r1, #0]
 8006758:	6053      	strne	r3, [r2, #4]
 800675a:	4630      	mov	r0, r6
 800675c:	f000 ffe0 	bl	8007720 <__malloc_unlock>
 8006760:	f104 000b 	add.w	r0, r4, #11
 8006764:	1d23      	adds	r3, r4, #4
 8006766:	f020 0007 	bic.w	r0, r0, #7
 800676a:	1ac2      	subs	r2, r0, r3
 800676c:	d0cc      	beq.n	8006708 <_malloc_r+0x20>
 800676e:	1a1b      	subs	r3, r3, r0
 8006770:	50a3      	str	r3, [r4, r2]
 8006772:	e7c9      	b.n	8006708 <_malloc_r+0x20>
 8006774:	4622      	mov	r2, r4
 8006776:	6864      	ldr	r4, [r4, #4]
 8006778:	e7cc      	b.n	8006714 <_malloc_r+0x2c>
 800677a:	1cc4      	adds	r4, r0, #3
 800677c:	f024 0403 	bic.w	r4, r4, #3
 8006780:	42a0      	cmp	r0, r4
 8006782:	d0e3      	beq.n	800674c <_malloc_r+0x64>
 8006784:	1a21      	subs	r1, r4, r0
 8006786:	4630      	mov	r0, r6
 8006788:	f000 fc9e 	bl	80070c8 <_sbrk_r>
 800678c:	3001      	adds	r0, #1
 800678e:	d1dd      	bne.n	800674c <_malloc_r+0x64>
 8006790:	e7cf      	b.n	8006732 <_malloc_r+0x4a>
 8006792:	bf00      	nop
 8006794:	20000204 	.word	0x20000204
 8006798:	20000208 	.word	0x20000208

0800679c <__ssputs_r>:
 800679c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a0:	688e      	ldr	r6, [r1, #8]
 80067a2:	429e      	cmp	r6, r3
 80067a4:	4682      	mov	sl, r0
 80067a6:	460c      	mov	r4, r1
 80067a8:	4690      	mov	r8, r2
 80067aa:	461f      	mov	r7, r3
 80067ac:	d838      	bhi.n	8006820 <__ssputs_r+0x84>
 80067ae:	898a      	ldrh	r2, [r1, #12]
 80067b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067b4:	d032      	beq.n	800681c <__ssputs_r+0x80>
 80067b6:	6825      	ldr	r5, [r4, #0]
 80067b8:	6909      	ldr	r1, [r1, #16]
 80067ba:	eba5 0901 	sub.w	r9, r5, r1
 80067be:	6965      	ldr	r5, [r4, #20]
 80067c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067c8:	3301      	adds	r3, #1
 80067ca:	444b      	add	r3, r9
 80067cc:	106d      	asrs	r5, r5, #1
 80067ce:	429d      	cmp	r5, r3
 80067d0:	bf38      	it	cc
 80067d2:	461d      	movcc	r5, r3
 80067d4:	0553      	lsls	r3, r2, #21
 80067d6:	d531      	bpl.n	800683c <__ssputs_r+0xa0>
 80067d8:	4629      	mov	r1, r5
 80067da:	f7ff ff85 	bl	80066e8 <_malloc_r>
 80067de:	4606      	mov	r6, r0
 80067e0:	b950      	cbnz	r0, 80067f8 <__ssputs_r+0x5c>
 80067e2:	230c      	movs	r3, #12
 80067e4:	f8ca 3000 	str.w	r3, [sl]
 80067e8:	89a3      	ldrh	r3, [r4, #12]
 80067ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ee:	81a3      	strh	r3, [r4, #12]
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f8:	6921      	ldr	r1, [r4, #16]
 80067fa:	464a      	mov	r2, r9
 80067fc:	f7ff fa4c 	bl	8005c98 <memcpy>
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	6126      	str	r6, [r4, #16]
 800680e:	6165      	str	r5, [r4, #20]
 8006810:	444e      	add	r6, r9
 8006812:	eba5 0509 	sub.w	r5, r5, r9
 8006816:	6026      	str	r6, [r4, #0]
 8006818:	60a5      	str	r5, [r4, #8]
 800681a:	463e      	mov	r6, r7
 800681c:	42be      	cmp	r6, r7
 800681e:	d900      	bls.n	8006822 <__ssputs_r+0x86>
 8006820:	463e      	mov	r6, r7
 8006822:	4632      	mov	r2, r6
 8006824:	6820      	ldr	r0, [r4, #0]
 8006826:	4641      	mov	r1, r8
 8006828:	f000 ff5a 	bl	80076e0 <memmove>
 800682c:	68a3      	ldr	r3, [r4, #8]
 800682e:	6822      	ldr	r2, [r4, #0]
 8006830:	1b9b      	subs	r3, r3, r6
 8006832:	4432      	add	r2, r6
 8006834:	60a3      	str	r3, [r4, #8]
 8006836:	6022      	str	r2, [r4, #0]
 8006838:	2000      	movs	r0, #0
 800683a:	e7db      	b.n	80067f4 <__ssputs_r+0x58>
 800683c:	462a      	mov	r2, r5
 800683e:	f000 ff75 	bl	800772c <_realloc_r>
 8006842:	4606      	mov	r6, r0
 8006844:	2800      	cmp	r0, #0
 8006846:	d1e1      	bne.n	800680c <__ssputs_r+0x70>
 8006848:	6921      	ldr	r1, [r4, #16]
 800684a:	4650      	mov	r0, sl
 800684c:	f7ff fefc 	bl	8006648 <_free_r>
 8006850:	e7c7      	b.n	80067e2 <__ssputs_r+0x46>
	...

08006854 <_svfiprintf_r>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	4698      	mov	r8, r3
 800685a:	898b      	ldrh	r3, [r1, #12]
 800685c:	061b      	lsls	r3, r3, #24
 800685e:	b09d      	sub	sp, #116	; 0x74
 8006860:	4607      	mov	r7, r0
 8006862:	460d      	mov	r5, r1
 8006864:	4614      	mov	r4, r2
 8006866:	d50e      	bpl.n	8006886 <_svfiprintf_r+0x32>
 8006868:	690b      	ldr	r3, [r1, #16]
 800686a:	b963      	cbnz	r3, 8006886 <_svfiprintf_r+0x32>
 800686c:	2140      	movs	r1, #64	; 0x40
 800686e:	f7ff ff3b 	bl	80066e8 <_malloc_r>
 8006872:	6028      	str	r0, [r5, #0]
 8006874:	6128      	str	r0, [r5, #16]
 8006876:	b920      	cbnz	r0, 8006882 <_svfiprintf_r+0x2e>
 8006878:	230c      	movs	r3, #12
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e0d1      	b.n	8006a26 <_svfiprintf_r+0x1d2>
 8006882:	2340      	movs	r3, #64	; 0x40
 8006884:	616b      	str	r3, [r5, #20]
 8006886:	2300      	movs	r3, #0
 8006888:	9309      	str	r3, [sp, #36]	; 0x24
 800688a:	2320      	movs	r3, #32
 800688c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006890:	f8cd 800c 	str.w	r8, [sp, #12]
 8006894:	2330      	movs	r3, #48	; 0x30
 8006896:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a40 <_svfiprintf_r+0x1ec>
 800689a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800689e:	f04f 0901 	mov.w	r9, #1
 80068a2:	4623      	mov	r3, r4
 80068a4:	469a      	mov	sl, r3
 80068a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068aa:	b10a      	cbz	r2, 80068b0 <_svfiprintf_r+0x5c>
 80068ac:	2a25      	cmp	r2, #37	; 0x25
 80068ae:	d1f9      	bne.n	80068a4 <_svfiprintf_r+0x50>
 80068b0:	ebba 0b04 	subs.w	fp, sl, r4
 80068b4:	d00b      	beq.n	80068ce <_svfiprintf_r+0x7a>
 80068b6:	465b      	mov	r3, fp
 80068b8:	4622      	mov	r2, r4
 80068ba:	4629      	mov	r1, r5
 80068bc:	4638      	mov	r0, r7
 80068be:	f7ff ff6d 	bl	800679c <__ssputs_r>
 80068c2:	3001      	adds	r0, #1
 80068c4:	f000 80aa 	beq.w	8006a1c <_svfiprintf_r+0x1c8>
 80068c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ca:	445a      	add	r2, fp
 80068cc:	9209      	str	r2, [sp, #36]	; 0x24
 80068ce:	f89a 3000 	ldrb.w	r3, [sl]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 80a2 	beq.w	8006a1c <_svfiprintf_r+0x1c8>
 80068d8:	2300      	movs	r3, #0
 80068da:	f04f 32ff 	mov.w	r2, #4294967295
 80068de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068e2:	f10a 0a01 	add.w	sl, sl, #1
 80068e6:	9304      	str	r3, [sp, #16]
 80068e8:	9307      	str	r3, [sp, #28]
 80068ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068ee:	931a      	str	r3, [sp, #104]	; 0x68
 80068f0:	4654      	mov	r4, sl
 80068f2:	2205      	movs	r2, #5
 80068f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f8:	4851      	ldr	r0, [pc, #324]	; (8006a40 <_svfiprintf_r+0x1ec>)
 80068fa:	f7f9 fc89 	bl	8000210 <memchr>
 80068fe:	9a04      	ldr	r2, [sp, #16]
 8006900:	b9d8      	cbnz	r0, 800693a <_svfiprintf_r+0xe6>
 8006902:	06d0      	lsls	r0, r2, #27
 8006904:	bf44      	itt	mi
 8006906:	2320      	movmi	r3, #32
 8006908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800690c:	0711      	lsls	r1, r2, #28
 800690e:	bf44      	itt	mi
 8006910:	232b      	movmi	r3, #43	; 0x2b
 8006912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006916:	f89a 3000 	ldrb.w	r3, [sl]
 800691a:	2b2a      	cmp	r3, #42	; 0x2a
 800691c:	d015      	beq.n	800694a <_svfiprintf_r+0xf6>
 800691e:	9a07      	ldr	r2, [sp, #28]
 8006920:	4654      	mov	r4, sl
 8006922:	2000      	movs	r0, #0
 8006924:	f04f 0c0a 	mov.w	ip, #10
 8006928:	4621      	mov	r1, r4
 800692a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800692e:	3b30      	subs	r3, #48	; 0x30
 8006930:	2b09      	cmp	r3, #9
 8006932:	d94e      	bls.n	80069d2 <_svfiprintf_r+0x17e>
 8006934:	b1b0      	cbz	r0, 8006964 <_svfiprintf_r+0x110>
 8006936:	9207      	str	r2, [sp, #28]
 8006938:	e014      	b.n	8006964 <_svfiprintf_r+0x110>
 800693a:	eba0 0308 	sub.w	r3, r0, r8
 800693e:	fa09 f303 	lsl.w	r3, r9, r3
 8006942:	4313      	orrs	r3, r2
 8006944:	9304      	str	r3, [sp, #16]
 8006946:	46a2      	mov	sl, r4
 8006948:	e7d2      	b.n	80068f0 <_svfiprintf_r+0x9c>
 800694a:	9b03      	ldr	r3, [sp, #12]
 800694c:	1d19      	adds	r1, r3, #4
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	9103      	str	r1, [sp, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	bfbb      	ittet	lt
 8006956:	425b      	neglt	r3, r3
 8006958:	f042 0202 	orrlt.w	r2, r2, #2
 800695c:	9307      	strge	r3, [sp, #28]
 800695e:	9307      	strlt	r3, [sp, #28]
 8006960:	bfb8      	it	lt
 8006962:	9204      	strlt	r2, [sp, #16]
 8006964:	7823      	ldrb	r3, [r4, #0]
 8006966:	2b2e      	cmp	r3, #46	; 0x2e
 8006968:	d10c      	bne.n	8006984 <_svfiprintf_r+0x130>
 800696a:	7863      	ldrb	r3, [r4, #1]
 800696c:	2b2a      	cmp	r3, #42	; 0x2a
 800696e:	d135      	bne.n	80069dc <_svfiprintf_r+0x188>
 8006970:	9b03      	ldr	r3, [sp, #12]
 8006972:	1d1a      	adds	r2, r3, #4
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	9203      	str	r2, [sp, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	bfb8      	it	lt
 800697c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006980:	3402      	adds	r4, #2
 8006982:	9305      	str	r3, [sp, #20]
 8006984:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a50 <_svfiprintf_r+0x1fc>
 8006988:	7821      	ldrb	r1, [r4, #0]
 800698a:	2203      	movs	r2, #3
 800698c:	4650      	mov	r0, sl
 800698e:	f7f9 fc3f 	bl	8000210 <memchr>
 8006992:	b140      	cbz	r0, 80069a6 <_svfiprintf_r+0x152>
 8006994:	2340      	movs	r3, #64	; 0x40
 8006996:	eba0 000a 	sub.w	r0, r0, sl
 800699a:	fa03 f000 	lsl.w	r0, r3, r0
 800699e:	9b04      	ldr	r3, [sp, #16]
 80069a0:	4303      	orrs	r3, r0
 80069a2:	3401      	adds	r4, #1
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069aa:	4826      	ldr	r0, [pc, #152]	; (8006a44 <_svfiprintf_r+0x1f0>)
 80069ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069b0:	2206      	movs	r2, #6
 80069b2:	f7f9 fc2d 	bl	8000210 <memchr>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	d038      	beq.n	8006a2c <_svfiprintf_r+0x1d8>
 80069ba:	4b23      	ldr	r3, [pc, #140]	; (8006a48 <_svfiprintf_r+0x1f4>)
 80069bc:	bb1b      	cbnz	r3, 8006a06 <_svfiprintf_r+0x1b2>
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	3307      	adds	r3, #7
 80069c2:	f023 0307 	bic.w	r3, r3, #7
 80069c6:	3308      	adds	r3, #8
 80069c8:	9303      	str	r3, [sp, #12]
 80069ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069cc:	4433      	add	r3, r6
 80069ce:	9309      	str	r3, [sp, #36]	; 0x24
 80069d0:	e767      	b.n	80068a2 <_svfiprintf_r+0x4e>
 80069d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80069d6:	460c      	mov	r4, r1
 80069d8:	2001      	movs	r0, #1
 80069da:	e7a5      	b.n	8006928 <_svfiprintf_r+0xd4>
 80069dc:	2300      	movs	r3, #0
 80069de:	3401      	adds	r4, #1
 80069e0:	9305      	str	r3, [sp, #20]
 80069e2:	4619      	mov	r1, r3
 80069e4:	f04f 0c0a 	mov.w	ip, #10
 80069e8:	4620      	mov	r0, r4
 80069ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ee:	3a30      	subs	r2, #48	; 0x30
 80069f0:	2a09      	cmp	r2, #9
 80069f2:	d903      	bls.n	80069fc <_svfiprintf_r+0x1a8>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d0c5      	beq.n	8006984 <_svfiprintf_r+0x130>
 80069f8:	9105      	str	r1, [sp, #20]
 80069fa:	e7c3      	b.n	8006984 <_svfiprintf_r+0x130>
 80069fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a00:	4604      	mov	r4, r0
 8006a02:	2301      	movs	r3, #1
 8006a04:	e7f0      	b.n	80069e8 <_svfiprintf_r+0x194>
 8006a06:	ab03      	add	r3, sp, #12
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	462a      	mov	r2, r5
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <_svfiprintf_r+0x1f8>)
 8006a0e:	a904      	add	r1, sp, #16
 8006a10:	4638      	mov	r0, r7
 8006a12:	f7fc f9c1 	bl	8002d98 <_printf_float>
 8006a16:	1c42      	adds	r2, r0, #1
 8006a18:	4606      	mov	r6, r0
 8006a1a:	d1d6      	bne.n	80069ca <_svfiprintf_r+0x176>
 8006a1c:	89ab      	ldrh	r3, [r5, #12]
 8006a1e:	065b      	lsls	r3, r3, #25
 8006a20:	f53f af2c 	bmi.w	800687c <_svfiprintf_r+0x28>
 8006a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a26:	b01d      	add	sp, #116	; 0x74
 8006a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a2c:	ab03      	add	r3, sp, #12
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	462a      	mov	r2, r5
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <_svfiprintf_r+0x1f8>)
 8006a34:	a904      	add	r1, sp, #16
 8006a36:	4638      	mov	r0, r7
 8006a38:	f7fc fc52 	bl	80032e0 <_printf_i>
 8006a3c:	e7eb      	b.n	8006a16 <_svfiprintf_r+0x1c2>
 8006a3e:	bf00      	nop
 8006a40:	0800876c 	.word	0x0800876c
 8006a44:	08008776 	.word	0x08008776
 8006a48:	08002d99 	.word	0x08002d99
 8006a4c:	0800679d 	.word	0x0800679d
 8006a50:	08008772 	.word	0x08008772

08006a54 <_sungetc_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	1c4b      	adds	r3, r1, #1
 8006a58:	4614      	mov	r4, r2
 8006a5a:	d103      	bne.n	8006a64 <_sungetc_r+0x10>
 8006a5c:	f04f 35ff 	mov.w	r5, #4294967295
 8006a60:	4628      	mov	r0, r5
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	8993      	ldrh	r3, [r2, #12]
 8006a66:	f023 0320 	bic.w	r3, r3, #32
 8006a6a:	8193      	strh	r3, [r2, #12]
 8006a6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a6e:	6852      	ldr	r2, [r2, #4]
 8006a70:	b2cd      	uxtb	r5, r1
 8006a72:	b18b      	cbz	r3, 8006a98 <_sungetc_r+0x44>
 8006a74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006a76:	4293      	cmp	r3, r2
 8006a78:	dd08      	ble.n	8006a8c <_sungetc_r+0x38>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	1e5a      	subs	r2, r3, #1
 8006a7e:	6022      	str	r2, [r4, #0]
 8006a80:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006a84:	6863      	ldr	r3, [r4, #4]
 8006a86:	3301      	adds	r3, #1
 8006a88:	6063      	str	r3, [r4, #4]
 8006a8a:	e7e9      	b.n	8006a60 <_sungetc_r+0xc>
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	f000 fbf5 	bl	800727c <__submore>
 8006a92:	2800      	cmp	r0, #0
 8006a94:	d0f1      	beq.n	8006a7a <_sungetc_r+0x26>
 8006a96:	e7e1      	b.n	8006a5c <_sungetc_r+0x8>
 8006a98:	6921      	ldr	r1, [r4, #16]
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	b151      	cbz	r1, 8006ab4 <_sungetc_r+0x60>
 8006a9e:	4299      	cmp	r1, r3
 8006aa0:	d208      	bcs.n	8006ab4 <_sungetc_r+0x60>
 8006aa2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006aa6:	42a9      	cmp	r1, r5
 8006aa8:	d104      	bne.n	8006ab4 <_sungetc_r+0x60>
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	3201      	adds	r2, #1
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	6062      	str	r2, [r4, #4]
 8006ab2:	e7d5      	b.n	8006a60 <_sungetc_r+0xc>
 8006ab4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006abc:	6363      	str	r3, [r4, #52]	; 0x34
 8006abe:	2303      	movs	r3, #3
 8006ac0:	63a3      	str	r3, [r4, #56]	; 0x38
 8006ac2:	4623      	mov	r3, r4
 8006ac4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	2301      	movs	r3, #1
 8006acc:	e7dc      	b.n	8006a88 <_sungetc_r+0x34>

08006ace <__ssrefill_r>:
 8006ace:	b510      	push	{r4, lr}
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006ad4:	b169      	cbz	r1, 8006af2 <__ssrefill_r+0x24>
 8006ad6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ada:	4299      	cmp	r1, r3
 8006adc:	d001      	beq.n	8006ae2 <__ssrefill_r+0x14>
 8006ade:	f7ff fdb3 	bl	8006648 <_free_r>
 8006ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ae4:	6063      	str	r3, [r4, #4]
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	6360      	str	r0, [r4, #52]	; 0x34
 8006aea:	b113      	cbz	r3, 8006af2 <__ssrefill_r+0x24>
 8006aec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	bd10      	pop	{r4, pc}
 8006af2:	6923      	ldr	r3, [r4, #16]
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	2300      	movs	r3, #0
 8006af8:	6063      	str	r3, [r4, #4]
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	f043 0320 	orr.w	r3, r3, #32
 8006b00:	81a3      	strh	r3, [r4, #12]
 8006b02:	f04f 30ff 	mov.w	r0, #4294967295
 8006b06:	e7f3      	b.n	8006af0 <__ssrefill_r+0x22>

08006b08 <__ssvfiscanf_r>:
 8006b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8006b12:	2100      	movs	r1, #0
 8006b14:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006b18:	49b2      	ldr	r1, [pc, #712]	; (8006de4 <__ssvfiscanf_r+0x2dc>)
 8006b1a:	91a0      	str	r1, [sp, #640]	; 0x280
 8006b1c:	f10d 0804 	add.w	r8, sp, #4
 8006b20:	49b1      	ldr	r1, [pc, #708]	; (8006de8 <__ssvfiscanf_r+0x2e0>)
 8006b22:	4fb2      	ldr	r7, [pc, #712]	; (8006dec <__ssvfiscanf_r+0x2e4>)
 8006b24:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8006df0 <__ssvfiscanf_r+0x2e8>
 8006b28:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	91a1      	str	r1, [sp, #644]	; 0x284
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	f892 a000 	ldrb.w	sl, [r2]
 8006b36:	f1ba 0f00 	cmp.w	sl, #0
 8006b3a:	f000 8151 	beq.w	8006de0 <__ssvfiscanf_r+0x2d8>
 8006b3e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8006b42:	f013 0308 	ands.w	r3, r3, #8
 8006b46:	f102 0501 	add.w	r5, r2, #1
 8006b4a:	d019      	beq.n	8006b80 <__ssvfiscanf_r+0x78>
 8006b4c:	6863      	ldr	r3, [r4, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	dd0f      	ble.n	8006b72 <__ssvfiscanf_r+0x6a>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	781a      	ldrb	r2, [r3, #0]
 8006b56:	5cba      	ldrb	r2, [r7, r2]
 8006b58:	0712      	lsls	r2, r2, #28
 8006b5a:	d401      	bmi.n	8006b60 <__ssvfiscanf_r+0x58>
 8006b5c:	462a      	mov	r2, r5
 8006b5e:	e7e8      	b.n	8006b32 <__ssvfiscanf_r+0x2a>
 8006b60:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006b62:	3201      	adds	r2, #1
 8006b64:	9245      	str	r2, [sp, #276]	; 0x114
 8006b66:	6862      	ldr	r2, [r4, #4]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	3a01      	subs	r2, #1
 8006b6c:	6062      	str	r2, [r4, #4]
 8006b6e:	6023      	str	r3, [r4, #0]
 8006b70:	e7ec      	b.n	8006b4c <__ssvfiscanf_r+0x44>
 8006b72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006b74:	4621      	mov	r1, r4
 8006b76:	4630      	mov	r0, r6
 8006b78:	4798      	blx	r3
 8006b7a:	2800      	cmp	r0, #0
 8006b7c:	d0e9      	beq.n	8006b52 <__ssvfiscanf_r+0x4a>
 8006b7e:	e7ed      	b.n	8006b5c <__ssvfiscanf_r+0x54>
 8006b80:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8006b84:	f040 8083 	bne.w	8006c8e <__ssvfiscanf_r+0x186>
 8006b88:	9341      	str	r3, [sp, #260]	; 0x104
 8006b8a:	9343      	str	r3, [sp, #268]	; 0x10c
 8006b8c:	7853      	ldrb	r3, [r2, #1]
 8006b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b90:	bf02      	ittt	eq
 8006b92:	2310      	moveq	r3, #16
 8006b94:	1c95      	addeq	r5, r2, #2
 8006b96:	9341      	streq	r3, [sp, #260]	; 0x104
 8006b98:	220a      	movs	r2, #10
 8006b9a:	46ab      	mov	fp, r5
 8006b9c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8006ba0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006ba4:	2b09      	cmp	r3, #9
 8006ba6:	d91d      	bls.n	8006be4 <__ssvfiscanf_r+0xdc>
 8006ba8:	4891      	ldr	r0, [pc, #580]	; (8006df0 <__ssvfiscanf_r+0x2e8>)
 8006baa:	2203      	movs	r2, #3
 8006bac:	f7f9 fb30 	bl	8000210 <memchr>
 8006bb0:	b140      	cbz	r0, 8006bc4 <__ssvfiscanf_r+0xbc>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	eba0 0009 	sub.w	r0, r0, r9
 8006bb8:	fa03 f000 	lsl.w	r0, r3, r0
 8006bbc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006bbe:	4318      	orrs	r0, r3
 8006bc0:	9041      	str	r0, [sp, #260]	; 0x104
 8006bc2:	465d      	mov	r5, fp
 8006bc4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006bc8:	2b78      	cmp	r3, #120	; 0x78
 8006bca:	d806      	bhi.n	8006bda <__ssvfiscanf_r+0xd2>
 8006bcc:	2b57      	cmp	r3, #87	; 0x57
 8006bce:	d810      	bhi.n	8006bf2 <__ssvfiscanf_r+0xea>
 8006bd0:	2b25      	cmp	r3, #37	; 0x25
 8006bd2:	d05c      	beq.n	8006c8e <__ssvfiscanf_r+0x186>
 8006bd4:	d856      	bhi.n	8006c84 <__ssvfiscanf_r+0x17c>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d074      	beq.n	8006cc4 <__ssvfiscanf_r+0x1bc>
 8006bda:	2303      	movs	r3, #3
 8006bdc:	9347      	str	r3, [sp, #284]	; 0x11c
 8006bde:	230a      	movs	r3, #10
 8006be0:	9342      	str	r3, [sp, #264]	; 0x108
 8006be2:	e081      	b.n	8006ce8 <__ssvfiscanf_r+0x1e0>
 8006be4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006be6:	fb02 1303 	mla	r3, r2, r3, r1
 8006bea:	3b30      	subs	r3, #48	; 0x30
 8006bec:	9343      	str	r3, [sp, #268]	; 0x10c
 8006bee:	465d      	mov	r5, fp
 8006bf0:	e7d3      	b.n	8006b9a <__ssvfiscanf_r+0x92>
 8006bf2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006bf6:	2a20      	cmp	r2, #32
 8006bf8:	d8ef      	bhi.n	8006bda <__ssvfiscanf_r+0xd2>
 8006bfa:	a101      	add	r1, pc, #4	; (adr r1, 8006c00 <__ssvfiscanf_r+0xf8>)
 8006bfc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c00:	08006cd3 	.word	0x08006cd3
 8006c04:	08006bdb 	.word	0x08006bdb
 8006c08:	08006bdb 	.word	0x08006bdb
 8006c0c:	08006d31 	.word	0x08006d31
 8006c10:	08006bdb 	.word	0x08006bdb
 8006c14:	08006bdb 	.word	0x08006bdb
 8006c18:	08006bdb 	.word	0x08006bdb
 8006c1c:	08006bdb 	.word	0x08006bdb
 8006c20:	08006bdb 	.word	0x08006bdb
 8006c24:	08006bdb 	.word	0x08006bdb
 8006c28:	08006bdb 	.word	0x08006bdb
 8006c2c:	08006d47 	.word	0x08006d47
 8006c30:	08006d1d 	.word	0x08006d1d
 8006c34:	08006c8b 	.word	0x08006c8b
 8006c38:	08006c8b 	.word	0x08006c8b
 8006c3c:	08006c8b 	.word	0x08006c8b
 8006c40:	08006bdb 	.word	0x08006bdb
 8006c44:	08006d21 	.word	0x08006d21
 8006c48:	08006bdb 	.word	0x08006bdb
 8006c4c:	08006bdb 	.word	0x08006bdb
 8006c50:	08006bdb 	.word	0x08006bdb
 8006c54:	08006bdb 	.word	0x08006bdb
 8006c58:	08006d57 	.word	0x08006d57
 8006c5c:	08006d29 	.word	0x08006d29
 8006c60:	08006ccb 	.word	0x08006ccb
 8006c64:	08006bdb 	.word	0x08006bdb
 8006c68:	08006bdb 	.word	0x08006bdb
 8006c6c:	08006d53 	.word	0x08006d53
 8006c70:	08006bdb 	.word	0x08006bdb
 8006c74:	08006d1d 	.word	0x08006d1d
 8006c78:	08006bdb 	.word	0x08006bdb
 8006c7c:	08006bdb 	.word	0x08006bdb
 8006c80:	08006cd3 	.word	0x08006cd3
 8006c84:	3b45      	subs	r3, #69	; 0x45
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d8a7      	bhi.n	8006bda <__ssvfiscanf_r+0xd2>
 8006c8a:	2305      	movs	r3, #5
 8006c8c:	e02b      	b.n	8006ce6 <__ssvfiscanf_r+0x1de>
 8006c8e:	6863      	ldr	r3, [r4, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dd0d      	ble.n	8006cb0 <__ssvfiscanf_r+0x1a8>
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	781a      	ldrb	r2, [r3, #0]
 8006c98:	4552      	cmp	r2, sl
 8006c9a:	f040 80a1 	bne.w	8006de0 <__ssvfiscanf_r+0x2d8>
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	6862      	ldr	r2, [r4, #4]
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006ca6:	3a01      	subs	r2, #1
 8006ca8:	3301      	adds	r3, #1
 8006caa:	6062      	str	r2, [r4, #4]
 8006cac:	9345      	str	r3, [sp, #276]	; 0x114
 8006cae:	e755      	b.n	8006b5c <__ssvfiscanf_r+0x54>
 8006cb0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	4798      	blx	r3
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d0eb      	beq.n	8006c94 <__ssvfiscanf_r+0x18c>
 8006cbc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	f040 8084 	bne.w	8006dcc <__ssvfiscanf_r+0x2c4>
 8006cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc8:	e086      	b.n	8006dd8 <__ssvfiscanf_r+0x2d0>
 8006cca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006ccc:	f042 0220 	orr.w	r2, r2, #32
 8006cd0:	9241      	str	r2, [sp, #260]	; 0x104
 8006cd2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd8:	9241      	str	r2, [sp, #260]	; 0x104
 8006cda:	2210      	movs	r2, #16
 8006cdc:	2b6f      	cmp	r3, #111	; 0x6f
 8006cde:	9242      	str	r2, [sp, #264]	; 0x108
 8006ce0:	bf34      	ite	cc
 8006ce2:	2303      	movcc	r3, #3
 8006ce4:	2304      	movcs	r3, #4
 8006ce6:	9347      	str	r3, [sp, #284]	; 0x11c
 8006ce8:	6863      	ldr	r3, [r4, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	dd41      	ble.n	8006d72 <__ssvfiscanf_r+0x26a>
 8006cee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006cf0:	0659      	lsls	r1, r3, #25
 8006cf2:	d404      	bmi.n	8006cfe <__ssvfiscanf_r+0x1f6>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	781a      	ldrb	r2, [r3, #0]
 8006cf8:	5cba      	ldrb	r2, [r7, r2]
 8006cfa:	0712      	lsls	r2, r2, #28
 8006cfc:	d440      	bmi.n	8006d80 <__ssvfiscanf_r+0x278>
 8006cfe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	dc4f      	bgt.n	8006da4 <__ssvfiscanf_r+0x29c>
 8006d04:	466b      	mov	r3, sp
 8006d06:	4622      	mov	r2, r4
 8006d08:	a941      	add	r1, sp, #260	; 0x104
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f000 f874 	bl	8006df8 <_scanf_chars>
 8006d10:	2801      	cmp	r0, #1
 8006d12:	d065      	beq.n	8006de0 <__ssvfiscanf_r+0x2d8>
 8006d14:	2802      	cmp	r0, #2
 8006d16:	f47f af21 	bne.w	8006b5c <__ssvfiscanf_r+0x54>
 8006d1a:	e7cf      	b.n	8006cbc <__ssvfiscanf_r+0x1b4>
 8006d1c:	220a      	movs	r2, #10
 8006d1e:	e7dd      	b.n	8006cdc <__ssvfiscanf_r+0x1d4>
 8006d20:	2300      	movs	r3, #0
 8006d22:	9342      	str	r3, [sp, #264]	; 0x108
 8006d24:	2303      	movs	r3, #3
 8006d26:	e7de      	b.n	8006ce6 <__ssvfiscanf_r+0x1de>
 8006d28:	2308      	movs	r3, #8
 8006d2a:	9342      	str	r3, [sp, #264]	; 0x108
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	e7da      	b.n	8006ce6 <__ssvfiscanf_r+0x1de>
 8006d30:	4629      	mov	r1, r5
 8006d32:	4640      	mov	r0, r8
 8006d34:	f000 f9d8 	bl	80070e8 <__sccl>
 8006d38:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d3e:	9341      	str	r3, [sp, #260]	; 0x104
 8006d40:	4605      	mov	r5, r0
 8006d42:	2301      	movs	r3, #1
 8006d44:	e7cf      	b.n	8006ce6 <__ssvfiscanf_r+0x1de>
 8006d46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d4c:	9341      	str	r3, [sp, #260]	; 0x104
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e7c9      	b.n	8006ce6 <__ssvfiscanf_r+0x1de>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e7c7      	b.n	8006ce6 <__ssvfiscanf_r+0x1de>
 8006d56:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006d58:	06c3      	lsls	r3, r0, #27
 8006d5a:	f53f aeff 	bmi.w	8006b5c <__ssvfiscanf_r+0x54>
 8006d5e:	9b00      	ldr	r3, [sp, #0]
 8006d60:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006d62:	1d19      	adds	r1, r3, #4
 8006d64:	9100      	str	r1, [sp, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	07c0      	lsls	r0, r0, #31
 8006d6a:	bf4c      	ite	mi
 8006d6c:	801a      	strhmi	r2, [r3, #0]
 8006d6e:	601a      	strpl	r2, [r3, #0]
 8006d70:	e6f4      	b.n	8006b5c <__ssvfiscanf_r+0x54>
 8006d72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006d74:	4621      	mov	r1, r4
 8006d76:	4630      	mov	r0, r6
 8006d78:	4798      	blx	r3
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d0b7      	beq.n	8006cee <__ssvfiscanf_r+0x1e6>
 8006d7e:	e79d      	b.n	8006cbc <__ssvfiscanf_r+0x1b4>
 8006d80:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006d82:	3201      	adds	r2, #1
 8006d84:	9245      	str	r2, [sp, #276]	; 0x114
 8006d86:	6862      	ldr	r2, [r4, #4]
 8006d88:	3a01      	subs	r2, #1
 8006d8a:	2a00      	cmp	r2, #0
 8006d8c:	6062      	str	r2, [r4, #4]
 8006d8e:	dd02      	ble.n	8006d96 <__ssvfiscanf_r+0x28e>
 8006d90:	3301      	adds	r3, #1
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	e7ae      	b.n	8006cf4 <__ssvfiscanf_r+0x1ec>
 8006d96:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006d98:	4621      	mov	r1, r4
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	4798      	blx	r3
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d0a8      	beq.n	8006cf4 <__ssvfiscanf_r+0x1ec>
 8006da2:	e78b      	b.n	8006cbc <__ssvfiscanf_r+0x1b4>
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	dc06      	bgt.n	8006db6 <__ssvfiscanf_r+0x2ae>
 8006da8:	466b      	mov	r3, sp
 8006daa:	4622      	mov	r2, r4
 8006dac:	a941      	add	r1, sp, #260	; 0x104
 8006dae:	4630      	mov	r0, r6
 8006db0:	f000 f87a 	bl	8006ea8 <_scanf_i>
 8006db4:	e7ac      	b.n	8006d10 <__ssvfiscanf_r+0x208>
 8006db6:	4b0f      	ldr	r3, [pc, #60]	; (8006df4 <__ssvfiscanf_r+0x2ec>)
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f43f aecf 	beq.w	8006b5c <__ssvfiscanf_r+0x54>
 8006dbe:	466b      	mov	r3, sp
 8006dc0:	4622      	mov	r2, r4
 8006dc2:	a941      	add	r1, sp, #260	; 0x104
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f7fc fbb1 	bl	800352c <_scanf_float>
 8006dca:	e7a1      	b.n	8006d10 <__ssvfiscanf_r+0x208>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006dd2:	bf18      	it	ne
 8006dd4:	f04f 30ff 	movne.w	r0, #4294967295
 8006dd8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8006ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006de2:	e7f9      	b.n	8006dd8 <__ssvfiscanf_r+0x2d0>
 8006de4:	08006a55 	.word	0x08006a55
 8006de8:	08006acf 	.word	0x08006acf
 8006dec:	08008369 	.word	0x08008369
 8006df0:	08008772 	.word	0x08008772
 8006df4:	0800352d 	.word	0x0800352d

08006df8 <_scanf_chars>:
 8006df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dfc:	4615      	mov	r5, r2
 8006dfe:	688a      	ldr	r2, [r1, #8]
 8006e00:	4680      	mov	r8, r0
 8006e02:	460c      	mov	r4, r1
 8006e04:	b932      	cbnz	r2, 8006e14 <_scanf_chars+0x1c>
 8006e06:	698a      	ldr	r2, [r1, #24]
 8006e08:	2a00      	cmp	r2, #0
 8006e0a:	bf0c      	ite	eq
 8006e0c:	2201      	moveq	r2, #1
 8006e0e:	f04f 32ff 	movne.w	r2, #4294967295
 8006e12:	608a      	str	r2, [r1, #8]
 8006e14:	6822      	ldr	r2, [r4, #0]
 8006e16:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8006ea4 <_scanf_chars+0xac>
 8006e1a:	06d1      	lsls	r1, r2, #27
 8006e1c:	bf5f      	itttt	pl
 8006e1e:	681a      	ldrpl	r2, [r3, #0]
 8006e20:	1d11      	addpl	r1, r2, #4
 8006e22:	6019      	strpl	r1, [r3, #0]
 8006e24:	6816      	ldrpl	r6, [r2, #0]
 8006e26:	2700      	movs	r7, #0
 8006e28:	69a0      	ldr	r0, [r4, #24]
 8006e2a:	b188      	cbz	r0, 8006e50 <_scanf_chars+0x58>
 8006e2c:	2801      	cmp	r0, #1
 8006e2e:	d107      	bne.n	8006e40 <_scanf_chars+0x48>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	781a      	ldrb	r2, [r3, #0]
 8006e34:	6963      	ldr	r3, [r4, #20]
 8006e36:	5c9b      	ldrb	r3, [r3, r2]
 8006e38:	b953      	cbnz	r3, 8006e50 <_scanf_chars+0x58>
 8006e3a:	bb27      	cbnz	r7, 8006e86 <_scanf_chars+0x8e>
 8006e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e40:	2802      	cmp	r0, #2
 8006e42:	d120      	bne.n	8006e86 <_scanf_chars+0x8e>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006e4c:	071b      	lsls	r3, r3, #28
 8006e4e:	d41a      	bmi.n	8006e86 <_scanf_chars+0x8e>
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	06da      	lsls	r2, r3, #27
 8006e54:	bf5e      	ittt	pl
 8006e56:	682b      	ldrpl	r3, [r5, #0]
 8006e58:	781b      	ldrbpl	r3, [r3, #0]
 8006e5a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006e5e:	682a      	ldr	r2, [r5, #0]
 8006e60:	686b      	ldr	r3, [r5, #4]
 8006e62:	3201      	adds	r2, #1
 8006e64:	602a      	str	r2, [r5, #0]
 8006e66:	68a2      	ldr	r2, [r4, #8]
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	3a01      	subs	r2, #1
 8006e6c:	606b      	str	r3, [r5, #4]
 8006e6e:	3701      	adds	r7, #1
 8006e70:	60a2      	str	r2, [r4, #8]
 8006e72:	b142      	cbz	r2, 8006e86 <_scanf_chars+0x8e>
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dcd7      	bgt.n	8006e28 <_scanf_chars+0x30>
 8006e78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	4640      	mov	r0, r8
 8006e80:	4798      	blx	r3
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d0d0      	beq.n	8006e28 <_scanf_chars+0x30>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	f013 0310 	ands.w	r3, r3, #16
 8006e8c:	d105      	bne.n	8006e9a <_scanf_chars+0xa2>
 8006e8e:	68e2      	ldr	r2, [r4, #12]
 8006e90:	3201      	adds	r2, #1
 8006e92:	60e2      	str	r2, [r4, #12]
 8006e94:	69a2      	ldr	r2, [r4, #24]
 8006e96:	b102      	cbz	r2, 8006e9a <_scanf_chars+0xa2>
 8006e98:	7033      	strb	r3, [r6, #0]
 8006e9a:	6923      	ldr	r3, [r4, #16]
 8006e9c:	441f      	add	r7, r3
 8006e9e:	6127      	str	r7, [r4, #16]
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	e7cb      	b.n	8006e3c <_scanf_chars+0x44>
 8006ea4:	08008369 	.word	0x08008369

08006ea8 <_scanf_i>:
 8006ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eac:	4698      	mov	r8, r3
 8006eae:	4b74      	ldr	r3, [pc, #464]	; (8007080 <_scanf_i+0x1d8>)
 8006eb0:	460c      	mov	r4, r1
 8006eb2:	4682      	mov	sl, r0
 8006eb4:	4616      	mov	r6, r2
 8006eb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	ab03      	add	r3, sp, #12
 8006ebe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006ec2:	4b70      	ldr	r3, [pc, #448]	; (8007084 <_scanf_i+0x1dc>)
 8006ec4:	69a1      	ldr	r1, [r4, #24]
 8006ec6:	4a70      	ldr	r2, [pc, #448]	; (8007088 <_scanf_i+0x1e0>)
 8006ec8:	2903      	cmp	r1, #3
 8006eca:	bf18      	it	ne
 8006ecc:	461a      	movne	r2, r3
 8006ece:	68a3      	ldr	r3, [r4, #8]
 8006ed0:	9201      	str	r2, [sp, #4]
 8006ed2:	1e5a      	subs	r2, r3, #1
 8006ed4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006ed8:	bf88      	it	hi
 8006eda:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006ede:	4627      	mov	r7, r4
 8006ee0:	bf82      	ittt	hi
 8006ee2:	eb03 0905 	addhi.w	r9, r3, r5
 8006ee6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006eea:	60a3      	strhi	r3, [r4, #8]
 8006eec:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006ef0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006ef4:	bf98      	it	ls
 8006ef6:	f04f 0900 	movls.w	r9, #0
 8006efa:	6023      	str	r3, [r4, #0]
 8006efc:	463d      	mov	r5, r7
 8006efe:	f04f 0b00 	mov.w	fp, #0
 8006f02:	6831      	ldr	r1, [r6, #0]
 8006f04:	ab03      	add	r3, sp, #12
 8006f06:	7809      	ldrb	r1, [r1, #0]
 8006f08:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	f7f9 f97f 	bl	8000210 <memchr>
 8006f12:	b328      	cbz	r0, 8006f60 <_scanf_i+0xb8>
 8006f14:	f1bb 0f01 	cmp.w	fp, #1
 8006f18:	d159      	bne.n	8006fce <_scanf_i+0x126>
 8006f1a:	6862      	ldr	r2, [r4, #4]
 8006f1c:	b92a      	cbnz	r2, 8006f2a <_scanf_i+0x82>
 8006f1e:	6822      	ldr	r2, [r4, #0]
 8006f20:	2308      	movs	r3, #8
 8006f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f26:	6063      	str	r3, [r4, #4]
 8006f28:	6022      	str	r2, [r4, #0]
 8006f2a:	6822      	ldr	r2, [r4, #0]
 8006f2c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006f30:	6022      	str	r2, [r4, #0]
 8006f32:	68a2      	ldr	r2, [r4, #8]
 8006f34:	1e51      	subs	r1, r2, #1
 8006f36:	60a1      	str	r1, [r4, #8]
 8006f38:	b192      	cbz	r2, 8006f60 <_scanf_i+0xb8>
 8006f3a:	6832      	ldr	r2, [r6, #0]
 8006f3c:	1c51      	adds	r1, r2, #1
 8006f3e:	6031      	str	r1, [r6, #0]
 8006f40:	7812      	ldrb	r2, [r2, #0]
 8006f42:	f805 2b01 	strb.w	r2, [r5], #1
 8006f46:	6872      	ldr	r2, [r6, #4]
 8006f48:	3a01      	subs	r2, #1
 8006f4a:	2a00      	cmp	r2, #0
 8006f4c:	6072      	str	r2, [r6, #4]
 8006f4e:	dc07      	bgt.n	8006f60 <_scanf_i+0xb8>
 8006f50:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006f54:	4631      	mov	r1, r6
 8006f56:	4650      	mov	r0, sl
 8006f58:	4790      	blx	r2
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	f040 8085 	bne.w	800706a <_scanf_i+0x1c2>
 8006f60:	f10b 0b01 	add.w	fp, fp, #1
 8006f64:	f1bb 0f03 	cmp.w	fp, #3
 8006f68:	d1cb      	bne.n	8006f02 <_scanf_i+0x5a>
 8006f6a:	6863      	ldr	r3, [r4, #4]
 8006f6c:	b90b      	cbnz	r3, 8006f72 <_scanf_i+0xca>
 8006f6e:	230a      	movs	r3, #10
 8006f70:	6063      	str	r3, [r4, #4]
 8006f72:	6863      	ldr	r3, [r4, #4]
 8006f74:	4945      	ldr	r1, [pc, #276]	; (800708c <_scanf_i+0x1e4>)
 8006f76:	6960      	ldr	r0, [r4, #20]
 8006f78:	1ac9      	subs	r1, r1, r3
 8006f7a:	f000 f8b5 	bl	80070e8 <__sccl>
 8006f7e:	f04f 0b00 	mov.w	fp, #0
 8006f82:	68a3      	ldr	r3, [r4, #8]
 8006f84:	6822      	ldr	r2, [r4, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d03d      	beq.n	8007006 <_scanf_i+0x15e>
 8006f8a:	6831      	ldr	r1, [r6, #0]
 8006f8c:	6960      	ldr	r0, [r4, #20]
 8006f8e:	f891 c000 	ldrb.w	ip, [r1]
 8006f92:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d035      	beq.n	8007006 <_scanf_i+0x15e>
 8006f9a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006f9e:	d124      	bne.n	8006fea <_scanf_i+0x142>
 8006fa0:	0510      	lsls	r0, r2, #20
 8006fa2:	d522      	bpl.n	8006fea <_scanf_i+0x142>
 8006fa4:	f10b 0b01 	add.w	fp, fp, #1
 8006fa8:	f1b9 0f00 	cmp.w	r9, #0
 8006fac:	d003      	beq.n	8006fb6 <_scanf_i+0x10e>
 8006fae:	3301      	adds	r3, #1
 8006fb0:	f109 39ff 	add.w	r9, r9, #4294967295
 8006fb4:	60a3      	str	r3, [r4, #8]
 8006fb6:	6873      	ldr	r3, [r6, #4]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	6073      	str	r3, [r6, #4]
 8006fbe:	dd1b      	ble.n	8006ff8 <_scanf_i+0x150>
 8006fc0:	6833      	ldr	r3, [r6, #0]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	6033      	str	r3, [r6, #0]
 8006fc6:	68a3      	ldr	r3, [r4, #8]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	60a3      	str	r3, [r4, #8]
 8006fcc:	e7d9      	b.n	8006f82 <_scanf_i+0xda>
 8006fce:	f1bb 0f02 	cmp.w	fp, #2
 8006fd2:	d1ae      	bne.n	8006f32 <_scanf_i+0x8a>
 8006fd4:	6822      	ldr	r2, [r4, #0]
 8006fd6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006fda:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006fde:	d1bf      	bne.n	8006f60 <_scanf_i+0xb8>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	6063      	str	r3, [r4, #4]
 8006fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fe8:	e7a2      	b.n	8006f30 <_scanf_i+0x88>
 8006fea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006fee:	6022      	str	r2, [r4, #0]
 8006ff0:	780b      	ldrb	r3, [r1, #0]
 8006ff2:	f805 3b01 	strb.w	r3, [r5], #1
 8006ff6:	e7de      	b.n	8006fb6 <_scanf_i+0x10e>
 8006ff8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4650      	mov	r0, sl
 8007000:	4798      	blx	r3
 8007002:	2800      	cmp	r0, #0
 8007004:	d0df      	beq.n	8006fc6 <_scanf_i+0x11e>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	05d9      	lsls	r1, r3, #23
 800700a:	d50d      	bpl.n	8007028 <_scanf_i+0x180>
 800700c:	42bd      	cmp	r5, r7
 800700e:	d909      	bls.n	8007024 <_scanf_i+0x17c>
 8007010:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007014:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007018:	4632      	mov	r2, r6
 800701a:	4650      	mov	r0, sl
 800701c:	4798      	blx	r3
 800701e:	f105 39ff 	add.w	r9, r5, #4294967295
 8007022:	464d      	mov	r5, r9
 8007024:	42bd      	cmp	r5, r7
 8007026:	d028      	beq.n	800707a <_scanf_i+0x1d2>
 8007028:	6822      	ldr	r2, [r4, #0]
 800702a:	f012 0210 	ands.w	r2, r2, #16
 800702e:	d113      	bne.n	8007058 <_scanf_i+0x1b0>
 8007030:	702a      	strb	r2, [r5, #0]
 8007032:	6863      	ldr	r3, [r4, #4]
 8007034:	9e01      	ldr	r6, [sp, #4]
 8007036:	4639      	mov	r1, r7
 8007038:	4650      	mov	r0, sl
 800703a:	47b0      	blx	r6
 800703c:	f8d8 3000 	ldr.w	r3, [r8]
 8007040:	6821      	ldr	r1, [r4, #0]
 8007042:	1d1a      	adds	r2, r3, #4
 8007044:	f8c8 2000 	str.w	r2, [r8]
 8007048:	f011 0f20 	tst.w	r1, #32
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	d00f      	beq.n	8007070 <_scanf_i+0x1c8>
 8007050:	6018      	str	r0, [r3, #0]
 8007052:	68e3      	ldr	r3, [r4, #12]
 8007054:	3301      	adds	r3, #1
 8007056:	60e3      	str	r3, [r4, #12]
 8007058:	1bed      	subs	r5, r5, r7
 800705a:	44ab      	add	fp, r5
 800705c:	6925      	ldr	r5, [r4, #16]
 800705e:	445d      	add	r5, fp
 8007060:	6125      	str	r5, [r4, #16]
 8007062:	2000      	movs	r0, #0
 8007064:	b007      	add	sp, #28
 8007066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706a:	f04f 0b00 	mov.w	fp, #0
 800706e:	e7ca      	b.n	8007006 <_scanf_i+0x15e>
 8007070:	07ca      	lsls	r2, r1, #31
 8007072:	bf4c      	ite	mi
 8007074:	8018      	strhmi	r0, [r3, #0]
 8007076:	6018      	strpl	r0, [r3, #0]
 8007078:	e7eb      	b.n	8007052 <_scanf_i+0x1aa>
 800707a:	2001      	movs	r0, #1
 800707c:	e7f2      	b.n	8007064 <_scanf_i+0x1bc>
 800707e:	bf00      	nop
 8007080:	08008314 	.word	0x08008314
 8007084:	08007279 	.word	0x08007279
 8007088:	08004809 	.word	0x08004809
 800708c:	08008796 	.word	0x08008796

08007090 <_read_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	4d07      	ldr	r5, [pc, #28]	; (80070b0 <_read_r+0x20>)
 8007094:	4604      	mov	r4, r0
 8007096:	4608      	mov	r0, r1
 8007098:	4611      	mov	r1, r2
 800709a:	2200      	movs	r2, #0
 800709c:	602a      	str	r2, [r5, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	f7fa fe12 	bl	8001cc8 <_read>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d102      	bne.n	80070ae <_read_r+0x1e>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	b103      	cbz	r3, 80070ae <_read_r+0x1e>
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	2000024c 	.word	0x2000024c
 80070b4:	00000000 	.word	0x00000000

080070b8 <nan>:
 80070b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80070c0 <nan+0x8>
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	00000000 	.word	0x00000000
 80070c4:	7ff80000 	.word	0x7ff80000

080070c8 <_sbrk_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d06      	ldr	r5, [pc, #24]	; (80070e4 <_sbrk_r+0x1c>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	4604      	mov	r4, r0
 80070d0:	4608      	mov	r0, r1
 80070d2:	602b      	str	r3, [r5, #0]
 80070d4:	f7fa fe66 	bl	8001da4 <_sbrk>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_sbrk_r+0x1a>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_sbrk_r+0x1a>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	2000024c 	.word	0x2000024c

080070e8 <__sccl>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	780b      	ldrb	r3, [r1, #0]
 80070ec:	4604      	mov	r4, r0
 80070ee:	2b5e      	cmp	r3, #94	; 0x5e
 80070f0:	bf0b      	itete	eq
 80070f2:	784b      	ldrbeq	r3, [r1, #1]
 80070f4:	1c48      	addne	r0, r1, #1
 80070f6:	1c88      	addeq	r0, r1, #2
 80070f8:	2200      	movne	r2, #0
 80070fa:	bf08      	it	eq
 80070fc:	2201      	moveq	r2, #1
 80070fe:	1e61      	subs	r1, r4, #1
 8007100:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007104:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007108:	42a9      	cmp	r1, r5
 800710a:	d1fb      	bne.n	8007104 <__sccl+0x1c>
 800710c:	b90b      	cbnz	r3, 8007112 <__sccl+0x2a>
 800710e:	3801      	subs	r0, #1
 8007110:	bd70      	pop	{r4, r5, r6, pc}
 8007112:	f082 0101 	eor.w	r1, r2, #1
 8007116:	54e1      	strb	r1, [r4, r3]
 8007118:	1c42      	adds	r2, r0, #1
 800711a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800711e:	2d2d      	cmp	r5, #45	; 0x2d
 8007120:	f102 36ff 	add.w	r6, r2, #4294967295
 8007124:	4610      	mov	r0, r2
 8007126:	d006      	beq.n	8007136 <__sccl+0x4e>
 8007128:	2d5d      	cmp	r5, #93	; 0x5d
 800712a:	d0f1      	beq.n	8007110 <__sccl+0x28>
 800712c:	b90d      	cbnz	r5, 8007132 <__sccl+0x4a>
 800712e:	4630      	mov	r0, r6
 8007130:	e7ee      	b.n	8007110 <__sccl+0x28>
 8007132:	462b      	mov	r3, r5
 8007134:	e7ef      	b.n	8007116 <__sccl+0x2e>
 8007136:	7816      	ldrb	r6, [r2, #0]
 8007138:	2e5d      	cmp	r6, #93	; 0x5d
 800713a:	d0fa      	beq.n	8007132 <__sccl+0x4a>
 800713c:	42b3      	cmp	r3, r6
 800713e:	dcf8      	bgt.n	8007132 <__sccl+0x4a>
 8007140:	4618      	mov	r0, r3
 8007142:	3001      	adds	r0, #1
 8007144:	4286      	cmp	r6, r0
 8007146:	5421      	strb	r1, [r4, r0]
 8007148:	dcfb      	bgt.n	8007142 <__sccl+0x5a>
 800714a:	43d8      	mvns	r0, r3
 800714c:	4430      	add	r0, r6
 800714e:	1c5d      	adds	r5, r3, #1
 8007150:	42b3      	cmp	r3, r6
 8007152:	bfa8      	it	ge
 8007154:	2000      	movge	r0, #0
 8007156:	182b      	adds	r3, r5, r0
 8007158:	3202      	adds	r2, #2
 800715a:	e7de      	b.n	800711a <__sccl+0x32>

0800715c <strncmp>:
 800715c:	b510      	push	{r4, lr}
 800715e:	b16a      	cbz	r2, 800717c <strncmp+0x20>
 8007160:	3901      	subs	r1, #1
 8007162:	1884      	adds	r4, r0, r2
 8007164:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007168:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800716c:	4293      	cmp	r3, r2
 800716e:	d103      	bne.n	8007178 <strncmp+0x1c>
 8007170:	42a0      	cmp	r0, r4
 8007172:	d001      	beq.n	8007178 <strncmp+0x1c>
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1f5      	bne.n	8007164 <strncmp+0x8>
 8007178:	1a98      	subs	r0, r3, r2
 800717a:	bd10      	pop	{r4, pc}
 800717c:	4610      	mov	r0, r2
 800717e:	e7fc      	b.n	800717a <strncmp+0x1e>

08007180 <_strtoul_l.isra.0>:
 8007180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007184:	4e3b      	ldr	r6, [pc, #236]	; (8007274 <_strtoul_l.isra.0+0xf4>)
 8007186:	4686      	mov	lr, r0
 8007188:	468c      	mov	ip, r1
 800718a:	4660      	mov	r0, ip
 800718c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007190:	5da5      	ldrb	r5, [r4, r6]
 8007192:	f015 0508 	ands.w	r5, r5, #8
 8007196:	d1f8      	bne.n	800718a <_strtoul_l.isra.0+0xa>
 8007198:	2c2d      	cmp	r4, #45	; 0x2d
 800719a:	d134      	bne.n	8007206 <_strtoul_l.isra.0+0x86>
 800719c:	f89c 4000 	ldrb.w	r4, [ip]
 80071a0:	f04f 0801 	mov.w	r8, #1
 80071a4:	f100 0c02 	add.w	ip, r0, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d05e      	beq.n	800726a <_strtoul_l.isra.0+0xea>
 80071ac:	2b10      	cmp	r3, #16
 80071ae:	d10c      	bne.n	80071ca <_strtoul_l.isra.0+0x4a>
 80071b0:	2c30      	cmp	r4, #48	; 0x30
 80071b2:	d10a      	bne.n	80071ca <_strtoul_l.isra.0+0x4a>
 80071b4:	f89c 0000 	ldrb.w	r0, [ip]
 80071b8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80071bc:	2858      	cmp	r0, #88	; 0x58
 80071be:	d14f      	bne.n	8007260 <_strtoul_l.isra.0+0xe0>
 80071c0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80071c4:	2310      	movs	r3, #16
 80071c6:	f10c 0c02 	add.w	ip, ip, #2
 80071ca:	f04f 37ff 	mov.w	r7, #4294967295
 80071ce:	2500      	movs	r5, #0
 80071d0:	fbb7 f7f3 	udiv	r7, r7, r3
 80071d4:	fb03 f907 	mul.w	r9, r3, r7
 80071d8:	ea6f 0909 	mvn.w	r9, r9
 80071dc:	4628      	mov	r0, r5
 80071de:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80071e2:	2e09      	cmp	r6, #9
 80071e4:	d818      	bhi.n	8007218 <_strtoul_l.isra.0+0x98>
 80071e6:	4634      	mov	r4, r6
 80071e8:	42a3      	cmp	r3, r4
 80071ea:	dd24      	ble.n	8007236 <_strtoul_l.isra.0+0xb6>
 80071ec:	2d00      	cmp	r5, #0
 80071ee:	db1f      	blt.n	8007230 <_strtoul_l.isra.0+0xb0>
 80071f0:	4287      	cmp	r7, r0
 80071f2:	d31d      	bcc.n	8007230 <_strtoul_l.isra.0+0xb0>
 80071f4:	d101      	bne.n	80071fa <_strtoul_l.isra.0+0x7a>
 80071f6:	45a1      	cmp	r9, r4
 80071f8:	db1a      	blt.n	8007230 <_strtoul_l.isra.0+0xb0>
 80071fa:	fb00 4003 	mla	r0, r0, r3, r4
 80071fe:	2501      	movs	r5, #1
 8007200:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007204:	e7eb      	b.n	80071de <_strtoul_l.isra.0+0x5e>
 8007206:	2c2b      	cmp	r4, #43	; 0x2b
 8007208:	bf08      	it	eq
 800720a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800720e:	46a8      	mov	r8, r5
 8007210:	bf08      	it	eq
 8007212:	f100 0c02 	addeq.w	ip, r0, #2
 8007216:	e7c7      	b.n	80071a8 <_strtoul_l.isra.0+0x28>
 8007218:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800721c:	2e19      	cmp	r6, #25
 800721e:	d801      	bhi.n	8007224 <_strtoul_l.isra.0+0xa4>
 8007220:	3c37      	subs	r4, #55	; 0x37
 8007222:	e7e1      	b.n	80071e8 <_strtoul_l.isra.0+0x68>
 8007224:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007228:	2e19      	cmp	r6, #25
 800722a:	d804      	bhi.n	8007236 <_strtoul_l.isra.0+0xb6>
 800722c:	3c57      	subs	r4, #87	; 0x57
 800722e:	e7db      	b.n	80071e8 <_strtoul_l.isra.0+0x68>
 8007230:	f04f 35ff 	mov.w	r5, #4294967295
 8007234:	e7e4      	b.n	8007200 <_strtoul_l.isra.0+0x80>
 8007236:	2d00      	cmp	r5, #0
 8007238:	da07      	bge.n	800724a <_strtoul_l.isra.0+0xca>
 800723a:	2322      	movs	r3, #34	; 0x22
 800723c:	f8ce 3000 	str.w	r3, [lr]
 8007240:	f04f 30ff 	mov.w	r0, #4294967295
 8007244:	b942      	cbnz	r2, 8007258 <_strtoul_l.isra.0+0xd8>
 8007246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800724a:	f1b8 0f00 	cmp.w	r8, #0
 800724e:	d000      	beq.n	8007252 <_strtoul_l.isra.0+0xd2>
 8007250:	4240      	negs	r0, r0
 8007252:	2a00      	cmp	r2, #0
 8007254:	d0f7      	beq.n	8007246 <_strtoul_l.isra.0+0xc6>
 8007256:	b10d      	cbz	r5, 800725c <_strtoul_l.isra.0+0xdc>
 8007258:	f10c 31ff 	add.w	r1, ip, #4294967295
 800725c:	6011      	str	r1, [r2, #0]
 800725e:	e7f2      	b.n	8007246 <_strtoul_l.isra.0+0xc6>
 8007260:	2430      	movs	r4, #48	; 0x30
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1b1      	bne.n	80071ca <_strtoul_l.isra.0+0x4a>
 8007266:	2308      	movs	r3, #8
 8007268:	e7af      	b.n	80071ca <_strtoul_l.isra.0+0x4a>
 800726a:	2c30      	cmp	r4, #48	; 0x30
 800726c:	d0a2      	beq.n	80071b4 <_strtoul_l.isra.0+0x34>
 800726e:	230a      	movs	r3, #10
 8007270:	e7ab      	b.n	80071ca <_strtoul_l.isra.0+0x4a>
 8007272:	bf00      	nop
 8007274:	08008369 	.word	0x08008369

08007278 <_strtoul_r>:
 8007278:	f7ff bf82 	b.w	8007180 <_strtoul_l.isra.0>

0800727c <__submore>:
 800727c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007280:	460c      	mov	r4, r1
 8007282:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007288:	4299      	cmp	r1, r3
 800728a:	d11d      	bne.n	80072c8 <__submore+0x4c>
 800728c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007290:	f7ff fa2a 	bl	80066e8 <_malloc_r>
 8007294:	b918      	cbnz	r0, 800729e <__submore+0x22>
 8007296:	f04f 30ff 	mov.w	r0, #4294967295
 800729a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800729e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072a2:	63a3      	str	r3, [r4, #56]	; 0x38
 80072a4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80072a8:	6360      	str	r0, [r4, #52]	; 0x34
 80072aa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80072ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80072b2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80072b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80072ba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80072be:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80072c2:	6020      	str	r0, [r4, #0]
 80072c4:	2000      	movs	r0, #0
 80072c6:	e7e8      	b.n	800729a <__submore+0x1e>
 80072c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80072ca:	0077      	lsls	r7, r6, #1
 80072cc:	463a      	mov	r2, r7
 80072ce:	f000 fa2d 	bl	800772c <_realloc_r>
 80072d2:	4605      	mov	r5, r0
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d0de      	beq.n	8007296 <__submore+0x1a>
 80072d8:	eb00 0806 	add.w	r8, r0, r6
 80072dc:	4601      	mov	r1, r0
 80072de:	4632      	mov	r2, r6
 80072e0:	4640      	mov	r0, r8
 80072e2:	f7fe fcd9 	bl	8005c98 <memcpy>
 80072e6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80072ea:	f8c4 8000 	str.w	r8, [r4]
 80072ee:	e7e9      	b.n	80072c4 <__submore+0x48>

080072f0 <__ascii_wctomb>:
 80072f0:	b149      	cbz	r1, 8007306 <__ascii_wctomb+0x16>
 80072f2:	2aff      	cmp	r2, #255	; 0xff
 80072f4:	bf85      	ittet	hi
 80072f6:	238a      	movhi	r3, #138	; 0x8a
 80072f8:	6003      	strhi	r3, [r0, #0]
 80072fa:	700a      	strbls	r2, [r1, #0]
 80072fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007300:	bf98      	it	ls
 8007302:	2001      	movls	r0, #1
 8007304:	4770      	bx	lr
 8007306:	4608      	mov	r0, r1
 8007308:	4770      	bx	lr
	...

0800730c <__assert_func>:
 800730c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800730e:	4614      	mov	r4, r2
 8007310:	461a      	mov	r2, r3
 8007312:	4b09      	ldr	r3, [pc, #36]	; (8007338 <__assert_func+0x2c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4605      	mov	r5, r0
 8007318:	68d8      	ldr	r0, [r3, #12]
 800731a:	b14c      	cbz	r4, 8007330 <__assert_func+0x24>
 800731c:	4b07      	ldr	r3, [pc, #28]	; (800733c <__assert_func+0x30>)
 800731e:	9100      	str	r1, [sp, #0]
 8007320:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007324:	4906      	ldr	r1, [pc, #24]	; (8007340 <__assert_func+0x34>)
 8007326:	462b      	mov	r3, r5
 8007328:	f000 f9a6 	bl	8007678 <fiprintf>
 800732c:	f000 fc3e 	bl	8007bac <abort>
 8007330:	4b04      	ldr	r3, [pc, #16]	; (8007344 <__assert_func+0x38>)
 8007332:	461c      	mov	r4, r3
 8007334:	e7f3      	b.n	800731e <__assert_func+0x12>
 8007336:	bf00      	nop
 8007338:	2000000c 	.word	0x2000000c
 800733c:	08008798 	.word	0x08008798
 8007340:	080087a5 	.word	0x080087a5
 8007344:	080087d3 	.word	0x080087d3

08007348 <__sflush_r>:
 8007348:	898a      	ldrh	r2, [r1, #12]
 800734a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800734e:	4605      	mov	r5, r0
 8007350:	0710      	lsls	r0, r2, #28
 8007352:	460c      	mov	r4, r1
 8007354:	d458      	bmi.n	8007408 <__sflush_r+0xc0>
 8007356:	684b      	ldr	r3, [r1, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	dc05      	bgt.n	8007368 <__sflush_r+0x20>
 800735c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800735e:	2b00      	cmp	r3, #0
 8007360:	dc02      	bgt.n	8007368 <__sflush_r+0x20>
 8007362:	2000      	movs	r0, #0
 8007364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800736a:	2e00      	cmp	r6, #0
 800736c:	d0f9      	beq.n	8007362 <__sflush_r+0x1a>
 800736e:	2300      	movs	r3, #0
 8007370:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007374:	682f      	ldr	r7, [r5, #0]
 8007376:	602b      	str	r3, [r5, #0]
 8007378:	d032      	beq.n	80073e0 <__sflush_r+0x98>
 800737a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800737c:	89a3      	ldrh	r3, [r4, #12]
 800737e:	075a      	lsls	r2, r3, #29
 8007380:	d505      	bpl.n	800738e <__sflush_r+0x46>
 8007382:	6863      	ldr	r3, [r4, #4]
 8007384:	1ac0      	subs	r0, r0, r3
 8007386:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007388:	b10b      	cbz	r3, 800738e <__sflush_r+0x46>
 800738a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800738c:	1ac0      	subs	r0, r0, r3
 800738e:	2300      	movs	r3, #0
 8007390:	4602      	mov	r2, r0
 8007392:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007394:	6a21      	ldr	r1, [r4, #32]
 8007396:	4628      	mov	r0, r5
 8007398:	47b0      	blx	r6
 800739a:	1c43      	adds	r3, r0, #1
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	d106      	bne.n	80073ae <__sflush_r+0x66>
 80073a0:	6829      	ldr	r1, [r5, #0]
 80073a2:	291d      	cmp	r1, #29
 80073a4:	d82c      	bhi.n	8007400 <__sflush_r+0xb8>
 80073a6:	4a2a      	ldr	r2, [pc, #168]	; (8007450 <__sflush_r+0x108>)
 80073a8:	40ca      	lsrs	r2, r1
 80073aa:	07d6      	lsls	r6, r2, #31
 80073ac:	d528      	bpl.n	8007400 <__sflush_r+0xb8>
 80073ae:	2200      	movs	r2, #0
 80073b0:	6062      	str	r2, [r4, #4]
 80073b2:	04d9      	lsls	r1, r3, #19
 80073b4:	6922      	ldr	r2, [r4, #16]
 80073b6:	6022      	str	r2, [r4, #0]
 80073b8:	d504      	bpl.n	80073c4 <__sflush_r+0x7c>
 80073ba:	1c42      	adds	r2, r0, #1
 80073bc:	d101      	bne.n	80073c2 <__sflush_r+0x7a>
 80073be:	682b      	ldr	r3, [r5, #0]
 80073c0:	b903      	cbnz	r3, 80073c4 <__sflush_r+0x7c>
 80073c2:	6560      	str	r0, [r4, #84]	; 0x54
 80073c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073c6:	602f      	str	r7, [r5, #0]
 80073c8:	2900      	cmp	r1, #0
 80073ca:	d0ca      	beq.n	8007362 <__sflush_r+0x1a>
 80073cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073d0:	4299      	cmp	r1, r3
 80073d2:	d002      	beq.n	80073da <__sflush_r+0x92>
 80073d4:	4628      	mov	r0, r5
 80073d6:	f7ff f937 	bl	8006648 <_free_r>
 80073da:	2000      	movs	r0, #0
 80073dc:	6360      	str	r0, [r4, #52]	; 0x34
 80073de:	e7c1      	b.n	8007364 <__sflush_r+0x1c>
 80073e0:	6a21      	ldr	r1, [r4, #32]
 80073e2:	2301      	movs	r3, #1
 80073e4:	4628      	mov	r0, r5
 80073e6:	47b0      	blx	r6
 80073e8:	1c41      	adds	r1, r0, #1
 80073ea:	d1c7      	bne.n	800737c <__sflush_r+0x34>
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0c4      	beq.n	800737c <__sflush_r+0x34>
 80073f2:	2b1d      	cmp	r3, #29
 80073f4:	d001      	beq.n	80073fa <__sflush_r+0xb2>
 80073f6:	2b16      	cmp	r3, #22
 80073f8:	d101      	bne.n	80073fe <__sflush_r+0xb6>
 80073fa:	602f      	str	r7, [r5, #0]
 80073fc:	e7b1      	b.n	8007362 <__sflush_r+0x1a>
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007404:	81a3      	strh	r3, [r4, #12]
 8007406:	e7ad      	b.n	8007364 <__sflush_r+0x1c>
 8007408:	690f      	ldr	r7, [r1, #16]
 800740a:	2f00      	cmp	r7, #0
 800740c:	d0a9      	beq.n	8007362 <__sflush_r+0x1a>
 800740e:	0793      	lsls	r3, r2, #30
 8007410:	680e      	ldr	r6, [r1, #0]
 8007412:	bf08      	it	eq
 8007414:	694b      	ldreq	r3, [r1, #20]
 8007416:	600f      	str	r7, [r1, #0]
 8007418:	bf18      	it	ne
 800741a:	2300      	movne	r3, #0
 800741c:	eba6 0807 	sub.w	r8, r6, r7
 8007420:	608b      	str	r3, [r1, #8]
 8007422:	f1b8 0f00 	cmp.w	r8, #0
 8007426:	dd9c      	ble.n	8007362 <__sflush_r+0x1a>
 8007428:	6a21      	ldr	r1, [r4, #32]
 800742a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800742c:	4643      	mov	r3, r8
 800742e:	463a      	mov	r2, r7
 8007430:	4628      	mov	r0, r5
 8007432:	47b0      	blx	r6
 8007434:	2800      	cmp	r0, #0
 8007436:	dc06      	bgt.n	8007446 <__sflush_r+0xfe>
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800743e:	81a3      	strh	r3, [r4, #12]
 8007440:	f04f 30ff 	mov.w	r0, #4294967295
 8007444:	e78e      	b.n	8007364 <__sflush_r+0x1c>
 8007446:	4407      	add	r7, r0
 8007448:	eba8 0800 	sub.w	r8, r8, r0
 800744c:	e7e9      	b.n	8007422 <__sflush_r+0xda>
 800744e:	bf00      	nop
 8007450:	20400001 	.word	0x20400001

08007454 <_fflush_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	690b      	ldr	r3, [r1, #16]
 8007458:	4605      	mov	r5, r0
 800745a:	460c      	mov	r4, r1
 800745c:	b913      	cbnz	r3, 8007464 <_fflush_r+0x10>
 800745e:	2500      	movs	r5, #0
 8007460:	4628      	mov	r0, r5
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	b118      	cbz	r0, 800746e <_fflush_r+0x1a>
 8007466:	6983      	ldr	r3, [r0, #24]
 8007468:	b90b      	cbnz	r3, 800746e <_fflush_r+0x1a>
 800746a:	f000 f887 	bl	800757c <__sinit>
 800746e:	4b14      	ldr	r3, [pc, #80]	; (80074c0 <_fflush_r+0x6c>)
 8007470:	429c      	cmp	r4, r3
 8007472:	d11b      	bne.n	80074ac <_fflush_r+0x58>
 8007474:	686c      	ldr	r4, [r5, #4]
 8007476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0ef      	beq.n	800745e <_fflush_r+0xa>
 800747e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007480:	07d0      	lsls	r0, r2, #31
 8007482:	d404      	bmi.n	800748e <_fflush_r+0x3a>
 8007484:	0599      	lsls	r1, r3, #22
 8007486:	d402      	bmi.n	800748e <_fflush_r+0x3a>
 8007488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800748a:	f000 f927 	bl	80076dc <__retarget_lock_acquire_recursive>
 800748e:	4628      	mov	r0, r5
 8007490:	4621      	mov	r1, r4
 8007492:	f7ff ff59 	bl	8007348 <__sflush_r>
 8007496:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007498:	07da      	lsls	r2, r3, #31
 800749a:	4605      	mov	r5, r0
 800749c:	d4e0      	bmi.n	8007460 <_fflush_r+0xc>
 800749e:	89a3      	ldrh	r3, [r4, #12]
 80074a0:	059b      	lsls	r3, r3, #22
 80074a2:	d4dd      	bmi.n	8007460 <_fflush_r+0xc>
 80074a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074a6:	f000 f91a 	bl	80076de <__retarget_lock_release_recursive>
 80074aa:	e7d9      	b.n	8007460 <_fflush_r+0xc>
 80074ac:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <_fflush_r+0x70>)
 80074ae:	429c      	cmp	r4, r3
 80074b0:	d101      	bne.n	80074b6 <_fflush_r+0x62>
 80074b2:	68ac      	ldr	r4, [r5, #8]
 80074b4:	e7df      	b.n	8007476 <_fflush_r+0x22>
 80074b6:	4b04      	ldr	r3, [pc, #16]	; (80074c8 <_fflush_r+0x74>)
 80074b8:	429c      	cmp	r4, r3
 80074ba:	bf08      	it	eq
 80074bc:	68ec      	ldreq	r4, [r5, #12]
 80074be:	e7da      	b.n	8007476 <_fflush_r+0x22>
 80074c0:	080087f4 	.word	0x080087f4
 80074c4:	08008814 	.word	0x08008814
 80074c8:	080087d4 	.word	0x080087d4

080074cc <std>:
 80074cc:	2300      	movs	r3, #0
 80074ce:	b510      	push	{r4, lr}
 80074d0:	4604      	mov	r4, r0
 80074d2:	e9c0 3300 	strd	r3, r3, [r0]
 80074d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074da:	6083      	str	r3, [r0, #8]
 80074dc:	8181      	strh	r1, [r0, #12]
 80074de:	6643      	str	r3, [r0, #100]	; 0x64
 80074e0:	81c2      	strh	r2, [r0, #14]
 80074e2:	6183      	str	r3, [r0, #24]
 80074e4:	4619      	mov	r1, r3
 80074e6:	2208      	movs	r2, #8
 80074e8:	305c      	adds	r0, #92	; 0x5c
 80074ea:	f7fb fbad 	bl	8002c48 <memset>
 80074ee:	4b05      	ldr	r3, [pc, #20]	; (8007504 <std+0x38>)
 80074f0:	6263      	str	r3, [r4, #36]	; 0x24
 80074f2:	4b05      	ldr	r3, [pc, #20]	; (8007508 <std+0x3c>)
 80074f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80074f6:	4b05      	ldr	r3, [pc, #20]	; (800750c <std+0x40>)
 80074f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074fa:	4b05      	ldr	r3, [pc, #20]	; (8007510 <std+0x44>)
 80074fc:	6224      	str	r4, [r4, #32]
 80074fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007500:	bd10      	pop	{r4, pc}
 8007502:	bf00      	nop
 8007504:	080039f1 	.word	0x080039f1
 8007508:	08003a17 	.word	0x08003a17
 800750c:	08003a4f 	.word	0x08003a4f
 8007510:	08003a73 	.word	0x08003a73

08007514 <_cleanup_r>:
 8007514:	4901      	ldr	r1, [pc, #4]	; (800751c <_cleanup_r+0x8>)
 8007516:	f000 b8c1 	b.w	800769c <_fwalk_reent>
 800751a:	bf00      	nop
 800751c:	08007455 	.word	0x08007455

08007520 <__sfmoreglue>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	1e4a      	subs	r2, r1, #1
 8007524:	2568      	movs	r5, #104	; 0x68
 8007526:	4355      	muls	r5, r2
 8007528:	460e      	mov	r6, r1
 800752a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800752e:	f7ff f8db 	bl	80066e8 <_malloc_r>
 8007532:	4604      	mov	r4, r0
 8007534:	b140      	cbz	r0, 8007548 <__sfmoreglue+0x28>
 8007536:	2100      	movs	r1, #0
 8007538:	e9c0 1600 	strd	r1, r6, [r0]
 800753c:	300c      	adds	r0, #12
 800753e:	60a0      	str	r0, [r4, #8]
 8007540:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007544:	f7fb fb80 	bl	8002c48 <memset>
 8007548:	4620      	mov	r0, r4
 800754a:	bd70      	pop	{r4, r5, r6, pc}

0800754c <__sfp_lock_acquire>:
 800754c:	4801      	ldr	r0, [pc, #4]	; (8007554 <__sfp_lock_acquire+0x8>)
 800754e:	f000 b8c5 	b.w	80076dc <__retarget_lock_acquire_recursive>
 8007552:	bf00      	nop
 8007554:	20000258 	.word	0x20000258

08007558 <__sfp_lock_release>:
 8007558:	4801      	ldr	r0, [pc, #4]	; (8007560 <__sfp_lock_release+0x8>)
 800755a:	f000 b8c0 	b.w	80076de <__retarget_lock_release_recursive>
 800755e:	bf00      	nop
 8007560:	20000258 	.word	0x20000258

08007564 <__sinit_lock_acquire>:
 8007564:	4801      	ldr	r0, [pc, #4]	; (800756c <__sinit_lock_acquire+0x8>)
 8007566:	f000 b8b9 	b.w	80076dc <__retarget_lock_acquire_recursive>
 800756a:	bf00      	nop
 800756c:	20000253 	.word	0x20000253

08007570 <__sinit_lock_release>:
 8007570:	4801      	ldr	r0, [pc, #4]	; (8007578 <__sinit_lock_release+0x8>)
 8007572:	f000 b8b4 	b.w	80076de <__retarget_lock_release_recursive>
 8007576:	bf00      	nop
 8007578:	20000253 	.word	0x20000253

0800757c <__sinit>:
 800757c:	b510      	push	{r4, lr}
 800757e:	4604      	mov	r4, r0
 8007580:	f7ff fff0 	bl	8007564 <__sinit_lock_acquire>
 8007584:	69a3      	ldr	r3, [r4, #24]
 8007586:	b11b      	cbz	r3, 8007590 <__sinit+0x14>
 8007588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800758c:	f7ff bff0 	b.w	8007570 <__sinit_lock_release>
 8007590:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007594:	6523      	str	r3, [r4, #80]	; 0x50
 8007596:	4b13      	ldr	r3, [pc, #76]	; (80075e4 <__sinit+0x68>)
 8007598:	4a13      	ldr	r2, [pc, #76]	; (80075e8 <__sinit+0x6c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	62a2      	str	r2, [r4, #40]	; 0x28
 800759e:	42a3      	cmp	r3, r4
 80075a0:	bf04      	itt	eq
 80075a2:	2301      	moveq	r3, #1
 80075a4:	61a3      	streq	r3, [r4, #24]
 80075a6:	4620      	mov	r0, r4
 80075a8:	f000 f820 	bl	80075ec <__sfp>
 80075ac:	6060      	str	r0, [r4, #4]
 80075ae:	4620      	mov	r0, r4
 80075b0:	f000 f81c 	bl	80075ec <__sfp>
 80075b4:	60a0      	str	r0, [r4, #8]
 80075b6:	4620      	mov	r0, r4
 80075b8:	f000 f818 	bl	80075ec <__sfp>
 80075bc:	2200      	movs	r2, #0
 80075be:	60e0      	str	r0, [r4, #12]
 80075c0:	2104      	movs	r1, #4
 80075c2:	6860      	ldr	r0, [r4, #4]
 80075c4:	f7ff ff82 	bl	80074cc <std>
 80075c8:	68a0      	ldr	r0, [r4, #8]
 80075ca:	2201      	movs	r2, #1
 80075cc:	2109      	movs	r1, #9
 80075ce:	f7ff ff7d 	bl	80074cc <std>
 80075d2:	68e0      	ldr	r0, [r4, #12]
 80075d4:	2202      	movs	r2, #2
 80075d6:	2112      	movs	r1, #18
 80075d8:	f7ff ff78 	bl	80074cc <std>
 80075dc:	2301      	movs	r3, #1
 80075de:	61a3      	str	r3, [r4, #24]
 80075e0:	e7d2      	b.n	8007588 <__sinit+0xc>
 80075e2:	bf00      	nop
 80075e4:	0800846c 	.word	0x0800846c
 80075e8:	08007515 	.word	0x08007515

080075ec <__sfp>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	4607      	mov	r7, r0
 80075f0:	f7ff ffac 	bl	800754c <__sfp_lock_acquire>
 80075f4:	4b1e      	ldr	r3, [pc, #120]	; (8007670 <__sfp+0x84>)
 80075f6:	681e      	ldr	r6, [r3, #0]
 80075f8:	69b3      	ldr	r3, [r6, #24]
 80075fa:	b913      	cbnz	r3, 8007602 <__sfp+0x16>
 80075fc:	4630      	mov	r0, r6
 80075fe:	f7ff ffbd 	bl	800757c <__sinit>
 8007602:	3648      	adds	r6, #72	; 0x48
 8007604:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007608:	3b01      	subs	r3, #1
 800760a:	d503      	bpl.n	8007614 <__sfp+0x28>
 800760c:	6833      	ldr	r3, [r6, #0]
 800760e:	b30b      	cbz	r3, 8007654 <__sfp+0x68>
 8007610:	6836      	ldr	r6, [r6, #0]
 8007612:	e7f7      	b.n	8007604 <__sfp+0x18>
 8007614:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007618:	b9d5      	cbnz	r5, 8007650 <__sfp+0x64>
 800761a:	4b16      	ldr	r3, [pc, #88]	; (8007674 <__sfp+0x88>)
 800761c:	60e3      	str	r3, [r4, #12]
 800761e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007622:	6665      	str	r5, [r4, #100]	; 0x64
 8007624:	f000 f859 	bl	80076da <__retarget_lock_init_recursive>
 8007628:	f7ff ff96 	bl	8007558 <__sfp_lock_release>
 800762c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007630:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007634:	6025      	str	r5, [r4, #0]
 8007636:	61a5      	str	r5, [r4, #24]
 8007638:	2208      	movs	r2, #8
 800763a:	4629      	mov	r1, r5
 800763c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007640:	f7fb fb02 	bl	8002c48 <memset>
 8007644:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007648:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800764c:	4620      	mov	r0, r4
 800764e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007650:	3468      	adds	r4, #104	; 0x68
 8007652:	e7d9      	b.n	8007608 <__sfp+0x1c>
 8007654:	2104      	movs	r1, #4
 8007656:	4638      	mov	r0, r7
 8007658:	f7ff ff62 	bl	8007520 <__sfmoreglue>
 800765c:	4604      	mov	r4, r0
 800765e:	6030      	str	r0, [r6, #0]
 8007660:	2800      	cmp	r0, #0
 8007662:	d1d5      	bne.n	8007610 <__sfp+0x24>
 8007664:	f7ff ff78 	bl	8007558 <__sfp_lock_release>
 8007668:	230c      	movs	r3, #12
 800766a:	603b      	str	r3, [r7, #0]
 800766c:	e7ee      	b.n	800764c <__sfp+0x60>
 800766e:	bf00      	nop
 8007670:	0800846c 	.word	0x0800846c
 8007674:	ffff0001 	.word	0xffff0001

08007678 <fiprintf>:
 8007678:	b40e      	push	{r1, r2, r3}
 800767a:	b503      	push	{r0, r1, lr}
 800767c:	4601      	mov	r1, r0
 800767e:	ab03      	add	r3, sp, #12
 8007680:	4805      	ldr	r0, [pc, #20]	; (8007698 <fiprintf+0x20>)
 8007682:	f853 2b04 	ldr.w	r2, [r3], #4
 8007686:	6800      	ldr	r0, [r0, #0]
 8007688:	9301      	str	r3, [sp, #4]
 800768a:	f000 f89f 	bl	80077cc <_vfiprintf_r>
 800768e:	b002      	add	sp, #8
 8007690:	f85d eb04 	ldr.w	lr, [sp], #4
 8007694:	b003      	add	sp, #12
 8007696:	4770      	bx	lr
 8007698:	2000000c 	.word	0x2000000c

0800769c <_fwalk_reent>:
 800769c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076a0:	4606      	mov	r6, r0
 80076a2:	4688      	mov	r8, r1
 80076a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076a8:	2700      	movs	r7, #0
 80076aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076ae:	f1b9 0901 	subs.w	r9, r9, #1
 80076b2:	d505      	bpl.n	80076c0 <_fwalk_reent+0x24>
 80076b4:	6824      	ldr	r4, [r4, #0]
 80076b6:	2c00      	cmp	r4, #0
 80076b8:	d1f7      	bne.n	80076aa <_fwalk_reent+0xe>
 80076ba:	4638      	mov	r0, r7
 80076bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076c0:	89ab      	ldrh	r3, [r5, #12]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d907      	bls.n	80076d6 <_fwalk_reent+0x3a>
 80076c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076ca:	3301      	adds	r3, #1
 80076cc:	d003      	beq.n	80076d6 <_fwalk_reent+0x3a>
 80076ce:	4629      	mov	r1, r5
 80076d0:	4630      	mov	r0, r6
 80076d2:	47c0      	blx	r8
 80076d4:	4307      	orrs	r7, r0
 80076d6:	3568      	adds	r5, #104	; 0x68
 80076d8:	e7e9      	b.n	80076ae <_fwalk_reent+0x12>

080076da <__retarget_lock_init_recursive>:
 80076da:	4770      	bx	lr

080076dc <__retarget_lock_acquire_recursive>:
 80076dc:	4770      	bx	lr

080076de <__retarget_lock_release_recursive>:
 80076de:	4770      	bx	lr

080076e0 <memmove>:
 80076e0:	4288      	cmp	r0, r1
 80076e2:	b510      	push	{r4, lr}
 80076e4:	eb01 0402 	add.w	r4, r1, r2
 80076e8:	d902      	bls.n	80076f0 <memmove+0x10>
 80076ea:	4284      	cmp	r4, r0
 80076ec:	4623      	mov	r3, r4
 80076ee:	d807      	bhi.n	8007700 <memmove+0x20>
 80076f0:	1e43      	subs	r3, r0, #1
 80076f2:	42a1      	cmp	r1, r4
 80076f4:	d008      	beq.n	8007708 <memmove+0x28>
 80076f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076fe:	e7f8      	b.n	80076f2 <memmove+0x12>
 8007700:	4402      	add	r2, r0
 8007702:	4601      	mov	r1, r0
 8007704:	428a      	cmp	r2, r1
 8007706:	d100      	bne.n	800770a <memmove+0x2a>
 8007708:	bd10      	pop	{r4, pc}
 800770a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800770e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007712:	e7f7      	b.n	8007704 <memmove+0x24>

08007714 <__malloc_lock>:
 8007714:	4801      	ldr	r0, [pc, #4]	; (800771c <__malloc_lock+0x8>)
 8007716:	f7ff bfe1 	b.w	80076dc <__retarget_lock_acquire_recursive>
 800771a:	bf00      	nop
 800771c:	20000254 	.word	0x20000254

08007720 <__malloc_unlock>:
 8007720:	4801      	ldr	r0, [pc, #4]	; (8007728 <__malloc_unlock+0x8>)
 8007722:	f7ff bfdc 	b.w	80076de <__retarget_lock_release_recursive>
 8007726:	bf00      	nop
 8007728:	20000254 	.word	0x20000254

0800772c <_realloc_r>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	4607      	mov	r7, r0
 8007730:	4614      	mov	r4, r2
 8007732:	460e      	mov	r6, r1
 8007734:	b921      	cbnz	r1, 8007740 <_realloc_r+0x14>
 8007736:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800773a:	4611      	mov	r1, r2
 800773c:	f7fe bfd4 	b.w	80066e8 <_malloc_r>
 8007740:	b922      	cbnz	r2, 800774c <_realloc_r+0x20>
 8007742:	f7fe ff81 	bl	8006648 <_free_r>
 8007746:	4625      	mov	r5, r4
 8007748:	4628      	mov	r0, r5
 800774a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800774c:	f000 fa9a 	bl	8007c84 <_malloc_usable_size_r>
 8007750:	42a0      	cmp	r0, r4
 8007752:	d20f      	bcs.n	8007774 <_realloc_r+0x48>
 8007754:	4621      	mov	r1, r4
 8007756:	4638      	mov	r0, r7
 8007758:	f7fe ffc6 	bl	80066e8 <_malloc_r>
 800775c:	4605      	mov	r5, r0
 800775e:	2800      	cmp	r0, #0
 8007760:	d0f2      	beq.n	8007748 <_realloc_r+0x1c>
 8007762:	4631      	mov	r1, r6
 8007764:	4622      	mov	r2, r4
 8007766:	f7fe fa97 	bl	8005c98 <memcpy>
 800776a:	4631      	mov	r1, r6
 800776c:	4638      	mov	r0, r7
 800776e:	f7fe ff6b 	bl	8006648 <_free_r>
 8007772:	e7e9      	b.n	8007748 <_realloc_r+0x1c>
 8007774:	4635      	mov	r5, r6
 8007776:	e7e7      	b.n	8007748 <_realloc_r+0x1c>

08007778 <__sfputc_r>:
 8007778:	6893      	ldr	r3, [r2, #8]
 800777a:	3b01      	subs	r3, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	b410      	push	{r4}
 8007780:	6093      	str	r3, [r2, #8]
 8007782:	da08      	bge.n	8007796 <__sfputc_r+0x1e>
 8007784:	6994      	ldr	r4, [r2, #24]
 8007786:	42a3      	cmp	r3, r4
 8007788:	db01      	blt.n	800778e <__sfputc_r+0x16>
 800778a:	290a      	cmp	r1, #10
 800778c:	d103      	bne.n	8007796 <__sfputc_r+0x1e>
 800778e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007792:	f000 b94b 	b.w	8007a2c <__swbuf_r>
 8007796:	6813      	ldr	r3, [r2, #0]
 8007798:	1c58      	adds	r0, r3, #1
 800779a:	6010      	str	r0, [r2, #0]
 800779c:	7019      	strb	r1, [r3, #0]
 800779e:	4608      	mov	r0, r1
 80077a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <__sfputs_r>:
 80077a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a8:	4606      	mov	r6, r0
 80077aa:	460f      	mov	r7, r1
 80077ac:	4614      	mov	r4, r2
 80077ae:	18d5      	adds	r5, r2, r3
 80077b0:	42ac      	cmp	r4, r5
 80077b2:	d101      	bne.n	80077b8 <__sfputs_r+0x12>
 80077b4:	2000      	movs	r0, #0
 80077b6:	e007      	b.n	80077c8 <__sfputs_r+0x22>
 80077b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077bc:	463a      	mov	r2, r7
 80077be:	4630      	mov	r0, r6
 80077c0:	f7ff ffda 	bl	8007778 <__sfputc_r>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d1f3      	bne.n	80077b0 <__sfputs_r+0xa>
 80077c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077cc <_vfiprintf_r>:
 80077cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d0:	460d      	mov	r5, r1
 80077d2:	b09d      	sub	sp, #116	; 0x74
 80077d4:	4614      	mov	r4, r2
 80077d6:	4698      	mov	r8, r3
 80077d8:	4606      	mov	r6, r0
 80077da:	b118      	cbz	r0, 80077e4 <_vfiprintf_r+0x18>
 80077dc:	6983      	ldr	r3, [r0, #24]
 80077de:	b90b      	cbnz	r3, 80077e4 <_vfiprintf_r+0x18>
 80077e0:	f7ff fecc 	bl	800757c <__sinit>
 80077e4:	4b89      	ldr	r3, [pc, #548]	; (8007a0c <_vfiprintf_r+0x240>)
 80077e6:	429d      	cmp	r5, r3
 80077e8:	d11b      	bne.n	8007822 <_vfiprintf_r+0x56>
 80077ea:	6875      	ldr	r5, [r6, #4]
 80077ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077ee:	07d9      	lsls	r1, r3, #31
 80077f0:	d405      	bmi.n	80077fe <_vfiprintf_r+0x32>
 80077f2:	89ab      	ldrh	r3, [r5, #12]
 80077f4:	059a      	lsls	r2, r3, #22
 80077f6:	d402      	bmi.n	80077fe <_vfiprintf_r+0x32>
 80077f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077fa:	f7ff ff6f 	bl	80076dc <__retarget_lock_acquire_recursive>
 80077fe:	89ab      	ldrh	r3, [r5, #12]
 8007800:	071b      	lsls	r3, r3, #28
 8007802:	d501      	bpl.n	8007808 <_vfiprintf_r+0x3c>
 8007804:	692b      	ldr	r3, [r5, #16]
 8007806:	b9eb      	cbnz	r3, 8007844 <_vfiprintf_r+0x78>
 8007808:	4629      	mov	r1, r5
 800780a:	4630      	mov	r0, r6
 800780c:	f000 f960 	bl	8007ad0 <__swsetup_r>
 8007810:	b1c0      	cbz	r0, 8007844 <_vfiprintf_r+0x78>
 8007812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007814:	07dc      	lsls	r4, r3, #31
 8007816:	d50e      	bpl.n	8007836 <_vfiprintf_r+0x6a>
 8007818:	f04f 30ff 	mov.w	r0, #4294967295
 800781c:	b01d      	add	sp, #116	; 0x74
 800781e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007822:	4b7b      	ldr	r3, [pc, #492]	; (8007a10 <_vfiprintf_r+0x244>)
 8007824:	429d      	cmp	r5, r3
 8007826:	d101      	bne.n	800782c <_vfiprintf_r+0x60>
 8007828:	68b5      	ldr	r5, [r6, #8]
 800782a:	e7df      	b.n	80077ec <_vfiprintf_r+0x20>
 800782c:	4b79      	ldr	r3, [pc, #484]	; (8007a14 <_vfiprintf_r+0x248>)
 800782e:	429d      	cmp	r5, r3
 8007830:	bf08      	it	eq
 8007832:	68f5      	ldreq	r5, [r6, #12]
 8007834:	e7da      	b.n	80077ec <_vfiprintf_r+0x20>
 8007836:	89ab      	ldrh	r3, [r5, #12]
 8007838:	0598      	lsls	r0, r3, #22
 800783a:	d4ed      	bmi.n	8007818 <_vfiprintf_r+0x4c>
 800783c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800783e:	f7ff ff4e 	bl	80076de <__retarget_lock_release_recursive>
 8007842:	e7e9      	b.n	8007818 <_vfiprintf_r+0x4c>
 8007844:	2300      	movs	r3, #0
 8007846:	9309      	str	r3, [sp, #36]	; 0x24
 8007848:	2320      	movs	r3, #32
 800784a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800784e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007852:	2330      	movs	r3, #48	; 0x30
 8007854:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a18 <_vfiprintf_r+0x24c>
 8007858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800785c:	f04f 0901 	mov.w	r9, #1
 8007860:	4623      	mov	r3, r4
 8007862:	469a      	mov	sl, r3
 8007864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007868:	b10a      	cbz	r2, 800786e <_vfiprintf_r+0xa2>
 800786a:	2a25      	cmp	r2, #37	; 0x25
 800786c:	d1f9      	bne.n	8007862 <_vfiprintf_r+0x96>
 800786e:	ebba 0b04 	subs.w	fp, sl, r4
 8007872:	d00b      	beq.n	800788c <_vfiprintf_r+0xc0>
 8007874:	465b      	mov	r3, fp
 8007876:	4622      	mov	r2, r4
 8007878:	4629      	mov	r1, r5
 800787a:	4630      	mov	r0, r6
 800787c:	f7ff ff93 	bl	80077a6 <__sfputs_r>
 8007880:	3001      	adds	r0, #1
 8007882:	f000 80aa 	beq.w	80079da <_vfiprintf_r+0x20e>
 8007886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007888:	445a      	add	r2, fp
 800788a:	9209      	str	r2, [sp, #36]	; 0x24
 800788c:	f89a 3000 	ldrb.w	r3, [sl]
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 80a2 	beq.w	80079da <_vfiprintf_r+0x20e>
 8007896:	2300      	movs	r3, #0
 8007898:	f04f 32ff 	mov.w	r2, #4294967295
 800789c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078a0:	f10a 0a01 	add.w	sl, sl, #1
 80078a4:	9304      	str	r3, [sp, #16]
 80078a6:	9307      	str	r3, [sp, #28]
 80078a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078ac:	931a      	str	r3, [sp, #104]	; 0x68
 80078ae:	4654      	mov	r4, sl
 80078b0:	2205      	movs	r2, #5
 80078b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b6:	4858      	ldr	r0, [pc, #352]	; (8007a18 <_vfiprintf_r+0x24c>)
 80078b8:	f7f8 fcaa 	bl	8000210 <memchr>
 80078bc:	9a04      	ldr	r2, [sp, #16]
 80078be:	b9d8      	cbnz	r0, 80078f8 <_vfiprintf_r+0x12c>
 80078c0:	06d1      	lsls	r1, r2, #27
 80078c2:	bf44      	itt	mi
 80078c4:	2320      	movmi	r3, #32
 80078c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078ca:	0713      	lsls	r3, r2, #28
 80078cc:	bf44      	itt	mi
 80078ce:	232b      	movmi	r3, #43	; 0x2b
 80078d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078d4:	f89a 3000 	ldrb.w	r3, [sl]
 80078d8:	2b2a      	cmp	r3, #42	; 0x2a
 80078da:	d015      	beq.n	8007908 <_vfiprintf_r+0x13c>
 80078dc:	9a07      	ldr	r2, [sp, #28]
 80078de:	4654      	mov	r4, sl
 80078e0:	2000      	movs	r0, #0
 80078e2:	f04f 0c0a 	mov.w	ip, #10
 80078e6:	4621      	mov	r1, r4
 80078e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078ec:	3b30      	subs	r3, #48	; 0x30
 80078ee:	2b09      	cmp	r3, #9
 80078f0:	d94e      	bls.n	8007990 <_vfiprintf_r+0x1c4>
 80078f2:	b1b0      	cbz	r0, 8007922 <_vfiprintf_r+0x156>
 80078f4:	9207      	str	r2, [sp, #28]
 80078f6:	e014      	b.n	8007922 <_vfiprintf_r+0x156>
 80078f8:	eba0 0308 	sub.w	r3, r0, r8
 80078fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007900:	4313      	orrs	r3, r2
 8007902:	9304      	str	r3, [sp, #16]
 8007904:	46a2      	mov	sl, r4
 8007906:	e7d2      	b.n	80078ae <_vfiprintf_r+0xe2>
 8007908:	9b03      	ldr	r3, [sp, #12]
 800790a:	1d19      	adds	r1, r3, #4
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	9103      	str	r1, [sp, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	bfbb      	ittet	lt
 8007914:	425b      	neglt	r3, r3
 8007916:	f042 0202 	orrlt.w	r2, r2, #2
 800791a:	9307      	strge	r3, [sp, #28]
 800791c:	9307      	strlt	r3, [sp, #28]
 800791e:	bfb8      	it	lt
 8007920:	9204      	strlt	r2, [sp, #16]
 8007922:	7823      	ldrb	r3, [r4, #0]
 8007924:	2b2e      	cmp	r3, #46	; 0x2e
 8007926:	d10c      	bne.n	8007942 <_vfiprintf_r+0x176>
 8007928:	7863      	ldrb	r3, [r4, #1]
 800792a:	2b2a      	cmp	r3, #42	; 0x2a
 800792c:	d135      	bne.n	800799a <_vfiprintf_r+0x1ce>
 800792e:	9b03      	ldr	r3, [sp, #12]
 8007930:	1d1a      	adds	r2, r3, #4
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	9203      	str	r2, [sp, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	bfb8      	it	lt
 800793a:	f04f 33ff 	movlt.w	r3, #4294967295
 800793e:	3402      	adds	r4, #2
 8007940:	9305      	str	r3, [sp, #20]
 8007942:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a28 <_vfiprintf_r+0x25c>
 8007946:	7821      	ldrb	r1, [r4, #0]
 8007948:	2203      	movs	r2, #3
 800794a:	4650      	mov	r0, sl
 800794c:	f7f8 fc60 	bl	8000210 <memchr>
 8007950:	b140      	cbz	r0, 8007964 <_vfiprintf_r+0x198>
 8007952:	2340      	movs	r3, #64	; 0x40
 8007954:	eba0 000a 	sub.w	r0, r0, sl
 8007958:	fa03 f000 	lsl.w	r0, r3, r0
 800795c:	9b04      	ldr	r3, [sp, #16]
 800795e:	4303      	orrs	r3, r0
 8007960:	3401      	adds	r4, #1
 8007962:	9304      	str	r3, [sp, #16]
 8007964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007968:	482c      	ldr	r0, [pc, #176]	; (8007a1c <_vfiprintf_r+0x250>)
 800796a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800796e:	2206      	movs	r2, #6
 8007970:	f7f8 fc4e 	bl	8000210 <memchr>
 8007974:	2800      	cmp	r0, #0
 8007976:	d03f      	beq.n	80079f8 <_vfiprintf_r+0x22c>
 8007978:	4b29      	ldr	r3, [pc, #164]	; (8007a20 <_vfiprintf_r+0x254>)
 800797a:	bb1b      	cbnz	r3, 80079c4 <_vfiprintf_r+0x1f8>
 800797c:	9b03      	ldr	r3, [sp, #12]
 800797e:	3307      	adds	r3, #7
 8007980:	f023 0307 	bic.w	r3, r3, #7
 8007984:	3308      	adds	r3, #8
 8007986:	9303      	str	r3, [sp, #12]
 8007988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800798a:	443b      	add	r3, r7
 800798c:	9309      	str	r3, [sp, #36]	; 0x24
 800798e:	e767      	b.n	8007860 <_vfiprintf_r+0x94>
 8007990:	fb0c 3202 	mla	r2, ip, r2, r3
 8007994:	460c      	mov	r4, r1
 8007996:	2001      	movs	r0, #1
 8007998:	e7a5      	b.n	80078e6 <_vfiprintf_r+0x11a>
 800799a:	2300      	movs	r3, #0
 800799c:	3401      	adds	r4, #1
 800799e:	9305      	str	r3, [sp, #20]
 80079a0:	4619      	mov	r1, r3
 80079a2:	f04f 0c0a 	mov.w	ip, #10
 80079a6:	4620      	mov	r0, r4
 80079a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079ac:	3a30      	subs	r2, #48	; 0x30
 80079ae:	2a09      	cmp	r2, #9
 80079b0:	d903      	bls.n	80079ba <_vfiprintf_r+0x1ee>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0c5      	beq.n	8007942 <_vfiprintf_r+0x176>
 80079b6:	9105      	str	r1, [sp, #20]
 80079b8:	e7c3      	b.n	8007942 <_vfiprintf_r+0x176>
 80079ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80079be:	4604      	mov	r4, r0
 80079c0:	2301      	movs	r3, #1
 80079c2:	e7f0      	b.n	80079a6 <_vfiprintf_r+0x1da>
 80079c4:	ab03      	add	r3, sp, #12
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	462a      	mov	r2, r5
 80079ca:	4b16      	ldr	r3, [pc, #88]	; (8007a24 <_vfiprintf_r+0x258>)
 80079cc:	a904      	add	r1, sp, #16
 80079ce:	4630      	mov	r0, r6
 80079d0:	f7fb f9e2 	bl	8002d98 <_printf_float>
 80079d4:	4607      	mov	r7, r0
 80079d6:	1c78      	adds	r0, r7, #1
 80079d8:	d1d6      	bne.n	8007988 <_vfiprintf_r+0x1bc>
 80079da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079dc:	07d9      	lsls	r1, r3, #31
 80079de:	d405      	bmi.n	80079ec <_vfiprintf_r+0x220>
 80079e0:	89ab      	ldrh	r3, [r5, #12]
 80079e2:	059a      	lsls	r2, r3, #22
 80079e4:	d402      	bmi.n	80079ec <_vfiprintf_r+0x220>
 80079e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079e8:	f7ff fe79 	bl	80076de <__retarget_lock_release_recursive>
 80079ec:	89ab      	ldrh	r3, [r5, #12]
 80079ee:	065b      	lsls	r3, r3, #25
 80079f0:	f53f af12 	bmi.w	8007818 <_vfiprintf_r+0x4c>
 80079f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079f6:	e711      	b.n	800781c <_vfiprintf_r+0x50>
 80079f8:	ab03      	add	r3, sp, #12
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	462a      	mov	r2, r5
 80079fe:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <_vfiprintf_r+0x258>)
 8007a00:	a904      	add	r1, sp, #16
 8007a02:	4630      	mov	r0, r6
 8007a04:	f7fb fc6c 	bl	80032e0 <_printf_i>
 8007a08:	e7e4      	b.n	80079d4 <_vfiprintf_r+0x208>
 8007a0a:	bf00      	nop
 8007a0c:	080087f4 	.word	0x080087f4
 8007a10:	08008814 	.word	0x08008814
 8007a14:	080087d4 	.word	0x080087d4
 8007a18:	0800876c 	.word	0x0800876c
 8007a1c:	08008776 	.word	0x08008776
 8007a20:	08002d99 	.word	0x08002d99
 8007a24:	080077a7 	.word	0x080077a7
 8007a28:	08008772 	.word	0x08008772

08007a2c <__swbuf_r>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	460e      	mov	r6, r1
 8007a30:	4614      	mov	r4, r2
 8007a32:	4605      	mov	r5, r0
 8007a34:	b118      	cbz	r0, 8007a3e <__swbuf_r+0x12>
 8007a36:	6983      	ldr	r3, [r0, #24]
 8007a38:	b90b      	cbnz	r3, 8007a3e <__swbuf_r+0x12>
 8007a3a:	f7ff fd9f 	bl	800757c <__sinit>
 8007a3e:	4b21      	ldr	r3, [pc, #132]	; (8007ac4 <__swbuf_r+0x98>)
 8007a40:	429c      	cmp	r4, r3
 8007a42:	d12b      	bne.n	8007a9c <__swbuf_r+0x70>
 8007a44:	686c      	ldr	r4, [r5, #4]
 8007a46:	69a3      	ldr	r3, [r4, #24]
 8007a48:	60a3      	str	r3, [r4, #8]
 8007a4a:	89a3      	ldrh	r3, [r4, #12]
 8007a4c:	071a      	lsls	r2, r3, #28
 8007a4e:	d52f      	bpl.n	8007ab0 <__swbuf_r+0x84>
 8007a50:	6923      	ldr	r3, [r4, #16]
 8007a52:	b36b      	cbz	r3, 8007ab0 <__swbuf_r+0x84>
 8007a54:	6923      	ldr	r3, [r4, #16]
 8007a56:	6820      	ldr	r0, [r4, #0]
 8007a58:	1ac0      	subs	r0, r0, r3
 8007a5a:	6963      	ldr	r3, [r4, #20]
 8007a5c:	b2f6      	uxtb	r6, r6
 8007a5e:	4283      	cmp	r3, r0
 8007a60:	4637      	mov	r7, r6
 8007a62:	dc04      	bgt.n	8007a6e <__swbuf_r+0x42>
 8007a64:	4621      	mov	r1, r4
 8007a66:	4628      	mov	r0, r5
 8007a68:	f7ff fcf4 	bl	8007454 <_fflush_r>
 8007a6c:	bb30      	cbnz	r0, 8007abc <__swbuf_r+0x90>
 8007a6e:	68a3      	ldr	r3, [r4, #8]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	60a3      	str	r3, [r4, #8]
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	6022      	str	r2, [r4, #0]
 8007a7a:	701e      	strb	r6, [r3, #0]
 8007a7c:	6963      	ldr	r3, [r4, #20]
 8007a7e:	3001      	adds	r0, #1
 8007a80:	4283      	cmp	r3, r0
 8007a82:	d004      	beq.n	8007a8e <__swbuf_r+0x62>
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	07db      	lsls	r3, r3, #31
 8007a88:	d506      	bpl.n	8007a98 <__swbuf_r+0x6c>
 8007a8a:	2e0a      	cmp	r6, #10
 8007a8c:	d104      	bne.n	8007a98 <__swbuf_r+0x6c>
 8007a8e:	4621      	mov	r1, r4
 8007a90:	4628      	mov	r0, r5
 8007a92:	f7ff fcdf 	bl	8007454 <_fflush_r>
 8007a96:	b988      	cbnz	r0, 8007abc <__swbuf_r+0x90>
 8007a98:	4638      	mov	r0, r7
 8007a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ac8 <__swbuf_r+0x9c>)
 8007a9e:	429c      	cmp	r4, r3
 8007aa0:	d101      	bne.n	8007aa6 <__swbuf_r+0x7a>
 8007aa2:	68ac      	ldr	r4, [r5, #8]
 8007aa4:	e7cf      	b.n	8007a46 <__swbuf_r+0x1a>
 8007aa6:	4b09      	ldr	r3, [pc, #36]	; (8007acc <__swbuf_r+0xa0>)
 8007aa8:	429c      	cmp	r4, r3
 8007aaa:	bf08      	it	eq
 8007aac:	68ec      	ldreq	r4, [r5, #12]
 8007aae:	e7ca      	b.n	8007a46 <__swbuf_r+0x1a>
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f000 f80c 	bl	8007ad0 <__swsetup_r>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d0cb      	beq.n	8007a54 <__swbuf_r+0x28>
 8007abc:	f04f 37ff 	mov.w	r7, #4294967295
 8007ac0:	e7ea      	b.n	8007a98 <__swbuf_r+0x6c>
 8007ac2:	bf00      	nop
 8007ac4:	080087f4 	.word	0x080087f4
 8007ac8:	08008814 	.word	0x08008814
 8007acc:	080087d4 	.word	0x080087d4

08007ad0 <__swsetup_r>:
 8007ad0:	4b32      	ldr	r3, [pc, #200]	; (8007b9c <__swsetup_r+0xcc>)
 8007ad2:	b570      	push	{r4, r5, r6, lr}
 8007ad4:	681d      	ldr	r5, [r3, #0]
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	460c      	mov	r4, r1
 8007ada:	b125      	cbz	r5, 8007ae6 <__swsetup_r+0x16>
 8007adc:	69ab      	ldr	r3, [r5, #24]
 8007ade:	b913      	cbnz	r3, 8007ae6 <__swsetup_r+0x16>
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f7ff fd4b 	bl	800757c <__sinit>
 8007ae6:	4b2e      	ldr	r3, [pc, #184]	; (8007ba0 <__swsetup_r+0xd0>)
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	d10f      	bne.n	8007b0c <__swsetup_r+0x3c>
 8007aec:	686c      	ldr	r4, [r5, #4]
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007af4:	0719      	lsls	r1, r3, #28
 8007af6:	d42c      	bmi.n	8007b52 <__swsetup_r+0x82>
 8007af8:	06dd      	lsls	r5, r3, #27
 8007afa:	d411      	bmi.n	8007b20 <__swsetup_r+0x50>
 8007afc:	2309      	movs	r3, #9
 8007afe:	6033      	str	r3, [r6, #0]
 8007b00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b04:	81a3      	strh	r3, [r4, #12]
 8007b06:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0a:	e03e      	b.n	8007b8a <__swsetup_r+0xba>
 8007b0c:	4b25      	ldr	r3, [pc, #148]	; (8007ba4 <__swsetup_r+0xd4>)
 8007b0e:	429c      	cmp	r4, r3
 8007b10:	d101      	bne.n	8007b16 <__swsetup_r+0x46>
 8007b12:	68ac      	ldr	r4, [r5, #8]
 8007b14:	e7eb      	b.n	8007aee <__swsetup_r+0x1e>
 8007b16:	4b24      	ldr	r3, [pc, #144]	; (8007ba8 <__swsetup_r+0xd8>)
 8007b18:	429c      	cmp	r4, r3
 8007b1a:	bf08      	it	eq
 8007b1c:	68ec      	ldreq	r4, [r5, #12]
 8007b1e:	e7e6      	b.n	8007aee <__swsetup_r+0x1e>
 8007b20:	0758      	lsls	r0, r3, #29
 8007b22:	d512      	bpl.n	8007b4a <__swsetup_r+0x7a>
 8007b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b26:	b141      	cbz	r1, 8007b3a <__swsetup_r+0x6a>
 8007b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b2c:	4299      	cmp	r1, r3
 8007b2e:	d002      	beq.n	8007b36 <__swsetup_r+0x66>
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7fe fd89 	bl	8006648 <_free_r>
 8007b36:	2300      	movs	r3, #0
 8007b38:	6363      	str	r3, [r4, #52]	; 0x34
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	2300      	movs	r3, #0
 8007b44:	6063      	str	r3, [r4, #4]
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	89a3      	ldrh	r3, [r4, #12]
 8007b4c:	f043 0308 	orr.w	r3, r3, #8
 8007b50:	81a3      	strh	r3, [r4, #12]
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	b94b      	cbnz	r3, 8007b6a <__swsetup_r+0x9a>
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b60:	d003      	beq.n	8007b6a <__swsetup_r+0x9a>
 8007b62:	4621      	mov	r1, r4
 8007b64:	4630      	mov	r0, r6
 8007b66:	f000 f84d 	bl	8007c04 <__smakebuf_r>
 8007b6a:	89a0      	ldrh	r0, [r4, #12]
 8007b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b70:	f010 0301 	ands.w	r3, r0, #1
 8007b74:	d00a      	beq.n	8007b8c <__swsetup_r+0xbc>
 8007b76:	2300      	movs	r3, #0
 8007b78:	60a3      	str	r3, [r4, #8]
 8007b7a:	6963      	ldr	r3, [r4, #20]
 8007b7c:	425b      	negs	r3, r3
 8007b7e:	61a3      	str	r3, [r4, #24]
 8007b80:	6923      	ldr	r3, [r4, #16]
 8007b82:	b943      	cbnz	r3, 8007b96 <__swsetup_r+0xc6>
 8007b84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b88:	d1ba      	bne.n	8007b00 <__swsetup_r+0x30>
 8007b8a:	bd70      	pop	{r4, r5, r6, pc}
 8007b8c:	0781      	lsls	r1, r0, #30
 8007b8e:	bf58      	it	pl
 8007b90:	6963      	ldrpl	r3, [r4, #20]
 8007b92:	60a3      	str	r3, [r4, #8]
 8007b94:	e7f4      	b.n	8007b80 <__swsetup_r+0xb0>
 8007b96:	2000      	movs	r0, #0
 8007b98:	e7f7      	b.n	8007b8a <__swsetup_r+0xba>
 8007b9a:	bf00      	nop
 8007b9c:	2000000c 	.word	0x2000000c
 8007ba0:	080087f4 	.word	0x080087f4
 8007ba4:	08008814 	.word	0x08008814
 8007ba8:	080087d4 	.word	0x080087d4

08007bac <abort>:
 8007bac:	b508      	push	{r3, lr}
 8007bae:	2006      	movs	r0, #6
 8007bb0:	f000 f898 	bl	8007ce4 <raise>
 8007bb4:	2001      	movs	r0, #1
 8007bb6:	f7fa f87d 	bl	8001cb4 <_exit>

08007bba <__swhatbuf_r>:
 8007bba:	b570      	push	{r4, r5, r6, lr}
 8007bbc:	460e      	mov	r6, r1
 8007bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc2:	2900      	cmp	r1, #0
 8007bc4:	b096      	sub	sp, #88	; 0x58
 8007bc6:	4614      	mov	r4, r2
 8007bc8:	461d      	mov	r5, r3
 8007bca:	da07      	bge.n	8007bdc <__swhatbuf_r+0x22>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	602b      	str	r3, [r5, #0]
 8007bd0:	89b3      	ldrh	r3, [r6, #12]
 8007bd2:	061a      	lsls	r2, r3, #24
 8007bd4:	d410      	bmi.n	8007bf8 <__swhatbuf_r+0x3e>
 8007bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bda:	e00e      	b.n	8007bfa <__swhatbuf_r+0x40>
 8007bdc:	466a      	mov	r2, sp
 8007bde:	f000 f89d 	bl	8007d1c <_fstat_r>
 8007be2:	2800      	cmp	r0, #0
 8007be4:	dbf2      	blt.n	8007bcc <__swhatbuf_r+0x12>
 8007be6:	9a01      	ldr	r2, [sp, #4]
 8007be8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bf0:	425a      	negs	r2, r3
 8007bf2:	415a      	adcs	r2, r3
 8007bf4:	602a      	str	r2, [r5, #0]
 8007bf6:	e7ee      	b.n	8007bd6 <__swhatbuf_r+0x1c>
 8007bf8:	2340      	movs	r3, #64	; 0x40
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	b016      	add	sp, #88	; 0x58
 8007c00:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c04 <__smakebuf_r>:
 8007c04:	898b      	ldrh	r3, [r1, #12]
 8007c06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c08:	079d      	lsls	r5, r3, #30
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	d507      	bpl.n	8007c20 <__smakebuf_r+0x1c>
 8007c10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	6123      	str	r3, [r4, #16]
 8007c18:	2301      	movs	r3, #1
 8007c1a:	6163      	str	r3, [r4, #20]
 8007c1c:	b002      	add	sp, #8
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	ab01      	add	r3, sp, #4
 8007c22:	466a      	mov	r2, sp
 8007c24:	f7ff ffc9 	bl	8007bba <__swhatbuf_r>
 8007c28:	9900      	ldr	r1, [sp, #0]
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f7fe fd5b 	bl	80066e8 <_malloc_r>
 8007c32:	b948      	cbnz	r0, 8007c48 <__smakebuf_r+0x44>
 8007c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c38:	059a      	lsls	r2, r3, #22
 8007c3a:	d4ef      	bmi.n	8007c1c <__smakebuf_r+0x18>
 8007c3c:	f023 0303 	bic.w	r3, r3, #3
 8007c40:	f043 0302 	orr.w	r3, r3, #2
 8007c44:	81a3      	strh	r3, [r4, #12]
 8007c46:	e7e3      	b.n	8007c10 <__smakebuf_r+0xc>
 8007c48:	4b0d      	ldr	r3, [pc, #52]	; (8007c80 <__smakebuf_r+0x7c>)
 8007c4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	6020      	str	r0, [r4, #0]
 8007c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c54:	81a3      	strh	r3, [r4, #12]
 8007c56:	9b00      	ldr	r3, [sp, #0]
 8007c58:	6163      	str	r3, [r4, #20]
 8007c5a:	9b01      	ldr	r3, [sp, #4]
 8007c5c:	6120      	str	r0, [r4, #16]
 8007c5e:	b15b      	cbz	r3, 8007c78 <__smakebuf_r+0x74>
 8007c60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c64:	4630      	mov	r0, r6
 8007c66:	f000 f86b 	bl	8007d40 <_isatty_r>
 8007c6a:	b128      	cbz	r0, 8007c78 <__smakebuf_r+0x74>
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	81a3      	strh	r3, [r4, #12]
 8007c78:	89a0      	ldrh	r0, [r4, #12]
 8007c7a:	4305      	orrs	r5, r0
 8007c7c:	81a5      	strh	r5, [r4, #12]
 8007c7e:	e7cd      	b.n	8007c1c <__smakebuf_r+0x18>
 8007c80:	08007515 	.word	0x08007515

08007c84 <_malloc_usable_size_r>:
 8007c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c88:	1f18      	subs	r0, r3, #4
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	bfbc      	itt	lt
 8007c8e:	580b      	ldrlt	r3, [r1, r0]
 8007c90:	18c0      	addlt	r0, r0, r3
 8007c92:	4770      	bx	lr

08007c94 <_raise_r>:
 8007c94:	291f      	cmp	r1, #31
 8007c96:	b538      	push	{r3, r4, r5, lr}
 8007c98:	4604      	mov	r4, r0
 8007c9a:	460d      	mov	r5, r1
 8007c9c:	d904      	bls.n	8007ca8 <_raise_r+0x14>
 8007c9e:	2316      	movs	r3, #22
 8007ca0:	6003      	str	r3, [r0, #0]
 8007ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007caa:	b112      	cbz	r2, 8007cb2 <_raise_r+0x1e>
 8007cac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cb0:	b94b      	cbnz	r3, 8007cc6 <_raise_r+0x32>
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f000 f830 	bl	8007d18 <_getpid_r>
 8007cb8:	462a      	mov	r2, r5
 8007cba:	4601      	mov	r1, r0
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cc2:	f000 b817 	b.w	8007cf4 <_kill_r>
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d00a      	beq.n	8007ce0 <_raise_r+0x4c>
 8007cca:	1c59      	adds	r1, r3, #1
 8007ccc:	d103      	bne.n	8007cd6 <_raise_r+0x42>
 8007cce:	2316      	movs	r3, #22
 8007cd0:	6003      	str	r3, [r0, #0]
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	e7e7      	b.n	8007ca6 <_raise_r+0x12>
 8007cd6:	2400      	movs	r4, #0
 8007cd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007cdc:	4628      	mov	r0, r5
 8007cde:	4798      	blx	r3
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	e7e0      	b.n	8007ca6 <_raise_r+0x12>

08007ce4 <raise>:
 8007ce4:	4b02      	ldr	r3, [pc, #8]	; (8007cf0 <raise+0xc>)
 8007ce6:	4601      	mov	r1, r0
 8007ce8:	6818      	ldr	r0, [r3, #0]
 8007cea:	f7ff bfd3 	b.w	8007c94 <_raise_r>
 8007cee:	bf00      	nop
 8007cf0:	2000000c 	.word	0x2000000c

08007cf4 <_kill_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	4d07      	ldr	r5, [pc, #28]	; (8007d14 <_kill_r+0x20>)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	4611      	mov	r1, r2
 8007d00:	602b      	str	r3, [r5, #0]
 8007d02:	f7f9 ffc7 	bl	8001c94 <_kill>
 8007d06:	1c43      	adds	r3, r0, #1
 8007d08:	d102      	bne.n	8007d10 <_kill_r+0x1c>
 8007d0a:	682b      	ldr	r3, [r5, #0]
 8007d0c:	b103      	cbz	r3, 8007d10 <_kill_r+0x1c>
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	bd38      	pop	{r3, r4, r5, pc}
 8007d12:	bf00      	nop
 8007d14:	2000024c 	.word	0x2000024c

08007d18 <_getpid_r>:
 8007d18:	f7f9 bfb4 	b.w	8001c84 <_getpid>

08007d1c <_fstat_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4d07      	ldr	r5, [pc, #28]	; (8007d3c <_fstat_r+0x20>)
 8007d20:	2300      	movs	r3, #0
 8007d22:	4604      	mov	r4, r0
 8007d24:	4608      	mov	r0, r1
 8007d26:	4611      	mov	r1, r2
 8007d28:	602b      	str	r3, [r5, #0]
 8007d2a:	f7fa f812 	bl	8001d52 <_fstat>
 8007d2e:	1c43      	adds	r3, r0, #1
 8007d30:	d102      	bne.n	8007d38 <_fstat_r+0x1c>
 8007d32:	682b      	ldr	r3, [r5, #0]
 8007d34:	b103      	cbz	r3, 8007d38 <_fstat_r+0x1c>
 8007d36:	6023      	str	r3, [r4, #0]
 8007d38:	bd38      	pop	{r3, r4, r5, pc}
 8007d3a:	bf00      	nop
 8007d3c:	2000024c 	.word	0x2000024c

08007d40 <_isatty_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	4d06      	ldr	r5, [pc, #24]	; (8007d5c <_isatty_r+0x1c>)
 8007d44:	2300      	movs	r3, #0
 8007d46:	4604      	mov	r4, r0
 8007d48:	4608      	mov	r0, r1
 8007d4a:	602b      	str	r3, [r5, #0]
 8007d4c:	f7fa f811 	bl	8001d72 <_isatty>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	d102      	bne.n	8007d5a <_isatty_r+0x1a>
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	b103      	cbz	r3, 8007d5a <_isatty_r+0x1a>
 8007d58:	6023      	str	r3, [r4, #0]
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}
 8007d5c:	2000024c 	.word	0x2000024c

08007d60 <_init>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	bf00      	nop
 8007d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d66:	bc08      	pop	{r3}
 8007d68:	469e      	mov	lr, r3
 8007d6a:	4770      	bx	lr

08007d6c <_fini>:
 8007d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6e:	bf00      	nop
 8007d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d72:	bc08      	pop	{r3}
 8007d74:	469e      	mov	lr, r3
 8007d76:	4770      	bx	lr
