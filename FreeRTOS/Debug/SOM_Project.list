
SOM_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a74  0800afa8  0800afa8  0000bfa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba1c  0800ba1c  0000d074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ba1c  0800ba1c  0000ca1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba24  0800ba24  0000d074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba24  0800ba24  0000ca24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba28  0800ba28  0000ca28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800ba2c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d60  20000074  0800baa0  0000d074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002dd4  0800baa0  0000ddd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021663  00000000  00000000  0000d0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004324  00000000  00000000  0002e707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c40  00000000  00000000  00032a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000160e  00000000  00000000  00034670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f06  00000000  00000000  00035c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f5fa  00000000  00000000  0003ab84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112624  00000000  00000000  0005a17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c7a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008478  00000000  00000000  0016c7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00174c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af90 	.word	0x0800af90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800af90 	.word	0x0800af90

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005d4:	1d39      	adds	r1, r7, #4
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	2201      	movs	r2, #1
 80005dc:	4803      	ldr	r0, [pc, #12]	@ (80005ec <__io_putchar+0x20>)
 80005de:	f004 fe8d 	bl	80052fc <HAL_UART_Transmit>
    return 1;
 80005e2:	2301      	movs	r3, #1
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200000f4 	.word	0x200000f4

080005f0 <HAL_UART_RxCpltCallback>:

// Odbiór pojedynczego znaku przez przerwanie
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

   if(huart->Instance == USART2){
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a09      	ldr	r2, [pc, #36]	@ (8000624 <HAL_UART_RxCpltCallback+0x34>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d10b      	bne.n	800061a <HAL_UART_RxCpltCallback+0x2a>
	osMessageQueuePut(uartTxHandle, &rx_char, 0, 0);
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <HAL_UART_RxCpltCallback+0x38>)
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2200      	movs	r2, #0
 800060a:	4908      	ldr	r1, [pc, #32]	@ (800062c <HAL_UART_RxCpltCallback+0x3c>)
 800060c:	f006 fbc0 	bl	8006d90 <osMessageQueuePut>
	HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 8000610:	2201      	movs	r2, #1
 8000612:	4906      	ldr	r1, [pc, #24]	@ (800062c <HAL_UART_RxCpltCallback+0x3c>)
 8000614:	4806      	ldr	r0, [pc, #24]	@ (8000630 <HAL_UART_RxCpltCallback+0x40>)
 8000616:	f004 fefb 	bl	8005410 <HAL_UART_Receive_IT>

   }
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40004400 	.word	0x40004400
 8000628:	2000019c 	.word	0x2000019c
 800062c:	200001a2 	.word	0x200001a2
 8000630:	200000f4 	.word	0x200000f4

08000634 <uart_print_with_prompt>:

void uart_print_with_prompt(const char* msg)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
    // ANSI: \033[2K czyści całą linię, \r ustawia na początek linii
    const char clear_line[] = "\033[2K\r";
 800063c:	4a19      	ldr	r2, [pc, #100]	@ (80006a4 <uart_print_with_prompt+0x70>)
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000646:	6018      	str	r0, [r3, #0]
 8000648:	3304      	adds	r3, #4
 800064a:	8019      	strh	r1, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t*)clear_line, strlen(clear_line), HAL_MAX_DELAY);
 800064c:	f107 0108 	add.w	r1, r7, #8
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
 8000654:	2205      	movs	r2, #5
 8000656:	4814      	ldr	r0, [pc, #80]	@ (80006a8 <uart_print_with_prompt+0x74>)
 8000658:	f004 fe50 	bl	80052fc <HAL_UART_Transmit>

    // Wypisz wynik analizy (np. "AVG: 1234\r\n")
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff fdc1 	bl	80001e4 <strlen>
 8000662:	4603      	mov	r3, r0
 8000664:	b29a      	uxth	r2, r3
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	480e      	ldr	r0, [pc, #56]	@ (80006a8 <uart_print_with_prompt+0x74>)
 800066e:	f004 fe45 	bl	80052fc <HAL_UART_Transmit>

    // Nowa linia prompta i ponownie dotychczas wpisany tekst
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n> ", 5, HAL_MAX_DELAY);
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	2205      	movs	r2, #5
 8000678:	490c      	ldr	r1, [pc, #48]	@ (80006ac <uart_print_with_prompt+0x78>)
 800067a:	480b      	ldr	r0, [pc, #44]	@ (80006a8 <uart_print_with_prompt+0x74>)
 800067c:	f004 fe3e 	bl	80052fc <HAL_UART_Transmit>
    if(g_rx_idx > 0) {
 8000680:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <uart_print_with_prompt+0x7c>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	b29b      	uxth	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d008      	beq.n	800069c <uart_print_with_prompt+0x68>
        HAL_UART_Transmit(&huart2, (uint8_t*)g_rx_buffer, g_rx_idx, HAL_MAX_DELAY);
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <uart_print_with_prompt+0x7c>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b29a      	uxth	r2, r3
 8000690:	f04f 33ff 	mov.w	r3, #4294967295
 8000694:	4907      	ldr	r1, [pc, #28]	@ (80006b4 <uart_print_with_prompt+0x80>)
 8000696:	4804      	ldr	r0, [pc, #16]	@ (80006a8 <uart_print_with_prompt+0x74>)
 8000698:	f004 fe30 	bl	80052fc <HAL_UART_Transmit>
    }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	0800b018 	.word	0x0800b018
 80006a8:	200000f4 	.word	0x200000f4
 80006ac:	0800b010 	.word	0x0800b010
 80006b0:	200001b8 	.word	0x200001b8
 80006b4:	200001a4 	.word	0x200001a4

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f001 f920 	bl	8001900 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f892 	bl	80007e8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 f988 	bl	80009d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c8:	f000 f956 	bl	8000978 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006cc:	f000 f8de 	bl	800088c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &rx_char, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	492b      	ldr	r1, [pc, #172]	@ (8000780 <main+0xc8>)
 80006d4:	482b      	ldr	r0, [pc, #172]	@ (8000784 <main+0xcc>)
 80006d6:	f004 fe9b 	bl	8005410 <HAL_UART_Receive_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80006da:	217f      	movs	r1, #127	@ 0x7f
 80006dc:	482a      	ldr	r0, [pc, #168]	@ (8000788 <main+0xd0>)
 80006de:	f002 fb73 	bl	8002dc8 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006e2:	f006 f9eb 	bl	8006abc <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ledCmd */
  ledCmdHandle = osMessageQueueNew (4, sizeof(Command_t), &ledCmd_attributes);
 80006e6:	4a29      	ldr	r2, [pc, #164]	@ (800078c <main+0xd4>)
 80006e8:	2101      	movs	r1, #1
 80006ea:	2004      	movs	r0, #4
 80006ec:	f006 fadd 	bl	8006caa <osMessageQueueNew>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a27      	ldr	r2, [pc, #156]	@ (8000790 <main+0xd8>)
 80006f4:	6013      	str	r3, [r2, #0]

  /* creation of adcAnalyzer */
  adcAnalyzerHandle = osMessageQueueNew (16, sizeof(uint16_t), &adcAnalyzer_attributes);
 80006f6:	4a27      	ldr	r2, [pc, #156]	@ (8000794 <main+0xdc>)
 80006f8:	2102      	movs	r1, #2
 80006fa:	2010      	movs	r0, #16
 80006fc:	f006 fad5 	bl	8006caa <osMessageQueueNew>
 8000700:	4603      	mov	r3, r0
 8000702:	4a25      	ldr	r2, [pc, #148]	@ (8000798 <main+0xe0>)
 8000704:	6013      	str	r3, [r2, #0]

  /* creation of adcAlert */
  adcAlertHandle = osMessageQueueNew (16, sizeof(uint16_t), &adcAlert_attributes);
 8000706:	4a25      	ldr	r2, [pc, #148]	@ (800079c <main+0xe4>)
 8000708:	2102      	movs	r1, #2
 800070a:	2010      	movs	r0, #16
 800070c:	f006 facd 	bl	8006caa <osMessageQueueNew>
 8000710:	4603      	mov	r3, r0
 8000712:	4a23      	ldr	r2, [pc, #140]	@ (80007a0 <main+0xe8>)
 8000714:	6013      	str	r3, [r2, #0]

  /* creation of uartTx */
  uartTxHandle = osMessageQueueNew (16, sizeof(uint8_t), &uartTx_attributes);
 8000716:	4a23      	ldr	r2, [pc, #140]	@ (80007a4 <main+0xec>)
 8000718:	2101      	movs	r1, #1
 800071a:	2010      	movs	r0, #16
 800071c:	f006 fac5 	bl	8006caa <osMessageQueueNew>
 8000720:	4603      	mov	r3, r0
 8000722:	4a21      	ldr	r2, [pc, #132]	@ (80007a8 <main+0xf0>)
 8000724:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UartTask */
  UartTaskHandle = osThreadNew(StartUartTask, NULL, &UartTask_attributes);
 8000726:	4a21      	ldr	r2, [pc, #132]	@ (80007ac <main+0xf4>)
 8000728:	2100      	movs	r1, #0
 800072a:	4821      	ldr	r0, [pc, #132]	@ (80007b0 <main+0xf8>)
 800072c:	f006 fa10 	bl	8006b50 <osThreadNew>
 8000730:	4603      	mov	r3, r0
 8000732:	4a20      	ldr	r2, [pc, #128]	@ (80007b4 <main+0xfc>)
 8000734:	6013      	str	r3, [r2, #0]

  /* creation of LedTask */
  LedTaskHandle = osThreadNew(StartLedTask, NULL, &LedTask_attributes);
 8000736:	4a20      	ldr	r2, [pc, #128]	@ (80007b8 <main+0x100>)
 8000738:	2100      	movs	r1, #0
 800073a:	4820      	ldr	r0, [pc, #128]	@ (80007bc <main+0x104>)
 800073c:	f006 fa08 	bl	8006b50 <osThreadNew>
 8000740:	4603      	mov	r3, r0
 8000742:	4a1f      	ldr	r2, [pc, #124]	@ (80007c0 <main+0x108>)
 8000744:	6013      	str	r3, [r2, #0]

  /* creation of ADCSampler */
  ADCSamplerHandle = osThreadNew(StartADCSampler, NULL, &ADCSampler_attributes);
 8000746:	4a1f      	ldr	r2, [pc, #124]	@ (80007c4 <main+0x10c>)
 8000748:	2100      	movs	r1, #0
 800074a:	481f      	ldr	r0, [pc, #124]	@ (80007c8 <main+0x110>)
 800074c:	f006 fa00 	bl	8006b50 <osThreadNew>
 8000750:	4603      	mov	r3, r0
 8000752:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <main+0x114>)
 8000754:	6013      	str	r3, [r2, #0]

  /* creation of DataAnalyzer */
  DataAnalyzerHandle = osThreadNew(StartDataAnalyzer, NULL, &DataAnalyzer_attributes);
 8000756:	4a1e      	ldr	r2, [pc, #120]	@ (80007d0 <main+0x118>)
 8000758:	2100      	movs	r1, #0
 800075a:	481e      	ldr	r0, [pc, #120]	@ (80007d4 <main+0x11c>)
 800075c:	f006 f9f8 	bl	8006b50 <osThreadNew>
 8000760:	4603      	mov	r3, r0
 8000762:	4a1d      	ldr	r2, [pc, #116]	@ (80007d8 <main+0x120>)
 8000764:	6013      	str	r3, [r2, #0]

  /* creation of AlertMonitor */
  AlertMonitorHandle = osThreadNew(StartAlertMonitor, NULL, &AlertMonitor_attributes);
 8000766:	4a1d      	ldr	r2, [pc, #116]	@ (80007dc <main+0x124>)
 8000768:	2100      	movs	r1, #0
 800076a:	481d      	ldr	r0, [pc, #116]	@ (80007e0 <main+0x128>)
 800076c:	f006 f9f0 	bl	8006b50 <osThreadNew>
 8000770:	4603      	mov	r3, r0
 8000772:	4a1c      	ldr	r2, [pc, #112]	@ (80007e4 <main+0x12c>)
 8000774:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000776:	f006 f9c5 	bl	8006b04 <osKernelStart>
 800077a:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800077c:	4618      	mov	r0, r3
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200001a2 	.word	0x200001a2
 8000784:	200000f4 	.word	0x200000f4
 8000788:	20000090 	.word	0x20000090
 800078c:	0800b3c4 	.word	0x0800b3c4
 8000790:	20000190 	.word	0x20000190
 8000794:	0800b3dc 	.word	0x0800b3dc
 8000798:	20000194 	.word	0x20000194
 800079c:	0800b3f4 	.word	0x0800b3f4
 80007a0:	20000198 	.word	0x20000198
 80007a4:	0800b40c 	.word	0x0800b40c
 80007a8:	2000019c 	.word	0x2000019c
 80007ac:	0800b310 	.word	0x0800b310
 80007b0:	08000f8d 	.word	0x08000f8d
 80007b4:	2000017c 	.word	0x2000017c
 80007b8:	0800b334 	.word	0x0800b334
 80007bc:	080010d1 	.word	0x080010d1
 80007c0:	20000180 	.word	0x20000180
 80007c4:	0800b358 	.word	0x0800b358
 80007c8:	08001145 	.word	0x08001145
 80007cc:	20000184 	.word	0x20000184
 80007d0:	0800b37c 	.word	0x0800b37c
 80007d4:	080011b1 	.word	0x080011b1
 80007d8:	20000188 	.word	0x20000188
 80007dc:	0800b3a0 	.word	0x0800b3a0
 80007e0:	0800135d 	.word	0x0800135d
 80007e4:	2000018c 	.word	0x2000018c

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b096      	sub	sp, #88	@ 0x58
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2244      	movs	r2, #68	@ 0x44
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f009 fac1 	bl	8009d7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800080a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800080e:	f002 ff1d 	bl	800364c <HAL_PWREx_ControlVoltageScaling>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000818:	f000 fdee 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081c:	2302      	movs	r3, #2
 800081e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000820:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000824:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000826:	2310      	movs	r3, #16
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800082e:	2302      	movs	r3, #2
 8000830:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000832:	2301      	movs	r3, #1
 8000834:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000836:	230a      	movs	r3, #10
 8000838:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800083a:	2307      	movs	r3, #7
 800083c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800083e:	2302      	movs	r3, #2
 8000840:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000842:	2302      	movs	r3, #2
 8000844:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4618      	mov	r0, r3
 800084c:	f002 ff54 	bl	80036f8 <HAL_RCC_OscConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000856:	f000 fdcf 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	230f      	movs	r3, #15
 800085c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2303      	movs	r3, #3
 8000860:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	2104      	movs	r1, #4
 8000872:	4618      	mov	r0, r3
 8000874:	f003 fb1c 	bl	8003eb0 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800087e:	f000 fdbb 	bl	80013f8 <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3758      	adds	r7, #88	@ 0x58
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
 80008ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ae:	4b2f      	ldr	r3, [pc, #188]	@ (800096c <MX_ADC1_Init+0xe0>)
 80008b0:	4a2f      	ldr	r2, [pc, #188]	@ (8000970 <MX_ADC1_Init+0xe4>)
 80008b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008b4:	4b2d      	ldr	r3, [pc, #180]	@ (800096c <MX_ADC1_Init+0xe0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ba:	4b2c      	ldr	r3, [pc, #176]	@ (800096c <MX_ADC1_Init+0xe0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c0:	4b2a      	ldr	r3, [pc, #168]	@ (800096c <MX_ADC1_Init+0xe0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008c6:	4b29      	ldr	r3, [pc, #164]	@ (800096c <MX_ADC1_Init+0xe0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008cc:	4b27      	ldr	r3, [pc, #156]	@ (800096c <MX_ADC1_Init+0xe0>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008d2:	4b26      	ldr	r3, [pc, #152]	@ (800096c <MX_ADC1_Init+0xe0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008d8:	4b24      	ldr	r3, [pc, #144]	@ (800096c <MX_ADC1_Init+0xe0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008de:	4b23      	ldr	r3, [pc, #140]	@ (800096c <MX_ADC1_Init+0xe0>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008e4:	4b21      	ldr	r3, [pc, #132]	@ (800096c <MX_ADC1_Init+0xe0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	@ (800096c <MX_ADC1_Init+0xe0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f2:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <MX_ADC1_Init+0xe0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008f8:	4b1c      	ldr	r3, [pc, #112]	@ (800096c <MX_ADC1_Init+0xe0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000900:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <MX_ADC1_Init+0xe0>)
 8000902:	2200      	movs	r2, #0
 8000904:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000906:	4b19      	ldr	r3, [pc, #100]	@ (800096c <MX_ADC1_Init+0xe0>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800090e:	4817      	ldr	r0, [pc, #92]	@ (800096c <MX_ADC1_Init+0xe0>)
 8000910:	f001 fa40 	bl	8001d94 <HAL_ADC_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800091a:	f000 fd6d 	bl	80013f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4810      	ldr	r0, [pc, #64]	@ (800096c <MX_ADC1_Init+0xe0>)
 800092a:	f002 faad 	bl	8002e88 <HAL_ADCEx_MultiModeConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000934:	f000 fd60 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000938:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_ADC1_Init+0xe8>)
 800093a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800093c:	2306      	movs	r3, #6
 800093e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000940:	2306      	movs	r3, #6
 8000942:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000944:	237f      	movs	r3, #127	@ 0x7f
 8000946:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000948:	2304      	movs	r3, #4
 800094a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_ADC1_Init+0xe0>)
 8000956:	f001 fd0d 	bl	8002374 <HAL_ADC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000960:	f000 fd4a 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	@ 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000090 	.word	0x20000090
 8000970:	50040000 	.word	0x50040000
 8000974:	c7520000 	.word	0xc7520000

08000978 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <MX_USART2_UART_Init+0x58>)
 800097e:	4a15      	ldr	r2, [pc, #84]	@ (80009d4 <MX_USART2_UART_Init+0x5c>)
 8000980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000982:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <MX_USART2_UART_Init+0x58>)
 8000984:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <MX_USART2_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <MX_USART2_UART_Init+0x58>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_USART2_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_USART2_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <MX_USART2_UART_Init+0x58>)
 80009bc:	f004 fc50 	bl	8005260 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009c6:	f000 fd17 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000f4 	.word	0x200000f4
 80009d4:	40004400 	.word	0x40004400

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_GPIO_Init+0x5c>)
 80009ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f0:	4a10      	ldr	r2, [pc, #64]	@ (8000a34 <MX_GPIO_Init+0x5c>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_GPIO_Init+0x5c>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2120      	movs	r1, #32
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0c:	f002 fdf8 	bl	8003600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a10:	2320      	movs	r3, #32
 8000a12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a28:	f002 fc40 	bl	80032ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a2c:	bf00      	nop
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40021000 	.word	0x40021000

08000a38 <CommandHandler_Parse>:

/* USER CODE BEGIN 4 */

char* CommandHandler_Parse(char* command) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
    static char response[UART_RESPONSE_SIZE];

    char* token1 = strtok(command," ");
 8000a40:	499b      	ldr	r1, [pc, #620]	@ (8000cb0 <CommandHandler_Parse+0x278>)
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f009 f9a4 	bl	8009d90 <strtok>
 8000a48:	61b8      	str	r0, [r7, #24]
    char* token2 = strtok(NULL," ");
 8000a4a:	4999      	ldr	r1, [pc, #612]	@ (8000cb0 <CommandHandler_Parse+0x278>)
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f009 f99f 	bl	8009d90 <strtok>
 8000a52:	6178      	str	r0, [r7, #20]
    char* token3 = strtok(NULL," ");
 8000a54:	4996      	ldr	r1, [pc, #600]	@ (8000cb0 <CommandHandler_Parse+0x278>)
 8000a56:	2000      	movs	r0, #0
 8000a58:	f009 f99a 	bl	8009d90 <strtok>
 8000a5c:	6138      	str	r0, [r7, #16]

    if (token1 == NULL) {
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d107      	bne.n	8000a74 <CommandHandler_Parse+0x3c>
        snprintf(response, sizeof(response), "ERROR: Empty command");
 8000a64:	4a93      	ldr	r2, [pc, #588]	@ (8000cb4 <CommandHandler_Parse+0x27c>)
 8000a66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a6a:	4893      	ldr	r0, [pc, #588]	@ (8000cb8 <CommandHandler_Parse+0x280>)
 8000a6c:	f009 f90e 	bl	8009c8c <sniprintf>
        return response;
 8000a70:	4b91      	ldr	r3, [pc, #580]	@ (8000cb8 <CommandHandler_Parse+0x280>)
 8000a72:	e250      	b.n	8000f16 <CommandHandler_Parse+0x4de>
    }

    /* LED Commands */
    if (strcmp(token1, "START") == 0 && token2 && strcmp(token2,"LED") == 0){
 8000a74:	4991      	ldr	r1, [pc, #580]	@ (8000cbc <CommandHandler_Parse+0x284>)
 8000a76:	69b8      	ldr	r0, [r7, #24]
 8000a78:	f7ff fbaa 	bl	80001d0 <strcmp>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d11a      	bne.n	8000ab8 <CommandHandler_Parse+0x80>
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d017      	beq.n	8000ab8 <CommandHandler_Parse+0x80>
 8000a88:	498d      	ldr	r1, [pc, #564]	@ (8000cc0 <CommandHandler_Parse+0x288>)
 8000a8a:	6978      	ldr	r0, [r7, #20]
 8000a8c:	f7ff fba0 	bl	80001d0 <strcmp>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d110      	bne.n	8000ab8 <CommandHandler_Parse+0x80>
            Command_t cmd = CMD_START_LED;
 8000a96:	2301      	movs	r3, #1
 8000a98:	727b      	strb	r3, [r7, #9]
            osMessageQueuePut(ledCmdHandle, &cmd, 0, 0);
 8000a9a:	4b8a      	ldr	r3, [pc, #552]	@ (8000cc4 <CommandHandler_Parse+0x28c>)
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	f107 0109 	add.w	r1, r7, #9
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f006 f973 	bl	8006d90 <osMessageQueuePut>
            snprintf(response, sizeof(response), "LED blinking started");
 8000aaa:	4a87      	ldr	r2, [pc, #540]	@ (8000cc8 <CommandHandler_Parse+0x290>)
 8000aac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ab0:	4881      	ldr	r0, [pc, #516]	@ (8000cb8 <CommandHandler_Parse+0x280>)
 8000ab2:	f009 f8eb 	bl	8009c8c <sniprintf>
    if (strcmp(token1, "START") == 0 && token2 && strcmp(token2,"LED") == 0){
 8000ab6:	e22d      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
        }else if(strcmp(token1,"STOP") == 0 && token2 && strcmp(token2, "LED") == 0){
 8000ab8:	4984      	ldr	r1, [pc, #528]	@ (8000ccc <CommandHandler_Parse+0x294>)
 8000aba:	69b8      	ldr	r0, [r7, #24]
 8000abc:	f7ff fb88 	bl	80001d0 <strcmp>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d11a      	bne.n	8000afc <CommandHandler_Parse+0xc4>
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d017      	beq.n	8000afc <CommandHandler_Parse+0xc4>
 8000acc:	497c      	ldr	r1, [pc, #496]	@ (8000cc0 <CommandHandler_Parse+0x288>)
 8000ace:	6978      	ldr	r0, [r7, #20]
 8000ad0:	f7ff fb7e 	bl	80001d0 <strcmp>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d110      	bne.n	8000afc <CommandHandler_Parse+0xc4>
            Command_t cmd = CMD_STOP_LED;
 8000ada:	2302      	movs	r3, #2
 8000adc:	723b      	strb	r3, [r7, #8]
            osMessageQueuePut(ledCmdHandle, &cmd, 0, 0);
 8000ade:	4b79      	ldr	r3, [pc, #484]	@ (8000cc4 <CommandHandler_Parse+0x28c>)
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	f107 0108 	add.w	r1, r7, #8
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f006 f951 	bl	8006d90 <osMessageQueuePut>
            snprintf(response,sizeof(response), "LED stopped");
 8000aee:	4a78      	ldr	r2, [pc, #480]	@ (8000cd0 <CommandHandler_Parse+0x298>)
 8000af0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000af4:	4870      	ldr	r0, [pc, #448]	@ (8000cb8 <CommandHandler_Parse+0x280>)
 8000af6:	f009 f8c9 	bl	8009c8c <sniprintf>
        }else if(strcmp(token1,"STOP") == 0 && token2 && strcmp(token2, "LED") == 0){
 8000afa:	e20b      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
        }
    /* ADC Commands */
    else if (strcmp(token1, "GET") == 0 && token2 && strcmp(token2,"ADC") == 0){
 8000afc:	4975      	ldr	r1, [pc, #468]	@ (8000cd4 <CommandHandler_Parse+0x29c>)
 8000afe:	69b8      	ldr	r0, [r7, #24]
 8000b00:	f7ff fb66 	bl	80001d0 <strcmp>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d128      	bne.n	8000b5c <CommandHandler_Parse+0x124>
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d025      	beq.n	8000b5c <CommandHandler_Parse+0x124>
 8000b10:	4971      	ldr	r1, [pc, #452]	@ (8000cd8 <CommandHandler_Parse+0x2a0>)
 8000b12:	6978      	ldr	r0, [r7, #20]
 8000b14:	f7ff fb5c 	bl	80001d0 <strcmp>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d11e      	bne.n	8000b5c <CommandHandler_Parse+0x124>
    	HAL_ADC_Start(&hadc1);
 8000b1e:	486f      	ldr	r0, [pc, #444]	@ (8000cdc <CommandHandler_Parse+0x2a4>)
 8000b20:	f001 fa88 	bl	8002034 <HAL_ADC_Start>
    	if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295
 8000b28:	486c      	ldr	r0, [pc, #432]	@ (8000cdc <CommandHandler_Parse+0x2a4>)
 8000b2a:	f001 fb3d 	bl	80021a8 <HAL_ADC_PollForConversion>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10c      	bne.n	8000b4e <CommandHandler_Parse+0x116>
    		uint16_t adc_value = HAL_ADC_GetValue(&hadc1);
 8000b34:	4869      	ldr	r0, [pc, #420]	@ (8000cdc <CommandHandler_Parse+0x2a4>)
 8000b36:	f001 fc0f 	bl	8002358 <HAL_ADC_GetValue>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	81fb      	strh	r3, [r7, #14]
    		snprintf(response,sizeof(response),"ADC: %u",adc_value);
 8000b3e:	89fb      	ldrh	r3, [r7, #14]
 8000b40:	4a67      	ldr	r2, [pc, #412]	@ (8000ce0 <CommandHandler_Parse+0x2a8>)
 8000b42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b46:	485c      	ldr	r0, [pc, #368]	@ (8000cb8 <CommandHandler_Parse+0x280>)
 8000b48:	f009 f8a0 	bl	8009c8c <sniprintf>
    	if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 8000b4c:	e1e2      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
    	}else{
    		snprintf(response,sizeof(response),"ADC Error\r\n");
 8000b4e:	4a65      	ldr	r2, [pc, #404]	@ (8000ce4 <CommandHandler_Parse+0x2ac>)
 8000b50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b54:	4858      	ldr	r0, [pc, #352]	@ (8000cb8 <CommandHandler_Parse+0x280>)
 8000b56:	f009 f899 	bl	8009c8c <sniprintf>
    	if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 8000b5a:	e1db      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
    	}
    }
    else if(strcmp(token1, "GET") == 0 && token2 && strcmp(token2,"PERIOD") == 0){
 8000b5c:	495d      	ldr	r1, [pc, #372]	@ (8000cd4 <CommandHandler_Parse+0x29c>)
 8000b5e:	69b8      	ldr	r0, [r7, #24]
 8000b60:	f7ff fb36 	bl	80001d0 <strcmp>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d113      	bne.n	8000b92 <CommandHandler_Parse+0x15a>
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d010      	beq.n	8000b92 <CommandHandler_Parse+0x15a>
 8000b70:	495d      	ldr	r1, [pc, #372]	@ (8000ce8 <CommandHandler_Parse+0x2b0>)
 8000b72:	6978      	ldr	r0, [r7, #20]
 8000b74:	f7ff fb2c 	bl	80001d0 <strcmp>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d109      	bne.n	8000b92 <CommandHandler_Parse+0x15a>
        		snprintf(response, sizeof(response), "Current ADC period: %ums", adc_sample_period);
 8000b7e:	4b5b      	ldr	r3, [pc, #364]	@ (8000cec <CommandHandler_Parse+0x2b4>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	4a5a      	ldr	r2, [pc, #360]	@ (8000cf0 <CommandHandler_Parse+0x2b8>)
 8000b86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b8a:	484b      	ldr	r0, [pc, #300]	@ (8000cb8 <CommandHandler_Parse+0x280>)
 8000b8c:	f009 f87e 	bl	8009c8c <sniprintf>
 8000b90:	e1c0      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
        	}
    else if (strcmp(token1, "SET") == 0 && token2 && strcmp(token2,"PERIOD") == 0 && token3){
 8000b92:	4958      	ldr	r1, [pc, #352]	@ (8000cf4 <CommandHandler_Parse+0x2bc>)
 8000b94:	69b8      	ldr	r0, [r7, #24]
 8000b96:	f7ff fb1b 	bl	80001d0 <strcmp>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d12b      	bne.n	8000bf8 <CommandHandler_Parse+0x1c0>
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d028      	beq.n	8000bf8 <CommandHandler_Parse+0x1c0>
 8000ba6:	4950      	ldr	r1, [pc, #320]	@ (8000ce8 <CommandHandler_Parse+0x2b0>)
 8000ba8:	6978      	ldr	r0, [r7, #20]
 8000baa:	f7ff fb11 	bl	80001d0 <strcmp>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d121      	bne.n	8000bf8 <CommandHandler_Parse+0x1c0>
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d01e      	beq.n	8000bf8 <CommandHandler_Parse+0x1c0>
       uint16_t new_period = atoi(token3);
 8000bba:	6938      	ldr	r0, [r7, #16]
 8000bbc:	f008 ff1c 	bl	80099f8 <atoi>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	81bb      	strh	r3, [r7, #12]
       if(new_period >= 10 && new_period <= 5000){
 8000bc4:	89bb      	ldrh	r3, [r7, #12]
 8000bc6:	2b09      	cmp	r3, #9
 8000bc8:	d90f      	bls.n	8000bea <CommandHandler_Parse+0x1b2>
 8000bca:	89bb      	ldrh	r3, [r7, #12]
 8000bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d80a      	bhi.n	8000bea <CommandHandler_Parse+0x1b2>
    	   adc_sample_period = new_period;
 8000bd4:	4a45      	ldr	r2, [pc, #276]	@ (8000cec <CommandHandler_Parse+0x2b4>)
 8000bd6:	89bb      	ldrh	r3, [r7, #12]
 8000bd8:	8013      	strh	r3, [r2, #0]
    	   snprintf(response, sizeof(response),"ADC period set to %ums",new_period);
 8000bda:	89bb      	ldrh	r3, [r7, #12]
 8000bdc:	4a46      	ldr	r2, [pc, #280]	@ (8000cf8 <CommandHandler_Parse+0x2c0>)
 8000bde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be2:	4835      	ldr	r0, [pc, #212]	@ (8000cb8 <CommandHandler_Parse+0x280>)
 8000be4:	f009 f852 	bl	8009c8c <sniprintf>
    else if (strcmp(token1, "SET") == 0 && token2 && strcmp(token2,"PERIOD") == 0 && token3){
 8000be8:	e194      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
       }else{
    	   snprintf(response,sizeof(response),"ERROR: Period must be 10-5000ms");
 8000bea:	4a44      	ldr	r2, [pc, #272]	@ (8000cfc <CommandHandler_Parse+0x2c4>)
 8000bec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bf0:	4831      	ldr	r0, [pc, #196]	@ (8000cb8 <CommandHandler_Parse+0x280>)
 8000bf2:	f009 f84b 	bl	8009c8c <sniprintf>
    else if (strcmp(token1, "SET") == 0 && token2 && strcmp(token2,"PERIOD") == 0 && token3){
 8000bf6:	e18d      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
       }
    }
    /* Alert Commands */
    else if(strcmp(token1,"SET") == 0 && token2 && strcmp(token2,"ALERT") == 0 && token3){
 8000bf8:	493e      	ldr	r1, [pc, #248]	@ (8000cf4 <CommandHandler_Parse+0x2bc>)
 8000bfa:	69b8      	ldr	r0, [r7, #24]
 8000bfc:	f7ff fae8 	bl	80001d0 <strcmp>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d11d      	bne.n	8000c42 <CommandHandler_Parse+0x20a>
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d01a      	beq.n	8000c42 <CommandHandler_Parse+0x20a>
 8000c0c:	493c      	ldr	r1, [pc, #240]	@ (8000d00 <CommandHandler_Parse+0x2c8>)
 8000c0e:	6978      	ldr	r0, [r7, #20]
 8000c10:	f7ff fade 	bl	80001d0 <strcmp>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d113      	bne.n	8000c42 <CommandHandler_Parse+0x20a>
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d010      	beq.n	8000c42 <CommandHandler_Parse+0x20a>
       alert_threshold = atoi(token3);
 8000c20:	6938      	ldr	r0, [r7, #16]
 8000c22:	f008 fee9 	bl	80099f8 <atoi>
 8000c26:	4603      	mov	r3, r0
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	4b36      	ldr	r3, [pc, #216]	@ (8000d04 <CommandHandler_Parse+0x2cc>)
 8000c2c:	801a      	strh	r2, [r3, #0]
       snprintf(response,sizeof(response), "Alert threshold set to %u",alert_threshold);
 8000c2e:	4b35      	ldr	r3, [pc, #212]	@ (8000d04 <CommandHandler_Parse+0x2cc>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	4a34      	ldr	r2, [pc, #208]	@ (8000d08 <CommandHandler_Parse+0x2d0>)
 8000c36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c3a:	481f      	ldr	r0, [pc, #124]	@ (8000cb8 <CommandHandler_Parse+0x280>)
 8000c3c:	f009 f826 	bl	8009c8c <sniprintf>
 8000c40:	e168      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
    }else if(strcmp(token1,"GET") == 0 && token2 && strcmp(token2,"ALERT") == 0){
 8000c42:	4924      	ldr	r1, [pc, #144]	@ (8000cd4 <CommandHandler_Parse+0x29c>)
 8000c44:	69b8      	ldr	r0, [r7, #24]
 8000c46:	f7ff fac3 	bl	80001d0 <strcmp>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d113      	bne.n	8000c78 <CommandHandler_Parse+0x240>
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d010      	beq.n	8000c78 <CommandHandler_Parse+0x240>
 8000c56:	492a      	ldr	r1, [pc, #168]	@ (8000d00 <CommandHandler_Parse+0x2c8>)
 8000c58:	6978      	ldr	r0, [r7, #20]
 8000c5a:	f7ff fab9 	bl	80001d0 <strcmp>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d109      	bne.n	8000c78 <CommandHandler_Parse+0x240>
    	snprintf(response,sizeof(response), "Alert threshold set to %u",alert_threshold);
 8000c64:	4b27      	ldr	r3, [pc, #156]	@ (8000d04 <CommandHandler_Parse+0x2cc>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	4a27      	ldr	r2, [pc, #156]	@ (8000d08 <CommandHandler_Parse+0x2d0>)
 8000c6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c70:	4811      	ldr	r0, [pc, #68]	@ (8000cb8 <CommandHandler_Parse+0x280>)
 8000c72:	f009 f80b 	bl	8009c8c <sniprintf>
 8000c76:	e14d      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
    }
    /* Analyzer Commands */
    else if (strcmp(token1,"START") == 0 && token2 && strcmp(token2,"ANALYSIS") == 0){
 8000c78:	4910      	ldr	r1, [pc, #64]	@ (8000cbc <CommandHandler_Parse+0x284>)
 8000c7a:	69b8      	ldr	r0, [r7, #24]
 8000c7c:	f7ff faa8 	bl	80001d0 <strcmp>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d148      	bne.n	8000d18 <CommandHandler_Parse+0x2e0>
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d045      	beq.n	8000d18 <CommandHandler_Parse+0x2e0>
 8000c8c:	491f      	ldr	r1, [pc, #124]	@ (8000d0c <CommandHandler_Parse+0x2d4>)
 8000c8e:	6978      	ldr	r0, [r7, #20]
 8000c90:	f7ff fa9e 	bl	80001d0 <strcmp>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d13e      	bne.n	8000d18 <CommandHandler_Parse+0x2e0>
        analyzer_mode = ANALYZER_AVG;  // Default mode
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <CommandHandler_Parse+0x2d8>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
        snprintf(response, sizeof(response), "Data analysis started (AVG mode)");
 8000ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d14 <CommandHandler_Parse+0x2dc>)
 8000ca2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ca6:	4804      	ldr	r0, [pc, #16]	@ (8000cb8 <CommandHandler_Parse+0x280>)
 8000ca8:	f008 fff0 	bl	8009c8c <sniprintf>
 8000cac:	e132      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
 8000cae:	bf00      	nop
 8000cb0:	0800b020 	.word	0x0800b020
 8000cb4:	0800b024 	.word	0x0800b024
 8000cb8:	200001bc 	.word	0x200001bc
 8000cbc:	0800b03c 	.word	0x0800b03c
 8000cc0:	0800b044 	.word	0x0800b044
 8000cc4:	20000190 	.word	0x20000190
 8000cc8:	0800b048 	.word	0x0800b048
 8000ccc:	0800b060 	.word	0x0800b060
 8000cd0:	0800b068 	.word	0x0800b068
 8000cd4:	0800b074 	.word	0x0800b074
 8000cd8:	0800b078 	.word	0x0800b078
 8000cdc:	20000090 	.word	0x20000090
 8000ce0:	0800b07c 	.word	0x0800b07c
 8000ce4:	0800b084 	.word	0x0800b084
 8000ce8:	0800b090 	.word	0x0800b090
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	0800b098 	.word	0x0800b098
 8000cf4:	0800b0b4 	.word	0x0800b0b4
 8000cf8:	0800b0b8 	.word	0x0800b0b8
 8000cfc:	0800b0d0 	.word	0x0800b0d0
 8000d00:	0800b0f0 	.word	0x0800b0f0
 8000d04:	20000002 	.word	0x20000002
 8000d08:	0800b0f8 	.word	0x0800b0f8
 8000d0c:	0800b114 	.word	0x0800b114
 8000d10:	200001a0 	.word	0x200001a0
 8000d14:	0800b120 	.word	0x0800b120
    }
    else if (strcmp(token1,"STOP") == 0 && token2 && strcmp(token2,"ANALYSIS") == 0){
 8000d18:	4981      	ldr	r1, [pc, #516]	@ (8000f20 <CommandHandler_Parse+0x4e8>)
 8000d1a:	69b8      	ldr	r0, [r7, #24]
 8000d1c:	f7ff fa58 	bl	80001d0 <strcmp>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d113      	bne.n	8000d4e <CommandHandler_Parse+0x316>
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d010      	beq.n	8000d4e <CommandHandler_Parse+0x316>
 8000d2c:	497d      	ldr	r1, [pc, #500]	@ (8000f24 <CommandHandler_Parse+0x4ec>)
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff fa4e 	bl	80001d0 <strcmp>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d109      	bne.n	8000d4e <CommandHandler_Parse+0x316>
        analyzer_mode = ANALYZER_OFF;
 8000d3a:	4b7b      	ldr	r3, [pc, #492]	@ (8000f28 <CommandHandler_Parse+0x4f0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
        snprintf(response, sizeof(response), "Data analysis stopped");
 8000d40:	4a7a      	ldr	r2, [pc, #488]	@ (8000f2c <CommandHandler_Parse+0x4f4>)
 8000d42:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d46:	487a      	ldr	r0, [pc, #488]	@ (8000f30 <CommandHandler_Parse+0x4f8>)
 8000d48:	f008 ffa0 	bl	8009c8c <sniprintf>
 8000d4c:	e0e2      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
    }
    else if (strcmp(token1,"SET") == 0 && token2 && strcmp(token2,"ANALYSIS") == 0 && token3){
 8000d4e:	4979      	ldr	r1, [pc, #484]	@ (8000f34 <CommandHandler_Parse+0x4fc>)
 8000d50:	69b8      	ldr	r0, [r7, #24]
 8000d52:	f7ff fa3d 	bl	80001d0 <strcmp>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d146      	bne.n	8000dea <CommandHandler_Parse+0x3b2>
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d043      	beq.n	8000dea <CommandHandler_Parse+0x3b2>
 8000d62:	4970      	ldr	r1, [pc, #448]	@ (8000f24 <CommandHandler_Parse+0x4ec>)
 8000d64:	6978      	ldr	r0, [r7, #20]
 8000d66:	f7ff fa33 	bl	80001d0 <strcmp>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d13c      	bne.n	8000dea <CommandHandler_Parse+0x3b2>
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d039      	beq.n	8000dea <CommandHandler_Parse+0x3b2>
    	if(strcmp(token3,"AVG") == 0){
 8000d76:	4970      	ldr	r1, [pc, #448]	@ (8000f38 <CommandHandler_Parse+0x500>)
 8000d78:	6938      	ldr	r0, [r7, #16]
 8000d7a:	f7ff fa29 	bl	80001d0 <strcmp>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d109      	bne.n	8000d98 <CommandHandler_Parse+0x360>
    		analyzer_mode = ANALYZER_AVG;
 8000d84:	4b68      	ldr	r3, [pc, #416]	@ (8000f28 <CommandHandler_Parse+0x4f0>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
    		snprintf(response, sizeof(response), "Analysis mode set to AVG");
 8000d8a:	4a6c      	ldr	r2, [pc, #432]	@ (8000f3c <CommandHandler_Parse+0x504>)
 8000d8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d90:	4867      	ldr	r0, [pc, #412]	@ (8000f30 <CommandHandler_Parse+0x4f8>)
 8000d92:	f008 ff7b 	bl	8009c8c <sniprintf>
    	if(strcmp(token3,"AVG") == 0){
 8000d96:	e0bd      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
    	}else if(strcmp(token3,"MAX") == 0){
 8000d98:	4969      	ldr	r1, [pc, #420]	@ (8000f40 <CommandHandler_Parse+0x508>)
 8000d9a:	6938      	ldr	r0, [r7, #16]
 8000d9c:	f7ff fa18 	bl	80001d0 <strcmp>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d109      	bne.n	8000dba <CommandHandler_Parse+0x382>
    		analyzer_mode = ANALYZER_MAX;
 8000da6:	4b60      	ldr	r3, [pc, #384]	@ (8000f28 <CommandHandler_Parse+0x4f0>)
 8000da8:	2202      	movs	r2, #2
 8000daa:	701a      	strb	r2, [r3, #0]
    		snprintf(response, sizeof(response), "Analysis mode set to MAX");
 8000dac:	4a65      	ldr	r2, [pc, #404]	@ (8000f44 <CommandHandler_Parse+0x50c>)
 8000dae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000db2:	485f      	ldr	r0, [pc, #380]	@ (8000f30 <CommandHandler_Parse+0x4f8>)
 8000db4:	f008 ff6a 	bl	8009c8c <sniprintf>
    	if(strcmp(token3,"AVG") == 0){
 8000db8:	e0ac      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
    	}else if(strcmp(token3,"MIN") == 0){
 8000dba:	4963      	ldr	r1, [pc, #396]	@ (8000f48 <CommandHandler_Parse+0x510>)
 8000dbc:	6938      	ldr	r0, [r7, #16]
 8000dbe:	f7ff fa07 	bl	80001d0 <strcmp>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d109      	bne.n	8000ddc <CommandHandler_Parse+0x3a4>
    		analyzer_mode = ANALYZER_MIN;
 8000dc8:	4b57      	ldr	r3, [pc, #348]	@ (8000f28 <CommandHandler_Parse+0x4f0>)
 8000dca:	2203      	movs	r2, #3
 8000dcc:	701a      	strb	r2, [r3, #0]
    		snprintf(response, sizeof(response), "Analysis mode set to MIN");
 8000dce:	4a5f      	ldr	r2, [pc, #380]	@ (8000f4c <CommandHandler_Parse+0x514>)
 8000dd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dd4:	4856      	ldr	r0, [pc, #344]	@ (8000f30 <CommandHandler_Parse+0x4f8>)
 8000dd6:	f008 ff59 	bl	8009c8c <sniprintf>
    	if(strcmp(token3,"AVG") == 0){
 8000dda:	e09b      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
    	}else{
    		snprintf(response,sizeof(response), "ERROR: Usage: SET ANALYSIS <AVG|MAX|MIN>");
 8000ddc:	4a5c      	ldr	r2, [pc, #368]	@ (8000f50 <CommandHandler_Parse+0x518>)
 8000dde:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000de2:	4853      	ldr	r0, [pc, #332]	@ (8000f30 <CommandHandler_Parse+0x4f8>)
 8000de4:	f008 ff52 	bl	8009c8c <sniprintf>
    	if(strcmp(token3,"AVG") == 0){
 8000de8:	e094      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
    	}
    }
    else if(strcmp(token1,"GET") == 0 && token2 && strcmp(token2,"ANALYSIS") == 0){
 8000dea:	495a      	ldr	r1, [pc, #360]	@ (8000f54 <CommandHandler_Parse+0x51c>)
 8000dec:	69b8      	ldr	r0, [r7, #24]
 8000dee:	f7ff f9ef 	bl	80001d0 <strcmp>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d12f      	bne.n	8000e58 <CommandHandler_Parse+0x420>
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d02c      	beq.n	8000e58 <CommandHandler_Parse+0x420>
 8000dfe:	4949      	ldr	r1, [pc, #292]	@ (8000f24 <CommandHandler_Parse+0x4ec>)
 8000e00:	6978      	ldr	r0, [r7, #20]
 8000e02:	f7ff f9e5 	bl	80001d0 <strcmp>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d125      	bne.n	8000e58 <CommandHandler_Parse+0x420>
    	const char* mode_str = "UNKNOWN";
 8000e0c:	4b52      	ldr	r3, [pc, #328]	@ (8000f58 <CommandHandler_Parse+0x520>)
 8000e0e:	61fb      	str	r3, [r7, #28]
    	switch(analyzer_mode){
 8000e10:	4b45      	ldr	r3, [pc, #276]	@ (8000f28 <CommandHandler_Parse+0x4f0>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d816      	bhi.n	8000e48 <CommandHandler_Parse+0x410>
 8000e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e20 <CommandHandler_Parse+0x3e8>)
 8000e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e20:	08000e43 	.word	0x08000e43
 8000e24:	08000e31 	.word	0x08000e31
 8000e28:	08000e37 	.word	0x08000e37
 8000e2c:	08000e3d 	.word	0x08000e3d
    		case ANALYZER_AVG: mode_str = "AVG"; break;
 8000e30:	4b41      	ldr	r3, [pc, #260]	@ (8000f38 <CommandHandler_Parse+0x500>)
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	e008      	b.n	8000e48 <CommandHandler_Parse+0x410>
    		case ANALYZER_MAX: mode_str = "MAX"; break;
 8000e36:	4b42      	ldr	r3, [pc, #264]	@ (8000f40 <CommandHandler_Parse+0x508>)
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	e005      	b.n	8000e48 <CommandHandler_Parse+0x410>
    		case ANALYZER_MIN: mode_str = "MIN"; break;
 8000e3c:	4b42      	ldr	r3, [pc, #264]	@ (8000f48 <CommandHandler_Parse+0x510>)
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	e002      	b.n	8000e48 <CommandHandler_Parse+0x410>
    		case ANALYZER_OFF: mode_str = "OFF"; break;
 8000e42:	4b46      	ldr	r3, [pc, #280]	@ (8000f5c <CommandHandler_Parse+0x524>)
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	bf00      	nop
    	}
    	snprintf(response, sizeof(response), "Curremt analysis mode: %s",mode_str);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	4a45      	ldr	r2, [pc, #276]	@ (8000f60 <CommandHandler_Parse+0x528>)
 8000e4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e50:	4837      	ldr	r0, [pc, #220]	@ (8000f30 <CommandHandler_Parse+0x4f8>)
 8000e52:	f008 ff1b 	bl	8009c8c <sniprintf>
    else if(strcmp(token1,"GET") == 0 && token2 && strcmp(token2,"ANALYSIS") == 0){
 8000e56:	e05d      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
    }
    else if(strcmp(token1,"SET") == 0 && token2 && strcmp(token2, "SAMPLES") == 0 && token3){
 8000e58:	4936      	ldr	r1, [pc, #216]	@ (8000f34 <CommandHandler_Parse+0x4fc>)
 8000e5a:	69b8      	ldr	r0, [r7, #24]
 8000e5c:	f7ff f9b8 	bl	80001d0 <strcmp>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d12a      	bne.n	8000ebc <CommandHandler_Parse+0x484>
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d027      	beq.n	8000ebc <CommandHandler_Parse+0x484>
 8000e6c:	493d      	ldr	r1, [pc, #244]	@ (8000f64 <CommandHandler_Parse+0x52c>)
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff f9ae 	bl	80001d0 <strcmp>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d120      	bne.n	8000ebc <CommandHandler_Parse+0x484>
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d01d      	beq.n	8000ebc <CommandHandler_Parse+0x484>
    	uint16_t new_count = atoi(token3);
 8000e80:	6938      	ldr	r0, [r7, #16]
 8000e82:	f008 fdb9 	bl	80099f8 <atoi>
 8000e86:	4603      	mov	r3, r0
 8000e88:	817b      	strh	r3, [r7, #10]
    	if(new_count > 0 && new_count <= MAX_SAMPLES){
 8000e8a:	897b      	ldrh	r3, [r7, #10]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d00d      	beq.n	8000eac <CommandHandler_Parse+0x474>
 8000e90:	897b      	ldrh	r3, [r7, #10]
 8000e92:	2b64      	cmp	r3, #100	@ 0x64
 8000e94:	d80a      	bhi.n	8000eac <CommandHandler_Parse+0x474>
    		sample_count = new_count;
 8000e96:	4a34      	ldr	r2, [pc, #208]	@ (8000f68 <CommandHandler_Parse+0x530>)
 8000e98:	897b      	ldrh	r3, [r7, #10]
 8000e9a:	8013      	strh	r3, [r2, #0]
    		snprintf(response, sizeof(response), "Sample count set to %u", new_count);
 8000e9c:	897b      	ldrh	r3, [r7, #10]
 8000e9e:	4a33      	ldr	r2, [pc, #204]	@ (8000f6c <CommandHandler_Parse+0x534>)
 8000ea0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ea4:	4822      	ldr	r0, [pc, #136]	@ (8000f30 <CommandHandler_Parse+0x4f8>)
 8000ea6:	f008 fef1 	bl	8009c8c <sniprintf>
    else if(strcmp(token1,"SET") == 0 && token2 && strcmp(token2, "SAMPLES") == 0 && token3){
 8000eaa:	e033      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
    	}else{
    		snprintf(response, sizeof(response), "ERROR: Samples must be 1-%u",MAX_SAMPLES);
 8000eac:	2364      	movs	r3, #100	@ 0x64
 8000eae:	4a30      	ldr	r2, [pc, #192]	@ (8000f70 <CommandHandler_Parse+0x538>)
 8000eb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eb4:	481e      	ldr	r0, [pc, #120]	@ (8000f30 <CommandHandler_Parse+0x4f8>)
 8000eb6:	f008 fee9 	bl	8009c8c <sniprintf>
    else if(strcmp(token1,"SET") == 0 && token2 && strcmp(token2, "SAMPLES") == 0 && token3){
 8000eba:	e02b      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
    	}
    }else if(strcmp(token1,"EXIT") == 0){
 8000ebc:	492d      	ldr	r1, [pc, #180]	@ (8000f74 <CommandHandler_Parse+0x53c>)
 8000ebe:	69b8      	ldr	r0, [r7, #24]
 8000ec0:	f7ff f986 	bl	80001d0 <strcmp>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10f      	bne.n	8000eea <CommandHandler_Parse+0x4b2>
    	snprintf(response, sizeof(response), "The End");
 8000eca:	4a2b      	ldr	r2, [pc, #172]	@ (8000f78 <CommandHandler_Parse+0x540>)
 8000ecc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ed0:	4817      	ldr	r0, [pc, #92]	@ (8000f30 <CommandHandler_Parse+0x4f8>)
 8000ed2:	f008 fedb 	bl	8009c8c <sniprintf>
    	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2120      	movs	r1, #32
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ede:	f002 fb8f 	bl	8003600 <HAL_GPIO_WritePin>
    	analyzer_mode = ANALYZER_OFF;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <CommandHandler_Parse+0x4f0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	e014      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
    //	osThreadExit();
    }else if(strcmp(token1,"HELP") == 0){
 8000eea:	4924      	ldr	r1, [pc, #144]	@ (8000f7c <CommandHandler_Parse+0x544>)
 8000eec:	69b8      	ldr	r0, [r7, #24]
 8000eee:	f7ff f96f 	bl	80001d0 <strcmp>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d107      	bne.n	8000f08 <CommandHandler_Parse+0x4d0>
    	snprintf(response, sizeof(response), "%s", help);
 8000ef8:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <CommandHandler_Parse+0x548>)
 8000efa:	4a22      	ldr	r2, [pc, #136]	@ (8000f84 <CommandHandler_Parse+0x54c>)
 8000efc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f00:	480b      	ldr	r0, [pc, #44]	@ (8000f30 <CommandHandler_Parse+0x4f8>)
 8000f02:	f008 fec3 	bl	8009c8c <sniprintf>
 8000f06:	e005      	b.n	8000f14 <CommandHandler_Parse+0x4dc>
    }
    /* Unknown Command */
    else {
    	snprintf(response, sizeof(response), "ERROR: Unknown command or wrong syntax");
 8000f08:	4a1f      	ldr	r2, [pc, #124]	@ (8000f88 <CommandHandler_Parse+0x550>)
 8000f0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f0e:	4808      	ldr	r0, [pc, #32]	@ (8000f30 <CommandHandler_Parse+0x4f8>)
 8000f10:	f008 febc 	bl	8009c8c <sniprintf>
    }

    return response;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <CommandHandler_Parse+0x4f8>)
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3720      	adds	r7, #32
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	0800b060 	.word	0x0800b060
 8000f24:	0800b114 	.word	0x0800b114
 8000f28:	200001a0 	.word	0x200001a0
 8000f2c:	0800b144 	.word	0x0800b144
 8000f30:	200001bc 	.word	0x200001bc
 8000f34:	0800b0b4 	.word	0x0800b0b4
 8000f38:	0800b15c 	.word	0x0800b15c
 8000f3c:	0800b160 	.word	0x0800b160
 8000f40:	0800b17c 	.word	0x0800b17c
 8000f44:	0800b180 	.word	0x0800b180
 8000f48:	0800b19c 	.word	0x0800b19c
 8000f4c:	0800b1a0 	.word	0x0800b1a0
 8000f50:	0800b1bc 	.word	0x0800b1bc
 8000f54:	0800b074 	.word	0x0800b074
 8000f58:	0800b1e8 	.word	0x0800b1e8
 8000f5c:	0800b1f0 	.word	0x0800b1f0
 8000f60:	0800b1f4 	.word	0x0800b1f4
 8000f64:	0800b210 	.word	0x0800b210
 8000f68:	20000004 	.word	0x20000004
 8000f6c:	0800b218 	.word	0x0800b218
 8000f70:	0800b230 	.word	0x0800b230
 8000f74:	0800b24c 	.word	0x0800b24c
 8000f78:	0800b254 	.word	0x0800b254
 8000f7c:	0800b25c 	.word	0x0800b25c
 8000f80:	0800b60c 	.word	0x0800b60c
 8000f84:	0800b264 	.word	0x0800b264
 8000f88:	0800b268 	.word	0x0800b268

08000f8c <StartUartTask>:
/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartUartTask */
/* USER CODE END Header_StartUartTask */
void StartUartTask(void *argument)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t rx_char;
	extern volatile uint8_t g_rx_buffer[UART_BUFFER_SIZE];
	extern volatile uint16_t g_rx_idx;

	HAL_UART_Transmit(&huart2, (uint8_t*)welcome_msg, strlen(welcome_msg), HAL_MAX_DELAY);
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8000f9c:	4943      	ldr	r1, [pc, #268]	@ (80010ac <StartUartTask+0x120>)
 8000f9e:	4844      	ldr	r0, [pc, #272]	@ (80010b0 <StartUartTask+0x124>)
 8000fa0:	f004 f9ac 	bl	80052fc <HAL_UART_Transmit>


	  /* Infinite loop */
	for(;;)
		{
			if (osMessageQueueGet(uartTxHandle, &rx_char, NULL, osWaitForever) == osOK) {
 8000fa4:	4b43      	ldr	r3, [pc, #268]	@ (80010b4 <StartUartTask+0x128>)
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	f107 010b 	add.w	r1, r7, #11
 8000fac:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f005 ff4d 	bl	8006e50 <osMessageQueueGet>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d170      	bne.n	800109e <StartUartTask+0x112>
				if (rx_char == '\b' || rx_char == 127) { //Usuwanie znakow z terminala
 8000fbc:	7afb      	ldrb	r3, [r7, #11]
 8000fbe:	2b08      	cmp	r3, #8
 8000fc0:	d002      	beq.n	8000fc8 <StartUartTask+0x3c>
 8000fc2:	7afb      	ldrb	r3, [r7, #11]
 8000fc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fc6:	d113      	bne.n	8000ff0 <StartUartTask+0x64>
					if (g_rx_idx > 0) {
 8000fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80010b8 <StartUartTask+0x12c>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d069      	beq.n	80010a6 <StartUartTask+0x11a>
						g_rx_idx--;
 8000fd2:	4b39      	ldr	r3, [pc, #228]	@ (80010b8 <StartUartTask+0x12c>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	4b36      	ldr	r3, [pc, #216]	@ (80010b8 <StartUartTask+0x12c>)
 8000fde:	801a      	strh	r2, [r3, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)"\b \b", 3, HAL_MAX_DELAY);
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	4935      	ldr	r1, [pc, #212]	@ (80010bc <StartUartTask+0x130>)
 8000fe8:	4831      	ldr	r0, [pc, #196]	@ (80010b0 <StartUartTask+0x124>)
 8000fea:	f004 f987 	bl	80052fc <HAL_UART_Transmit>
					}
					continue;
 8000fee:	e05a      	b.n	80010a6 <StartUartTask+0x11a>
				}

				if (rx_char != '\r' && rx_char != '\n') {
 8000ff0:	7afb      	ldrb	r3, [r7, #11]
 8000ff2:	2b0d      	cmp	r3, #13
 8000ff4:	d00a      	beq.n	800100c <StartUartTask+0x80>
 8000ff6:	7afb      	ldrb	r3, [r7, #11]
 8000ff8:	2b0a      	cmp	r3, #10
 8000ffa:	d007      	beq.n	800100c <StartUartTask+0x80>
					HAL_UART_Transmit(&huart2, &rx_char, 1, HAL_MAX_DELAY); //Echo znaku
 8000ffc:	f107 010b 	add.w	r1, r7, #11
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	2201      	movs	r2, #1
 8001006:	482a      	ldr	r0, [pc, #168]	@ (80010b0 <StartUartTask+0x124>)
 8001008:	f004 f978 	bl	80052fc <HAL_UART_Transmit>
				}

				if (rx_char == '\n' || rx_char == '\r') {
 800100c:	7afb      	ldrb	r3, [r7, #11]
 800100e:	2b0a      	cmp	r3, #10
 8001010:	d002      	beq.n	8001018 <StartUartTask+0x8c>
 8001012:	7afb      	ldrb	r3, [r7, #11]
 8001014:	2b0d      	cmp	r3, #13
 8001016:	d127      	bne.n	8001068 <StartUartTask+0xdc>
					 g_rx_buffer[g_rx_idx] = '\0';  // Null-terminate
 8001018:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <StartUartTask+0x12c>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	b29b      	uxth	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	4b27      	ldr	r3, [pc, #156]	@ (80010c0 <StartUartTask+0x134>)
 8001022:	2100      	movs	r1, #0
 8001024:	5499      	strb	r1, [r3, r2]
						char* response = CommandHandler_Parse((char*)g_rx_buffer);
 8001026:	4826      	ldr	r0, [pc, #152]	@ (80010c0 <StartUartTask+0x134>)
 8001028:	f7ff fd06 	bl	8000a38 <CommandHandler_Parse>
 800102c:	60f8      	str	r0, [r7, #12]
						HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	2202      	movs	r2, #2
 8001034:	4923      	ldr	r1, [pc, #140]	@ (80010c4 <StartUartTask+0x138>)
 8001036:	481e      	ldr	r0, [pc, #120]	@ (80010b0 <StartUartTask+0x124>)
 8001038:	f004 f960 	bl	80052fc <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f7ff f8d1 	bl	80001e4 <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	b29a      	uxth	r2, r3
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	68f9      	ldr	r1, [r7, #12]
 800104c:	4818      	ldr	r0, [pc, #96]	@ (80010b0 <StartUartTask+0x124>)
 800104e:	f004 f955 	bl	80052fc <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n> ", 5, HAL_MAX_DELAY);
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	2205      	movs	r2, #5
 8001058:	491b      	ldr	r1, [pc, #108]	@ (80010c8 <StartUartTask+0x13c>)
 800105a:	4815      	ldr	r0, [pc, #84]	@ (80010b0 <StartUartTask+0x124>)
 800105c:	f004 f94e 	bl	80052fc <HAL_UART_Transmit>
						g_rx_idx = 0;
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <StartUartTask+0x12c>)
 8001062:	2200      	movs	r2, #0
 8001064:	801a      	strh	r2, [r3, #0]
				if (rx_char == '\n' || rx_char == '\r') {
 8001066:	e01a      	b.n	800109e <StartUartTask+0x112>
				}
				else if (g_rx_idx < UART_BUFFER_SIZE - 1) {
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <StartUartTask+0x12c>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
 800106e:	2b12      	cmp	r3, #18
 8001070:	d80b      	bhi.n	800108a <StartUartTask+0xfe>
					g_rx_buffer[g_rx_idx++] = rx_char;
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <StartUartTask+0x12c>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	b29b      	uxth	r3, r3
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	b291      	uxth	r1, r2
 800107c:	4a0e      	ldr	r2, [pc, #56]	@ (80010b8 <StartUartTask+0x12c>)
 800107e:	8011      	strh	r1, [r2, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	7af9      	ldrb	r1, [r7, #11]
 8001084:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <StartUartTask+0x134>)
 8001086:	5499      	strb	r1, [r3, r2]
 8001088:	e009      	b.n	800109e <StartUartTask+0x112>
				}
				else {
					HAL_UART_Transmit(&huart2, (uint8_t*)"\r\nERROR: Command too long\r\n> ", 28, HAL_MAX_DELAY);
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	221c      	movs	r2, #28
 8001090:	490e      	ldr	r1, [pc, #56]	@ (80010cc <StartUartTask+0x140>)
 8001092:	4807      	ldr	r0, [pc, #28]	@ (80010b0 <StartUartTask+0x124>)
 8001094:	f004 f932 	bl	80052fc <HAL_UART_Transmit>
					g_rx_idx = 0;
 8001098:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <StartUartTask+0x12c>)
 800109a:	2200      	movs	r2, #0
 800109c:	801a      	strh	r2, [r3, #0]
				}
			}
			osDelay(1);
 800109e:	2001      	movs	r0, #1
 80010a0:	f005 fde8 	bl	8006c74 <osDelay>
 80010a4:	e77e      	b.n	8000fa4 <StartUartTask+0x18>
					continue;
 80010a6:	bf00      	nop
			if (osMessageQueueGet(uartTxHandle, &rx_char, NULL, osWaitForever) == osOK) {
 80010a8:	e77c      	b.n	8000fa4 <StartUartTask+0x18>
 80010aa:	bf00      	nop
 80010ac:	0800b424 	.word	0x0800b424
 80010b0:	200000f4 	.word	0x200000f4
 80010b4:	2000019c 	.word	0x2000019c
 80010b8:	200001b8 	.word	0x200001b8
 80010bc:	0800b290 	.word	0x0800b290
 80010c0:	200001a4 	.word	0x200001a4
 80010c4:	0800b294 	.word	0x0800b294
 80010c8:	0800b010 	.word	0x0800b010
 80010cc:	0800b298 	.word	0x0800b298

080010d0 <StartLedTask>:
}

/* USER CODE BEGIN Header_StartLedTask */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void *argument)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask */
	uint8_t led_state = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
	Command_t cmd;
  /* Infinite loop */
  for(;;)
  {
	  if(osMessageQueueGet(ledCmdHandle, &cmd, NULL, 0) == osOK){
 80010dc:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <StartLedTask+0x70>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	f107 010e 	add.w	r1, r7, #14
 80010e4:	2300      	movs	r3, #0
 80010e6:	2200      	movs	r2, #0
 80010e8:	f005 feb2 	bl	8006e50 <osMessageQueueGet>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10a      	bne.n	8001108 <StartLedTask+0x38>
	  		if(cmd == CMD_START_LED){
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d102      	bne.n	80010fe <StartLedTask+0x2e>
	  			led_state = 1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e004      	b.n	8001108 <StartLedTask+0x38>
	  		}else if(cmd == CMD_STOP_LED){
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d101      	bne.n	8001108 <StartLedTask+0x38>
	  			led_state = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]
	  		}
	  		}
	  		if (led_state) {
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d014      	beq.n	8001138 <StartLedTask+0x68>
	  			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800110e:	2201      	movs	r2, #1
 8001110:	2120      	movs	r1, #32
 8001112:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001116:	f002 fa73 	bl	8003600 <HAL_GPIO_WritePin>
	  			osDelay(500);
 800111a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800111e:	f005 fda9 	bl	8006c74 <osDelay>
	  			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2120      	movs	r1, #32
 8001126:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112a:	f002 fa69 	bl	8003600 <HAL_GPIO_WritePin>
	  			osDelay(500);
 800112e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001132:	f005 fd9f 	bl	8006c74 <osDelay>
 8001136:	e7d1      	b.n	80010dc <StartLedTask+0xc>
	  		} else {
	  			osDelay(10);
 8001138:	200a      	movs	r0, #10
 800113a:	f005 fd9b 	bl	8006c74 <osDelay>
	  if(osMessageQueueGet(ledCmdHandle, &cmd, NULL, 0) == osOK){
 800113e:	e7cd      	b.n	80010dc <StartLedTask+0xc>
 8001140:	20000190 	.word	0x20000190

08001144 <StartADCSampler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADCSampler */
void StartADCSampler(void *argument)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADCSampler */
	uint16_t adc_value = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc1);
 8001150:	4813      	ldr	r0, [pc, #76]	@ (80011a0 <StartADCSampler+0x5c>)
 8001152:	f000 ff6f 	bl	8002034 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 8001156:	f04f 31ff 	mov.w	r1, #4294967295
 800115a:	4811      	ldr	r0, [pc, #68]	@ (80011a0 <StartADCSampler+0x5c>)
 800115c:	f001 f824 	bl	80021a8 <HAL_ADC_PollForConversion>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d115      	bne.n	8001192 <StartADCSampler+0x4e>
		adc_value = HAL_ADC_GetValue(&hadc1);
 8001166:	480e      	ldr	r0, [pc, #56]	@ (80011a0 <StartADCSampler+0x5c>)
 8001168:	f001 f8f6 	bl	8002358 <HAL_ADC_GetValue>
 800116c:	4603      	mov	r3, r0
 800116e:	b29b      	uxth	r3, r3
 8001170:	81fb      	strh	r3, [r7, #14]
		osMessageQueuePut(adcAnalyzerHandle, &adc_value, 0, 0);
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <StartADCSampler+0x60>)
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	f107 010e 	add.w	r1, r7, #14
 800117a:	2300      	movs	r3, #0
 800117c:	2200      	movs	r2, #0
 800117e:	f005 fe07 	bl	8006d90 <osMessageQueuePut>
		osMessageQueuePut(adcAlertHandle, &adc_value, 0, 0);
 8001182:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <StartADCSampler+0x64>)
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	f107 010e 	add.w	r1, r7, #14
 800118a:	2300      	movs	r3, #0
 800118c:	2200      	movs	r2, #0
 800118e:	f005 fdff 	bl	8006d90 <osMessageQueuePut>
	}
    osDelay(adc_sample_period);
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <StartADCSampler+0x68>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	b29b      	uxth	r3, r3
 8001198:	4618      	mov	r0, r3
 800119a:	f005 fd6b 	bl	8006c74 <osDelay>
	HAL_ADC_Start(&hadc1);
 800119e:	e7d7      	b.n	8001150 <StartADCSampler+0xc>
 80011a0:	20000090 	.word	0x20000090
 80011a4:	20000194 	.word	0x20000194
 80011a8:	20000198 	.word	0x20000198
 80011ac:	20000000 	.word	0x20000000

080011b0 <StartDataAnalyzer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDataAnalyzer */
void StartDataAnalyzer(void *argument)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b0ca      	sub	sp, #296	@ 0x128
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80011ba:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80011be:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDataAnalyzer */
	uint16_t buffer[MAX_SAMPLES] = {0};
 80011c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011c4:	22c8      	movs	r2, #200	@ 0xc8
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f008 fdd8 	bl	8009d7e <memset>
    uint16_t idx = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
	uint16_t current_sample_count = sample_count;
 80011d4:	4b5b      	ldr	r3, [pc, #364]	@ (8001344 <StartDataAnalyzer+0x194>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
  /* Infinite loop */
  for(;;)
  {

		current_sample_count = sample_count; // aktualizacja na bieżąco
 80011dc:	4b59      	ldr	r3, [pc, #356]	@ (8001344 <StartDataAnalyzer+0x194>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
		if(osMessageQueueGet(adcAnalyzerHandle, &buffer[idx], NULL, osWaitForever) == osOK){
 80011e4:	4b58      	ldr	r3, [pc, #352]	@ (8001348 <StartDataAnalyzer+0x198>)
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 80011ec:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	18d1      	adds	r1, r2, r3
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	2200      	movs	r2, #0
 80011fa:	f005 fe29 	bl	8006e50 <osMessageQueueGet>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	f040 809b 	bne.w	800133c <StartDataAnalyzer+0x18c>
			if(analyzer_mode != ANALYZER_OFF){
 8001206:	4b51      	ldr	r3, [pc, #324]	@ (800134c <StartDataAnalyzer+0x19c>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 8095 	beq.w	800133c <StartDataAnalyzer+0x18c>
				idx = (idx + 1)%current_sample_count;
 8001212:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001216:	3301      	adds	r3, #1
 8001218:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 800121c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001220:	fb01 f202 	mul.w	r2, r1, r2
 8001224:	1a9b      	subs	r3, r3, r2
 8001226:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
				if(idx==0){
 800122a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 8084 	bne.w	800133c <StartDataAnalyzer+0x18c>
					uint32_t sum = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
					uint16_t max_val = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
					uint16_t min_val = 0xFFFF; //Dzieki temu kazda inna jest mniejsza
 8001240:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001244:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
					for(int i = 0; i < current_sample_count; i++){
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800124e:	e03e      	b.n	80012ce <StartDataAnalyzer+0x11e>
						sum += buffer[i];
 8001250:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800125a:	443b      	add	r3, r7
 800125c:	f833 3cdc 	ldrh.w	r3, [r3, #-220]
 8001260:	461a      	mov	r2, r3
 8001262:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001266:	4413      	add	r3, r2
 8001268:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
						if(buffer[i] > max_val) max_val = buffer[i];
 800126c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001276:	443b      	add	r3, r7
 8001278:	f833 3cdc 	ldrh.w	r3, [r3, #-220]
 800127c:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8001280:	429a      	cmp	r2, r3
 8001282:	d209      	bcs.n	8001298 <StartDataAnalyzer+0xe8>
 8001284:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800128e:	443b      	add	r3, r7
 8001290:	f833 3cdc 	ldrh.w	r3, [r3, #-220]
 8001294:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
						if(buffer[i] < min_val) min_val = buffer[i];
 8001298:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80012a2:	443b      	add	r3, r7
 80012a4:	f833 3cdc 	ldrh.w	r3, [r3, #-220]
 80012a8:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d909      	bls.n	80012c4 <StartDataAnalyzer+0x114>
 80012b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80012ba:	443b      	add	r3, r7
 80012bc:	f833 3cdc 	ldrh.w	r3, [r3, #-220]
 80012c0:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
					for(int i = 0; i < current_sample_count; i++){
 80012c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80012c8:	3301      	adds	r3, #1
 80012ca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80012ce:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 80012d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80012d6:	429a      	cmp	r2, r3
 80012d8:	dbba      	blt.n	8001250 <StartDataAnalyzer+0xa0>
					}
					char msg[64];
					switch(analyzer_mode){
 80012da:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <StartDataAnalyzer+0x19c>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d01c      	beq.n	800131e <StartDataAnalyzer+0x16e>
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	dc23      	bgt.n	8001330 <StartDataAnalyzer+0x180>
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d002      	beq.n	80012f2 <StartDataAnalyzer+0x142>
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d00d      	beq.n	800130c <StartDataAnalyzer+0x15c>
							break;
						case ANALYZER_MIN:
							snprintf(msg,sizeof(msg),"MIN: %u",min_val);
							break;
						default:
							break;
 80012f0:	e01e      	b.n	8001330 <StartDataAnalyzer+0x180>
							snprintf(msg, sizeof(msg), "AVG: %lu",sum/current_sample_count);
 80012f2:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 80012f6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	f107 000c 	add.w	r0, r7, #12
 8001302:	4a13      	ldr	r2, [pc, #76]	@ (8001350 <StartDataAnalyzer+0x1a0>)
 8001304:	2140      	movs	r1, #64	@ 0x40
 8001306:	f008 fcc1 	bl	8009c8c <sniprintf>
							break;
 800130a:	e012      	b.n	8001332 <StartDataAnalyzer+0x182>
							snprintf(msg, sizeof(msg), "MAX: %u",max_val);
 800130c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8001310:	f107 000c 	add.w	r0, r7, #12
 8001314:	4a0f      	ldr	r2, [pc, #60]	@ (8001354 <StartDataAnalyzer+0x1a4>)
 8001316:	2140      	movs	r1, #64	@ 0x40
 8001318:	f008 fcb8 	bl	8009c8c <sniprintf>
							break;
 800131c:	e009      	b.n	8001332 <StartDataAnalyzer+0x182>
							snprintf(msg,sizeof(msg),"MIN: %u",min_val);
 800131e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8001322:	f107 000c 	add.w	r0, r7, #12
 8001326:	4a0c      	ldr	r2, [pc, #48]	@ (8001358 <StartDataAnalyzer+0x1a8>)
 8001328:	2140      	movs	r1, #64	@ 0x40
 800132a:	f008 fcaf 	bl	8009c8c <sniprintf>
							break;
 800132e:	e000      	b.n	8001332 <StartDataAnalyzer+0x182>
							break;
 8001330:	bf00      	nop
					}
					uart_print_with_prompt(msg);
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f97c 	bl	8000634 <uart_print_with_prompt>
				}
			}
		}
		osDelay(1);
 800133c:	2001      	movs	r0, #1
 800133e:	f005 fc99 	bl	8006c74 <osDelay>
		current_sample_count = sample_count; // aktualizacja na bieżąco
 8001342:	e74b      	b.n	80011dc <StartDataAnalyzer+0x2c>
 8001344:	20000004 	.word	0x20000004
 8001348:	20000194 	.word	0x20000194
 800134c:	200001a0 	.word	0x200001a0
 8001350:	0800b2b8 	.word	0x0800b2b8
 8001354:	0800b2c4 	.word	0x0800b2c4
 8001358:	0800b2cc 	.word	0x0800b2cc

0800135c <StartAlertMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAlertMonitor */
void StartAlertMonitor(void *argument)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b094      	sub	sp, #80	@ 0x50
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAlertMonitor */
	uint16_t adc_value;
  /* Infinite loop */
  for(;;)
  {
	  if(osMessageQueueGet(adcAlertHandle, &adc_value, NULL, osWaitForever) == osOK){
 8001364:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <StartAlertMonitor+0x68>)
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	f107 014e 	add.w	r1, r7, #78	@ 0x4e
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
 8001370:	2200      	movs	r2, #0
 8001372:	f005 fd6d 	bl	8006e50 <osMessageQueueGet>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d11f      	bne.n	80013bc <StartAlertMonitor+0x60>
	  			if(adc_value > alert_threshold){
 800137c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <StartAlertMonitor+0x6c>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	b29b      	uxth	r3, r3
 8001386:	429a      	cmp	r2, r3
 8001388:	d915      	bls.n	80013b6 <StartAlertMonitor+0x5a>
	  				if(!alert_active){
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <StartAlertMonitor+0x70>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d113      	bne.n	80013bc <StartAlertMonitor+0x60>
	  					char alert_msg[64];
	  					snprintf(alert_msg, sizeof(alert_msg),"!!! ALERT: Value %u above limit !!!",adc_value);
 8001394:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001398:	f107 000c 	add.w	r0, r7, #12
 800139c:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <StartAlertMonitor+0x74>)
 800139e:	2140      	movs	r1, #64	@ 0x40
 80013a0:	f008 fc74 	bl	8009c8c <sniprintf>
	  					uart_print_with_prompt(alert_msg);
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f943 	bl	8000634 <uart_print_with_prompt>
	  					alert_active = 1;
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <StartAlertMonitor+0x70>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
 80013b4:	e002      	b.n	80013bc <StartAlertMonitor+0x60>
	  				}
	  			}else{
	  				alert_active = 0;
 80013b6:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <StartAlertMonitor+0x70>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
	  			}
	  		}
	  		osDelay(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f005 fc59 	bl	8006c74 <osDelay>
	  if(osMessageQueueGet(adcAlertHandle, &adc_value, NULL, osWaitForever) == osOK){
 80013c2:	e7cf      	b.n	8001364 <StartAlertMonitor+0x8>
 80013c4:	20000198 	.word	0x20000198
 80013c8:	20000002 	.word	0x20000002
 80013cc:	200001a1 	.word	0x200001a1
 80013d0:	0800b2d4 	.word	0x0800b2d4

080013d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80013e6:	f000 faab 	bl	8001940 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40000c00 	.word	0x40000c00

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <HAL_MspInit+0x4c>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001412:	4a10      	ldr	r2, [pc, #64]	@ (8001454 <HAL_MspInit+0x4c>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6613      	str	r3, [r2, #96]	@ 0x60
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <HAL_MspInit+0x4c>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <HAL_MspInit+0x4c>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142a:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <HAL_MspInit+0x4c>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001430:	6593      	str	r3, [r2, #88]	@ 0x58
 8001432:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <HAL_MspInit+0x4c>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	210f      	movs	r1, #15
 8001442:	f06f 0001 	mvn.w	r0, #1
 8001446:	f001 fe87 	bl	8003158 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b0a6      	sub	sp, #152	@ 0x98
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	2288      	movs	r2, #136	@ 0x88
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f008 fc88 	bl	8009d7e <memset>
  if(hadc->Instance==ADC1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a19      	ldr	r2, [pc, #100]	@ (80014d8 <HAL_ADC_MspInit+0x80>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d12b      	bne.n	80014d0 <HAL_ADC_MspInit+0x78>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001478:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800147c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800147e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001482:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001486:	2302      	movs	r3, #2
 8001488:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800148a:	2301      	movs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800148e:	2308      	movs	r3, #8
 8001490:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001492:	2307      	movs	r3, #7
 8001494:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001496:	2302      	movs	r3, #2
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800149a:	2302      	movs	r3, #2
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800149e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 ff57 	bl	800435c <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80014b4:	f7ff ffa0 	bl	80013f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <HAL_ADC_MspInit+0x84>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014bc:	4a07      	ldr	r2, [pc, #28]	@ (80014dc <HAL_ADC_MspInit+0x84>)
 80014be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <HAL_ADC_MspInit+0x84>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014d0:	bf00      	nop
 80014d2:	3798      	adds	r7, #152	@ 0x98
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	50040000 	.word	0x50040000
 80014dc:	40021000 	.word	0x40021000

080014e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0ac      	sub	sp, #176	@ 0xb0
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2288      	movs	r2, #136	@ 0x88
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f008 fc3c 	bl	8009d7e <memset>
  if(huart->Instance==USART2)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a25      	ldr	r2, [pc, #148]	@ (80015a0 <HAL_UART_MspInit+0xc0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d143      	bne.n	8001598 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001510:	2302      	movs	r3, #2
 8001512:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001514:	2300      	movs	r3, #0
 8001516:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4618      	mov	r0, r3
 800151e:	f002 ff1d 	bl	800435c <HAL_RCCEx_PeriphCLKConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001528:	f7ff ff66 	bl	80013f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800152c:	4b1d      	ldr	r3, [pc, #116]	@ (80015a4 <HAL_UART_MspInit+0xc4>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001530:	4a1c      	ldr	r2, [pc, #112]	@ (80015a4 <HAL_UART_MspInit+0xc4>)
 8001532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001536:	6593      	str	r3, [r2, #88]	@ 0x58
 8001538:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <HAL_UART_MspInit+0xc4>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800153c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	4b17      	ldr	r3, [pc, #92]	@ (80015a4 <HAL_UART_MspInit+0xc4>)
 8001546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001548:	4a16      	ldr	r2, [pc, #88]	@ (80015a4 <HAL_UART_MspInit+0xc4>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001550:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <HAL_UART_MspInit+0xc4>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800155c:	230c      	movs	r3, #12
 800155e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001574:	2307      	movs	r3, #7
 8001576:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800157e:	4619      	mov	r1, r3
 8001580:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001584:	f001 fe92 	bl	80032ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2105      	movs	r1, #5
 800158c:	2026      	movs	r0, #38	@ 0x26
 800158e:	f001 fde3 	bl	8003158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001592:	2026      	movs	r0, #38	@ 0x26
 8001594:	f001 fdfc 	bl	8003190 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001598:	bf00      	nop
 800159a:	37b0      	adds	r7, #176	@ 0xb0
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40004400 	.word	0x40004400
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08e      	sub	sp, #56	@ 0x38
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80015b6:	4b34      	ldr	r3, [pc, #208]	@ (8001688 <HAL_InitTick+0xe0>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ba:	4a33      	ldr	r2, [pc, #204]	@ (8001688 <HAL_InitTick+0xe0>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c2:	4b31      	ldr	r3, [pc, #196]	@ (8001688 <HAL_InitTick+0xe0>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ce:	f107 0210 	add.w	r2, r7, #16
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 fe2d 	bl	8004238 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d103      	bne.n	80015f0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015e8:	f002 fdfa 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 80015ec:	6378      	str	r0, [r7, #52]	@ 0x34
 80015ee:	e004      	b.n	80015fa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015f0:	f002 fdf6 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 80015f4:	4603      	mov	r3, r0
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015fc:	4a23      	ldr	r2, [pc, #140]	@ (800168c <HAL_InitTick+0xe4>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0c9b      	lsrs	r3, r3, #18
 8001604:	3b01      	subs	r3, #1
 8001606:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001608:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <HAL_InitTick+0xe8>)
 800160a:	4a22      	ldr	r2, [pc, #136]	@ (8001694 <HAL_InitTick+0xec>)
 800160c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800160e:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <HAL_InitTick+0xe8>)
 8001610:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001614:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001616:	4a1e      	ldr	r2, [pc, #120]	@ (8001690 <HAL_InitTick+0xe8>)
 8001618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800161a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800161c:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <HAL_InitTick+0xe8>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <HAL_InitTick+0xe8>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <HAL_InitTick+0xe8>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800162e:	4818      	ldr	r0, [pc, #96]	@ (8001690 <HAL_InitTick+0xe8>)
 8001630:	f003 fb50 	bl	8004cd4 <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800163a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800163e:	2b00      	cmp	r3, #0
 8001640:	d11b      	bne.n	800167a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001642:	4813      	ldr	r0, [pc, #76]	@ (8001690 <HAL_InitTick+0xe8>)
 8001644:	f003 fba8 	bl	8004d98 <HAL_TIM_Base_Start_IT>
 8001648:	4603      	mov	r3, r0
 800164a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800164e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001652:	2b00      	cmp	r3, #0
 8001654:	d111      	bne.n	800167a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001656:	2032      	movs	r0, #50	@ 0x32
 8001658:	f001 fd9a 	bl	8003190 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b0f      	cmp	r3, #15
 8001660:	d808      	bhi.n	8001674 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001662:	2200      	movs	r2, #0
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	2032      	movs	r0, #50	@ 0x32
 8001668:	f001 fd76 	bl	8003158 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800166c:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <HAL_InitTick+0xf0>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e002      	b.n	800167a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800167a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800167e:	4618      	mov	r0, r3
 8001680:	3738      	adds	r7, #56	@ 0x38
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000
 800168c:	431bde83 	.word	0x431bde83
 8001690:	200003bc 	.word	0x200003bc
 8001694:	40000c00 	.word	0x40000c00
 8001698:	2000000c 	.word	0x2000000c

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <NMI_Handler+0x4>

080016a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <MemManage_Handler+0x4>

080016b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
	...

080016d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <USART2_IRQHandler+0x10>)
 80016da:	f003 fee5 	bl	80054a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200000f4 	.word	0x200000f4

080016e8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <TIM5_IRQHandler+0x10>)
 80016ee:	f003 fbc3 	bl	8004e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200003bc 	.word	0x200003bc

080016fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return 1;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_kill>:

int _kill(int pid, int sig)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001716:	f008 fc3b 	bl	8009f90 <__errno>
 800171a:	4603      	mov	r3, r0
 800171c:	2216      	movs	r2, #22
 800171e:	601a      	str	r2, [r3, #0]
  return -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_exit>:

void _exit (int status)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ffe7 	bl	800170c <_kill>
  while (1) {}    /* Make sure we hang here */
 800173e:	bf00      	nop
 8001740:	e7fd      	b.n	800173e <_exit+0x12>

08001742 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e00a      	b.n	800176a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001754:	f3af 8000 	nop.w
 8001758:	4601      	mov	r1, r0
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	60ba      	str	r2, [r7, #8]
 8001760:	b2ca      	uxtb	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3301      	adds	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	429a      	cmp	r2, r3
 8001770:	dbf0      	blt.n	8001754 <_read+0x12>
  }

  return len;
 8001772:	687b      	ldr	r3, [r7, #4]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	e009      	b.n	80017a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	60ba      	str	r2, [r7, #8]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe ff18 	bl	80005cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	dbf1      	blt.n	800178e <_write+0x12>
  }
  return len;
 80017aa:	687b      	ldr	r3, [r7, #4]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_close>:

int _close(int file)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017dc:	605a      	str	r2, [r3, #4]
  return 0;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_isatty>:

int _isatty(int file)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	60b9      	str	r1, [r7, #8]
 800180c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001824:	4a14      	ldr	r2, [pc, #80]	@ (8001878 <_sbrk+0x5c>)
 8001826:	4b15      	ldr	r3, [pc, #84]	@ (800187c <_sbrk+0x60>)
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001830:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <_sbrk+0x64>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001838:	4b11      	ldr	r3, [pc, #68]	@ (8001880 <_sbrk+0x64>)
 800183a:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <_sbrk+0x68>)
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183e:	4b10      	ldr	r3, [pc, #64]	@ (8001880 <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800184c:	f008 fba0 	bl	8009f90 <__errno>
 8001850:	4603      	mov	r3, r0
 8001852:	220c      	movs	r2, #12
 8001854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e009      	b.n	8001870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001862:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	4a05      	ldr	r2, [pc, #20]	@ (8001880 <_sbrk+0x64>)
 800186c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20018000 	.word	0x20018000
 800187c:	00000400 	.word	0x00000400
 8001880:	20000408 	.word	0x20000408
 8001884:	20002dd8 	.word	0x20002dd8

08001888 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	@ (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018b0:	f7ff ffea 	bl	8001888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80018b6:	490d      	ldr	r1, [pc, #52]	@ (80018ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80018b8:	4a0d      	ldr	r2, [pc, #52]	@ (80018f0 <LoopForever+0xe>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018cc:	4c0a      	ldr	r4, [pc, #40]	@ (80018f8 <LoopForever+0x16>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018da:	f008 fb5f 	bl	8009f9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018de:	f7fe feeb 	bl	80006b8 <main>

080018e2 <LoopForever>:

LoopForever:
    b LoopForever
 80018e2:	e7fe      	b.n	80018e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80018f0:	0800ba2c 	.word	0x0800ba2c
  ldr r2, =_sbss
 80018f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80018f8:	20002dd4 	.word	0x20002dd4

080018fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC1_2_IRQHandler>
	...

08001900 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800190a:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <HAL_Init+0x3c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a0b      	ldr	r2, [pc, #44]	@ (800193c <HAL_Init+0x3c>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001914:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001916:	2003      	movs	r0, #3
 8001918:	f001 fc13 	bl	8003142 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800191c:	200f      	movs	r0, #15
 800191e:	f7ff fe43 	bl	80015a8 <HAL_InitTick>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	e001      	b.n	8001932 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800192e:	f7ff fd6b 	bl	8001408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001932:	79fb      	ldrb	r3, [r7, #7]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40022000 	.word	0x40022000

08001940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_IncTick+0x20>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_IncTick+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <HAL_IncTick+0x24>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000010 	.word	0x20000010
 8001964:	2000040c 	.word	0x2000040c

08001968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b03      	ldr	r3, [pc, #12]	@ (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	2000040c 	.word	0x2000040c

08001980 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	609a      	str	r2, [r3, #8]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3360      	adds	r3, #96	@ 0x60
 80019fa:	461a      	mov	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <LL_ADC_SetOffset+0x44>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	4313      	orrs	r3, r2
 8001a18:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a20:	bf00      	nop
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	03fff000 	.word	0x03fff000

08001a30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3360      	adds	r3, #96	@ 0x60
 8001a3e:	461a      	mov	r2, r3
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3360      	adds	r3, #96	@ 0x60
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a86:	bf00      	nop
 8001a88:	371c      	adds	r7, #28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3330      	adds	r3, #48	@ 0x30
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	4413      	add	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	211f      	movs	r1, #31
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	0e9b      	lsrs	r3, r3, #26
 8001af0:	f003 011f 	and.w	r1, r3, #31
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	431a      	orrs	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b04:	bf00      	nop
 8001b06:	371c      	adds	r7, #28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3314      	adds	r3, #20
 8001b20:	461a      	mov	r2, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	0e5b      	lsrs	r3, r3, #25
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	4413      	add	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	0d1b      	lsrs	r3, r3, #20
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	2107      	movs	r1, #7
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	401a      	ands	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	0d1b      	lsrs	r3, r3, #20
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	fa01 f303 	lsl.w	r3, r1, r3
 8001b54:	431a      	orrs	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b5a:	bf00      	nop
 8001b5c:	371c      	adds	r7, #28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b80:	43db      	mvns	r3, r3
 8001b82:	401a      	ands	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0318 	and.w	r3, r3, #24
 8001b8a:	4908      	ldr	r1, [pc, #32]	@ (8001bac <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b8c:	40d9      	lsrs	r1, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	400b      	ands	r3, r1
 8001b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b96:	431a      	orrs	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	0007ffff 	.word	0x0007ffff

08001bb0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 031f 	and.w	r3, r3, #31
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001bf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6093      	str	r3, [r2, #8]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c20:	d101      	bne.n	8001c26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c48:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c70:	d101      	bne.n	8001c76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c98:	f043 0201 	orr.w	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cc0:	f043 0202 	orr.w	r2, r3, #2
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <LL_ADC_IsEnabled+0x18>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <LL_ADC_IsEnabled+0x1a>
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d101      	bne.n	8001d12 <LL_ADC_IsDisableOngoing+0x18>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <LL_ADC_IsDisableOngoing+0x1a>
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d34:	f043 0204 	orr.w	r2, r3, #4
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d101      	bne.n	8001d60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d101      	bne.n	8001d86 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b089      	sub	sp, #36	@ 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e130      	b.n	8002010 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d109      	bne.n	8001dd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff fb4b 	bl	8001458 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff19 	bl	8001c0c <LL_ADC_IsDeepPowerDownEnabled>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d004      	beq.n	8001dea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff feff 	bl	8001be8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff34 	bl	8001c5c <LL_ADC_IsInternalRegulatorEnabled>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d115      	bne.n	8001e26 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff18 	bl	8001c34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e04:	4b84      	ldr	r3, [pc, #528]	@ (8002018 <HAL_ADC_Init+0x284>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	4a84      	ldr	r2, [pc, #528]	@ (800201c <HAL_ADC_Init+0x288>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	3301      	adds	r3, #1
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e18:	e002      	b.n	8001e20 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f9      	bne.n	8001e1a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff16 	bl	8001c5c <LL_ADC_IsInternalRegulatorEnabled>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10d      	bne.n	8001e52 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3a:	f043 0210 	orr.w	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff76 	bl	8001d48 <LL_ADC_REG_IsConversionOngoing>
 8001e5c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 80c9 	bne.w	8001ffe <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f040 80c5 	bne.w	8001ffe <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e78:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e7c:	f043 0202 	orr.w	r2, r3, #2
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff23 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d115      	bne.n	8001ec0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e94:	4862      	ldr	r0, [pc, #392]	@ (8002020 <HAL_ADC_Init+0x28c>)
 8001e96:	f7ff ff1d 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001e9a:	4604      	mov	r4, r0
 8001e9c:	4861      	ldr	r0, [pc, #388]	@ (8002024 <HAL_ADC_Init+0x290>)
 8001e9e:	f7ff ff19 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	431c      	orrs	r4, r3
 8001ea6:	4860      	ldr	r0, [pc, #384]	@ (8002028 <HAL_ADC_Init+0x294>)
 8001ea8:	f7ff ff14 	bl	8001cd4 <LL_ADC_IsEnabled>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4323      	orrs	r3, r4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d105      	bne.n	8001ec0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	485c      	ldr	r0, [pc, #368]	@ (800202c <HAL_ADC_Init+0x298>)
 8001ebc:	f7ff fd60 	bl	8001980 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7e5b      	ldrb	r3, [r3, #25]
 8001ec4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eca:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ed0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ed6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ede:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d106      	bne.n	8001efc <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	045b      	lsls	r3, r3, #17
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d009      	beq.n	8001f18 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f08:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f10:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	4b44      	ldr	r3, [pc, #272]	@ (8002030 <HAL_ADC_Init+0x29c>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	69b9      	ldr	r1, [r7, #24]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff1c 	bl	8001d6e <LL_ADC_INJ_IsConversionOngoing>
 8001f36:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d13d      	bne.n	8001fba <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d13a      	bne.n	8001fba <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f48:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f50:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f60:	f023 0302 	bic.w	r3, r3, #2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	69b9      	ldr	r1, [r7, #24]
 8001f6a:	430b      	orrs	r3, r1
 8001f6c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d118      	bne.n	8001faa <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f82:	f023 0304 	bic.w	r3, r3, #4
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f8e:	4311      	orrs	r1, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f94:	4311      	orrs	r1, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	611a      	str	r2, [r3, #16]
 8001fa8:	e007      	b.n	8001fba <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0201 	bic.w	r2, r2, #1
 8001fb8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d10c      	bne.n	8001fdc <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc8:	f023 010f 	bic.w	r1, r3, #15
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	1e5a      	subs	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fda:	e007      	b.n	8001fec <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 020f 	bic.w	r2, r2, #15
 8001fea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff0:	f023 0303 	bic.w	r3, r3, #3
 8001ff4:	f043 0201 	orr.w	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ffc:	e007      	b.n	800200e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002002:	f043 0210 	orr.w	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800200e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3724      	adds	r7, #36	@ 0x24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd90      	pop	{r4, r7, pc}
 8002018:	20000008 	.word	0x20000008
 800201c:	053e2d63 	.word	0x053e2d63
 8002020:	50040000 	.word	0x50040000
 8002024:	50040100 	.word	0x50040100
 8002028:	50040200 	.word	0x50040200
 800202c:	50040300 	.word	0x50040300
 8002030:	fff0c007 	.word	0xfff0c007

08002034 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800203c:	4857      	ldr	r0, [pc, #348]	@ (800219c <HAL_ADC_Start+0x168>)
 800203e:	f7ff fdb7 	bl	8001bb0 <LL_ADC_GetMultimode>
 8002042:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fe7d 	bl	8001d48 <LL_ADC_REG_IsConversionOngoing>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 809c 	bne.w	800218e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_ADC_Start+0x30>
 8002060:	2302      	movs	r3, #2
 8002062:	e097      	b.n	8002194 <HAL_ADC_Start+0x160>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 fd73 	bl	8002b58 <ADC_Enable>
 8002072:	4603      	mov	r3, r0
 8002074:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002076:	7dfb      	ldrb	r3, [r7, #23]
 8002078:	2b00      	cmp	r3, #0
 800207a:	f040 8083 	bne.w	8002184 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002082:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a42      	ldr	r2, [pc, #264]	@ (80021a0 <HAL_ADC_Start+0x16c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d002      	beq.n	80020a2 <HAL_ADC_Start+0x6e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	e000      	b.n	80020a4 <HAL_ADC_Start+0x70>
 80020a2:	4b40      	ldr	r3, [pc, #256]	@ (80021a4 <HAL_ADC_Start+0x170>)
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d002      	beq.n	80020b2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ca:	d106      	bne.n	80020da <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d0:	f023 0206 	bic.w	r2, r3, #6
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	659a      	str	r2, [r3, #88]	@ 0x58
 80020d8:	e002      	b.n	80020e0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	221c      	movs	r2, #28
 80020e6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a2a      	ldr	r2, [pc, #168]	@ (80021a0 <HAL_ADC_Start+0x16c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d002      	beq.n	8002100 <HAL_ADC_Start+0xcc>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	e000      	b.n	8002102 <HAL_ADC_Start+0xce>
 8002100:	4b28      	ldr	r3, [pc, #160]	@ (80021a4 <HAL_ADC_Start+0x170>)
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	4293      	cmp	r3, r2
 8002108:	d008      	beq.n	800211c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	2b05      	cmp	r3, #5
 8002114:	d002      	beq.n	800211c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b09      	cmp	r3, #9
 800211a:	d114      	bne.n	8002146 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d007      	beq.n	800213a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800212e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002132:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fdee 	bl	8001d20 <LL_ADC_REG_StartConversion>
 8002144:	e025      	b.n	8002192 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a12      	ldr	r2, [pc, #72]	@ (80021a0 <HAL_ADC_Start+0x16c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d002      	beq.n	8002162 <HAL_ADC_Start+0x12e>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	e000      	b.n	8002164 <HAL_ADC_Start+0x130>
 8002162:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <HAL_ADC_Start+0x170>)
 8002164:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00f      	beq.n	8002192 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002176:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800217a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	655a      	str	r2, [r3, #84]	@ 0x54
 8002182:	e006      	b.n	8002192 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800218c:	e001      	b.n	8002192 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800218e:	2302      	movs	r3, #2
 8002190:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002192:	7dfb      	ldrb	r3, [r7, #23]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	50040300 	.word	0x50040300
 80021a0:	50040100 	.word	0x50040100
 80021a4:	50040000 	.word	0x50040000

080021a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021b2:	4866      	ldr	r0, [pc, #408]	@ (800234c <HAL_ADC_PollForConversion+0x1a4>)
 80021b4:	f7ff fcfc 	bl	8001bb0 <LL_ADC_GetMultimode>
 80021b8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d102      	bne.n	80021c8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80021c2:	2308      	movs	r3, #8
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e02a      	b.n	800221e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	d002      	beq.n	80021da <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2b09      	cmp	r3, #9
 80021d8:	d111      	bne.n	80021fe <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0a4      	b.n	8002342 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80021f8:	2304      	movs	r3, #4
 80021fa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80021fc:	e00f      	b.n	800221e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80021fe:	4853      	ldr	r0, [pc, #332]	@ (800234c <HAL_ADC_PollForConversion+0x1a4>)
 8002200:	f7ff fce4 	bl	8001bcc <LL_ADC_GetMultiDMATransfer>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d007      	beq.n	800221a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220e:	f043 0220 	orr.w	r2, r3, #32
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e093      	b.n	8002342 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800221a:	2304      	movs	r3, #4
 800221c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800221e:	f7ff fba3 	bl	8001968 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002224:	e021      	b.n	800226a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d01d      	beq.n	800226a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800222e:	f7ff fb9b 	bl	8001968 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d302      	bcc.n	8002244 <HAL_ADC_PollForConversion+0x9c>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d112      	bne.n	800226a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10b      	bne.n	800226a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002256:	f043 0204 	orr.w	r2, r3, #4
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e06b      	b.n	8002342 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0d6      	beq.n	8002226 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fc02 	bl	8001a92 <LL_ADC_REG_IsTriggerSourceSWStart>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01c      	beq.n	80022ce <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	7e5b      	ldrb	r3, [r3, #25]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d118      	bne.n	80022ce <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d111      	bne.n	80022ce <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c6:	f043 0201 	orr.w	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002350 <HAL_ADC_PollForConversion+0x1a8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d002      	beq.n	80022de <HAL_ADC_PollForConversion+0x136>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	e000      	b.n	80022e0 <HAL_ADC_PollForConversion+0x138>
 80022de:	4b1d      	ldr	r3, [pc, #116]	@ (8002354 <HAL_ADC_PollForConversion+0x1ac>)
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d008      	beq.n	80022fa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d002      	beq.n	80022fa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	d104      	bne.n	8002304 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	e00c      	b.n	800231e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a11      	ldr	r2, [pc, #68]	@ (8002350 <HAL_ADC_PollForConversion+0x1a8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d002      	beq.n	8002314 <HAL_ADC_PollForConversion+0x16c>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	e000      	b.n	8002316 <HAL_ADC_PollForConversion+0x16e>
 8002314:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <HAL_ADC_PollForConversion+0x1ac>)
 8002316:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d104      	bne.n	800232e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2208      	movs	r2, #8
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	e008      	b.n	8002340 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d103      	bne.n	8002340 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	220c      	movs	r2, #12
 800233e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3720      	adds	r7, #32
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	50040300 	.word	0x50040300
 8002350:	50040100 	.word	0x50040100
 8002354:	50040000 	.word	0x50040000

08002358 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b0b6      	sub	sp, #216	@ 0xd8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x22>
 8002392:	2302      	movs	r3, #2
 8002394:	e3c9      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x7b6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fcd0 	bl	8001d48 <LL_ADC_REG_IsConversionOngoing>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 83aa 	bne.w	8002b04 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b05      	cmp	r3, #5
 80023be:	d824      	bhi.n	800240a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	3b02      	subs	r3, #2
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d81b      	bhi.n	8002402 <HAL_ADC_ConfigChannel+0x8e>
 80023ca:	a201      	add	r2, pc, #4	@ (adr r2, 80023d0 <HAL_ADC_ConfigChannel+0x5c>)
 80023cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d0:	080023e1 	.word	0x080023e1
 80023d4:	080023e9 	.word	0x080023e9
 80023d8:	080023f1 	.word	0x080023f1
 80023dc:	080023f9 	.word	0x080023f9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80023e0:	230c      	movs	r3, #12
 80023e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023e6:	e010      	b.n	800240a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80023e8:	2312      	movs	r3, #18
 80023ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023ee:	e00c      	b.n	800240a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80023f0:	2318      	movs	r3, #24
 80023f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023f6:	e008      	b.n	800240a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80023f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002400:	e003      	b.n	800240a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002402:	2306      	movs	r3, #6
 8002404:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002408:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002418:	f7ff fb4e 	bl	8001ab8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fc91 	bl	8001d48 <LL_ADC_REG_IsConversionOngoing>
 8002426:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fc9d 	bl	8001d6e <LL_ADC_INJ_IsConversionOngoing>
 8002434:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002438:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800243c:	2b00      	cmp	r3, #0
 800243e:	f040 81a4 	bne.w	800278a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002442:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 819f 	bne.w	800278a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6819      	ldr	r1, [r3, #0]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	461a      	mov	r2, r3
 800245a:	f7ff fb59 	bl	8001b10 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	08db      	lsrs	r3, r3, #3
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	2b04      	cmp	r3, #4
 800247e:	d00a      	beq.n	8002496 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6919      	ldr	r1, [r3, #16]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002490:	f7ff faaa 	bl	80019e8 <LL_ADC_SetOffset>
 8002494:	e179      	b.n	800278a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fac7 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 80024a2:	4603      	mov	r3, r0
 80024a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10a      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x14e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fabc 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 80024b8:	4603      	mov	r3, r0
 80024ba:	0e9b      	lsrs	r3, r3, #26
 80024bc:	f003 021f 	and.w	r2, r3, #31
 80024c0:	e01e      	b.n	8002500 <HAL_ADC_ConfigChannel+0x18c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fab1 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024d8:	fa93 f3a3 	rbit	r3, r3
 80024dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80024f0:	2320      	movs	r3, #32
 80024f2:	e004      	b.n	80024fe <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80024f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x1a4>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	0e9b      	lsrs	r3, r3, #26
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	e018      	b.n	800254a <HAL_ADC_ConfigChannel+0x1d6>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800252c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002530:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002534:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800253c:	2320      	movs	r3, #32
 800253e:	e004      	b.n	800254a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002540:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800254a:	429a      	cmp	r2, r3
 800254c:	d106      	bne.n	800255c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fa80 	bl	8001a5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fa64 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 8002568:	4603      	mov	r3, r0
 800256a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x214>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fa59 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	0e9b      	lsrs	r3, r3, #26
 8002582:	f003 021f 	and.w	r2, r3, #31
 8002586:	e01e      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x252>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2101      	movs	r1, #1
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fa4e 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 8002594:	4603      	mov	r3, r0
 8002596:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80025a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80025ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80025b6:	2320      	movs	r3, #32
 80025b8:	e004      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80025ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <HAL_ADC_ConfigChannel+0x26a>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	0e9b      	lsrs	r3, r3, #26
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	e018      	b.n	8002610 <HAL_ADC_ConfigChannel+0x29c>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80025f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80025fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002602:	2320      	movs	r3, #32
 8002604:	e004      	b.n	8002610 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002606:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002610:	429a      	cmp	r2, r3
 8002612:	d106      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2200      	movs	r2, #0
 800261a:	2101      	movs	r1, #1
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fa1d 	bl	8001a5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2102      	movs	r1, #2
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fa01 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 800262e:	4603      	mov	r3, r0
 8002630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <HAL_ADC_ConfigChannel+0x2da>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2102      	movs	r1, #2
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff f9f6 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 8002644:	4603      	mov	r3, r0
 8002646:	0e9b      	lsrs	r3, r3, #26
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	e01e      	b.n	800268c <HAL_ADC_ConfigChannel+0x318>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2102      	movs	r1, #2
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff f9eb 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 800265a:	4603      	mov	r3, r0
 800265c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800266c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002670:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002674:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800267c:	2320      	movs	r3, #32
 800267e:	e004      	b.n	800268a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002680:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002684:	fab3 f383 	clz	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002694:	2b00      	cmp	r3, #0
 8002696:	d105      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x330>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	0e9b      	lsrs	r3, r3, #26
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	e014      	b.n	80026ce <HAL_ADC_ConfigChannel+0x35a>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026ac:	fa93 f3a3 	rbit	r3, r3
 80026b0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80026b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80026b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80026c0:	2320      	movs	r3, #32
 80026c2:	e004      	b.n	80026ce <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80026c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026c8:	fab3 f383 	clz	r3, r3
 80026cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d106      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2200      	movs	r2, #0
 80026d8:	2102      	movs	r1, #2
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff f9be 	bl	8001a5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2103      	movs	r1, #3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff f9a2 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10a      	bne.n	800270c <HAL_ADC_ConfigChannel+0x398>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2103      	movs	r1, #3
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff f997 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 8002702:	4603      	mov	r3, r0
 8002704:	0e9b      	lsrs	r3, r3, #26
 8002706:	f003 021f 	and.w	r2, r3, #31
 800270a:	e017      	b.n	800273c <HAL_ADC_ConfigChannel+0x3c8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2103      	movs	r1, #3
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f98c 	bl	8001a30 <LL_ADC_GetOffsetChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002726:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800272e:	2320      	movs	r3, #32
 8002730:	e003      	b.n	800273a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002732:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002744:	2b00      	cmp	r3, #0
 8002746:	d105      	bne.n	8002754 <HAL_ADC_ConfigChannel+0x3e0>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0e9b      	lsrs	r3, r3, #26
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	e011      	b.n	8002778 <HAL_ADC_ConfigChannel+0x404>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002762:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002764:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002766:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800276c:	2320      	movs	r3, #32
 800276e:	e003      	b.n	8002778 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002770:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002772:	fab3 f383 	clz	r3, r3
 8002776:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002778:	429a      	cmp	r2, r3
 800277a:	d106      	bne.n	800278a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2200      	movs	r2, #0
 8002782:	2103      	movs	r1, #3
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff f969 	bl	8001a5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff faa0 	bl	8001cd4 <LL_ADC_IsEnabled>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	f040 8140 	bne.w	8002a1c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6819      	ldr	r1, [r3, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	461a      	mov	r2, r3
 80027aa:	f7ff f9dd 	bl	8001b68 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	4a8f      	ldr	r2, [pc, #572]	@ (80029f0 <HAL_ADC_ConfigChannel+0x67c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	f040 8131 	bne.w	8002a1c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10b      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x46e>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	0e9b      	lsrs	r3, r3, #26
 80027d0:	3301      	adds	r3, #1
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2b09      	cmp	r3, #9
 80027d8:	bf94      	ite	ls
 80027da:	2301      	movls	r3, #1
 80027dc:	2300      	movhi	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	e019      	b.n	8002816 <HAL_ADC_ConfigChannel+0x4a2>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027ea:	fa93 f3a3 	rbit	r3, r3
 80027ee:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80027f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80027f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80027fa:	2320      	movs	r3, #32
 80027fc:	e003      	b.n	8002806 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80027fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	3301      	adds	r3, #1
 8002808:	f003 031f 	and.w	r3, r3, #31
 800280c:	2b09      	cmp	r3, #9
 800280e:	bf94      	ite	ls
 8002810:	2301      	movls	r3, #1
 8002812:	2300      	movhi	r3, #0
 8002814:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002816:	2b00      	cmp	r3, #0
 8002818:	d079      	beq.n	800290e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002822:	2b00      	cmp	r3, #0
 8002824:	d107      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x4c2>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0e9b      	lsrs	r3, r3, #26
 800282c:	3301      	adds	r3, #1
 800282e:	069b      	lsls	r3, r3, #26
 8002830:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002834:	e015      	b.n	8002862 <HAL_ADC_ConfigChannel+0x4ee>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002846:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800284e:	2320      	movs	r3, #32
 8002850:	e003      	b.n	800285a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002854:	fab3 f383 	clz	r3, r3
 8002858:	b2db      	uxtb	r3, r3
 800285a:	3301      	adds	r3, #1
 800285c:	069b      	lsls	r3, r3, #26
 800285e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x50e>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	0e9b      	lsrs	r3, r3, #26
 8002874:	3301      	adds	r3, #1
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	2101      	movs	r1, #1
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	e017      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x53e>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002892:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800289a:	2320      	movs	r3, #32
 800289c:	e003      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800289e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028a0:	fab3 f383 	clz	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	3301      	adds	r3, #1
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	2101      	movs	r1, #1
 80028ae:	fa01 f303 	lsl.w	r3, r1, r3
 80028b2:	ea42 0103 	orr.w	r1, r2, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x564>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	0e9b      	lsrs	r3, r3, #26
 80028c8:	3301      	adds	r3, #1
 80028ca:	f003 021f 	and.w	r2, r3, #31
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	051b      	lsls	r3, r3, #20
 80028d6:	e018      	b.n	800290a <HAL_ADC_ConfigChannel+0x596>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80028e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80028ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80028f0:	2320      	movs	r3, #32
 80028f2:	e003      	b.n	80028fc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80028f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	f003 021f 	and.w	r2, r3, #31
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800290a:	430b      	orrs	r3, r1
 800290c:	e081      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002916:	2b00      	cmp	r3, #0
 8002918:	d107      	bne.n	800292a <HAL_ADC_ConfigChannel+0x5b6>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	0e9b      	lsrs	r3, r3, #26
 8002920:	3301      	adds	r3, #1
 8002922:	069b      	lsls	r3, r3, #26
 8002924:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002928:	e015      	b.n	8002956 <HAL_ADC_ConfigChannel+0x5e2>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800293c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002942:	2320      	movs	r3, #32
 8002944:	e003      	b.n	800294e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	3301      	adds	r3, #1
 8002950:	069b      	lsls	r3, r3, #26
 8002952:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x602>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	0e9b      	lsrs	r3, r3, #26
 8002968:	3301      	adds	r3, #1
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	2101      	movs	r1, #1
 8002970:	fa01 f303 	lsl.w	r3, r1, r3
 8002974:	e017      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x632>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	61bb      	str	r3, [r7, #24]
  return result;
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800298e:	2320      	movs	r3, #32
 8002990:	e003      	b.n	800299a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	3301      	adds	r3, #1
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	2101      	movs	r1, #1
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	ea42 0103 	orr.w	r1, r2, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10d      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x65e>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	0e9b      	lsrs	r3, r3, #26
 80029bc:	3301      	adds	r3, #1
 80029be:	f003 021f 	and.w	r2, r3, #31
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	3b1e      	subs	r3, #30
 80029ca:	051b      	lsls	r3, r3, #20
 80029cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029d0:	e01e      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x69c>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	60fb      	str	r3, [r7, #12]
  return result;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d104      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80029ea:	2320      	movs	r3, #32
 80029ec:	e006      	b.n	80029fc <HAL_ADC_ConfigChannel+0x688>
 80029ee:	bf00      	nop
 80029f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	f003 021f 	and.w	r2, r3, #31
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	3b1e      	subs	r3, #30
 8002a0a:	051b      	lsls	r3, r3, #20
 8002a0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a10:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a16:	4619      	mov	r1, r3
 8002a18:	f7ff f87a 	bl	8001b10 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b44      	ldr	r3, [pc, #272]	@ (8002b34 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d07a      	beq.n	8002b1e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a28:	4843      	ldr	r0, [pc, #268]	@ (8002b38 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a2a:	f7fe ffcf 	bl	80019cc <LL_ADC_GetCommonPathInternalCh>
 8002a2e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a41      	ldr	r2, [pc, #260]	@ (8002b3c <HAL_ADC_ConfigChannel+0x7c8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d12c      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d126      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a3c      	ldr	r2, [pc, #240]	@ (8002b40 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d004      	beq.n	8002a5c <HAL_ADC_ConfigChannel+0x6e8>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a3b      	ldr	r2, [pc, #236]	@ (8002b44 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d15d      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a64:	4619      	mov	r1, r3
 8002a66:	4834      	ldr	r0, [pc, #208]	@ (8002b38 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a68:	f7fe ff9d 	bl	80019a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a6c:	4b36      	ldr	r3, [pc, #216]	@ (8002b48 <HAL_ADC_ConfigChannel+0x7d4>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	099b      	lsrs	r3, r3, #6
 8002a72:	4a36      	ldr	r2, [pc, #216]	@ (8002b4c <HAL_ADC_ConfigChannel+0x7d8>)
 8002a74:	fba2 2303 	umull	r2, r3, r2, r3
 8002a78:	099b      	lsrs	r3, r3, #6
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a86:	e002      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f9      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a94:	e040      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a2d      	ldr	r2, [pc, #180]	@ (8002b50 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d118      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002aa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002aa4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d112      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a23      	ldr	r2, [pc, #140]	@ (8002b40 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d004      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0x74c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a22      	ldr	r2, [pc, #136]	@ (8002b44 <HAL_ADC_ConfigChannel+0x7d0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d12d      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ac4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ac8:	4619      	mov	r1, r3
 8002aca:	481b      	ldr	r0, [pc, #108]	@ (8002b38 <HAL_ADC_ConfigChannel+0x7c4>)
 8002acc:	f7fe ff6b 	bl	80019a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ad0:	e024      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8002b54 <HAL_ADC_ConfigChannel+0x7e0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d120      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002adc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ae0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d11a      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a14      	ldr	r2, [pc, #80]	@ (8002b40 <HAL_ADC_ConfigChannel+0x7cc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d115      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002af6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002afa:	4619      	mov	r1, r3
 8002afc:	480e      	ldr	r0, [pc, #56]	@ (8002b38 <HAL_ADC_ConfigChannel+0x7c4>)
 8002afe:	f7fe ff52 	bl	80019a6 <LL_ADC_SetCommonPathInternalCh>
 8002b02:	e00c      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002b16:	e002      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b18:	bf00      	nop
 8002b1a:	e000      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b26:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	37d8      	adds	r7, #216	@ 0xd8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	80080000 	.word	0x80080000
 8002b38:	50040300 	.word	0x50040300
 8002b3c:	c7520000 	.word	0xc7520000
 8002b40:	50040000 	.word	0x50040000
 8002b44:	50040200 	.word	0x50040200
 8002b48:	20000008 	.word	0x20000008
 8002b4c:	053e2d63 	.word	0x053e2d63
 8002b50:	cb840000 	.word	0xcb840000
 8002b54:	80000001 	.word	0x80000001

08002b58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff f8b3 	bl	8001cd4 <LL_ADC_IsEnabled>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d169      	bne.n	8002c48 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	4b36      	ldr	r3, [pc, #216]	@ (8002c54 <ADC_Enable+0xfc>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00d      	beq.n	8002b9e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b86:	f043 0210 	orr.w	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b92:	f043 0201 	orr.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e055      	b.n	8002c4a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff f86e 	bl	8001c84 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ba8:	482b      	ldr	r0, [pc, #172]	@ (8002c58 <ADC_Enable+0x100>)
 8002baa:	f7fe ff0f 	bl	80019cc <LL_ADC_GetCommonPathInternalCh>
 8002bae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002bb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d013      	beq.n	8002be0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bb8:	4b28      	ldr	r3, [pc, #160]	@ (8002c5c <ADC_Enable+0x104>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	099b      	lsrs	r3, r3, #6
 8002bbe:	4a28      	ldr	r2, [pc, #160]	@ (8002c60 <ADC_Enable+0x108>)
 8002bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc4:	099b      	lsrs	r3, r3, #6
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bd2:	e002      	b.n	8002bda <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f9      	bne.n	8002bd4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002be0:	f7fe fec2 	bl	8001968 <HAL_GetTick>
 8002be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002be6:	e028      	b.n	8002c3a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff f871 	bl	8001cd4 <LL_ADC_IsEnabled>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d104      	bne.n	8002c02 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff f841 	bl	8001c84 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c02:	f7fe feb1 	bl	8001968 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d914      	bls.n	8002c3a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d00d      	beq.n	8002c3a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c22:	f043 0210 	orr.w	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2e:	f043 0201 	orr.w	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e007      	b.n	8002c4a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d1cf      	bne.n	8002be8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	8000003f 	.word	0x8000003f
 8002c58:	50040300 	.word	0x50040300
 8002c5c:	20000008 	.word	0x20000008
 8002c60:	053e2d63 	.word	0x053e2d63

08002c64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff f842 	bl	8001cfa <LL_ADC_IsDisableOngoing>
 8002c76:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff f829 	bl	8001cd4 <LL_ADC_IsEnabled>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d047      	beq.n	8002d18 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d144      	bne.n	8002d18 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 030d 	and.w	r3, r3, #13
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d10c      	bne.n	8002cb6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff f803 	bl	8001cac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2203      	movs	r2, #3
 8002cac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cae:	f7fe fe5b 	bl	8001968 <HAL_GetTick>
 8002cb2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cb4:	e029      	b.n	8002d0a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cba:	f043 0210 	orr.w	r2, r3, #16
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e023      	b.n	8002d1a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cd2:	f7fe fe49 	bl	8001968 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d914      	bls.n	8002d0a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00d      	beq.n	8002d0a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf2:	f043 0210 	orr.w	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfe:	f043 0201 	orr.w	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e007      	b.n	8002d1a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0301 	and.w	r3, r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1dc      	bne.n	8002cd2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <LL_ADC_IsEnabled>:
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <LL_ADC_IsEnabled+0x18>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <LL_ADC_IsEnabled+0x1a>
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_ADC_StartCalibration>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002d5a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	609a      	str	r2, [r3, #8]
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_ADC_IsCalibrationOnGoing>:
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d8e:	d101      	bne.n	8002d94 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d101      	bne.n	8002dba <LL_ADC_REG_IsConversionOngoing+0x18>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_ADCEx_Calibration_Start+0x1c>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e04d      	b.n	8002e80 <HAL_ADCEx_Calibration_Start+0xb8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff ff39 	bl	8002c64 <ADC_Disable>
 8002df2:	4603      	mov	r3, r0
 8002df4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d136      	bne.n	8002e6a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e00:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e04:	f023 0302 	bic.w	r3, r3, #2
 8002e08:	f043 0202 	orr.w	r2, r3, #2
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6839      	ldr	r1, [r7, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ff96 	bl	8002d48 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e1c:	e014      	b.n	8002e48 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	3301      	adds	r3, #1
 8002e22:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002e2a:	d30d      	bcc.n	8002e48 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e30:	f023 0312 	bic.w	r3, r3, #18
 8002e34:	f043 0210 	orr.w	r2, r3, #16
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e01b      	b.n	8002e80 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff94 	bl	8002d7a <LL_ADC_IsCalibrationOnGoing>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e2      	bne.n	8002e1e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5c:	f023 0303 	bic.w	r3, r3, #3
 8002e60:	f043 0201 	orr.w	r2, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e68:	e005      	b.n	8002e76 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6e:	f043 0210 	orr.w	r2, r3, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e88:	b590      	push	{r4, r7, lr}
 8002e8a:	b09f      	sub	sp, #124	@ 0x7c
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e093      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a47      	ldr	r2, [pc, #284]	@ (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d102      	bne.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ec0:	4b46      	ldr	r3, [pc, #280]	@ (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	e001      	b.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10b      	bne.n	8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed4:	f043 0220 	orr.w	r2, r3, #32
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e072      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ff59 	bl	8002da2 <LL_ADC_REG_IsConversionOngoing>
 8002ef0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff53 	bl	8002da2 <LL_ADC_REG_IsConversionOngoing>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d154      	bne.n	8002fac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d151      	bne.n	8002fac <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f08:	4b35      	ldr	r3, [pc, #212]	@ (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002f0a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d02c      	beq.n	8002f6e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	6859      	ldr	r1, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f26:	035b      	lsls	r3, r3, #13
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f30:	4829      	ldr	r0, [pc, #164]	@ (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f32:	f7ff fef6 	bl	8002d22 <LL_ADC_IsEnabled>
 8002f36:	4604      	mov	r4, r0
 8002f38:	4828      	ldr	r0, [pc, #160]	@ (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f3a:	f7ff fef2 	bl	8002d22 <LL_ADC_IsEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	431c      	orrs	r4, r3
 8002f42:	4828      	ldr	r0, [pc, #160]	@ (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f44:	f7ff feed 	bl	8002d22 <LL_ADC_IsEnabled>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	4323      	orrs	r3, r4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d137      	bne.n	8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f58:	f023 030f 	bic.w	r3, r3, #15
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	6811      	ldr	r1, [r2, #0]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	6892      	ldr	r2, [r2, #8]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	431a      	orrs	r2, r3
 8002f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f6a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f6c:	e028      	b.n	8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f78:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f7a:	4817      	ldr	r0, [pc, #92]	@ (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f7c:	f7ff fed1 	bl	8002d22 <LL_ADC_IsEnabled>
 8002f80:	4604      	mov	r4, r0
 8002f82:	4816      	ldr	r0, [pc, #88]	@ (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002f84:	f7ff fecd 	bl	8002d22 <LL_ADC_IsEnabled>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	431c      	orrs	r4, r3
 8002f8c:	4815      	ldr	r0, [pc, #84]	@ (8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f8e:	f7ff fec8 	bl	8002d22 <LL_ADC_IsEnabled>
 8002f92:	4603      	mov	r3, r0
 8002f94:	4323      	orrs	r3, r4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d112      	bne.n	8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002fa2:	f023 030f 	bic.w	r3, r3, #15
 8002fa6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002fa8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002faa:	e009      	b.n	8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002fbe:	e000      	b.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fca:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	377c      	adds	r7, #124	@ 0x7c
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd90      	pop	{r4, r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	50040000 	.word	0x50040000
 8002fdc:	50040100 	.word	0x50040100
 8002fe0:	50040300 	.word	0x50040300
 8002fe4:	50040200 	.word	0x50040200

08002fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301a:	4a04      	ldr	r2, [pc, #16]	@ (800302c <__NVIC_SetPriorityGrouping+0x44>)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	60d3      	str	r3, [r2, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4907      	ldr	r1, [pc, #28]	@ (8003084 <__NVIC_EnableIRQ+0x38>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db0a      	blt.n	80030b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	490c      	ldr	r1, [pc, #48]	@ (80030d4 <__NVIC_SetPriority+0x4c>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b0:	e00a      	b.n	80030c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	@ (80030d8 <__NVIC_SetPriority+0x50>)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b04      	subs	r3, #4
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	440b      	add	r3, r1
 80030c6:	761a      	strb	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	@ 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f1c3 0307 	rsb	r3, r3, #7
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf28      	it	cs
 80030fa:	2304      	movcs	r3, #4
 80030fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3304      	adds	r3, #4
 8003102:	2b06      	cmp	r3, #6
 8003104:	d902      	bls.n	800310c <NVIC_EncodePriority+0x30>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3b03      	subs	r3, #3
 800310a:	e000      	b.n	800310e <NVIC_EncodePriority+0x32>
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003124:	f04f 31ff 	mov.w	r1, #4294967295
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	43d9      	mvns	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	4313      	orrs	r3, r2
         );
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	@ 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ff4c 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800316a:	f7ff ff61 	bl	8003030 <__NVIC_GetPriorityGrouping>
 800316e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	6978      	ldr	r0, [r7, #20]
 8003176:	f7ff ffb1 	bl	80030dc <NVIC_EncodePriority>
 800317a:	4602      	mov	r2, r0
 800317c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff ff80 	bl	8003088 <__NVIC_SetPriority>
}
 8003188:	bf00      	nop
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff54 	bl	800304c <__NVIC_EnableIRQ>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d008      	beq.n	80031d6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2204      	movs	r2, #4
 80031c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e022      	b.n	800321c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 020e 	bic.w	r2, r2, #14
 80031e4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	f003 021c 	and.w	r2, r3, #28
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	2101      	movs	r1, #1
 8003204:	fa01 f202 	lsl.w	r2, r1, r2
 8003208:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800321a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d005      	beq.n	800324c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2204      	movs	r2, #4
 8003244:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
 800324a:	e029      	b.n	80032a0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 020e 	bic.w	r2, r2, #14
 800325a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003270:	f003 021c 	and.w	r2, r3, #28
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003278:	2101      	movs	r1, #1
 800327a:	fa01 f202 	lsl.w	r2, r1, r2
 800327e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	4798      	blx	r3
    }
  }
  return status;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ba:	e17f      	b.n	80035bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	2101      	movs	r1, #1
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	4013      	ands	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8171 	beq.w	80035b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d005      	beq.n	80032ec <HAL_GPIO_Init+0x40>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d130      	bne.n	800334e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2203      	movs	r2, #3
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003322:	2201      	movs	r2, #1
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	f003 0201 	and.w	r2, r3, #1
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b03      	cmp	r3, #3
 8003358:	d118      	bne.n	800338c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003360:	2201      	movs	r2, #1
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	08db      	lsrs	r3, r3, #3
 8003376:	f003 0201 	and.w	r2, r3, #1
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b03      	cmp	r3, #3
 8003396:	d017      	beq.n	80033c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d123      	bne.n	800341c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	08da      	lsrs	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3208      	adds	r2, #8
 80033dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	220f      	movs	r2, #15
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4013      	ands	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	08da      	lsrs	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3208      	adds	r2, #8
 8003416:	6939      	ldr	r1, [r7, #16]
 8003418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80ac 	beq.w	80035b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345e:	4b5f      	ldr	r3, [pc, #380]	@ (80035dc <HAL_GPIO_Init+0x330>)
 8003460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003462:	4a5e      	ldr	r2, [pc, #376]	@ (80035dc <HAL_GPIO_Init+0x330>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6613      	str	r3, [r2, #96]	@ 0x60
 800346a:	4b5c      	ldr	r3, [pc, #368]	@ (80035dc <HAL_GPIO_Init+0x330>)
 800346c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	60bb      	str	r3, [r7, #8]
 8003474:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003476:	4a5a      	ldr	r2, [pc, #360]	@ (80035e0 <HAL_GPIO_Init+0x334>)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	3302      	adds	r3, #2
 800347e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003482:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	220f      	movs	r2, #15
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034a0:	d025      	beq.n	80034ee <HAL_GPIO_Init+0x242>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a4f      	ldr	r2, [pc, #316]	@ (80035e4 <HAL_GPIO_Init+0x338>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d01f      	beq.n	80034ea <HAL_GPIO_Init+0x23e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a4e      	ldr	r2, [pc, #312]	@ (80035e8 <HAL_GPIO_Init+0x33c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d019      	beq.n	80034e6 <HAL_GPIO_Init+0x23a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4d      	ldr	r2, [pc, #308]	@ (80035ec <HAL_GPIO_Init+0x340>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_GPIO_Init+0x236>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4c      	ldr	r2, [pc, #304]	@ (80035f0 <HAL_GPIO_Init+0x344>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d00d      	beq.n	80034de <HAL_GPIO_Init+0x232>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4b      	ldr	r2, [pc, #300]	@ (80035f4 <HAL_GPIO_Init+0x348>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d007      	beq.n	80034da <HAL_GPIO_Init+0x22e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4a      	ldr	r2, [pc, #296]	@ (80035f8 <HAL_GPIO_Init+0x34c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_GPIO_Init+0x22a>
 80034d2:	2306      	movs	r3, #6
 80034d4:	e00c      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034d6:	2307      	movs	r3, #7
 80034d8:	e00a      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034da:	2305      	movs	r3, #5
 80034dc:	e008      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034de:	2304      	movs	r3, #4
 80034e0:	e006      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034e2:	2303      	movs	r3, #3
 80034e4:	e004      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e002      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_GPIO_Init+0x244>
 80034ee:	2300      	movs	r3, #0
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	f002 0203 	and.w	r2, r2, #3
 80034f6:	0092      	lsls	r2, r2, #2
 80034f8:	4093      	lsls	r3, r2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003500:	4937      	ldr	r1, [pc, #220]	@ (80035e0 <HAL_GPIO_Init+0x334>)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	3302      	adds	r3, #2
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800350e:	4b3b      	ldr	r3, [pc, #236]	@ (80035fc <HAL_GPIO_Init+0x350>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	43db      	mvns	r3, r3
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4013      	ands	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003532:	4a32      	ldr	r2, [pc, #200]	@ (80035fc <HAL_GPIO_Init+0x350>)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003538:	4b30      	ldr	r3, [pc, #192]	@ (80035fc <HAL_GPIO_Init+0x350>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	43db      	mvns	r3, r3
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800355c:	4a27      	ldr	r2, [pc, #156]	@ (80035fc <HAL_GPIO_Init+0x350>)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003562:	4b26      	ldr	r3, [pc, #152]	@ (80035fc <HAL_GPIO_Init+0x350>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	43db      	mvns	r3, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003586:	4a1d      	ldr	r2, [pc, #116]	@ (80035fc <HAL_GPIO_Init+0x350>)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800358c:	4b1b      	ldr	r3, [pc, #108]	@ (80035fc <HAL_GPIO_Init+0x350>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	43db      	mvns	r3, r3
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035b0:	4a12      	ldr	r2, [pc, #72]	@ (80035fc <HAL_GPIO_Init+0x350>)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	3301      	adds	r3, #1
 80035ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	fa22 f303 	lsr.w	r3, r2, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f47f ae78 	bne.w	80032bc <HAL_GPIO_Init+0x10>
  }
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40010000 	.word	0x40010000
 80035e4:	48000400 	.word	0x48000400
 80035e8:	48000800 	.word	0x48000800
 80035ec:	48000c00 	.word	0x48000c00
 80035f0:	48001000 	.word	0x48001000
 80035f4:	48001400 	.word	0x48001400
 80035f8:	48001800 	.word	0x48001800
 80035fc:	40010400 	.word	0x40010400

08003600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	807b      	strh	r3, [r7, #2]
 800360c:	4613      	mov	r3, r2
 800360e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003610:	787b      	ldrb	r3, [r7, #1]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003616:	887a      	ldrh	r2, [r7, #2]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800361c:	e002      	b.n	8003624 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003634:	4b04      	ldr	r3, [pc, #16]	@ (8003648 <HAL_PWREx_GetVoltageRange+0x18>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40007000 	.word	0x40007000

0800364c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800365a:	d130      	bne.n	80036be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800365c:	4b23      	ldr	r3, [pc, #140]	@ (80036ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003668:	d038      	beq.n	80036dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800366a:	4b20      	ldr	r3, [pc, #128]	@ (80036ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003672:	4a1e      	ldr	r2, [pc, #120]	@ (80036ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003674:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003678:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800367a:	4b1d      	ldr	r3, [pc, #116]	@ (80036f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2232      	movs	r2, #50	@ 0x32
 8003680:	fb02 f303 	mul.w	r3, r2, r3
 8003684:	4a1b      	ldr	r2, [pc, #108]	@ (80036f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	0c9b      	lsrs	r3, r3, #18
 800368c:	3301      	adds	r3, #1
 800368e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003690:	e002      	b.n	8003698 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3b01      	subs	r3, #1
 8003696:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003698:	4b14      	ldr	r3, [pc, #80]	@ (80036ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036a4:	d102      	bne.n	80036ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f2      	bne.n	8003692 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036ac:	4b0f      	ldr	r3, [pc, #60]	@ (80036ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036b8:	d110      	bne.n	80036dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e00f      	b.n	80036de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036be:	4b0b      	ldr	r3, [pc, #44]	@ (80036ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ca:	d007      	beq.n	80036dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036cc:	4b07      	ldr	r3, [pc, #28]	@ (80036ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036d4:	4a05      	ldr	r2, [pc, #20]	@ (80036ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40007000 	.word	0x40007000
 80036f0:	20000008 	.word	0x20000008
 80036f4:	431bde83 	.word	0x431bde83

080036f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e3ca      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800370a:	4b97      	ldr	r3, [pc, #604]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003714:	4b94      	ldr	r3, [pc, #592]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0310 	and.w	r3, r3, #16
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80e4 	beq.w	80038f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_RCC_OscConfig+0x4a>
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b0c      	cmp	r3, #12
 8003736:	f040 808b 	bne.w	8003850 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2b01      	cmp	r3, #1
 800373e:	f040 8087 	bne.w	8003850 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003742:	4b89      	ldr	r3, [pc, #548]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d005      	beq.n	800375a <HAL_RCC_OscConfig+0x62>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e3a2      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1a      	ldr	r2, [r3, #32]
 800375e:	4b82      	ldr	r3, [pc, #520]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d004      	beq.n	8003774 <HAL_RCC_OscConfig+0x7c>
 800376a:	4b7f      	ldr	r3, [pc, #508]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003772:	e005      	b.n	8003780 <HAL_RCC_OscConfig+0x88>
 8003774:	4b7c      	ldr	r3, [pc, #496]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 8003776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003780:	4293      	cmp	r3, r2
 8003782:	d223      	bcs.n	80037cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	4618      	mov	r0, r3
 800378a:	f000 fd87 	bl	800429c <RCC_SetFlashLatencyFromMSIRange>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e383      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003798:	4b73      	ldr	r3, [pc, #460]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a72      	ldr	r2, [pc, #456]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 800379e:	f043 0308 	orr.w	r3, r3, #8
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	4b70      	ldr	r3, [pc, #448]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	496d      	ldr	r1, [pc, #436]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	4968      	ldr	r1, [pc, #416]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]
 80037ca:	e025      	b.n	8003818 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037cc:	4b66      	ldr	r3, [pc, #408]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a65      	ldr	r2, [pc, #404]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80037d2:	f043 0308 	orr.w	r3, r3, #8
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b63      	ldr	r3, [pc, #396]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4960      	ldr	r1, [pc, #384]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	495b      	ldr	r1, [pc, #364]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fd47 	bl	800429c <RCC_SetFlashLatencyFromMSIRange>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e343      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003818:	f000 fc4a 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b52      	ldr	r3, [pc, #328]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	4950      	ldr	r1, [pc, #320]	@ (800396c <HAL_RCC_OscConfig+0x274>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
 8003834:	4a4e      	ldr	r2, [pc, #312]	@ (8003970 <HAL_RCC_OscConfig+0x278>)
 8003836:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003838:	4b4e      	ldr	r3, [pc, #312]	@ (8003974 <HAL_RCC_OscConfig+0x27c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7fd feb3 	bl	80015a8 <HAL_InitTick>
 8003842:	4603      	mov	r3, r0
 8003844:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d052      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	e327      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d032      	beq.n	80038be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003858:	4b43      	ldr	r3, [pc, #268]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a42      	ldr	r2, [pc, #264]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003864:	f7fe f880 	bl	8001968 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800386c:	f7fe f87c 	bl	8001968 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e310      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800387e:	4b3a      	ldr	r3, [pc, #232]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800388a:	4b37      	ldr	r3, [pc, #220]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a36      	ldr	r2, [pc, #216]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 8003890:	f043 0308 	orr.w	r3, r3, #8
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b34      	ldr	r3, [pc, #208]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	4931      	ldr	r1, [pc, #196]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	492c      	ldr	r1, [pc, #176]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
 80038bc:	e01a      	b.n	80038f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038be:	4b2a      	ldr	r3, [pc, #168]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a29      	ldr	r2, [pc, #164]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038ca:	f7fe f84d 	bl	8001968 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038d2:	f7fe f849 	bl	8001968 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e2dd      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038e4:	4b20      	ldr	r3, [pc, #128]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f0      	bne.n	80038d2 <HAL_RCC_OscConfig+0x1da>
 80038f0:	e000      	b.n	80038f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d074      	beq.n	80039ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	2b08      	cmp	r3, #8
 8003904:	d005      	beq.n	8003912 <HAL_RCC_OscConfig+0x21a>
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	2b0c      	cmp	r3, #12
 800390a:	d10e      	bne.n	800392a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2b03      	cmp	r3, #3
 8003910:	d10b      	bne.n	800392a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003912:	4b15      	ldr	r3, [pc, #84]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d064      	beq.n	80039e8 <HAL_RCC_OscConfig+0x2f0>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d160      	bne.n	80039e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e2ba      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003932:	d106      	bne.n	8003942 <HAL_RCC_OscConfig+0x24a>
 8003934:	4b0c      	ldr	r3, [pc, #48]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a0b      	ldr	r2, [pc, #44]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 800393a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	e026      	b.n	8003990 <HAL_RCC_OscConfig+0x298>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800394a:	d115      	bne.n	8003978 <HAL_RCC_OscConfig+0x280>
 800394c:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a05      	ldr	r2, [pc, #20]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 8003952:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	4b03      	ldr	r3, [pc, #12]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a02      	ldr	r2, [pc, #8]	@ (8003968 <HAL_RCC_OscConfig+0x270>)
 800395e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	e014      	b.n	8003990 <HAL_RCC_OscConfig+0x298>
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
 800396c:	0800b7f0 	.word	0x0800b7f0
 8003970:	20000008 	.word	0x20000008
 8003974:	2000000c 	.word	0x2000000c
 8003978:	4ba0      	ldr	r3, [pc, #640]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a9f      	ldr	r2, [pc, #636]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 800397e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4b9d      	ldr	r3, [pc, #628]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a9c      	ldr	r2, [pc, #624]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 800398a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800398e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d013      	beq.n	80039c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd ffe6 	bl	8001968 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a0:	f7fd ffe2 	bl	8001968 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	@ 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e276      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039b2:	4b92      	ldr	r3, [pc, #584]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x2a8>
 80039be:	e014      	b.n	80039ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd ffd2 	bl	8001968 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fd ffce 	bl	8001968 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	@ 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e262      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039da:	4b88      	ldr	r3, [pc, #544]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x2d0>
 80039e6:	e000      	b.n	80039ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d060      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_OscConfig+0x310>
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2b0c      	cmp	r3, #12
 8003a00:	d119      	bne.n	8003a36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d116      	bne.n	8003a36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a08:	4b7c      	ldr	r3, [pc, #496]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_OscConfig+0x328>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e23f      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a20:	4b76      	ldr	r3, [pc, #472]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	061b      	lsls	r3, r3, #24
 8003a2e:	4973      	ldr	r1, [pc, #460]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a34:	e040      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d023      	beq.n	8003a86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a3e:	4b6f      	ldr	r3, [pc, #444]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a6e      	ldr	r2, [pc, #440]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4a:	f7fd ff8d 	bl	8001968 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a52:	f7fd ff89 	bl	8001968 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e21d      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a64:	4b65      	ldr	r3, [pc, #404]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a70:	4b62      	ldr	r3, [pc, #392]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	061b      	lsls	r3, r3, #24
 8003a7e:	495f      	ldr	r1, [pc, #380]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
 8003a84:	e018      	b.n	8003ab8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a86:	4b5d      	ldr	r3, [pc, #372]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a5c      	ldr	r2, [pc, #368]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003a8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a92:	f7fd ff69 	bl	8001968 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a9a:	f7fd ff65 	bl	8001968 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e1f9      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aac:	4b53      	ldr	r3, [pc, #332]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f0      	bne.n	8003a9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d03c      	beq.n	8003b3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01c      	beq.n	8003b06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003acc:	4b4b      	ldr	r3, [pc, #300]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ad2:	4a4a      	ldr	r2, [pc, #296]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003adc:	f7fd ff44 	bl	8001968 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae4:	f7fd ff40 	bl	8001968 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e1d4      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003af6:	4b41      	ldr	r3, [pc, #260]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ef      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x3ec>
 8003b04:	e01b      	b.n	8003b3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b06:	4b3d      	ldr	r3, [pc, #244]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b0c:	4a3b      	ldr	r2, [pc, #236]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003b0e:	f023 0301 	bic.w	r3, r3, #1
 8003b12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b16:	f7fd ff27 	bl	8001968 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b1e:	f7fd ff23 	bl	8001968 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e1b7      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b30:	4b32      	ldr	r3, [pc, #200]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1ef      	bne.n	8003b1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80a6 	beq.w	8003c98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b50:	4b2a      	ldr	r3, [pc, #168]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10d      	bne.n	8003b78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5c:	4b27      	ldr	r3, [pc, #156]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b60:	4a26      	ldr	r2, [pc, #152]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b68:	4b24      	ldr	r3, [pc, #144]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b74:	2301      	movs	r3, #1
 8003b76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b78:	4b21      	ldr	r3, [pc, #132]	@ (8003c00 <HAL_RCC_OscConfig+0x508>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d118      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b84:	4b1e      	ldr	r3, [pc, #120]	@ (8003c00 <HAL_RCC_OscConfig+0x508>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1d      	ldr	r2, [pc, #116]	@ (8003c00 <HAL_RCC_OscConfig+0x508>)
 8003b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b90:	f7fd feea 	bl	8001968 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b98:	f7fd fee6 	bl	8001968 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e17a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003baa:	4b15      	ldr	r3, [pc, #84]	@ (8003c00 <HAL_RCC_OscConfig+0x508>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d108      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x4d8>
 8003bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003bc6:	f043 0301 	orr.w	r3, r3, #1
 8003bca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bce:	e029      	b.n	8003c24 <HAL_RCC_OscConfig+0x52c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b05      	cmp	r3, #5
 8003bd6:	d115      	bne.n	8003c04 <HAL_RCC_OscConfig+0x50c>
 8003bd8:	4b08      	ldr	r3, [pc, #32]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bde:	4a07      	ldr	r2, [pc, #28]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003be0:	f043 0304 	orr.w	r3, r3, #4
 8003be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003be8:	4b04      	ldr	r3, [pc, #16]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bee:	4a03      	ldr	r2, [pc, #12]	@ (8003bfc <HAL_RCC_OscConfig+0x504>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bf8:	e014      	b.n	8003c24 <HAL_RCC_OscConfig+0x52c>
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40007000 	.word	0x40007000
 8003c04:	4b9c      	ldr	r3, [pc, #624]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0a:	4a9b      	ldr	r2, [pc, #620]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c14:	4b98      	ldr	r3, [pc, #608]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1a:	4a97      	ldr	r2, [pc, #604]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003c1c:	f023 0304 	bic.w	r3, r3, #4
 8003c20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d016      	beq.n	8003c5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2c:	f7fd fe9c 	bl	8001968 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c32:	e00a      	b.n	8003c4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c34:	f7fd fe98 	bl	8001968 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e12a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c4a:	4b8b      	ldr	r3, [pc, #556]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0ed      	beq.n	8003c34 <HAL_RCC_OscConfig+0x53c>
 8003c58:	e015      	b.n	8003c86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5a:	f7fd fe85 	bl	8001968 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c60:	e00a      	b.n	8003c78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c62:	f7fd fe81 	bl	8001968 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e113      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c78:	4b7f      	ldr	r3, [pc, #508]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1ed      	bne.n	8003c62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c86:	7ffb      	ldrb	r3, [r7, #31]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d105      	bne.n	8003c98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8c:	4b7a      	ldr	r3, [pc, #488]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c90:	4a79      	ldr	r2, [pc, #484]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003c92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c96:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80fe 	beq.w	8003e9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	f040 80d0 	bne.w	8003e4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cac:	4b72      	ldr	r3, [pc, #456]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f003 0203 	and.w	r2, r3, #3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d130      	bne.n	8003d22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d127      	bne.n	8003d22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d11f      	bne.n	8003d22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cec:	2a07      	cmp	r2, #7
 8003cee:	bf14      	ite	ne
 8003cf0:	2201      	movne	r2, #1
 8003cf2:	2200      	moveq	r2, #0
 8003cf4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d113      	bne.n	8003d22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	3b01      	subs	r3, #1
 8003d08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d109      	bne.n	8003d22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d06e      	beq.n	8003e00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b0c      	cmp	r3, #12
 8003d26:	d069      	beq.n	8003dfc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d28:	4b53      	ldr	r3, [pc, #332]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d105      	bne.n	8003d40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d34:	4b50      	ldr	r3, [pc, #320]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0ad      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d44:	4b4c      	ldr	r3, [pc, #304]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a4b      	ldr	r2, [pc, #300]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003d4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d50:	f7fd fe0a 	bl	8001968 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d58:	f7fd fe06 	bl	8001968 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e09a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d6a:	4b43      	ldr	r3, [pc, #268]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d76:	4b40      	ldr	r3, [pc, #256]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	4b40      	ldr	r3, [pc, #256]	@ (8003e7c <HAL_RCC_OscConfig+0x784>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d86:	3a01      	subs	r2, #1
 8003d88:	0112      	lsls	r2, r2, #4
 8003d8a:	4311      	orrs	r1, r2
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d90:	0212      	lsls	r2, r2, #8
 8003d92:	4311      	orrs	r1, r2
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d98:	0852      	lsrs	r2, r2, #1
 8003d9a:	3a01      	subs	r2, #1
 8003d9c:	0552      	lsls	r2, r2, #21
 8003d9e:	4311      	orrs	r1, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003da4:	0852      	lsrs	r2, r2, #1
 8003da6:	3a01      	subs	r2, #1
 8003da8:	0652      	lsls	r2, r2, #25
 8003daa:	4311      	orrs	r1, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003db0:	0912      	lsrs	r2, r2, #4
 8003db2:	0452      	lsls	r2, r2, #17
 8003db4:	430a      	orrs	r2, r1
 8003db6:	4930      	ldr	r1, [pc, #192]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003dc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4a2a      	ldr	r2, [pc, #168]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003dce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dd4:	f7fd fdc8 	bl	8001968 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ddc:	f7fd fdc4 	bl	8001968 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e058      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dee:	4b22      	ldr	r3, [pc, #136]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dfa:	e050      	b.n	8003e9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e04f      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e00:	4b1d      	ldr	r3, [pc, #116]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d148      	bne.n	8003e9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a19      	ldr	r2, [pc, #100]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003e12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e18:	4b17      	ldr	r3, [pc, #92]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4a16      	ldr	r2, [pc, #88]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003e1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e24:	f7fd fda0 	bl	8001968 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2c:	f7fd fd9c 	bl	8001968 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e030      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x734>
 8003e4a:	e028      	b.n	8003e9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	2b0c      	cmp	r3, #12
 8003e50:	d023      	beq.n	8003e9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e52:	4b09      	ldr	r3, [pc, #36]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a08      	ldr	r2, [pc, #32]	@ (8003e78 <HAL_RCC_OscConfig+0x780>)
 8003e58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5e:	f7fd fd83 	bl	8001968 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e64:	e00c      	b.n	8003e80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e66:	f7fd fd7f 	bl	8001968 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d905      	bls.n	8003e80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e013      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e80:	4b09      	ldr	r3, [pc, #36]	@ (8003ea8 <HAL_RCC_OscConfig+0x7b0>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1ec      	bne.n	8003e66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ea8 <HAL_RCC_OscConfig+0x7b0>)
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	4905      	ldr	r1, [pc, #20]	@ (8003ea8 <HAL_RCC_OscConfig+0x7b0>)
 8003e92:	4b06      	ldr	r3, [pc, #24]	@ (8003eac <HAL_RCC_OscConfig+0x7b4>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	60cb      	str	r3, [r1, #12]
 8003e98:	e001      	b.n	8003e9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3720      	adds	r7, #32
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	feeefffc 	.word	0xfeeefffc

08003eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e0e7      	b.n	8004094 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec4:	4b75      	ldr	r3, [pc, #468]	@ (800409c <HAL_RCC_ClockConfig+0x1ec>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d910      	bls.n	8003ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ed2:	4b72      	ldr	r3, [pc, #456]	@ (800409c <HAL_RCC_ClockConfig+0x1ec>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f023 0207 	bic.w	r2, r3, #7
 8003eda:	4970      	ldr	r1, [pc, #448]	@ (800409c <HAL_RCC_ClockConfig+0x1ec>)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee2:	4b6e      	ldr	r3, [pc, #440]	@ (800409c <HAL_RCC_ClockConfig+0x1ec>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e0cf      	b.n	8004094 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d010      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	4b66      	ldr	r3, [pc, #408]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d908      	bls.n	8003f22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f10:	4b63      	ldr	r3, [pc, #396]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4960      	ldr	r1, [pc, #384]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d04c      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f36:	4b5a      	ldr	r3, [pc, #360]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d121      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e0a6      	b.n	8004094 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f4e:	4b54      	ldr	r3, [pc, #336]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d115      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e09a      	b.n	8004094 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f66:	4b4e      	ldr	r3, [pc, #312]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e08e      	b.n	8004094 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f76:	4b4a      	ldr	r3, [pc, #296]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e086      	b.n	8004094 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f86:	4b46      	ldr	r3, [pc, #280]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 0203 	bic.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4943      	ldr	r1, [pc, #268]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f98:	f7fd fce6 	bl	8001968 <HAL_GetTick>
 8003f9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa0:	f7fd fce2 	bl	8001968 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e06e      	b.n	8004094 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 020c 	and.w	r2, r3, #12
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d1eb      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d010      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	4b31      	ldr	r3, [pc, #196]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d208      	bcs.n	8003ff6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	492b      	ldr	r1, [pc, #172]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff6:	4b29      	ldr	r3, [pc, #164]	@ (800409c <HAL_RCC_ClockConfig+0x1ec>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d210      	bcs.n	8004026 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004004:	4b25      	ldr	r3, [pc, #148]	@ (800409c <HAL_RCC_ClockConfig+0x1ec>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f023 0207 	bic.w	r2, r3, #7
 800400c:	4923      	ldr	r1, [pc, #140]	@ (800409c <HAL_RCC_ClockConfig+0x1ec>)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	4313      	orrs	r3, r2
 8004012:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004014:	4b21      	ldr	r3, [pc, #132]	@ (800409c <HAL_RCC_ClockConfig+0x1ec>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d001      	beq.n	8004026 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e036      	b.n	8004094 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004032:	4b1b      	ldr	r3, [pc, #108]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	4918      	ldr	r1, [pc, #96]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004040:	4313      	orrs	r3, r2
 8004042:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d009      	beq.n	8004064 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004050:	4b13      	ldr	r3, [pc, #76]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4910      	ldr	r1, [pc, #64]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004060:	4313      	orrs	r3, r2
 8004062:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004064:	f000 f824 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 8004068:	4602      	mov	r2, r0
 800406a:	4b0d      	ldr	r3, [pc, #52]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f0>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	091b      	lsrs	r3, r3, #4
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	490b      	ldr	r1, [pc, #44]	@ (80040a4 <HAL_RCC_ClockConfig+0x1f4>)
 8004076:	5ccb      	ldrb	r3, [r1, r3]
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
 8004080:	4a09      	ldr	r2, [pc, #36]	@ (80040a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004082:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004084:	4b09      	ldr	r3, [pc, #36]	@ (80040ac <HAL_RCC_ClockConfig+0x1fc>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fd fa8d 	bl	80015a8 <HAL_InitTick>
 800408e:	4603      	mov	r3, r0
 8004090:	72fb      	strb	r3, [r7, #11]

  return status;
 8004092:	7afb      	ldrb	r3, [r7, #11]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40022000 	.word	0x40022000
 80040a0:	40021000 	.word	0x40021000
 80040a4:	0800b7f0 	.word	0x0800b7f0
 80040a8:	20000008 	.word	0x20000008
 80040ac:	2000000c 	.word	0x2000000c

080040b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	@ 0x24
 80040b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61fb      	str	r3, [r7, #28]
 80040ba:	2300      	movs	r3, #0
 80040bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040be:	4b3e      	ldr	r3, [pc, #248]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040c8:	4b3b      	ldr	r3, [pc, #236]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_GetSysClockFreq+0x34>
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2b0c      	cmp	r3, #12
 80040dc:	d121      	bne.n	8004122 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d11e      	bne.n	8004122 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040e4:	4b34      	ldr	r3, [pc, #208]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040f0:	4b31      	ldr	r3, [pc, #196]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	f003 030f 	and.w	r3, r3, #15
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	e005      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004100:	4b2d      	ldr	r3, [pc, #180]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800410c:	4a2b      	ldr	r2, [pc, #172]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004114:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10d      	bne.n	8004138 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004120:	e00a      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b04      	cmp	r3, #4
 8004126:	d102      	bne.n	800412e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004128:	4b25      	ldr	r3, [pc, #148]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800412a:	61bb      	str	r3, [r7, #24]
 800412c:	e004      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b08      	cmp	r3, #8
 8004132:	d101      	bne.n	8004138 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004134:	4b23      	ldr	r3, [pc, #140]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004136:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d134      	bne.n	80041a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800413e:	4b1e      	ldr	r3, [pc, #120]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d003      	beq.n	8004156 <HAL_RCC_GetSysClockFreq+0xa6>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b03      	cmp	r3, #3
 8004152:	d003      	beq.n	800415c <HAL_RCC_GetSysClockFreq+0xac>
 8004154:	e005      	b.n	8004162 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004156:	4b1a      	ldr	r3, [pc, #104]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004158:	617b      	str	r3, [r7, #20]
      break;
 800415a:	e005      	b.n	8004168 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800415c:	4b19      	ldr	r3, [pc, #100]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800415e:	617b      	str	r3, [r7, #20]
      break;
 8004160:	e002      	b.n	8004168 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	617b      	str	r3, [r7, #20]
      break;
 8004166:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004168:	4b13      	ldr	r3, [pc, #76]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	3301      	adds	r3, #1
 8004174:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004176:	4b10      	ldr	r3, [pc, #64]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	fb03 f202 	mul.w	r2, r3, r2
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	fbb2 f3f3 	udiv	r3, r2, r3
 800418c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800418e:	4b0a      	ldr	r3, [pc, #40]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	0e5b      	lsrs	r3, r3, #25
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	3301      	adds	r3, #1
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041a8:	69bb      	ldr	r3, [r7, #24]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3724      	adds	r7, #36	@ 0x24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40021000 	.word	0x40021000
 80041bc:	0800b808 	.word	0x0800b808
 80041c0:	00f42400 	.word	0x00f42400
 80041c4:	007a1200 	.word	0x007a1200

080041c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041cc:	4b03      	ldr	r3, [pc, #12]	@ (80041dc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ce:	681b      	ldr	r3, [r3, #0]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000008 	.word	0x20000008

080041e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041e4:	f7ff fff0 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 80041e8:	4602      	mov	r2, r0
 80041ea:	4b06      	ldr	r3, [pc, #24]	@ (8004204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	0a1b      	lsrs	r3, r3, #8
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	4904      	ldr	r1, [pc, #16]	@ (8004208 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041f6:	5ccb      	ldrb	r3, [r1, r3]
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004200:	4618      	mov	r0, r3
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40021000 	.word	0x40021000
 8004208:	0800b800 	.word	0x0800b800

0800420c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004210:	f7ff ffda 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 8004214:	4602      	mov	r2, r0
 8004216:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	0adb      	lsrs	r3, r3, #11
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	4904      	ldr	r1, [pc, #16]	@ (8004234 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004222:	5ccb      	ldrb	r3, [r1, r3]
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800422c:	4618      	mov	r0, r3
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40021000 	.word	0x40021000
 8004234:	0800b800 	.word	0x0800b800

08004238 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	220f      	movs	r2, #15
 8004246:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004248:	4b12      	ldr	r3, [pc, #72]	@ (8004294 <HAL_RCC_GetClockConfig+0x5c>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 0203 	and.w	r2, r3, #3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004254:	4b0f      	ldr	r3, [pc, #60]	@ (8004294 <HAL_RCC_GetClockConfig+0x5c>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004260:	4b0c      	ldr	r3, [pc, #48]	@ (8004294 <HAL_RCC_GetClockConfig+0x5c>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800426c:	4b09      	ldr	r3, [pc, #36]	@ (8004294 <HAL_RCC_GetClockConfig+0x5c>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	08db      	lsrs	r3, r3, #3
 8004272:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800427a:	4b07      	ldr	r3, [pc, #28]	@ (8004298 <HAL_RCC_GetClockConfig+0x60>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0207 	and.w	r2, r3, #7
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	601a      	str	r2, [r3, #0]
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000
 8004298:	40022000 	.word	0x40022000

0800429c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042a4:	2300      	movs	r3, #0
 80042a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042b4:	f7ff f9bc 	bl	8003630 <HAL_PWREx_GetVoltageRange>
 80042b8:	6178      	str	r0, [r7, #20]
 80042ba:	e014      	b.n	80042e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042bc:	4b25      	ldr	r3, [pc, #148]	@ (8004354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c0:	4a24      	ldr	r2, [pc, #144]	@ (8004354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c8:	4b22      	ldr	r3, [pc, #136]	@ (8004354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042d4:	f7ff f9ac 	bl	8003630 <HAL_PWREx_GetVoltageRange>
 80042d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042da:	4b1e      	ldr	r3, [pc, #120]	@ (8004354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042de:	4a1d      	ldr	r2, [pc, #116]	@ (8004354 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ec:	d10b      	bne.n	8004306 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b80      	cmp	r3, #128	@ 0x80
 80042f2:	d919      	bls.n	8004328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80042f8:	d902      	bls.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042fa:	2302      	movs	r3, #2
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e013      	b.n	8004328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004300:	2301      	movs	r3, #1
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	e010      	b.n	8004328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b80      	cmp	r3, #128	@ 0x80
 800430a:	d902      	bls.n	8004312 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800430c:	2303      	movs	r3, #3
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	e00a      	b.n	8004328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b80      	cmp	r3, #128	@ 0x80
 8004316:	d102      	bne.n	800431e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004318:	2302      	movs	r3, #2
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	e004      	b.n	8004328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b70      	cmp	r3, #112	@ 0x70
 8004322:	d101      	bne.n	8004328 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004324:	2301      	movs	r3, #1
 8004326:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004328:	4b0b      	ldr	r3, [pc, #44]	@ (8004358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f023 0207 	bic.w	r2, r3, #7
 8004330:	4909      	ldr	r1, [pc, #36]	@ (8004358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004338:	4b07      	ldr	r3, [pc, #28]	@ (8004358 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	429a      	cmp	r2, r3
 8004344:	d001      	beq.n	800434a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40021000 	.word	0x40021000
 8004358:	40022000 	.word	0x40022000

0800435c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004364:	2300      	movs	r3, #0
 8004366:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004368:	2300      	movs	r3, #0
 800436a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004374:	2b00      	cmp	r3, #0
 8004376:	d041      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800437c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004380:	d02a      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004382:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004386:	d824      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004388:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800438c:	d008      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800438e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004392:	d81e      	bhi.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004398:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800439c:	d010      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800439e:	e018      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043a0:	4b86      	ldr	r3, [pc, #536]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4a85      	ldr	r2, [pc, #532]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043ac:	e015      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fabb 	bl	8004930 <RCCEx_PLLSAI1_Config>
 80043ba:	4603      	mov	r3, r0
 80043bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043be:	e00c      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3320      	adds	r3, #32
 80043c4:	2100      	movs	r1, #0
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fba6 	bl	8004b18 <RCCEx_PLLSAI2_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043d0:	e003      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	74fb      	strb	r3, [r7, #19]
      break;
 80043d6:	e000      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80043d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10b      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043e0:	4b76      	ldr	r3, [pc, #472]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043ee:	4973      	ldr	r1, [pc, #460]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80043f6:	e001      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	7cfb      	ldrb	r3, [r7, #19]
 80043fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d041      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800440c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004410:	d02a      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004412:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004416:	d824      	bhi.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004418:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800441c:	d008      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800441e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004422:	d81e      	bhi.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004428:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800442c:	d010      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800442e:	e018      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004430:	4b62      	ldr	r3, [pc, #392]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a61      	ldr	r2, [pc, #388]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800443a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800443c:	e015      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3304      	adds	r3, #4
 8004442:	2100      	movs	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fa73 	bl	8004930 <RCCEx_PLLSAI1_Config>
 800444a:	4603      	mov	r3, r0
 800444c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800444e:	e00c      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3320      	adds	r3, #32
 8004454:	2100      	movs	r1, #0
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fb5e 	bl	8004b18 <RCCEx_PLLSAI2_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004460:	e003      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	74fb      	strb	r3, [r7, #19]
      break;
 8004466:	e000      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10b      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004470:	4b52      	ldr	r3, [pc, #328]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004476:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800447e:	494f      	ldr	r1, [pc, #316]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004486:	e001      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004488:	7cfb      	ldrb	r3, [r7, #19]
 800448a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80a0 	beq.w	80045da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800449a:	2300      	movs	r3, #0
 800449c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800449e:	4b47      	ldr	r3, [pc, #284]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80044ae:	2300      	movs	r3, #0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00d      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b4:	4b41      	ldr	r3, [pc, #260]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b8:	4a40      	ldr	r2, [pc, #256]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044be:	6593      	str	r3, [r2, #88]	@ 0x58
 80044c0:	4b3e      	ldr	r3, [pc, #248]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044cc:	2301      	movs	r3, #1
 80044ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044d0:	4b3b      	ldr	r3, [pc, #236]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a3a      	ldr	r2, [pc, #232]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044dc:	f7fd fa44 	bl	8001968 <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044e2:	e009      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e4:	f7fd fa40 	bl	8001968 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d902      	bls.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	74fb      	strb	r3, [r7, #19]
        break;
 80044f6:	e005      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044f8:	4b31      	ldr	r3, [pc, #196]	@ (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0ef      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004504:	7cfb      	ldrb	r3, [r7, #19]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d15c      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800450a:	4b2c      	ldr	r3, [pc, #176]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004514:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d01f      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	429a      	cmp	r2, r3
 8004526:	d019      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004528:	4b24      	ldr	r3, [pc, #144]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004532:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004534:	4b21      	ldr	r3, [pc, #132]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800453a:	4a20      	ldr	r2, [pc, #128]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004544:	4b1d      	ldr	r3, [pc, #116]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454a:	4a1c      	ldr	r2, [pc, #112]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004554:	4a19      	ldr	r2, [pc, #100]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004566:	f7fd f9ff 	bl	8001968 <HAL_GetTick>
 800456a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800456c:	e00b      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456e:	f7fd f9fb 	bl	8001968 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457c:	4293      	cmp	r3, r2
 800457e:	d902      	bls.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	74fb      	strb	r3, [r7, #19]
            break;
 8004584:	e006      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004586:	4b0d      	ldr	r3, [pc, #52]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0ec      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10c      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800459a:	4b08      	ldr	r3, [pc, #32]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800459c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045aa:	4904      	ldr	r1, [pc, #16]	@ (80045bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80045b2:	e009      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045b4:	7cfb      	ldrb	r3, [r7, #19]
 80045b6:	74bb      	strb	r3, [r7, #18]
 80045b8:	e006      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80045ba:	bf00      	nop
 80045bc:	40021000 	.word	0x40021000
 80045c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045c8:	7c7b      	ldrb	r3, [r7, #17]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d105      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ce:	4b9e      	ldr	r3, [pc, #632]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d2:	4a9d      	ldr	r2, [pc, #628]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045e6:	4b98      	ldr	r3, [pc, #608]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ec:	f023 0203 	bic.w	r2, r3, #3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f4:	4994      	ldr	r1, [pc, #592]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004608:	4b8f      	ldr	r3, [pc, #572]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460e:	f023 020c 	bic.w	r2, r3, #12
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004616:	498c      	ldr	r1, [pc, #560]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800462a:	4b87      	ldr	r3, [pc, #540]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004630:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004638:	4983      	ldr	r1, [pc, #524]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800464c:	4b7e      	ldr	r3, [pc, #504]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004652:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465a:	497b      	ldr	r1, [pc, #492]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800466e:	4b76      	ldr	r3, [pc, #472]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004674:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800467c:	4972      	ldr	r1, [pc, #456]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004690:	4b6d      	ldr	r3, [pc, #436]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004696:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800469e:	496a      	ldr	r1, [pc, #424]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046b2:	4b65      	ldr	r3, [pc, #404]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c0:	4961      	ldr	r1, [pc, #388]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046d4:	4b5c      	ldr	r3, [pc, #368]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046e2:	4959      	ldr	r1, [pc, #356]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046f6:	4b54      	ldr	r3, [pc, #336]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004704:	4950      	ldr	r1, [pc, #320]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004718:	4b4b      	ldr	r3, [pc, #300]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004726:	4948      	ldr	r1, [pc, #288]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800473a:	4b43      	ldr	r3, [pc, #268]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004740:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004748:	493f      	ldr	r1, [pc, #252]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d028      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800475c:	4b3a      	ldr	r3, [pc, #232]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004762:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800476a:	4937      	ldr	r1, [pc, #220]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800477a:	d106      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800477c:	4b32      	ldr	r3, [pc, #200]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4a31      	ldr	r2, [pc, #196]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004786:	60d3      	str	r3, [r2, #12]
 8004788:	e011      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800478e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004792:	d10c      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3304      	adds	r3, #4
 8004798:	2101      	movs	r1, #1
 800479a:	4618      	mov	r0, r3
 800479c:	f000 f8c8 	bl	8004930 <RCCEx_PLLSAI1_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047a4:	7cfb      	ldrb	r3, [r7, #19]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80047aa:	7cfb      	ldrb	r3, [r7, #19]
 80047ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d028      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047ba:	4b23      	ldr	r3, [pc, #140]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c8:	491f      	ldr	r1, [pc, #124]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047d8:	d106      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047da:	4b1b      	ldr	r3, [pc, #108]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	4a1a      	ldr	r2, [pc, #104]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047e4:	60d3      	str	r3, [r2, #12]
 80047e6:	e011      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047f0:	d10c      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3304      	adds	r3, #4
 80047f6:	2101      	movs	r1, #1
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 f899 	bl	8004930 <RCCEx_PLLSAI1_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004802:	7cfb      	ldrb	r3, [r7, #19]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004808:	7cfb      	ldrb	r3, [r7, #19]
 800480a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d02b      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004818:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004826:	4908      	ldr	r1, [pc, #32]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004832:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004836:	d109      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004838:	4b03      	ldr	r3, [pc, #12]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4a02      	ldr	r2, [pc, #8]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004842:	60d3      	str	r3, [r2, #12]
 8004844:	e014      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004846:	bf00      	nop
 8004848:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004850:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004854:	d10c      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3304      	adds	r3, #4
 800485a:	2101      	movs	r1, #1
 800485c:	4618      	mov	r0, r3
 800485e:	f000 f867 	bl	8004930 <RCCEx_PLLSAI1_Config>
 8004862:	4603      	mov	r3, r0
 8004864:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004866:	7cfb      	ldrb	r3, [r7, #19]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800486c:	7cfb      	ldrb	r3, [r7, #19]
 800486e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d02f      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800487c:	4b2b      	ldr	r3, [pc, #172]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004882:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800488a:	4928      	ldr	r1, [pc, #160]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004896:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800489a:	d10d      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	2102      	movs	r1, #2
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f844 	bl	8004930 <RCCEx_PLLSAI1_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d014      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048b2:	7cfb      	ldrb	r3, [r7, #19]
 80048b4:	74bb      	strb	r3, [r7, #18]
 80048b6:	e011      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048c0:	d10c      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3320      	adds	r3, #32
 80048c6:	2102      	movs	r1, #2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 f925 	bl	8004b18 <RCCEx_PLLSAI2_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048d2:	7cfb      	ldrb	r3, [r7, #19]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048d8:	7cfb      	ldrb	r3, [r7, #19]
 80048da:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048e8:	4b10      	ldr	r3, [pc, #64]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048f6:	490d      	ldr	r1, [pc, #52]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00b      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800490a:	4b08      	ldr	r3, [pc, #32]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004910:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800491a:	4904      	ldr	r1, [pc, #16]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004922:	7cbb      	ldrb	r3, [r7, #18]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40021000 	.word	0x40021000

08004930 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800493e:	4b75      	ldr	r3, [pc, #468]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d018      	beq.n	800497c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800494a:	4b72      	ldr	r3, [pc, #456]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f003 0203 	and.w	r2, r3, #3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d10d      	bne.n	8004976 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
       ||
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004962:	4b6c      	ldr	r3, [pc, #432]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	091b      	lsrs	r3, r3, #4
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
       ||
 8004972:	429a      	cmp	r2, r3
 8004974:	d047      	beq.n	8004a06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	73fb      	strb	r3, [r7, #15]
 800497a:	e044      	b.n	8004a06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b03      	cmp	r3, #3
 8004982:	d018      	beq.n	80049b6 <RCCEx_PLLSAI1_Config+0x86>
 8004984:	2b03      	cmp	r3, #3
 8004986:	d825      	bhi.n	80049d4 <RCCEx_PLLSAI1_Config+0xa4>
 8004988:	2b01      	cmp	r3, #1
 800498a:	d002      	beq.n	8004992 <RCCEx_PLLSAI1_Config+0x62>
 800498c:	2b02      	cmp	r3, #2
 800498e:	d009      	beq.n	80049a4 <RCCEx_PLLSAI1_Config+0x74>
 8004990:	e020      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004992:	4b60      	ldr	r3, [pc, #384]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d11d      	bne.n	80049da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a2:	e01a      	b.n	80049da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d116      	bne.n	80049de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049b4:	e013      	b.n	80049de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049b6:	4b57      	ldr	r3, [pc, #348]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10f      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049c2:	4b54      	ldr	r3, [pc, #336]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d109      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049d2:	e006      	b.n	80049e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
      break;
 80049d8:	e004      	b.n	80049e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049da:	bf00      	nop
 80049dc:	e002      	b.n	80049e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049de:	bf00      	nop
 80049e0:	e000      	b.n	80049e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10d      	bne.n	8004a06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6819      	ldr	r1, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	430b      	orrs	r3, r1
 8004a00:	4944      	ldr	r1, [pc, #272]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d17d      	bne.n	8004b08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a0c:	4b41      	ldr	r3, [pc, #260]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a40      	ldr	r2, [pc, #256]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a18:	f7fc ffa6 	bl	8001968 <HAL_GetTick>
 8004a1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a1e:	e009      	b.n	8004a34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a20:	f7fc ffa2 	bl	8001968 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d902      	bls.n	8004a34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	73fb      	strb	r3, [r7, #15]
        break;
 8004a32:	e005      	b.n	8004a40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a34:	4b37      	ldr	r3, [pc, #220]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1ef      	bne.n	8004a20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d160      	bne.n	8004b08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d111      	bne.n	8004a70 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a4c:	4b31      	ldr	r3, [pc, #196]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6892      	ldr	r2, [r2, #8]
 8004a5c:	0211      	lsls	r1, r2, #8
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68d2      	ldr	r2, [r2, #12]
 8004a62:	0912      	lsrs	r2, r2, #4
 8004a64:	0452      	lsls	r2, r2, #17
 8004a66:	430a      	orrs	r2, r1
 8004a68:	492a      	ldr	r1, [pc, #168]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	610b      	str	r3, [r1, #16]
 8004a6e:	e027      	b.n	8004ac0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d112      	bne.n	8004a9c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a76:	4b27      	ldr	r3, [pc, #156]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004a7e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6892      	ldr	r2, [r2, #8]
 8004a86:	0211      	lsls	r1, r2, #8
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6912      	ldr	r2, [r2, #16]
 8004a8c:	0852      	lsrs	r2, r2, #1
 8004a8e:	3a01      	subs	r2, #1
 8004a90:	0552      	lsls	r2, r2, #21
 8004a92:	430a      	orrs	r2, r1
 8004a94:	491f      	ldr	r1, [pc, #124]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	610b      	str	r3, [r1, #16]
 8004a9a:	e011      	b.n	8004ac0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004aa4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6892      	ldr	r2, [r2, #8]
 8004aac:	0211      	lsls	r1, r2, #8
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6952      	ldr	r2, [r2, #20]
 8004ab2:	0852      	lsrs	r2, r2, #1
 8004ab4:	3a01      	subs	r2, #1
 8004ab6:	0652      	lsls	r2, r2, #25
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	4916      	ldr	r1, [pc, #88]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ac0:	4b14      	ldr	r3, [pc, #80]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a13      	ldr	r2, [pc, #76]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004aca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004acc:	f7fc ff4c 	bl	8001968 <HAL_GetTick>
 8004ad0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ad2:	e009      	b.n	8004ae8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ad4:	f7fc ff48 	bl	8001968 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d902      	bls.n	8004ae8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ae6:	e005      	b.n	8004af4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0ef      	beq.n	8004ad4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004afa:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	4904      	ldr	r1, [pc, #16]	@ (8004b14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40021000 	.word	0x40021000

08004b18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b26:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d018      	beq.n	8004b64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b32:	4b67      	ldr	r3, [pc, #412]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f003 0203 	and.w	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d10d      	bne.n	8004b5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
       ||
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b4a:	4b61      	ldr	r3, [pc, #388]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	091b      	lsrs	r3, r3, #4
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
       ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d047      	beq.n	8004bee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	73fb      	strb	r3, [r7, #15]
 8004b62:	e044      	b.n	8004bee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d018      	beq.n	8004b9e <RCCEx_PLLSAI2_Config+0x86>
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d825      	bhi.n	8004bbc <RCCEx_PLLSAI2_Config+0xa4>
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d002      	beq.n	8004b7a <RCCEx_PLLSAI2_Config+0x62>
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d009      	beq.n	8004b8c <RCCEx_PLLSAI2_Config+0x74>
 8004b78:	e020      	b.n	8004bbc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b7a:	4b55      	ldr	r3, [pc, #340]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d11d      	bne.n	8004bc2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b8a:	e01a      	b.n	8004bc2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b8c:	4b50      	ldr	r3, [pc, #320]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d116      	bne.n	8004bc6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b9c:	e013      	b.n	8004bc6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10f      	bne.n	8004bca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004baa:	4b49      	ldr	r3, [pc, #292]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d109      	bne.n	8004bca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bba:	e006      	b.n	8004bca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc0:	e004      	b.n	8004bcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004bc2:	bf00      	nop
 8004bc4:	e002      	b.n	8004bcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004bca:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10d      	bne.n	8004bee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bd2:	4b3f      	ldr	r3, [pc, #252]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6819      	ldr	r1, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	430b      	orrs	r3, r1
 8004be8:	4939      	ldr	r1, [pc, #228]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d167      	bne.n	8004cc4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bf4:	4b36      	ldr	r3, [pc, #216]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a35      	ldr	r2, [pc, #212]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c00:	f7fc feb2 	bl	8001968 <HAL_GetTick>
 8004c04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c06:	e009      	b.n	8004c1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c08:	f7fc feae 	bl	8001968 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d902      	bls.n	8004c1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	73fb      	strb	r3, [r7, #15]
        break;
 8004c1a:	e005      	b.n	8004c28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c1c:	4b2c      	ldr	r3, [pc, #176]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1ef      	bne.n	8004c08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d14a      	bne.n	8004cc4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d111      	bne.n	8004c58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c34:	4b26      	ldr	r3, [pc, #152]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6892      	ldr	r2, [r2, #8]
 8004c44:	0211      	lsls	r1, r2, #8
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68d2      	ldr	r2, [r2, #12]
 8004c4a:	0912      	lsrs	r2, r2, #4
 8004c4c:	0452      	lsls	r2, r2, #17
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	491f      	ldr	r1, [pc, #124]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	614b      	str	r3, [r1, #20]
 8004c56:	e011      	b.n	8004c7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c58:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6892      	ldr	r2, [r2, #8]
 8004c68:	0211      	lsls	r1, r2, #8
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6912      	ldr	r2, [r2, #16]
 8004c6e:	0852      	lsrs	r2, r2, #1
 8004c70:	3a01      	subs	r2, #1
 8004c72:	0652      	lsls	r2, r2, #25
 8004c74:	430a      	orrs	r2, r1
 8004c76:	4916      	ldr	r1, [pc, #88]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c7c:	4b14      	ldr	r3, [pc, #80]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a13      	ldr	r2, [pc, #76]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c88:	f7fc fe6e 	bl	8001968 <HAL_GetTick>
 8004c8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c8e:	e009      	b.n	8004ca4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c90:	f7fc fe6a 	bl	8001968 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d902      	bls.n	8004ca4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ca2:	e005      	b.n	8004cb0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0ef      	beq.n	8004c90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004cb6:	4b06      	ldr	r3, [pc, #24]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb8:	695a      	ldr	r2, [r3, #20]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	4904      	ldr	r1, [pc, #16]	@ (8004cd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40021000 	.word	0x40021000

08004cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e049      	b.n	8004d7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f841 	bl	8004d82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	4619      	mov	r1, r3
 8004d12:	4610      	mov	r0, r2
 8004d14:	f000 f9e0 	bl	80050d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d001      	beq.n	8004db0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e04f      	b.n	8004e50 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a23      	ldr	r2, [pc, #140]	@ (8004e5c <HAL_TIM_Base_Start_IT+0xc4>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d01d      	beq.n	8004e0e <HAL_TIM_Base_Start_IT+0x76>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dda:	d018      	beq.n	8004e0e <HAL_TIM_Base_Start_IT+0x76>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1f      	ldr	r2, [pc, #124]	@ (8004e60 <HAL_TIM_Base_Start_IT+0xc8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <HAL_TIM_Base_Start_IT+0x76>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a1e      	ldr	r2, [pc, #120]	@ (8004e64 <HAL_TIM_Base_Start_IT+0xcc>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <HAL_TIM_Base_Start_IT+0x76>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a1c      	ldr	r2, [pc, #112]	@ (8004e68 <HAL_TIM_Base_Start_IT+0xd0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_TIM_Base_Start_IT+0x76>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8004e6c <HAL_TIM_Base_Start_IT+0xd4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_TIM_Base_Start_IT+0x76>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a19      	ldr	r2, [pc, #100]	@ (8004e70 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d115      	bne.n	8004e3a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	4b17      	ldr	r3, [pc, #92]	@ (8004e74 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b06      	cmp	r3, #6
 8004e1e:	d015      	beq.n	8004e4c <HAL_TIM_Base_Start_IT+0xb4>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e26:	d011      	beq.n	8004e4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e38:	e008      	b.n	8004e4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	e000      	b.n	8004e4e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3714      	adds	r7, #20
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	40012c00 	.word	0x40012c00
 8004e60:	40000400 	.word	0x40000400
 8004e64:	40000800 	.word	0x40000800
 8004e68:	40000c00 	.word	0x40000c00
 8004e6c:	40013400 	.word	0x40013400
 8004e70:	40014000 	.word	0x40014000
 8004e74:	00010007 	.word	0x00010007

08004e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d020      	beq.n	8004edc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d01b      	beq.n	8004edc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0202 	mvn.w	r2, #2
 8004eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f8e9 	bl	800509a <HAL_TIM_IC_CaptureCallback>
 8004ec8:	e005      	b.n	8004ed6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f8db 	bl	8005086 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f8ec 	bl	80050ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d020      	beq.n	8004f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d01b      	beq.n	8004f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0204 	mvn.w	r2, #4
 8004ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f8c3 	bl	800509a <HAL_TIM_IC_CaptureCallback>
 8004f14:	e005      	b.n	8004f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f8b5 	bl	8005086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f8c6 	bl	80050ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f003 0308 	and.w	r3, r3, #8
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d020      	beq.n	8004f74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01b      	beq.n	8004f74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f06f 0208 	mvn.w	r2, #8
 8004f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2204      	movs	r2, #4
 8004f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f89d 	bl	800509a <HAL_TIM_IC_CaptureCallback>
 8004f60:	e005      	b.n	8004f6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f88f 	bl	8005086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 f8a0 	bl	80050ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f003 0310 	and.w	r3, r3, #16
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d020      	beq.n	8004fc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01b      	beq.n	8004fc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0210 	mvn.w	r2, #16
 8004f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2208      	movs	r2, #8
 8004f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f877 	bl	800509a <HAL_TIM_IC_CaptureCallback>
 8004fac:	e005      	b.n	8004fba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f869 	bl	8005086 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f87a 	bl	80050ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00c      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d007      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0201 	mvn.w	r2, #1
 8004fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fc f9f8 	bl	80013d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d104      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00c      	beq.n	8005012 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d007      	beq.n	8005012 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800500a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f913 	bl	8005238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00c      	beq.n	8005036 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005022:	2b00      	cmp	r3, #0
 8005024:	d007      	beq.n	8005036 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800502e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f90b 	bl	800524c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00c      	beq.n	800505a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	d007      	beq.n	800505a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f834 	bl	80050c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00c      	beq.n	800507e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f06f 0220 	mvn.w	r2, #32
 8005076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f8d3 	bl	8005224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a46      	ldr	r2, [pc, #280]	@ (8005204 <TIM_Base_SetConfig+0x12c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <TIM_Base_SetConfig+0x40>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f6:	d00f      	beq.n	8005118 <TIM_Base_SetConfig+0x40>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a43      	ldr	r2, [pc, #268]	@ (8005208 <TIM_Base_SetConfig+0x130>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00b      	beq.n	8005118 <TIM_Base_SetConfig+0x40>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a42      	ldr	r2, [pc, #264]	@ (800520c <TIM_Base_SetConfig+0x134>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d007      	beq.n	8005118 <TIM_Base_SetConfig+0x40>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a41      	ldr	r2, [pc, #260]	@ (8005210 <TIM_Base_SetConfig+0x138>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d003      	beq.n	8005118 <TIM_Base_SetConfig+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a40      	ldr	r2, [pc, #256]	@ (8005214 <TIM_Base_SetConfig+0x13c>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d108      	bne.n	800512a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800511e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a35      	ldr	r2, [pc, #212]	@ (8005204 <TIM_Base_SetConfig+0x12c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d01f      	beq.n	8005172 <TIM_Base_SetConfig+0x9a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005138:	d01b      	beq.n	8005172 <TIM_Base_SetConfig+0x9a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a32      	ldr	r2, [pc, #200]	@ (8005208 <TIM_Base_SetConfig+0x130>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d017      	beq.n	8005172 <TIM_Base_SetConfig+0x9a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a31      	ldr	r2, [pc, #196]	@ (800520c <TIM_Base_SetConfig+0x134>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <TIM_Base_SetConfig+0x9a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a30      	ldr	r2, [pc, #192]	@ (8005210 <TIM_Base_SetConfig+0x138>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00f      	beq.n	8005172 <TIM_Base_SetConfig+0x9a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a2f      	ldr	r2, [pc, #188]	@ (8005214 <TIM_Base_SetConfig+0x13c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00b      	beq.n	8005172 <TIM_Base_SetConfig+0x9a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a2e      	ldr	r2, [pc, #184]	@ (8005218 <TIM_Base_SetConfig+0x140>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d007      	beq.n	8005172 <TIM_Base_SetConfig+0x9a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a2d      	ldr	r2, [pc, #180]	@ (800521c <TIM_Base_SetConfig+0x144>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <TIM_Base_SetConfig+0x9a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2c      	ldr	r2, [pc, #176]	@ (8005220 <TIM_Base_SetConfig+0x148>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d108      	bne.n	8005184 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a16      	ldr	r2, [pc, #88]	@ (8005204 <TIM_Base_SetConfig+0x12c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00f      	beq.n	80051d0 <TIM_Base_SetConfig+0xf8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a18      	ldr	r2, [pc, #96]	@ (8005214 <TIM_Base_SetConfig+0x13c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00b      	beq.n	80051d0 <TIM_Base_SetConfig+0xf8>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a17      	ldr	r2, [pc, #92]	@ (8005218 <TIM_Base_SetConfig+0x140>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d007      	beq.n	80051d0 <TIM_Base_SetConfig+0xf8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a16      	ldr	r2, [pc, #88]	@ (800521c <TIM_Base_SetConfig+0x144>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_Base_SetConfig+0xf8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a15      	ldr	r2, [pc, #84]	@ (8005220 <TIM_Base_SetConfig+0x148>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d103      	bne.n	80051d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d105      	bne.n	80051f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f023 0201 	bic.w	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	611a      	str	r2, [r3, #16]
  }
}
 80051f6:	bf00      	nop
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40000400 	.word	0x40000400
 800520c:	40000800 	.word	0x40000800
 8005210:	40000c00 	.word	0x40000c00
 8005214:	40013400 	.word	0x40013400
 8005218:	40014000 	.word	0x40014000
 800521c:	40014400 	.word	0x40014400
 8005220:	40014800 	.word	0x40014800

08005224 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e040      	b.n	80052f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fc f92c 	bl	80014e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2224      	movs	r2, #36	@ 0x24
 800528c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0201 	bic.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fedc 	bl	8006064 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fc21 	bl	8005af4 <UART_SetConfig>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e01b      	b.n	80052f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 ff5b 	bl	80061a8 <UART_CheckIdleState>
 80052f2:	4603      	mov	r3, r0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08a      	sub	sp, #40	@ 0x28
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	4613      	mov	r3, r2
 800530a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005310:	2b20      	cmp	r3, #32
 8005312:	d177      	bne.n	8005404 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_UART_Transmit+0x24>
 800531a:	88fb      	ldrh	r3, [r7, #6]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e070      	b.n	8005406 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2221      	movs	r2, #33	@ 0x21
 8005330:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005332:	f7fc fb19 	bl	8001968 <HAL_GetTick>
 8005336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	88fa      	ldrh	r2, [r7, #6]
 800533c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	88fa      	ldrh	r2, [r7, #6]
 8005344:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005350:	d108      	bne.n	8005364 <HAL_UART_Transmit+0x68>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d104      	bne.n	8005364 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	61bb      	str	r3, [r7, #24]
 8005362:	e003      	b.n	800536c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005368:	2300      	movs	r3, #0
 800536a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800536c:	e02f      	b.n	80053ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2200      	movs	r2, #0
 8005376:	2180      	movs	r1, #128	@ 0x80
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 ffbd 	bl	80062f8 <UART_WaitOnFlagUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d004      	beq.n	800538e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e03b      	b.n	8005406 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10b      	bne.n	80053ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	881a      	ldrh	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053a0:	b292      	uxth	r2, r2
 80053a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	3302      	adds	r3, #2
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	e007      	b.n	80053bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	781a      	ldrb	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	3301      	adds	r3, #1
 80053ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1c9      	bne.n	800536e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2200      	movs	r2, #0
 80053e2:	2140      	movs	r1, #64	@ 0x40
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 ff87 	bl	80062f8 <UART_WaitOnFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d004      	beq.n	80053fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e005      	b.n	8005406 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2220      	movs	r2, #32
 80053fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	e000      	b.n	8005406 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005404:	2302      	movs	r3, #2
  }
}
 8005406:	4618      	mov	r0, r3
 8005408:	3720      	adds	r7, #32
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08a      	sub	sp, #40	@ 0x28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	4613      	mov	r3, r2
 800541c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005424:	2b20      	cmp	r3, #32
 8005426:	d137      	bne.n	8005498 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_UART_Receive_IT+0x24>
 800542e:	88fb      	ldrh	r3, [r7, #6]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e030      	b.n	800549a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a18      	ldr	r2, [pc, #96]	@ (80054a4 <HAL_UART_Receive_IT+0x94>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d01f      	beq.n	8005488 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d018      	beq.n	8005488 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	613b      	str	r3, [r7, #16]
   return(result);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800546a:	627b      	str	r3, [r7, #36]	@ 0x24
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	461a      	mov	r2, r3
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	623b      	str	r3, [r7, #32]
 8005476:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	69f9      	ldr	r1, [r7, #28]
 800547a:	6a3a      	ldr	r2, [r7, #32]
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	61bb      	str	r3, [r7, #24]
   return(result);
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e6      	bne.n	8005456 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005488:	88fb      	ldrh	r3, [r7, #6]
 800548a:	461a      	mov	r2, r3
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 ffa0 	bl	80063d4 <UART_Start_Receive_IT>
 8005494:	4603      	mov	r3, r0
 8005496:	e000      	b.n	800549a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005498:	2302      	movs	r3, #2
  }
}
 800549a:	4618      	mov	r0, r3
 800549c:	3728      	adds	r7, #40	@ 0x28
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	40008000 	.word	0x40008000

080054a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b0ba      	sub	sp, #232	@ 0xe8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80054ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80054d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80054d6:	4013      	ands	r3, r2
 80054d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80054dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d115      	bne.n	8005510 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80054e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e8:	f003 0320 	and.w	r3, r3, #32
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00f      	beq.n	8005510 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005500:	2b00      	cmp	r3, #0
 8005502:	f000 82ca 	beq.w	8005a9a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	4798      	blx	r3
      }
      return;
 800550e:	e2c4      	b.n	8005a9a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8117 	beq.w	8005748 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800551a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005526:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800552a:	4b85      	ldr	r3, [pc, #532]	@ (8005740 <HAL_UART_IRQHandler+0x298>)
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 810a 	beq.w	8005748 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d011      	beq.n	8005564 <HAL_UART_IRQHandler+0xbc>
 8005540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00b      	beq.n	8005564 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2201      	movs	r2, #1
 8005552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800555a:	f043 0201 	orr.w	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d011      	beq.n	8005594 <HAL_UART_IRQHandler+0xec>
 8005570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00b      	beq.n	8005594 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2202      	movs	r2, #2
 8005582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800558a:	f043 0204 	orr.w	r2, r3, #4
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d011      	beq.n	80055c4 <HAL_UART_IRQHandler+0x11c>
 80055a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00b      	beq.n	80055c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2204      	movs	r2, #4
 80055b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ba:	f043 0202 	orr.w	r2, r3, #2
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d017      	beq.n	8005600 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80055dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00b      	beq.n	8005600 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2208      	movs	r2, #8
 80055ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055f6:	f043 0208 	orr.w	r2, r3, #8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005608:	2b00      	cmp	r3, #0
 800560a:	d012      	beq.n	8005632 <HAL_UART_IRQHandler+0x18a>
 800560c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005610:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00c      	beq.n	8005632 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005628:	f043 0220 	orr.w	r2, r3, #32
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 8230 	beq.w	8005a9e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00d      	beq.n	8005666 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800564a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	d007      	beq.n	8005666 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800566c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567a:	2b40      	cmp	r3, #64	@ 0x40
 800567c:	d005      	beq.n	800568a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800567e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005682:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005686:	2b00      	cmp	r3, #0
 8005688:	d04f      	beq.n	800572a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 ff68 	bl	8006560 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800569a:	2b40      	cmp	r3, #64	@ 0x40
 800569c:	d141      	bne.n	8005722 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3308      	adds	r3, #8
 80056a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80056b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80056ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80056ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80056d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1d9      	bne.n	800569e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d013      	beq.n	800571a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056f6:	4a13      	ldr	r2, [pc, #76]	@ (8005744 <HAL_UART_IRQHandler+0x29c>)
 80056f8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd fd92 	bl	8003228 <HAL_DMA_Abort_IT>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d017      	beq.n	800573a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800570e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005714:	4610      	mov	r0, r2
 8005716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005718:	e00f      	b.n	800573a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f9d4 	bl	8005ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005720:	e00b      	b.n	800573a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f9d0 	bl	8005ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	e007      	b.n	800573a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f9cc 	bl	8005ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005738:	e1b1      	b.n	8005a9e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800573a:	bf00      	nop
    return;
 800573c:	e1af      	b.n	8005a9e <HAL_UART_IRQHandler+0x5f6>
 800573e:	bf00      	nop
 8005740:	04000120 	.word	0x04000120
 8005744:	08006629 	.word	0x08006629

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800574c:	2b01      	cmp	r3, #1
 800574e:	f040 816a 	bne.w	8005a26 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005756:	f003 0310 	and.w	r3, r3, #16
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 8163 	beq.w	8005a26 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 815c 	beq.w	8005a26 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2210      	movs	r2, #16
 8005774:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005780:	2b40      	cmp	r3, #64	@ 0x40
 8005782:	f040 80d4 	bne.w	800592e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005792:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 80ad 	beq.w	80058f6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80057a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057a6:	429a      	cmp	r2, r3
 80057a8:	f080 80a5 	bcs.w	80058f6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f040 8086 	bne.w	80058d4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80057f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80057f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800580a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1da      	bne.n	80057c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3308      	adds	r3, #8
 8005818:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3308      	adds	r3, #8
 8005832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005836:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800583a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800583e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005848:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e1      	bne.n	8005812 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3308      	adds	r3, #8
 8005854:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005858:	e853 3f00 	ldrex	r3, [r3]
 800585c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800585e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3308      	adds	r3, #8
 800586e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005872:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005874:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005878:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e3      	bne.n	800584e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80058a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058a4:	f023 0310 	bic.w	r3, r3, #16
 80058a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e4      	bne.n	8005894 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fd fc6c 	bl	80031ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	4619      	mov	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f8f4 	bl	8005adc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80058f4:	e0d5      	b.n	8005aa2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005900:	429a      	cmp	r2, r3
 8005902:	f040 80ce 	bne.w	8005aa2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b20      	cmp	r3, #32
 8005914:	f040 80c5 	bne.w	8005aa2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f8d8 	bl	8005adc <HAL_UARTEx_RxEventCallback>
      return;
 800592c:	e0b9      	b.n	8005aa2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800593a:	b29b      	uxth	r3, r3
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 80ab 	beq.w	8005aa6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8005950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80a6 	beq.w	8005aa6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800596e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800597c:	647b      	str	r3, [r7, #68]	@ 0x44
 800597e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005982:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800598a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e4      	bne.n	800595a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3308      	adds	r3, #8
 8005996:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	623b      	str	r3, [r7, #32]
   return(result);
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	f023 0301 	bic.w	r3, r3, #1
 80059a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3308      	adds	r3, #8
 80059b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80059b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80059b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e3      	bne.n	8005990 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f023 0310 	bic.w	r3, r3, #16
 80059f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80059fe:	61fb      	str	r3, [r7, #28]
 8005a00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	69b9      	ldr	r1, [r7, #24]
 8005a04:	69fa      	ldr	r2, [r7, #28]
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e4      	bne.n	80059dc <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2202      	movs	r2, #2
 8005a16:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f85c 	bl	8005adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a24:	e03f      	b.n	8005aa6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00e      	beq.n	8005a50 <HAL_UART_IRQHandler+0x5a8>
 8005a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d008      	beq.n	8005a50 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005a46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 ffe9 	bl	8006a20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a4e:	e02d      	b.n	8005aac <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00e      	beq.n	8005a7a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01c      	beq.n	8005aaa <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	4798      	blx	r3
    }
    return;
 8005a78:	e017      	b.n	8005aaa <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d012      	beq.n	8005aac <HAL_UART_IRQHandler+0x604>
 8005a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00c      	beq.n	8005aac <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fdde 	bl	8006654 <UART_EndTransmit_IT>
    return;
 8005a98:	e008      	b.n	8005aac <HAL_UART_IRQHandler+0x604>
      return;
 8005a9a:	bf00      	nop
 8005a9c:	e006      	b.n	8005aac <HAL_UART_IRQHandler+0x604>
    return;
 8005a9e:	bf00      	nop
 8005aa0:	e004      	b.n	8005aac <HAL_UART_IRQHandler+0x604>
      return;
 8005aa2:	bf00      	nop
 8005aa4:	e002      	b.n	8005aac <HAL_UART_IRQHandler+0x604>
      return;
 8005aa6:	bf00      	nop
 8005aa8:	e000      	b.n	8005aac <HAL_UART_IRQHandler+0x604>
    return;
 8005aaa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005aac:	37e8      	adds	r7, #232	@ 0xe8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop

08005ab4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af8:	b08a      	sub	sp, #40	@ 0x28
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4ba4      	ldr	r3, [pc, #656]	@ (8005db4 <UART_SetConfig+0x2c0>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a99      	ldr	r2, [pc, #612]	@ (8005db8 <UART_SetConfig+0x2c4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d004      	beq.n	8005b60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b70:	430a      	orrs	r2, r1
 8005b72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a90      	ldr	r2, [pc, #576]	@ (8005dbc <UART_SetConfig+0x2c8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d126      	bne.n	8005bcc <UART_SetConfig+0xd8>
 8005b7e:	4b90      	ldr	r3, [pc, #576]	@ (8005dc0 <UART_SetConfig+0x2cc>)
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d81b      	bhi.n	8005bc4 <UART_SetConfig+0xd0>
 8005b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <UART_SetConfig+0xa0>)
 8005b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b92:	bf00      	nop
 8005b94:	08005ba5 	.word	0x08005ba5
 8005b98:	08005bb5 	.word	0x08005bb5
 8005b9c:	08005bad 	.word	0x08005bad
 8005ba0:	08005bbd 	.word	0x08005bbd
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005baa:	e116      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005bac:	2302      	movs	r3, #2
 8005bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bb2:	e112      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bba:	e10e      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005bbc:	2308      	movs	r3, #8
 8005bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bc2:	e10a      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bca:	e106      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a7c      	ldr	r2, [pc, #496]	@ (8005dc4 <UART_SetConfig+0x2d0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d138      	bne.n	8005c48 <UART_SetConfig+0x154>
 8005bd6:	4b7a      	ldr	r3, [pc, #488]	@ (8005dc0 <UART_SetConfig+0x2cc>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bdc:	f003 030c 	and.w	r3, r3, #12
 8005be0:	2b0c      	cmp	r3, #12
 8005be2:	d82d      	bhi.n	8005c40 <UART_SetConfig+0x14c>
 8005be4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bec <UART_SetConfig+0xf8>)
 8005be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bea:	bf00      	nop
 8005bec:	08005c21 	.word	0x08005c21
 8005bf0:	08005c41 	.word	0x08005c41
 8005bf4:	08005c41 	.word	0x08005c41
 8005bf8:	08005c41 	.word	0x08005c41
 8005bfc:	08005c31 	.word	0x08005c31
 8005c00:	08005c41 	.word	0x08005c41
 8005c04:	08005c41 	.word	0x08005c41
 8005c08:	08005c41 	.word	0x08005c41
 8005c0c:	08005c29 	.word	0x08005c29
 8005c10:	08005c41 	.word	0x08005c41
 8005c14:	08005c41 	.word	0x08005c41
 8005c18:	08005c41 	.word	0x08005c41
 8005c1c:	08005c39 	.word	0x08005c39
 8005c20:	2300      	movs	r3, #0
 8005c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c26:	e0d8      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c2e:	e0d4      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c30:	2304      	movs	r3, #4
 8005c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c36:	e0d0      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c38:	2308      	movs	r3, #8
 8005c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c3e:	e0cc      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c40:	2310      	movs	r3, #16
 8005c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c46:	e0c8      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a5e      	ldr	r2, [pc, #376]	@ (8005dc8 <UART_SetConfig+0x2d4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d125      	bne.n	8005c9e <UART_SetConfig+0x1aa>
 8005c52:	4b5b      	ldr	r3, [pc, #364]	@ (8005dc0 <UART_SetConfig+0x2cc>)
 8005c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c58:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005c5c:	2b30      	cmp	r3, #48	@ 0x30
 8005c5e:	d016      	beq.n	8005c8e <UART_SetConfig+0x19a>
 8005c60:	2b30      	cmp	r3, #48	@ 0x30
 8005c62:	d818      	bhi.n	8005c96 <UART_SetConfig+0x1a2>
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d00a      	beq.n	8005c7e <UART_SetConfig+0x18a>
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d814      	bhi.n	8005c96 <UART_SetConfig+0x1a2>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <UART_SetConfig+0x182>
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d008      	beq.n	8005c86 <UART_SetConfig+0x192>
 8005c74:	e00f      	b.n	8005c96 <UART_SetConfig+0x1a2>
 8005c76:	2300      	movs	r3, #0
 8005c78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c7c:	e0ad      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c84:	e0a9      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c86:	2304      	movs	r3, #4
 8005c88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c8c:	e0a5      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c8e:	2308      	movs	r3, #8
 8005c90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c94:	e0a1      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c96:	2310      	movs	r3, #16
 8005c98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c9c:	e09d      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a4a      	ldr	r2, [pc, #296]	@ (8005dcc <UART_SetConfig+0x2d8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d125      	bne.n	8005cf4 <UART_SetConfig+0x200>
 8005ca8:	4b45      	ldr	r3, [pc, #276]	@ (8005dc0 <UART_SetConfig+0x2cc>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005cb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cb4:	d016      	beq.n	8005ce4 <UART_SetConfig+0x1f0>
 8005cb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cb8:	d818      	bhi.n	8005cec <UART_SetConfig+0x1f8>
 8005cba:	2b80      	cmp	r3, #128	@ 0x80
 8005cbc:	d00a      	beq.n	8005cd4 <UART_SetConfig+0x1e0>
 8005cbe:	2b80      	cmp	r3, #128	@ 0x80
 8005cc0:	d814      	bhi.n	8005cec <UART_SetConfig+0x1f8>
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <UART_SetConfig+0x1d8>
 8005cc6:	2b40      	cmp	r3, #64	@ 0x40
 8005cc8:	d008      	beq.n	8005cdc <UART_SetConfig+0x1e8>
 8005cca:	e00f      	b.n	8005cec <UART_SetConfig+0x1f8>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cd2:	e082      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cda:	e07e      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ce2:	e07a      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005ce4:	2308      	movs	r3, #8
 8005ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cea:	e076      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005cec:	2310      	movs	r3, #16
 8005cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cf2:	e072      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a35      	ldr	r2, [pc, #212]	@ (8005dd0 <UART_SetConfig+0x2dc>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d12a      	bne.n	8005d54 <UART_SetConfig+0x260>
 8005cfe:	4b30      	ldr	r3, [pc, #192]	@ (8005dc0 <UART_SetConfig+0x2cc>)
 8005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d0c:	d01a      	beq.n	8005d44 <UART_SetConfig+0x250>
 8005d0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d12:	d81b      	bhi.n	8005d4c <UART_SetConfig+0x258>
 8005d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d18:	d00c      	beq.n	8005d34 <UART_SetConfig+0x240>
 8005d1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d1e:	d815      	bhi.n	8005d4c <UART_SetConfig+0x258>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <UART_SetConfig+0x238>
 8005d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d28:	d008      	beq.n	8005d3c <UART_SetConfig+0x248>
 8005d2a:	e00f      	b.n	8005d4c <UART_SetConfig+0x258>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d32:	e052      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005d34:	2302      	movs	r3, #2
 8005d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d3a:	e04e      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d42:	e04a      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005d44:	2308      	movs	r3, #8
 8005d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d4a:	e046      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d52:	e042      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a17      	ldr	r2, [pc, #92]	@ (8005db8 <UART_SetConfig+0x2c4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d13a      	bne.n	8005dd4 <UART_SetConfig+0x2e0>
 8005d5e:	4b18      	ldr	r3, [pc, #96]	@ (8005dc0 <UART_SetConfig+0x2cc>)
 8005d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d6c:	d01a      	beq.n	8005da4 <UART_SetConfig+0x2b0>
 8005d6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d72:	d81b      	bhi.n	8005dac <UART_SetConfig+0x2b8>
 8005d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d78:	d00c      	beq.n	8005d94 <UART_SetConfig+0x2a0>
 8005d7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d7e:	d815      	bhi.n	8005dac <UART_SetConfig+0x2b8>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <UART_SetConfig+0x298>
 8005d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d88:	d008      	beq.n	8005d9c <UART_SetConfig+0x2a8>
 8005d8a:	e00f      	b.n	8005dac <UART_SetConfig+0x2b8>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d92:	e022      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005d94:	2302      	movs	r3, #2
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9a:	e01e      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da2:	e01a      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005da4:	2308      	movs	r3, #8
 8005da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005daa:	e016      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005dac:	2310      	movs	r3, #16
 8005dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005db2:	e012      	b.n	8005dda <UART_SetConfig+0x2e6>
 8005db4:	efff69f3 	.word	0xefff69f3
 8005db8:	40008000 	.word	0x40008000
 8005dbc:	40013800 	.word	0x40013800
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	40004400 	.word	0x40004400
 8005dc8:	40004800 	.word	0x40004800
 8005dcc:	40004c00 	.word	0x40004c00
 8005dd0:	40005000 	.word	0x40005000
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a9f      	ldr	r2, [pc, #636]	@ (800605c <UART_SetConfig+0x568>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d17a      	bne.n	8005eda <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005de4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d824      	bhi.n	8005e36 <UART_SetConfig+0x342>
 8005dec:	a201      	add	r2, pc, #4	@ (adr r2, 8005df4 <UART_SetConfig+0x300>)
 8005dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df2:	bf00      	nop
 8005df4:	08005e19 	.word	0x08005e19
 8005df8:	08005e37 	.word	0x08005e37
 8005dfc:	08005e21 	.word	0x08005e21
 8005e00:	08005e37 	.word	0x08005e37
 8005e04:	08005e27 	.word	0x08005e27
 8005e08:	08005e37 	.word	0x08005e37
 8005e0c:	08005e37 	.word	0x08005e37
 8005e10:	08005e37 	.word	0x08005e37
 8005e14:	08005e2f 	.word	0x08005e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e18:	f7fe f9e2 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 8005e1c:	61f8      	str	r0, [r7, #28]
        break;
 8005e1e:	e010      	b.n	8005e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e20:	4b8f      	ldr	r3, [pc, #572]	@ (8006060 <UART_SetConfig+0x56c>)
 8005e22:	61fb      	str	r3, [r7, #28]
        break;
 8005e24:	e00d      	b.n	8005e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e26:	f7fe f943 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 8005e2a:	61f8      	str	r0, [r7, #28]
        break;
 8005e2c:	e009      	b.n	8005e42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e32:	61fb      	str	r3, [r7, #28]
        break;
 8005e34:	e005      	b.n	8005e42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005e40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 80fb 	beq.w	8006040 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	4413      	add	r3, r2
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d305      	bcc.n	8005e66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d903      	bls.n	8005e6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e6c:	e0e8      	b.n	8006040 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	2200      	movs	r2, #0
 8005e72:	461c      	mov	r4, r3
 8005e74:	4615      	mov	r5, r2
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	022b      	lsls	r3, r5, #8
 8005e80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005e84:	0222      	lsls	r2, r4, #8
 8005e86:	68f9      	ldr	r1, [r7, #12]
 8005e88:	6849      	ldr	r1, [r1, #4]
 8005e8a:	0849      	lsrs	r1, r1, #1
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	4688      	mov	r8, r1
 8005e90:	4681      	mov	r9, r0
 8005e92:	eb12 0a08 	adds.w	sl, r2, r8
 8005e96:	eb43 0b09 	adc.w	fp, r3, r9
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	603b      	str	r3, [r7, #0]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ea8:	4650      	mov	r0, sl
 8005eaa:	4659      	mov	r1, fp
 8005eac:	f7fa f9f8 	bl	80002a0 <__aeabi_uldivmod>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ebe:	d308      	bcc.n	8005ed2 <UART_SetConfig+0x3de>
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ec6:	d204      	bcs.n	8005ed2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	60da      	str	r2, [r3, #12]
 8005ed0:	e0b6      	b.n	8006040 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ed8:	e0b2      	b.n	8006040 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ee2:	d15e      	bne.n	8005fa2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d828      	bhi.n	8005f3e <UART_SetConfig+0x44a>
 8005eec:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <UART_SetConfig+0x400>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f21 	.word	0x08005f21
 8005efc:	08005f29 	.word	0x08005f29
 8005f00:	08005f3f 	.word	0x08005f3f
 8005f04:	08005f2f 	.word	0x08005f2f
 8005f08:	08005f3f 	.word	0x08005f3f
 8005f0c:	08005f3f 	.word	0x08005f3f
 8005f10:	08005f3f 	.word	0x08005f3f
 8005f14:	08005f37 	.word	0x08005f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f18:	f7fe f962 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 8005f1c:	61f8      	str	r0, [r7, #28]
        break;
 8005f1e:	e014      	b.n	8005f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f20:	f7fe f974 	bl	800420c <HAL_RCC_GetPCLK2Freq>
 8005f24:	61f8      	str	r0, [r7, #28]
        break;
 8005f26:	e010      	b.n	8005f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f28:	4b4d      	ldr	r3, [pc, #308]	@ (8006060 <UART_SetConfig+0x56c>)
 8005f2a:	61fb      	str	r3, [r7, #28]
        break;
 8005f2c:	e00d      	b.n	8005f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2e:	f7fe f8bf 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 8005f32:	61f8      	str	r0, [r7, #28]
        break;
 8005f34:	e009      	b.n	8005f4a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f3a:	61fb      	str	r3, [r7, #28]
        break;
 8005f3c:	e005      	b.n	8005f4a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d077      	beq.n	8006040 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	005a      	lsls	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	085b      	lsrs	r3, r3, #1
 8005f5a:	441a      	add	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f64:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	2b0f      	cmp	r3, #15
 8005f6a:	d916      	bls.n	8005f9a <UART_SetConfig+0x4a6>
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f72:	d212      	bcs.n	8005f9a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	f023 030f 	bic.w	r3, r3, #15
 8005f7c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	085b      	lsrs	r3, r3, #1
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	8afb      	ldrh	r3, [r7, #22]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	8afa      	ldrh	r2, [r7, #22]
 8005f96:	60da      	str	r2, [r3, #12]
 8005f98:	e052      	b.n	8006040 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fa0:	e04e      	b.n	8006040 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d827      	bhi.n	8005ffa <UART_SetConfig+0x506>
 8005faa:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb0 <UART_SetConfig+0x4bc>)
 8005fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005fdd 	.word	0x08005fdd
 8005fb8:	08005fe5 	.word	0x08005fe5
 8005fbc:	08005ffb 	.word	0x08005ffb
 8005fc0:	08005feb 	.word	0x08005feb
 8005fc4:	08005ffb 	.word	0x08005ffb
 8005fc8:	08005ffb 	.word	0x08005ffb
 8005fcc:	08005ffb 	.word	0x08005ffb
 8005fd0:	08005ff3 	.word	0x08005ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd4:	f7fe f904 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 8005fd8:	61f8      	str	r0, [r7, #28]
        break;
 8005fda:	e014      	b.n	8006006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fdc:	f7fe f916 	bl	800420c <HAL_RCC_GetPCLK2Freq>
 8005fe0:	61f8      	str	r0, [r7, #28]
        break;
 8005fe2:	e010      	b.n	8006006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8006060 <UART_SetConfig+0x56c>)
 8005fe6:	61fb      	str	r3, [r7, #28]
        break;
 8005fe8:	e00d      	b.n	8006006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fea:	f7fe f861 	bl	80040b0 <HAL_RCC_GetSysClockFreq>
 8005fee:	61f8      	str	r0, [r7, #28]
        break;
 8005ff0:	e009      	b.n	8006006 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ff6:	61fb      	str	r3, [r7, #28]
        break;
 8005ff8:	e005      	b.n	8006006 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006004:	bf00      	nop
    }

    if (pclk != 0U)
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d019      	beq.n	8006040 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	085a      	lsrs	r2, r3, #1
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	441a      	add	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	fbb2 f3f3 	udiv	r3, r2, r3
 800601e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b0f      	cmp	r3, #15
 8006024:	d909      	bls.n	800603a <UART_SetConfig+0x546>
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800602c:	d205      	bcs.n	800603a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60da      	str	r2, [r3, #12]
 8006038:	e002      	b.n	8006040 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800604c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006050:	4618      	mov	r0, r3
 8006052:	3728      	adds	r7, #40	@ 0x28
 8006054:	46bd      	mov	sp, r7
 8006056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800605a:	bf00      	nop
 800605c:	40008000 	.word	0x40008000
 8006060:	00f42400 	.word	0x00f42400

08006064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00a      	beq.n	80060d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611a:	f003 0320 	and.w	r3, r3, #32
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01a      	beq.n	800617a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	430a      	orrs	r2, r1
 8006158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006162:	d10a      	bne.n	800617a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	605a      	str	r2, [r3, #4]
  }
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b098      	sub	sp, #96	@ 0x60
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061b8:	f7fb fbd6 	bl	8001968 <HAL_GetTick>
 80061bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d12e      	bne.n	800622a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061d4:	2200      	movs	r2, #0
 80061d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f88c 	bl	80062f8 <UART_WaitOnFlagUntilTimeout>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d021      	beq.n	800622a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ee:	e853 3f00 	ldrex	r3, [r3]
 80061f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006204:	647b      	str	r3, [r7, #68]	@ 0x44
 8006206:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006208:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800620a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800620c:	e841 2300 	strex	r3, r2, [r1]
 8006210:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1e6      	bne.n	80061e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2220      	movs	r2, #32
 800621c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e062      	b.n	80062f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b04      	cmp	r3, #4
 8006236:	d149      	bne.n	80062cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006238:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006240:	2200      	movs	r2, #0
 8006242:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f856 	bl	80062f8 <UART_WaitOnFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d03c      	beq.n	80062cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	623b      	str	r3, [r7, #32]
   return(result);
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006270:	633b      	str	r3, [r7, #48]	@ 0x30
 8006272:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800627e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e6      	bne.n	8006252 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3308      	adds	r3, #8
 800628a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	60fb      	str	r3, [r7, #12]
   return(result);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 0301 	bic.w	r3, r3, #1
 800629a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3308      	adds	r3, #8
 80062a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062a4:	61fa      	str	r2, [r7, #28]
 80062a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	69b9      	ldr	r1, [r7, #24]
 80062aa:	69fa      	ldr	r2, [r7, #28]
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	617b      	str	r3, [r7, #20]
   return(result);
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e5      	bne.n	8006284 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e011      	b.n	80062f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2220      	movs	r2, #32
 80062d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3758      	adds	r7, #88	@ 0x58
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	603b      	str	r3, [r7, #0]
 8006304:	4613      	mov	r3, r2
 8006306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006308:	e04f      	b.n	80063aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006310:	d04b      	beq.n	80063aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006312:	f7fb fb29 	bl	8001968 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	429a      	cmp	r2, r3
 8006320:	d302      	bcc.n	8006328 <UART_WaitOnFlagUntilTimeout+0x30>
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e04e      	b.n	80063ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b00      	cmp	r3, #0
 8006338:	d037      	beq.n	80063aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b80      	cmp	r3, #128	@ 0x80
 800633e:	d034      	beq.n	80063aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2b40      	cmp	r3, #64	@ 0x40
 8006344:	d031      	beq.n	80063aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b08      	cmp	r3, #8
 8006352:	d110      	bne.n	8006376 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2208      	movs	r2, #8
 800635a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f8ff 	bl	8006560 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2208      	movs	r2, #8
 8006366:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e029      	b.n	80063ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006384:	d111      	bne.n	80063aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800638e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 f8e5 	bl	8006560 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e00f      	b.n	80063ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4013      	ands	r3, r2
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	bf0c      	ite	eq
 80063ba:	2301      	moveq	r3, #1
 80063bc:	2300      	movne	r3, #0
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d0a0      	beq.n	800630a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b097      	sub	sp, #92	@ 0x5c
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	88fa      	ldrh	r2, [r7, #6]
 80063ec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	88fa      	ldrh	r2, [r7, #6]
 80063f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006406:	d10e      	bne.n	8006426 <UART_Start_Receive_IT+0x52>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d105      	bne.n	800641c <UART_Start_Receive_IT+0x48>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006416:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800641a:	e02d      	b.n	8006478 <UART_Start_Receive_IT+0xa4>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	22ff      	movs	r2, #255	@ 0xff
 8006420:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006424:	e028      	b.n	8006478 <UART_Start_Receive_IT+0xa4>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10d      	bne.n	800644a <UART_Start_Receive_IT+0x76>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d104      	bne.n	8006440 <UART_Start_Receive_IT+0x6c>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	22ff      	movs	r2, #255	@ 0xff
 800643a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800643e:	e01b      	b.n	8006478 <UART_Start_Receive_IT+0xa4>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	227f      	movs	r2, #127	@ 0x7f
 8006444:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006448:	e016      	b.n	8006478 <UART_Start_Receive_IT+0xa4>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006452:	d10d      	bne.n	8006470 <UART_Start_Receive_IT+0x9c>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d104      	bne.n	8006466 <UART_Start_Receive_IT+0x92>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	227f      	movs	r2, #127	@ 0x7f
 8006460:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006464:	e008      	b.n	8006478 <UART_Start_Receive_IT+0xa4>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	223f      	movs	r2, #63	@ 0x3f
 800646a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800646e:	e003      	b.n	8006478 <UART_Start_Receive_IT+0xa4>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2222      	movs	r2, #34	@ 0x22
 8006484:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3308      	adds	r3, #8
 800648e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006492:	e853 3f00 	ldrex	r3, [r3]
 8006496:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649a:	f043 0301 	orr.w	r3, r3, #1
 800649e:	657b      	str	r3, [r7, #84]	@ 0x54
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3308      	adds	r3, #8
 80064a6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80064a8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80064aa:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80064ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064b0:	e841 2300 	strex	r3, r2, [r1]
 80064b4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80064b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1e5      	bne.n	8006488 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064c4:	d107      	bne.n	80064d6 <UART_Start_Receive_IT+0x102>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d103      	bne.n	80064d6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	4a21      	ldr	r2, [pc, #132]	@ (8006558 <UART_Start_Receive_IT+0x184>)
 80064d2:	669a      	str	r2, [r3, #104]	@ 0x68
 80064d4:	e002      	b.n	80064dc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4a20      	ldr	r2, [pc, #128]	@ (800655c <UART_Start_Receive_IT+0x188>)
 80064da:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d019      	beq.n	8006518 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ec:	e853 3f00 	ldrex	r3, [r3]
 80064f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80064f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006502:	637b      	str	r3, [r7, #52]	@ 0x34
 8006504:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006508:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e6      	bne.n	80064e4 <UART_Start_Receive_IT+0x110>
 8006516:	e018      	b.n	800654a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	613b      	str	r3, [r7, #16]
   return(result);
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f043 0320 	orr.w	r3, r3, #32
 800652c:	653b      	str	r3, [r7, #80]	@ 0x50
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006536:	623b      	str	r3, [r7, #32]
 8006538:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	69f9      	ldr	r1, [r7, #28]
 800653c:	6a3a      	ldr	r2, [r7, #32]
 800653e:	e841 2300 	strex	r3, r2, [r1]
 8006542:	61bb      	str	r3, [r7, #24]
   return(result);
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1e6      	bne.n	8006518 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	375c      	adds	r7, #92	@ 0x5c
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	08006865 	.word	0x08006865
 800655c:	080066a9 	.word	0x080066a9

08006560 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006560:	b480      	push	{r7}
 8006562:	b095      	sub	sp, #84	@ 0x54
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800657c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006586:	643b      	str	r3, [r7, #64]	@ 0x40
 8006588:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800658c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e6      	bne.n	8006568 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3308      	adds	r3, #8
 80065a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	f023 0301 	bic.w	r3, r3, #1
 80065b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3308      	adds	r3, #8
 80065b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e5      	bne.n	800659a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d118      	bne.n	8006608 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f023 0310 	bic.w	r3, r3, #16
 80065ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	461a      	mov	r2, r3
 80065f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065f4:	61bb      	str	r3, [r7, #24]
 80065f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	6979      	ldr	r1, [r7, #20]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	613b      	str	r3, [r7, #16]
   return(result);
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e6      	bne.n	80065d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800661c:	bf00      	nop
 800661e:	3754      	adds	r7, #84	@ 0x54
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006634:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f7ff fa3e 	bl	8005ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800664c:	bf00      	nop
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	60bb      	str	r3, [r7, #8]
   return(result);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	61bb      	str	r3, [r7, #24]
 800667c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6979      	ldr	r1, [r7, #20]
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	613b      	str	r3, [r7, #16]
   return(result);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e6      	bne.n	800665c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2220      	movs	r2, #32
 8006692:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff fa0a 	bl	8005ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066a0:	bf00      	nop
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b09c      	sub	sp, #112	@ 0x70
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066c0:	2b22      	cmp	r3, #34	@ 0x22
 80066c2:	f040 80be 	bne.w	8006842 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80066cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066d4:	b2d9      	uxtb	r1, r3
 80066d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e0:	400a      	ands	r2, r1
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	f040 80a3 	bne.w	8006856 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800671e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006724:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800672e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006730:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006734:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800673c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e6      	bne.n	8006710 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3308      	adds	r3, #8
 8006748:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006754:	f023 0301 	bic.w	r3, r3, #1
 8006758:	667b      	str	r3, [r7, #100]	@ 0x64
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3308      	adds	r3, #8
 8006760:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006762:	647a      	str	r2, [r7, #68]	@ 0x44
 8006764:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006768:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e5      	bne.n	8006742 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a34      	ldr	r2, [pc, #208]	@ (8006860 <UART_RxISR_8BIT+0x1b8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d01f      	beq.n	80067d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d018      	beq.n	80067d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067aa:	e853 3f00 	ldrex	r3, [r3]
 80067ae:	623b      	str	r3, [r7, #32]
   return(result);
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	461a      	mov	r2, r3
 80067be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80067c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c8:	e841 2300 	strex	r3, r2, [r1]
 80067cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e6      	bne.n	80067a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d12e      	bne.n	800683a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	e853 3f00 	ldrex	r3, [r3]
 80067ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 0310 	bic.w	r3, r3, #16
 80067f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	461a      	mov	r2, r3
 80067fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006800:	61fb      	str	r3, [r7, #28]
 8006802:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006804:	69b9      	ldr	r1, [r7, #24]
 8006806:	69fa      	ldr	r2, [r7, #28]
 8006808:	e841 2300 	strex	r3, r2, [r1]
 800680c:	617b      	str	r3, [r7, #20]
   return(result);
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1e6      	bne.n	80067e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	f003 0310 	and.w	r3, r3, #16
 800681e:	2b10      	cmp	r3, #16
 8006820:	d103      	bne.n	800682a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2210      	movs	r2, #16
 8006828:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff f952 	bl	8005adc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006838:	e00d      	b.n	8006856 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7f9 fed8 	bl	80005f0 <HAL_UART_RxCpltCallback>
}
 8006840:	e009      	b.n	8006856 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	8b1b      	ldrh	r3, [r3, #24]
 8006848:	b29a      	uxth	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0208 	orr.w	r2, r2, #8
 8006852:	b292      	uxth	r2, r2
 8006854:	831a      	strh	r2, [r3, #24]
}
 8006856:	bf00      	nop
 8006858:	3770      	adds	r7, #112	@ 0x70
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	40008000 	.word	0x40008000

08006864 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b09c      	sub	sp, #112	@ 0x70
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006872:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800687c:	2b22      	cmp	r3, #34	@ 0x22
 800687e:	f040 80be 	bne.w	80069fe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006888:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006890:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006892:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006896:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800689a:	4013      	ands	r3, r2
 800689c:	b29a      	uxth	r2, r3
 800689e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a6:	1c9a      	adds	r2, r3, #2
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f040 80a3 	bne.w	8006a12 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80068da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80068ec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80068f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80068f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e6      	bne.n	80068cc <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3308      	adds	r3, #8
 8006904:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006910:	f023 0301 	bic.w	r3, r3, #1
 8006914:	663b      	str	r3, [r7, #96]	@ 0x60
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3308      	adds	r3, #8
 800691c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800691e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006920:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006924:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800692c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e5      	bne.n	80068fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a34      	ldr	r2, [pc, #208]	@ (8006a1c <UART_RxISR_16BIT+0x1b8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d01f      	beq.n	8006990 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d018      	beq.n	8006990 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	e853 3f00 	ldrex	r3, [r3]
 800696a:	61fb      	str	r3, [r7, #28]
   return(result);
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006972:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800697c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800697e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006980:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006984:	e841 2300 	strex	r3, r2, [r1]
 8006988:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e6      	bne.n	800695e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006994:	2b01      	cmp	r3, #1
 8006996:	d12e      	bne.n	80069f6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f023 0310 	bic.w	r3, r3, #16
 80069b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	461a      	mov	r2, r3
 80069ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	6979      	ldr	r1, [r7, #20]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	613b      	str	r3, [r7, #16]
   return(result);
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e6      	bne.n	800699e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	f003 0310 	and.w	r3, r3, #16
 80069da:	2b10      	cmp	r3, #16
 80069dc:	d103      	bne.n	80069e6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2210      	movs	r2, #16
 80069e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff f874 	bl	8005adc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069f4:	e00d      	b.n	8006a12 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7f9 fdfa 	bl	80005f0 <HAL_UART_RxCpltCallback>
}
 80069fc:	e009      	b.n	8006a12 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	8b1b      	ldrh	r3, [r3, #24]
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0208 	orr.w	r2, r2, #8
 8006a0e:	b292      	uxth	r2, r2
 8006a10:	831a      	strh	r2, [r3, #24]
}
 8006a12:	bf00      	nop
 8006a14:	3770      	adds	r7, #112	@ 0x70
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	40008000 	.word	0x40008000

08006a20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <__NVIC_SetPriority>:
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	6039      	str	r1, [r7, #0]
 8006a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	db0a      	blt.n	8006a5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	490c      	ldr	r1, [pc, #48]	@ (8006a80 <__NVIC_SetPriority+0x4c>)
 8006a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a52:	0112      	lsls	r2, r2, #4
 8006a54:	b2d2      	uxtb	r2, r2
 8006a56:	440b      	add	r3, r1
 8006a58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006a5c:	e00a      	b.n	8006a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	4908      	ldr	r1, [pc, #32]	@ (8006a84 <__NVIC_SetPriority+0x50>)
 8006a64:	79fb      	ldrb	r3, [r7, #7]
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	3b04      	subs	r3, #4
 8006a6c:	0112      	lsls	r2, r2, #4
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	440b      	add	r3, r1
 8006a72:	761a      	strb	r2, [r3, #24]
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	e000e100 	.word	0xe000e100
 8006a84:	e000ed00 	.word	0xe000ed00

08006a88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006a8c:	4b05      	ldr	r3, [pc, #20]	@ (8006aa4 <SysTick_Handler+0x1c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a90:	f001 ff34 	bl	80088fc <xTaskGetSchedulerState>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d001      	beq.n	8006a9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006a9a:	f002 fd2d 	bl	80094f8 <xPortSysTickHandler>
  }
}
 8006a9e:	bf00      	nop
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	e000e010 	.word	0xe000e010

08006aa8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006aac:	2100      	movs	r1, #0
 8006aae:	f06f 0004 	mvn.w	r0, #4
 8006ab2:	f7ff ffbf 	bl	8006a34 <__NVIC_SetPriority>
#endif
}
 8006ab6:	bf00      	nop
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ac2:	f3ef 8305 	mrs	r3, IPSR
 8006ac6:	603b      	str	r3, [r7, #0]
  return(result);
 8006ac8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006ace:	f06f 0305 	mvn.w	r3, #5
 8006ad2:	607b      	str	r3, [r7, #4]
 8006ad4:	e00c      	b.n	8006af0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b00 <osKernelInitialize+0x44>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d105      	bne.n	8006aea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006ade:	4b08      	ldr	r3, [pc, #32]	@ (8006b00 <osKernelInitialize+0x44>)
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	607b      	str	r3, [r7, #4]
 8006ae8:	e002      	b.n	8006af0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006aea:	f04f 33ff 	mov.w	r3, #4294967295
 8006aee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006af0:	687b      	ldr	r3, [r7, #4]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	20000410 	.word	0x20000410

08006b04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b0a:	f3ef 8305 	mrs	r3, IPSR
 8006b0e:	603b      	str	r3, [r7, #0]
  return(result);
 8006b10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006b16:	f06f 0305 	mvn.w	r3, #5
 8006b1a:	607b      	str	r3, [r7, #4]
 8006b1c:	e010      	b.n	8006b40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b4c <osKernelStart+0x48>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d109      	bne.n	8006b3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006b26:	f7ff ffbf 	bl	8006aa8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006b2a:	4b08      	ldr	r3, [pc, #32]	@ (8006b4c <osKernelStart+0x48>)
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006b30:	f001 fa80 	bl	8008034 <vTaskStartScheduler>
      stat = osOK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	607b      	str	r3, [r7, #4]
 8006b38:	e002      	b.n	8006b40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006b40:	687b      	ldr	r3, [r7, #4]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000410 	.word	0x20000410

08006b50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08e      	sub	sp, #56	@ 0x38
 8006b54:	af04      	add	r7, sp, #16
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b60:	f3ef 8305 	mrs	r3, IPSR
 8006b64:	617b      	str	r3, [r7, #20]
  return(result);
 8006b66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d17e      	bne.n	8006c6a <osThreadNew+0x11a>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d07b      	beq.n	8006c6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b72:	2380      	movs	r3, #128	@ 0x80
 8006b74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b76:	2318      	movs	r3, #24
 8006b78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d045      	beq.n	8006c16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <osThreadNew+0x48>
        name = attr->name;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d008      	beq.n	8006bbe <osThreadNew+0x6e>
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	2b38      	cmp	r3, #56	@ 0x38
 8006bb0:	d805      	bhi.n	8006bbe <osThreadNew+0x6e>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <osThreadNew+0x72>
        return (NULL);
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	e054      	b.n	8006c6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	089b      	lsrs	r3, r3, #2
 8006bd0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00e      	beq.n	8006bf8 <osThreadNew+0xa8>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	2ba7      	cmp	r3, #167	@ 0xa7
 8006be0:	d90a      	bls.n	8006bf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d006      	beq.n	8006bf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <osThreadNew+0xa8>
        mem = 1;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	e010      	b.n	8006c1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10c      	bne.n	8006c1a <osThreadNew+0xca>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d108      	bne.n	8006c1a <osThreadNew+0xca>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <osThreadNew+0xca>
          mem = 0;
 8006c10:	2300      	movs	r3, #0
 8006c12:	61bb      	str	r3, [r7, #24]
 8006c14:	e001      	b.n	8006c1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d110      	bne.n	8006c42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006c28:	9202      	str	r2, [sp, #8]
 8006c2a:	9301      	str	r3, [sp, #4]
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6a3a      	ldr	r2, [r7, #32]
 8006c34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f001 f808 	bl	8007c4c <xTaskCreateStatic>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	613b      	str	r3, [r7, #16]
 8006c40:	e013      	b.n	8006c6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d110      	bne.n	8006c6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	f107 0310 	add.w	r3, r7, #16
 8006c50:	9301      	str	r3, [sp, #4]
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f001 f856 	bl	8007d0c <xTaskCreate>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d001      	beq.n	8006c6a <osThreadNew+0x11a>
            hTask = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c6a:	693b      	ldr	r3, [r7, #16]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3728      	adds	r7, #40	@ 0x28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c7c:	f3ef 8305 	mrs	r3, IPSR
 8006c80:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <osDelay+0x1c>
    stat = osErrorISR;
 8006c88:	f06f 0305 	mvn.w	r3, #5
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	e007      	b.n	8006ca0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 f994 	bl	8007fc8 <vTaskDelay>
    }
  }

  return (stat);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b08a      	sub	sp, #40	@ 0x28
 8006cae:	af02      	add	r7, sp, #8
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cba:	f3ef 8305 	mrs	r3, IPSR
 8006cbe:	613b      	str	r3, [r7, #16]
  return(result);
 8006cc0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d15f      	bne.n	8006d86 <osMessageQueueNew+0xdc>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d05c      	beq.n	8006d86 <osMessageQueueNew+0xdc>
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d059      	beq.n	8006d86 <osMessageQueueNew+0xdc>
    mem = -1;
 8006cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d029      	beq.n	8006d32 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d012      	beq.n	8006d0c <osMessageQueueNew+0x62>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	2b4f      	cmp	r3, #79	@ 0x4f
 8006cec:	d90e      	bls.n	8006d0c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695a      	ldr	r2, [r3, #20]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	68b9      	ldr	r1, [r7, #8]
 8006cfe:	fb01 f303 	mul.w	r3, r1, r3
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d302      	bcc.n	8006d0c <osMessageQueueNew+0x62>
        mem = 1;
 8006d06:	2301      	movs	r3, #1
 8006d08:	61bb      	str	r3, [r7, #24]
 8006d0a:	e014      	b.n	8006d36 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d110      	bne.n	8006d36 <osMessageQueueNew+0x8c>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10c      	bne.n	8006d36 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d108      	bne.n	8006d36 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d104      	bne.n	8006d36 <osMessageQueueNew+0x8c>
          mem = 0;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	61bb      	str	r3, [r7, #24]
 8006d30:	e001      	b.n	8006d36 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d10b      	bne.n	8006d54 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	2100      	movs	r1, #0
 8006d46:	9100      	str	r1, [sp, #0]
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 fa30 	bl	80071b0 <xQueueGenericCreateStatic>
 8006d50:	61f8      	str	r0, [r7, #28]
 8006d52:	e008      	b.n	8006d66 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d105      	bne.n	8006d66 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	68b9      	ldr	r1, [r7, #8]
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 faa3 	bl	80072aa <xQueueGenericCreate>
 8006d64:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00c      	beq.n	8006d86 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <osMessageQueueNew+0xd0>
        name = attr->name;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	e001      	b.n	8006d7e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006d7e:	6979      	ldr	r1, [r7, #20]
 8006d80:	69f8      	ldr	r0, [r7, #28]
 8006d82:	f000 ff05 	bl	8007b90 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006d86:	69fb      	ldr	r3, [r7, #28]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3720      	adds	r7, #32
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006da8:	f3ef 8305 	mrs	r3, IPSR
 8006dac:	617b      	str	r3, [r7, #20]
  return(result);
 8006dae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d028      	beq.n	8006e06 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d005      	beq.n	8006dc6 <osMessageQueuePut+0x36>
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <osMessageQueuePut+0x36>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006dc6:	f06f 0303 	mvn.w	r3, #3
 8006dca:	61fb      	str	r3, [r7, #28]
 8006dcc:	e038      	b.n	8006e40 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006dd2:	f107 0210 	add.w	r2, r7, #16
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	69b8      	ldr	r0, [r7, #24]
 8006ddc:	f000 fbc6 	bl	800756c <xQueueGenericSendFromISR>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d003      	beq.n	8006dee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006de6:	f06f 0302 	mvn.w	r3, #2
 8006dea:	61fb      	str	r3, [r7, #28]
 8006dec:	e028      	b.n	8006e40 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d025      	beq.n	8006e40 <osMessageQueuePut+0xb0>
 8006df4:	4b15      	ldr	r3, [pc, #84]	@ (8006e4c <osMessageQueuePut+0xbc>)
 8006df6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	e01c      	b.n	8006e40 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <osMessageQueuePut+0x82>
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d103      	bne.n	8006e1a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006e12:	f06f 0303 	mvn.w	r3, #3
 8006e16:	61fb      	str	r3, [r7, #28]
 8006e18:	e012      	b.n	8006e40 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	68b9      	ldr	r1, [r7, #8]
 8006e20:	69b8      	ldr	r0, [r7, #24]
 8006e22:	f000 faa1 	bl	8007368 <xQueueGenericSend>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d009      	beq.n	8006e40 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006e32:	f06f 0301 	mvn.w	r3, #1
 8006e36:	61fb      	str	r3, [r7, #28]
 8006e38:	e002      	b.n	8006e40 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006e3a:	f06f 0302 	mvn.w	r3, #2
 8006e3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006e40:	69fb      	ldr	r3, [r7, #28]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3720      	adds	r7, #32
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	e000ed04 	.word	0xe000ed04

08006e50 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
 8006e5c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e66:	f3ef 8305 	mrs	r3, IPSR
 8006e6a:	617b      	str	r3, [r7, #20]
  return(result);
 8006e6c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d028      	beq.n	8006ec4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <osMessageQueueGet+0x34>
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <osMessageQueueGet+0x34>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006e84:	f06f 0303 	mvn.w	r3, #3
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	e037      	b.n	8006efc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006e90:	f107 0310 	add.w	r3, r7, #16
 8006e94:	461a      	mov	r2, r3
 8006e96:	68b9      	ldr	r1, [r7, #8]
 8006e98:	69b8      	ldr	r0, [r7, #24]
 8006e9a:	f000 fce7 	bl	800786c <xQueueReceiveFromISR>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d003      	beq.n	8006eac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006ea4:	f06f 0302 	mvn.w	r3, #2
 8006ea8:	61fb      	str	r3, [r7, #28]
 8006eaa:	e027      	b.n	8006efc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d024      	beq.n	8006efc <osMessageQueueGet+0xac>
 8006eb2:	4b15      	ldr	r3, [pc, #84]	@ (8006f08 <osMessageQueueGet+0xb8>)
 8006eb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	e01b      	b.n	8006efc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <osMessageQueueGet+0x80>
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d103      	bne.n	8006ed8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006ed0:	f06f 0303 	mvn.w	r3, #3
 8006ed4:	61fb      	str	r3, [r7, #28]
 8006ed6:	e011      	b.n	8006efc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	68b9      	ldr	r1, [r7, #8]
 8006edc:	69b8      	ldr	r0, [r7, #24]
 8006ede:	f000 fbe3 	bl	80076a8 <xQueueReceive>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d009      	beq.n	8006efc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006eee:	f06f 0301 	mvn.w	r3, #1
 8006ef2:	61fb      	str	r3, [r7, #28]
 8006ef4:	e002      	b.n	8006efc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006ef6:	f06f 0302 	mvn.w	r3, #2
 8006efa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006efc:	69fb      	ldr	r3, [r7, #28]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3720      	adds	r7, #32
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	e000ed04 	.word	0xe000ed04

08006f0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4a07      	ldr	r2, [pc, #28]	@ (8006f38 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	4a06      	ldr	r2, [pc, #24]	@ (8006f3c <vApplicationGetIdleTaskMemory+0x30>)
 8006f22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2280      	movs	r2, #128	@ 0x80
 8006f28:	601a      	str	r2, [r3, #0]
}
 8006f2a:	bf00      	nop
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	20000414 	.word	0x20000414
 8006f3c:	200004bc 	.word	0x200004bc

08006f40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4a07      	ldr	r2, [pc, #28]	@ (8006f6c <vApplicationGetTimerTaskMemory+0x2c>)
 8006f50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	4a06      	ldr	r2, [pc, #24]	@ (8006f70 <vApplicationGetTimerTaskMemory+0x30>)
 8006f56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f5e:	601a      	str	r2, [r3, #0]
}
 8006f60:	bf00      	nop
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	200006bc 	.word	0x200006bc
 8006f70:	20000764 	.word	0x20000764

08006f74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f103 0208 	add.w	r2, r3, #8
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f04f 32ff 	mov.w	r2, #4294967295
 8006f8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f103 0208 	add.w	r2, r3, #8
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f103 0208 	add.w	r2, r3, #8
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fc2:	bf00      	nop
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	1c5a      	adds	r2, r3, #1
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	601a      	str	r2, [r3, #0]
}
 800700a:	bf00      	nop
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007016:	b480      	push	{r7}
 8007018:	b085      	sub	sp, #20
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d103      	bne.n	8007036 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	e00c      	b.n	8007050 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	3308      	adds	r3, #8
 800703a:	60fb      	str	r3, [r7, #12]
 800703c:	e002      	b.n	8007044 <vListInsert+0x2e>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	429a      	cmp	r2, r3
 800704e:	d2f6      	bcs.n	800703e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	601a      	str	r2, [r3, #0]
}
 800707c:	bf00      	nop
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6892      	ldr	r2, [r2, #8]
 800709e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	6852      	ldr	r2, [r2, #4]
 80070a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d103      	bne.n	80070bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	1e5a      	subs	r2, r3, #1
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	e7fd      	b.n	8007104 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007108:	f002 f966 	bl	80093d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007114:	68f9      	ldr	r1, [r7, #12]
 8007116:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007118:	fb01 f303 	mul.w	r3, r1, r3
 800711c:	441a      	add	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007138:	3b01      	subs	r3, #1
 800713a:	68f9      	ldr	r1, [r7, #12]
 800713c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800713e:	fb01 f303 	mul.w	r3, r1, r3
 8007142:	441a      	add	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	22ff      	movs	r2, #255	@ 0xff
 800714c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	22ff      	movs	r2, #255	@ 0xff
 8007154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d114      	bne.n	8007188 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d01a      	beq.n	800719c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3310      	adds	r3, #16
 800716a:	4618      	mov	r0, r3
 800716c:	f001 fa00 	bl	8008570 <xTaskRemoveFromEventList>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d012      	beq.n	800719c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007176:	4b0d      	ldr	r3, [pc, #52]	@ (80071ac <xQueueGenericReset+0xd0>)
 8007178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	e009      	b.n	800719c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	3310      	adds	r3, #16
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff fef1 	bl	8006f74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3324      	adds	r3, #36	@ 0x24
 8007196:	4618      	mov	r0, r3
 8007198:	f7ff feec 	bl	8006f74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800719c:	f002 f94e 	bl	800943c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80071a0:	2301      	movs	r3, #1
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	e000ed04 	.word	0xe000ed04

080071b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08e      	sub	sp, #56	@ 0x38
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10b      	bne.n	80071dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80071d6:	bf00      	nop
 80071d8:	bf00      	nop
 80071da:	e7fd      	b.n	80071d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10b      	bne.n	80071fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop
 80071f8:	e7fd      	b.n	80071f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <xQueueGenericCreateStatic+0x56>
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <xQueueGenericCreateStatic+0x5a>
 8007206:	2301      	movs	r3, #1
 8007208:	e000      	b.n	800720c <xQueueGenericCreateStatic+0x5c>
 800720a:	2300      	movs	r3, #0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10b      	bne.n	8007228 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	623b      	str	r3, [r7, #32]
}
 8007222:	bf00      	nop
 8007224:	bf00      	nop
 8007226:	e7fd      	b.n	8007224 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d102      	bne.n	8007234 <xQueueGenericCreateStatic+0x84>
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <xQueueGenericCreateStatic+0x88>
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <xQueueGenericCreateStatic+0x8a>
 8007238:	2300      	movs	r3, #0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10b      	bne.n	8007256 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	61fb      	str	r3, [r7, #28]
}
 8007250:	bf00      	nop
 8007252:	bf00      	nop
 8007254:	e7fd      	b.n	8007252 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007256:	2350      	movs	r3, #80	@ 0x50
 8007258:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b50      	cmp	r3, #80	@ 0x50
 800725e:	d00b      	beq.n	8007278 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	61bb      	str	r3, [r7, #24]
}
 8007272:	bf00      	nop
 8007274:	bf00      	nop
 8007276:	e7fd      	b.n	8007274 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007278:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800727e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00d      	beq.n	80072a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800728c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	4613      	mov	r3, r2
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f000 f840 	bl	8007320 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3730      	adds	r7, #48	@ 0x30
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b08a      	sub	sp, #40	@ 0x28
 80072ae:	af02      	add	r7, sp, #8
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	4613      	mov	r3, r2
 80072b6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10b      	bne.n	80072d6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	613b      	str	r3, [r7, #16]
}
 80072d0:	bf00      	nop
 80072d2:	bf00      	nop
 80072d4:	e7fd      	b.n	80072d2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	fb02 f303 	mul.w	r3, r2, r3
 80072de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	3350      	adds	r3, #80	@ 0x50
 80072e4:	4618      	mov	r0, r3
 80072e6:	f002 f999 	bl	800961c <pvPortMalloc>
 80072ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d011      	beq.n	8007316 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	3350      	adds	r3, #80	@ 0x50
 80072fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007304:	79fa      	ldrb	r2, [r7, #7]
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	4613      	mov	r3, r2
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	68b9      	ldr	r1, [r7, #8]
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 f805 	bl	8007320 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007316:	69bb      	ldr	r3, [r7, #24]
	}
 8007318:	4618      	mov	r0, r3
 800731a:	3720      	adds	r7, #32
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d103      	bne.n	800733c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	e002      	b.n	8007342 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800734e:	2101      	movs	r1, #1
 8007350:	69b8      	ldr	r0, [r7, #24]
 8007352:	f7ff fec3 	bl	80070dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	78fa      	ldrb	r2, [r7, #3]
 800735a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800735e:	bf00      	nop
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08e      	sub	sp, #56	@ 0x38
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007376:	2300      	movs	r3, #0
 8007378:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800737e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10b      	bne.n	800739c <xQueueGenericSend+0x34>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007396:	bf00      	nop
 8007398:	bf00      	nop
 800739a:	e7fd      	b.n	8007398 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d103      	bne.n	80073aa <xQueueGenericSend+0x42>
 80073a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <xQueueGenericSend+0x46>
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <xQueueGenericSend+0x48>
 80073ae:	2300      	movs	r3, #0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10b      	bne.n	80073cc <xQueueGenericSend+0x64>
	__asm volatile
 80073b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80073c6:	bf00      	nop
 80073c8:	bf00      	nop
 80073ca:	e7fd      	b.n	80073c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d103      	bne.n	80073da <xQueueGenericSend+0x72>
 80073d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d101      	bne.n	80073de <xQueueGenericSend+0x76>
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <xQueueGenericSend+0x78>
 80073de:	2300      	movs	r3, #0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10b      	bne.n	80073fc <xQueueGenericSend+0x94>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	623b      	str	r3, [r7, #32]
}
 80073f6:	bf00      	nop
 80073f8:	bf00      	nop
 80073fa:	e7fd      	b.n	80073f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073fc:	f001 fa7e 	bl	80088fc <xTaskGetSchedulerState>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d102      	bne.n	800740c <xQueueGenericSend+0xa4>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <xQueueGenericSend+0xa8>
 800740c:	2301      	movs	r3, #1
 800740e:	e000      	b.n	8007412 <xQueueGenericSend+0xaa>
 8007410:	2300      	movs	r3, #0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10b      	bne.n	800742e <xQueueGenericSend+0xc6>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	61fb      	str	r3, [r7, #28]
}
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	e7fd      	b.n	800742a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800742e:	f001 ffd3 	bl	80093d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800743a:	429a      	cmp	r2, r3
 800743c:	d302      	bcc.n	8007444 <xQueueGenericSend+0xdc>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b02      	cmp	r3, #2
 8007442:	d129      	bne.n	8007498 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	68b9      	ldr	r1, [r7, #8]
 8007448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800744a:	f000 fa91 	bl	8007970 <prvCopyDataToQueue>
 800744e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007454:	2b00      	cmp	r3, #0
 8007456:	d010      	beq.n	800747a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745a:	3324      	adds	r3, #36	@ 0x24
 800745c:	4618      	mov	r0, r3
 800745e:	f001 f887 	bl	8008570 <xTaskRemoveFromEventList>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d013      	beq.n	8007490 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007468:	4b3f      	ldr	r3, [pc, #252]	@ (8007568 <xQueueGenericSend+0x200>)
 800746a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	e00a      	b.n	8007490 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800747a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d007      	beq.n	8007490 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007480:	4b39      	ldr	r3, [pc, #228]	@ (8007568 <xQueueGenericSend+0x200>)
 8007482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007490:	f001 ffd4 	bl	800943c <vPortExitCritical>
				return pdPASS;
 8007494:	2301      	movs	r3, #1
 8007496:	e063      	b.n	8007560 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d103      	bne.n	80074a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800749e:	f001 ffcd 	bl	800943c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	e05c      	b.n	8007560 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d106      	bne.n	80074ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074ac:	f107 0314 	add.w	r3, r7, #20
 80074b0:	4618      	mov	r0, r3
 80074b2:	f001 f8c1 	bl	8008638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074b6:	2301      	movs	r3, #1
 80074b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074ba:	f001 ffbf 	bl	800943c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074be:	f000 fe29 	bl	8008114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074c2:	f001 ff89 	bl	80093d8 <vPortEnterCritical>
 80074c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074cc:	b25b      	sxtb	r3, r3
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d2:	d103      	bne.n	80074dc <xQueueGenericSend+0x174>
 80074d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074e2:	b25b      	sxtb	r3, r3
 80074e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e8:	d103      	bne.n	80074f2 <xQueueGenericSend+0x18a>
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074f2:	f001 ffa3 	bl	800943c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074f6:	1d3a      	adds	r2, r7, #4
 80074f8:	f107 0314 	add.w	r3, r7, #20
 80074fc:	4611      	mov	r1, r2
 80074fe:	4618      	mov	r0, r3
 8007500:	f001 f8b0 	bl	8008664 <xTaskCheckForTimeOut>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d124      	bne.n	8007554 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800750a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800750c:	f000 fb28 	bl	8007b60 <prvIsQueueFull>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d018      	beq.n	8007548 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007518:	3310      	adds	r3, #16
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	4611      	mov	r1, r2
 800751e:	4618      	mov	r0, r3
 8007520:	f000 ffd4 	bl	80084cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007524:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007526:	f000 fab3 	bl	8007a90 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800752a:	f000 fe01 	bl	8008130 <xTaskResumeAll>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	f47f af7c 	bne.w	800742e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007536:	4b0c      	ldr	r3, [pc, #48]	@ (8007568 <xQueueGenericSend+0x200>)
 8007538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800753c:	601a      	str	r2, [r3, #0]
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	e772      	b.n	800742e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007548:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800754a:	f000 faa1 	bl	8007a90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800754e:	f000 fdef 	bl	8008130 <xTaskResumeAll>
 8007552:	e76c      	b.n	800742e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007554:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007556:	f000 fa9b 	bl	8007a90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800755a:	f000 fde9 	bl	8008130 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800755e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007560:	4618      	mov	r0, r3
 8007562:	3738      	adds	r7, #56	@ 0x38
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	e000ed04 	.word	0xe000ed04

0800756c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b090      	sub	sp, #64	@ 0x40
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800757e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10b      	bne.n	800759c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	e7fd      	b.n	8007598 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d103      	bne.n	80075aa <xQueueGenericSendFromISR+0x3e>
 80075a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <xQueueGenericSendFromISR+0x42>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e000      	b.n	80075b0 <xQueueGenericSendFromISR+0x44>
 80075ae:	2300      	movs	r3, #0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10b      	bne.n	80075cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80075c6:	bf00      	nop
 80075c8:	bf00      	nop
 80075ca:	e7fd      	b.n	80075c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d103      	bne.n	80075da <xQueueGenericSendFromISR+0x6e>
 80075d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d101      	bne.n	80075de <xQueueGenericSendFromISR+0x72>
 80075da:	2301      	movs	r3, #1
 80075dc:	e000      	b.n	80075e0 <xQueueGenericSendFromISR+0x74>
 80075de:	2300      	movs	r3, #0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10b      	bne.n	80075fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80075e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	623b      	str	r3, [r7, #32]
}
 80075f6:	bf00      	nop
 80075f8:	bf00      	nop
 80075fa:	e7fd      	b.n	80075f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075fc:	f001 ffcc 	bl	8009598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007600:	f3ef 8211 	mrs	r2, BASEPRI
 8007604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	61fa      	str	r2, [r7, #28]
 8007616:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007618:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800761a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800761c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800761e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007624:	429a      	cmp	r2, r3
 8007626:	d302      	bcc.n	800762e <xQueueGenericSendFromISR+0xc2>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2b02      	cmp	r3, #2
 800762c:	d12f      	bne.n	800768e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800762e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007630:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007634:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007644:	f000 f994 	bl	8007970 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007648:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800764c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007650:	d112      	bne.n	8007678 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007656:	2b00      	cmp	r3, #0
 8007658:	d016      	beq.n	8007688 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800765a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765c:	3324      	adds	r3, #36	@ 0x24
 800765e:	4618      	mov	r0, r3
 8007660:	f000 ff86 	bl	8008570 <xTaskRemoveFromEventList>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00e      	beq.n	8007688 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00b      	beq.n	8007688 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	e007      	b.n	8007688 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007678:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800767c:	3301      	adds	r3, #1
 800767e:	b2db      	uxtb	r3, r3
 8007680:	b25a      	sxtb	r2, r3
 8007682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007688:	2301      	movs	r3, #1
 800768a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800768c:	e001      	b.n	8007692 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800768e:	2300      	movs	r3, #0
 8007690:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007694:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800769c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800769e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3740      	adds	r7, #64	@ 0x40
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08c      	sub	sp, #48	@ 0x30
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80076b4:	2300      	movs	r3, #0
 80076b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10b      	bne.n	80076da <xQueueReceive+0x32>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	623b      	str	r3, [r7, #32]
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	e7fd      	b.n	80076d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d103      	bne.n	80076e8 <xQueueReceive+0x40>
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <xQueueReceive+0x44>
 80076e8:	2301      	movs	r3, #1
 80076ea:	e000      	b.n	80076ee <xQueueReceive+0x46>
 80076ec:	2300      	movs	r3, #0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10b      	bne.n	800770a <xQueueReceive+0x62>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	61fb      	str	r3, [r7, #28]
}
 8007704:	bf00      	nop
 8007706:	bf00      	nop
 8007708:	e7fd      	b.n	8007706 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800770a:	f001 f8f7 	bl	80088fc <xTaskGetSchedulerState>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d102      	bne.n	800771a <xQueueReceive+0x72>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <xQueueReceive+0x76>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <xQueueReceive+0x78>
 800771e:	2300      	movs	r3, #0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10b      	bne.n	800773c <xQueueReceive+0x94>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	61bb      	str	r3, [r7, #24]
}
 8007736:	bf00      	nop
 8007738:	bf00      	nop
 800773a:	e7fd      	b.n	8007738 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800773c:	f001 fe4c 	bl	80093d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007744:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01f      	beq.n	800778c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800774c:	68b9      	ldr	r1, [r7, #8]
 800774e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007750:	f000 f978 	bl	8007a44 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007756:	1e5a      	subs	r2, r3, #1
 8007758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800775c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00f      	beq.n	8007784 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007766:	3310      	adds	r3, #16
 8007768:	4618      	mov	r0, r3
 800776a:	f000 ff01 	bl	8008570 <xTaskRemoveFromEventList>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d007      	beq.n	8007784 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007774:	4b3c      	ldr	r3, [pc, #240]	@ (8007868 <xQueueReceive+0x1c0>)
 8007776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007784:	f001 fe5a 	bl	800943c <vPortExitCritical>
				return pdPASS;
 8007788:	2301      	movs	r3, #1
 800778a:	e069      	b.n	8007860 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d103      	bne.n	800779a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007792:	f001 fe53 	bl	800943c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007796:	2300      	movs	r3, #0
 8007798:	e062      	b.n	8007860 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800779a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d106      	bne.n	80077ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077a0:	f107 0310 	add.w	r3, r7, #16
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 ff47 	bl	8008638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077aa:	2301      	movs	r3, #1
 80077ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077ae:	f001 fe45 	bl	800943c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077b2:	f000 fcaf 	bl	8008114 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077b6:	f001 fe0f 	bl	80093d8 <vPortEnterCritical>
 80077ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077c0:	b25b      	sxtb	r3, r3
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c6:	d103      	bne.n	80077d0 <xQueueReceive+0x128>
 80077c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077d6:	b25b      	sxtb	r3, r3
 80077d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077dc:	d103      	bne.n	80077e6 <xQueueReceive+0x13e>
 80077de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077e6:	f001 fe29 	bl	800943c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077ea:	1d3a      	adds	r2, r7, #4
 80077ec:	f107 0310 	add.w	r3, r7, #16
 80077f0:	4611      	mov	r1, r2
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 ff36 	bl	8008664 <xTaskCheckForTimeOut>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d123      	bne.n	8007846 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007800:	f000 f998 	bl	8007b34 <prvIsQueueEmpty>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d017      	beq.n	800783a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800780a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780c:	3324      	adds	r3, #36	@ 0x24
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4611      	mov	r1, r2
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fe5a 	bl	80084cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007818:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800781a:	f000 f939 	bl	8007a90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800781e:	f000 fc87 	bl	8008130 <xTaskResumeAll>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d189      	bne.n	800773c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007828:	4b0f      	ldr	r3, [pc, #60]	@ (8007868 <xQueueReceive+0x1c0>)
 800782a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	e780      	b.n	800773c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800783a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800783c:	f000 f928 	bl	8007a90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007840:	f000 fc76 	bl	8008130 <xTaskResumeAll>
 8007844:	e77a      	b.n	800773c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007848:	f000 f922 	bl	8007a90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800784c:	f000 fc70 	bl	8008130 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007850:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007852:	f000 f96f 	bl	8007b34 <prvIsQueueEmpty>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	f43f af6f 	beq.w	800773c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800785e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007860:	4618      	mov	r0, r3
 8007862:	3730      	adds	r7, #48	@ 0x30
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	e000ed04 	.word	0xe000ed04

0800786c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08e      	sub	sp, #56	@ 0x38
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800787c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10b      	bne.n	800789a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	623b      	str	r3, [r7, #32]
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop
 8007898:	e7fd      	b.n	8007896 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d103      	bne.n	80078a8 <xQueueReceiveFromISR+0x3c>
 80078a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <xQueueReceiveFromISR+0x40>
 80078a8:	2301      	movs	r3, #1
 80078aa:	e000      	b.n	80078ae <xQueueReceiveFromISR+0x42>
 80078ac:	2300      	movs	r3, #0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10b      	bne.n	80078ca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	61fb      	str	r3, [r7, #28]
}
 80078c4:	bf00      	nop
 80078c6:	bf00      	nop
 80078c8:	e7fd      	b.n	80078c6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078ca:	f001 fe65 	bl	8009598 <vPortValidateInterruptPriority>
	__asm volatile
 80078ce:	f3ef 8211 	mrs	r2, BASEPRI
 80078d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	61ba      	str	r2, [r7, #24]
 80078e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80078e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d02f      	beq.n	8007956 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80078f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007900:	68b9      	ldr	r1, [r7, #8]
 8007902:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007904:	f000 f89e 	bl	8007a44 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790a:	1e5a      	subs	r2, r3, #1
 800790c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007910:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007918:	d112      	bne.n	8007940 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800791a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d016      	beq.n	8007950 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007924:	3310      	adds	r3, #16
 8007926:	4618      	mov	r0, r3
 8007928:	f000 fe22 	bl	8008570 <xTaskRemoveFromEventList>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00e      	beq.n	8007950 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00b      	beq.n	8007950 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	e007      	b.n	8007950 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007944:	3301      	adds	r3, #1
 8007946:	b2db      	uxtb	r3, r3
 8007948:	b25a      	sxtb	r2, r3
 800794a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007950:	2301      	movs	r3, #1
 8007952:	637b      	str	r3, [r7, #52]	@ 0x34
 8007954:	e001      	b.n	800795a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007956:	2300      	movs	r3, #0
 8007958:	637b      	str	r3, [r7, #52]	@ 0x34
 800795a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	f383 8811 	msr	BASEPRI, r3
}
 8007964:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007968:	4618      	mov	r0, r3
 800796a:	3738      	adds	r7, #56	@ 0x38
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800797c:	2300      	movs	r3, #0
 800797e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007984:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10d      	bne.n	80079aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d14d      	bne.n	8007a32 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	4618      	mov	r0, r3
 800799c:	f000 ffcc 	bl	8008938 <xTaskPriorityDisinherit>
 80079a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	609a      	str	r2, [r3, #8]
 80079a8:	e043      	b.n	8007a32 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d119      	bne.n	80079e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6858      	ldr	r0, [r3, #4]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b8:	461a      	mov	r2, r3
 80079ba:	68b9      	ldr	r1, [r7, #8]
 80079bc:	f002 fb15 	bl	8009fea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c8:	441a      	add	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d32b      	bcc.n	8007a32 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	605a      	str	r2, [r3, #4]
 80079e2:	e026      	b.n	8007a32 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	68d8      	ldr	r0, [r3, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ec:	461a      	mov	r2, r3
 80079ee:	68b9      	ldr	r1, [r7, #8]
 80079f0:	f002 fafb 	bl	8009fea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	68da      	ldr	r2, [r3, #12]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079fc:	425b      	negs	r3, r3
 80079fe:	441a      	add	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	68da      	ldr	r2, [r3, #12]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d207      	bcs.n	8007a20 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a18:	425b      	negs	r3, r3
 8007a1a:	441a      	add	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d105      	bne.n	8007a32 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	1c5a      	adds	r2, r3, #1
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007a3a:	697b      	ldr	r3, [r7, #20]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3718      	adds	r7, #24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d018      	beq.n	8007a88 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5e:	441a      	add	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68da      	ldr	r2, [r3, #12]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d303      	bcc.n	8007a78 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68d9      	ldr	r1, [r3, #12]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a80:	461a      	mov	r2, r3
 8007a82:	6838      	ldr	r0, [r7, #0]
 8007a84:	f002 fab1 	bl	8009fea <memcpy>
	}
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a98:	f001 fc9e 	bl	80093d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007aa2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007aa4:	e011      	b.n	8007aca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d012      	beq.n	8007ad4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3324      	adds	r3, #36	@ 0x24
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 fd5c 	bl	8008570 <xTaskRemoveFromEventList>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007abe:	f000 fe35 	bl	800872c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	dce9      	bgt.n	8007aa6 <prvUnlockQueue+0x16>
 8007ad2:	e000      	b.n	8007ad6 <prvUnlockQueue+0x46>
					break;
 8007ad4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	22ff      	movs	r2, #255	@ 0xff
 8007ada:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007ade:	f001 fcad 	bl	800943c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ae2:	f001 fc79 	bl	80093d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007aec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007aee:	e011      	b.n	8007b14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d012      	beq.n	8007b1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3310      	adds	r3, #16
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fd37 	bl	8008570 <xTaskRemoveFromEventList>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b08:	f000 fe10 	bl	800872c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	dce9      	bgt.n	8007af0 <prvUnlockQueue+0x60>
 8007b1c:	e000      	b.n	8007b20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	22ff      	movs	r2, #255	@ 0xff
 8007b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007b28:	f001 fc88 	bl	800943c <vPortExitCritical>
}
 8007b2c:	bf00      	nop
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b3c:	f001 fc4c 	bl	80093d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d102      	bne.n	8007b4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	e001      	b.n	8007b52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b52:	f001 fc73 	bl	800943c <vPortExitCritical>

	return xReturn;
 8007b56:	68fb      	ldr	r3, [r7, #12]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b68:	f001 fc36 	bl	80093d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d102      	bne.n	8007b7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	e001      	b.n	8007b82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b82:	f001 fc5b 	bl	800943c <vPortExitCritical>

	return xReturn;
 8007b86:	68fb      	ldr	r3, [r7, #12]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	e014      	b.n	8007bca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8007be0 <vQueueAddToRegistry+0x50>)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10b      	bne.n	8007bc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007bac:	490c      	ldr	r1, [pc, #48]	@ (8007be0 <vQueueAddToRegistry+0x50>)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8007be0 <vQueueAddToRegistry+0x50>)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	4413      	add	r3, r2
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007bc2:	e006      	b.n	8007bd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b07      	cmp	r3, #7
 8007bce:	d9e7      	bls.n	8007ba0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007bd0:	bf00      	nop
 8007bd2:	bf00      	nop
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	20000b64 	.word	0x20000b64

08007be4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007bf4:	f001 fbf0 	bl	80093d8 <vPortEnterCritical>
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bfe:	b25b      	sxtb	r3, r3
 8007c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c04:	d103      	bne.n	8007c0e <vQueueWaitForMessageRestricted+0x2a>
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c14:	b25b      	sxtb	r3, r3
 8007c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1a:	d103      	bne.n	8007c24 <vQueueWaitForMessageRestricted+0x40>
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c24:	f001 fc0a 	bl	800943c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d106      	bne.n	8007c3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	3324      	adds	r3, #36	@ 0x24
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	68b9      	ldr	r1, [r7, #8]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fc6d 	bl	8008518 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007c3e:	6978      	ldr	r0, [r7, #20]
 8007c40:	f7ff ff26 	bl	8007a90 <prvUnlockQueue>
	}
 8007c44:	bf00      	nop
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b08e      	sub	sp, #56	@ 0x38
 8007c50:	af04      	add	r7, sp, #16
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
 8007c58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10b      	bne.n	8007c78 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	623b      	str	r3, [r7, #32]
}
 8007c72:	bf00      	nop
 8007c74:	bf00      	nop
 8007c76:	e7fd      	b.n	8007c74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10b      	bne.n	8007c96 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	61fb      	str	r3, [r7, #28]
}
 8007c90:	bf00      	nop
 8007c92:	bf00      	nop
 8007c94:	e7fd      	b.n	8007c92 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c96:	23a8      	movs	r3, #168	@ 0xa8
 8007c98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	2ba8      	cmp	r3, #168	@ 0xa8
 8007c9e:	d00b      	beq.n	8007cb8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	61bb      	str	r3, [r7, #24]
}
 8007cb2:	bf00      	nop
 8007cb4:	bf00      	nop
 8007cb6:	e7fd      	b.n	8007cb4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007cb8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01e      	beq.n	8007cfe <xTaskCreateStatic+0xb2>
 8007cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d01b      	beq.n	8007cfe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007cd8:	2300      	movs	r3, #0
 8007cda:	9303      	str	r3, [sp, #12]
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cde:	9302      	str	r3, [sp, #8]
 8007ce0:	f107 0314 	add.w	r3, r7, #20
 8007ce4:	9301      	str	r3, [sp, #4]
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 f851 	bl	8007d98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cf6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007cf8:	f000 f8f6 	bl	8007ee8 <prvAddNewTaskToReadyList>
 8007cfc:	e001      	b.n	8007d02 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d02:	697b      	ldr	r3, [r7, #20]
	}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3728      	adds	r7, #40	@ 0x28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08c      	sub	sp, #48	@ 0x30
 8007d10:	af04      	add	r7, sp, #16
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	603b      	str	r3, [r7, #0]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d1c:	88fb      	ldrh	r3, [r7, #6]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4618      	mov	r0, r3
 8007d22:	f001 fc7b 	bl	800961c <pvPortMalloc>
 8007d26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00e      	beq.n	8007d4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d2e:	20a8      	movs	r0, #168	@ 0xa8
 8007d30:	f001 fc74 	bl	800961c <pvPortMalloc>
 8007d34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d42:	e005      	b.n	8007d50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007d44:	6978      	ldr	r0, [r7, #20]
 8007d46:	f001 fd37 	bl	80097b8 <vPortFree>
 8007d4a:	e001      	b.n	8007d50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d017      	beq.n	8007d86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007d5e:	88fa      	ldrh	r2, [r7, #6]
 8007d60:	2300      	movs	r3, #0
 8007d62:	9303      	str	r3, [sp, #12]
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	9302      	str	r3, [sp, #8]
 8007d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d6a:	9301      	str	r3, [sp, #4]
 8007d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	68b9      	ldr	r1, [r7, #8]
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 f80f 	bl	8007d98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d7a:	69f8      	ldr	r0, [r7, #28]
 8007d7c:	f000 f8b4 	bl	8007ee8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d80:	2301      	movs	r3, #1
 8007d82:	61bb      	str	r3, [r7, #24]
 8007d84:	e002      	b.n	8007d8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d86:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d8c:	69bb      	ldr	r3, [r7, #24]
	}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3720      	adds	r7, #32
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
	...

08007d98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	461a      	mov	r2, r3
 8007db0:	21a5      	movs	r1, #165	@ 0xa5
 8007db2:	f001 ffe4 	bl	8009d7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	f023 0307 	bic.w	r3, r3, #7
 8007dce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00b      	beq.n	8007df2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	617b      	str	r3, [r7, #20]
}
 8007dec:	bf00      	nop
 8007dee:	bf00      	nop
 8007df0:	e7fd      	b.n	8007dee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d01f      	beq.n	8007e38 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007df8:	2300      	movs	r3, #0
 8007dfa:	61fb      	str	r3, [r7, #28]
 8007dfc:	e012      	b.n	8007e24 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	4413      	add	r3, r2
 8007e04:	7819      	ldrb	r1, [r3, #0]
 8007e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	3334      	adds	r3, #52	@ 0x34
 8007e0e:	460a      	mov	r2, r1
 8007e10:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	4413      	add	r3, r2
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d006      	beq.n	8007e2c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	3301      	adds	r3, #1
 8007e22:	61fb      	str	r3, [r7, #28]
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	2b0f      	cmp	r3, #15
 8007e28:	d9e9      	bls.n	8007dfe <prvInitialiseNewTask+0x66>
 8007e2a:	e000      	b.n	8007e2e <prvInitialiseNewTask+0x96>
			{
				break;
 8007e2c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e36:	e003      	b.n	8007e40 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e42:	2b37      	cmp	r3, #55	@ 0x37
 8007e44:	d901      	bls.n	8007e4a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007e46:	2337      	movs	r3, #55	@ 0x37
 8007e48:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e54:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e58:	2200      	movs	r2, #0
 8007e5a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5e:	3304      	adds	r3, #4
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7ff f8a7 	bl	8006fb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e68:	3318      	adds	r3, #24
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7ff f8a2 	bl	8006fb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e84:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e98:	3354      	adds	r3, #84	@ 0x54
 8007e9a:	224c      	movs	r2, #76	@ 0x4c
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f001 ff6d 	bl	8009d7e <memset>
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8007edc <prvInitialiseNewTask+0x144>)
 8007ea8:	659a      	str	r2, [r3, #88]	@ 0x58
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eac:	4a0c      	ldr	r2, [pc, #48]	@ (8007ee0 <prvInitialiseNewTask+0x148>)
 8007eae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8007ee4 <prvInitialiseNewTask+0x14c>)
 8007eb4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	68f9      	ldr	r1, [r7, #12]
 8007eba:	69b8      	ldr	r0, [r7, #24]
 8007ebc:	f001 f95a 	bl	8009174 <pxPortInitialiseStack>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ed0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ed2:	bf00      	nop
 8007ed4:	3720      	adds	r7, #32
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20002c88 	.word	0x20002c88
 8007ee0:	20002cf0 	.word	0x20002cf0
 8007ee4:	20002d58 	.word	0x20002d58

08007ee8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ef0:	f001 fa72 	bl	80093d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8007fac <prvAddNewTaskToReadyList+0xc4>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	4a2c      	ldr	r2, [pc, #176]	@ (8007fac <prvAddNewTaskToReadyList+0xc4>)
 8007efc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007efe:	4b2c      	ldr	r3, [pc, #176]	@ (8007fb0 <prvAddNewTaskToReadyList+0xc8>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d109      	bne.n	8007f1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f06:	4a2a      	ldr	r2, [pc, #168]	@ (8007fb0 <prvAddNewTaskToReadyList+0xc8>)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f0c:	4b27      	ldr	r3, [pc, #156]	@ (8007fac <prvAddNewTaskToReadyList+0xc4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d110      	bne.n	8007f36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f14:	f000 fc2e 	bl	8008774 <prvInitialiseTaskLists>
 8007f18:	e00d      	b.n	8007f36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f1a:	4b26      	ldr	r3, [pc, #152]	@ (8007fb4 <prvAddNewTaskToReadyList+0xcc>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d109      	bne.n	8007f36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f22:	4b23      	ldr	r3, [pc, #140]	@ (8007fb0 <prvAddNewTaskToReadyList+0xc8>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d802      	bhi.n	8007f36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f30:	4a1f      	ldr	r2, [pc, #124]	@ (8007fb0 <prvAddNewTaskToReadyList+0xc8>)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f36:	4b20      	ldr	r3, [pc, #128]	@ (8007fb8 <prvAddNewTaskToReadyList+0xd0>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8007fb8 <prvAddNewTaskToReadyList+0xd0>)
 8007f3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f40:	4b1d      	ldr	r3, [pc, #116]	@ (8007fb8 <prvAddNewTaskToReadyList+0xd0>)
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8007fbc <prvAddNewTaskToReadyList+0xd4>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d903      	bls.n	8007f5c <prvAddNewTaskToReadyList+0x74>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f58:	4a18      	ldr	r2, [pc, #96]	@ (8007fbc <prvAddNewTaskToReadyList+0xd4>)
 8007f5a:	6013      	str	r3, [r2, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f60:	4613      	mov	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4a15      	ldr	r2, [pc, #84]	@ (8007fc0 <prvAddNewTaskToReadyList+0xd8>)
 8007f6a:	441a      	add	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	4619      	mov	r1, r3
 8007f72:	4610      	mov	r0, r2
 8007f74:	f7ff f82b 	bl	8006fce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f78:	f001 fa60 	bl	800943c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb4 <prvAddNewTaskToReadyList+0xcc>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00e      	beq.n	8007fa2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f84:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb0 <prvAddNewTaskToReadyList+0xc8>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d207      	bcs.n	8007fa2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f92:	4b0c      	ldr	r3, [pc, #48]	@ (8007fc4 <prvAddNewTaskToReadyList+0xdc>)
 8007f94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20001078 	.word	0x20001078
 8007fb0:	20000ba4 	.word	0x20000ba4
 8007fb4:	20001084 	.word	0x20001084
 8007fb8:	20001094 	.word	0x20001094
 8007fbc:	20001080 	.word	0x20001080
 8007fc0:	20000ba8 	.word	0x20000ba8
 8007fc4:	e000ed04 	.word	0xe000ed04

08007fc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d018      	beq.n	800800c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fda:	4b14      	ldr	r3, [pc, #80]	@ (800802c <vTaskDelay+0x64>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00b      	beq.n	8007ffa <vTaskDelay+0x32>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	60bb      	str	r3, [r7, #8]
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop
 8007ff8:	e7fd      	b.n	8007ff6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007ffa:	f000 f88b 	bl	8008114 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ffe:	2100      	movs	r1, #0
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fd09 	bl	8008a18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008006:	f000 f893 	bl	8008130 <xTaskResumeAll>
 800800a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d107      	bne.n	8008022 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008012:	4b07      	ldr	r3, [pc, #28]	@ (8008030 <vTaskDelay+0x68>)
 8008014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008022:	bf00      	nop
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
 800802a:	bf00      	nop
 800802c:	200010a0 	.word	0x200010a0
 8008030:	e000ed04 	.word	0xe000ed04

08008034 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b08a      	sub	sp, #40	@ 0x28
 8008038:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800803a:	2300      	movs	r3, #0
 800803c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800803e:	2300      	movs	r3, #0
 8008040:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008042:	463a      	mov	r2, r7
 8008044:	1d39      	adds	r1, r7, #4
 8008046:	f107 0308 	add.w	r3, r7, #8
 800804a:	4618      	mov	r0, r3
 800804c:	f7fe ff5e 	bl	8006f0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	9202      	str	r2, [sp, #8]
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	2300      	movs	r3, #0
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	2300      	movs	r3, #0
 8008060:	460a      	mov	r2, r1
 8008062:	4924      	ldr	r1, [pc, #144]	@ (80080f4 <vTaskStartScheduler+0xc0>)
 8008064:	4824      	ldr	r0, [pc, #144]	@ (80080f8 <vTaskStartScheduler+0xc4>)
 8008066:	f7ff fdf1 	bl	8007c4c <xTaskCreateStatic>
 800806a:	4603      	mov	r3, r0
 800806c:	4a23      	ldr	r2, [pc, #140]	@ (80080fc <vTaskStartScheduler+0xc8>)
 800806e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008070:	4b22      	ldr	r3, [pc, #136]	@ (80080fc <vTaskStartScheduler+0xc8>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008078:	2301      	movs	r3, #1
 800807a:	617b      	str	r3, [r7, #20]
 800807c:	e001      	b.n	8008082 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800807e:	2300      	movs	r3, #0
 8008080:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d102      	bne.n	800808e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008088:	f000 fd1a 	bl	8008ac0 <xTimerCreateTimerTask>
 800808c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d11b      	bne.n	80080cc <vTaskStartScheduler+0x98>
	__asm volatile
 8008094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008098:	f383 8811 	msr	BASEPRI, r3
 800809c:	f3bf 8f6f 	isb	sy
 80080a0:	f3bf 8f4f 	dsb	sy
 80080a4:	613b      	str	r3, [r7, #16]
}
 80080a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080a8:	4b15      	ldr	r3, [pc, #84]	@ (8008100 <vTaskStartScheduler+0xcc>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3354      	adds	r3, #84	@ 0x54
 80080ae:	4a15      	ldr	r2, [pc, #84]	@ (8008104 <vTaskStartScheduler+0xd0>)
 80080b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080b2:	4b15      	ldr	r3, [pc, #84]	@ (8008108 <vTaskStartScheduler+0xd4>)
 80080b4:	f04f 32ff 	mov.w	r2, #4294967295
 80080b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080ba:	4b14      	ldr	r3, [pc, #80]	@ (800810c <vTaskStartScheduler+0xd8>)
 80080bc:	2201      	movs	r2, #1
 80080be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080c0:	4b13      	ldr	r3, [pc, #76]	@ (8008110 <vTaskStartScheduler+0xdc>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080c6:	f001 f8e3 	bl	8009290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80080ca:	e00f      	b.n	80080ec <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d2:	d10b      	bne.n	80080ec <vTaskStartScheduler+0xb8>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	60fb      	str	r3, [r7, #12]
}
 80080e6:	bf00      	nop
 80080e8:	bf00      	nop
 80080ea:	e7fd      	b.n	80080e8 <vTaskStartScheduler+0xb4>
}
 80080ec:	bf00      	nop
 80080ee:	3718      	adds	r7, #24
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	0800b2f8 	.word	0x0800b2f8
 80080f8:	08008745 	.word	0x08008745
 80080fc:	2000109c 	.word	0x2000109c
 8008100:	20000ba4 	.word	0x20000ba4
 8008104:	20000024 	.word	0x20000024
 8008108:	20001098 	.word	0x20001098
 800810c:	20001084 	.word	0x20001084
 8008110:	2000107c 	.word	0x2000107c

08008114 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008118:	4b04      	ldr	r3, [pc, #16]	@ (800812c <vTaskSuspendAll+0x18>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3301      	adds	r3, #1
 800811e:	4a03      	ldr	r2, [pc, #12]	@ (800812c <vTaskSuspendAll+0x18>)
 8008120:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008122:	bf00      	nop
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	200010a0 	.word	0x200010a0

08008130 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800813a:	2300      	movs	r3, #0
 800813c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800813e:	4b42      	ldr	r3, [pc, #264]	@ (8008248 <xTaskResumeAll+0x118>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10b      	bne.n	800815e <xTaskResumeAll+0x2e>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	603b      	str	r3, [r7, #0]
}
 8008158:	bf00      	nop
 800815a:	bf00      	nop
 800815c:	e7fd      	b.n	800815a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800815e:	f001 f93b 	bl	80093d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008162:	4b39      	ldr	r3, [pc, #228]	@ (8008248 <xTaskResumeAll+0x118>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3b01      	subs	r3, #1
 8008168:	4a37      	ldr	r2, [pc, #220]	@ (8008248 <xTaskResumeAll+0x118>)
 800816a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800816c:	4b36      	ldr	r3, [pc, #216]	@ (8008248 <xTaskResumeAll+0x118>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d162      	bne.n	800823a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008174:	4b35      	ldr	r3, [pc, #212]	@ (800824c <xTaskResumeAll+0x11c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d05e      	beq.n	800823a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800817c:	e02f      	b.n	80081de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800817e:	4b34      	ldr	r3, [pc, #208]	@ (8008250 <xTaskResumeAll+0x120>)
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	3318      	adds	r3, #24
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe ff7c 	bl	8007088 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	3304      	adds	r3, #4
 8008194:	4618      	mov	r0, r3
 8008196:	f7fe ff77 	bl	8007088 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800819e:	4b2d      	ldr	r3, [pc, #180]	@ (8008254 <xTaskResumeAll+0x124>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d903      	bls.n	80081ae <xTaskResumeAll+0x7e>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008254 <xTaskResumeAll+0x124>)
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b2:	4613      	mov	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4a27      	ldr	r2, [pc, #156]	@ (8008258 <xTaskResumeAll+0x128>)
 80081bc:	441a      	add	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	3304      	adds	r3, #4
 80081c2:	4619      	mov	r1, r3
 80081c4:	4610      	mov	r0, r2
 80081c6:	f7fe ff02 	bl	8006fce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ce:	4b23      	ldr	r3, [pc, #140]	@ (800825c <xTaskResumeAll+0x12c>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d302      	bcc.n	80081de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80081d8:	4b21      	ldr	r3, [pc, #132]	@ (8008260 <xTaskResumeAll+0x130>)
 80081da:	2201      	movs	r2, #1
 80081dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081de:	4b1c      	ldr	r3, [pc, #112]	@ (8008250 <xTaskResumeAll+0x120>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1cb      	bne.n	800817e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80081ec:	f000 fb66 	bl	80088bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80081f0:	4b1c      	ldr	r3, [pc, #112]	@ (8008264 <xTaskResumeAll+0x134>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d010      	beq.n	800821e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80081fc:	f000 f846 	bl	800828c <xTaskIncrementTick>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d002      	beq.n	800820c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008206:	4b16      	ldr	r3, [pc, #88]	@ (8008260 <xTaskResumeAll+0x130>)
 8008208:	2201      	movs	r2, #1
 800820a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3b01      	subs	r3, #1
 8008210:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1f1      	bne.n	80081fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008218:	4b12      	ldr	r3, [pc, #72]	@ (8008264 <xTaskResumeAll+0x134>)
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800821e:	4b10      	ldr	r3, [pc, #64]	@ (8008260 <xTaskResumeAll+0x130>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d009      	beq.n	800823a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008226:	2301      	movs	r3, #1
 8008228:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800822a:	4b0f      	ldr	r3, [pc, #60]	@ (8008268 <xTaskResumeAll+0x138>)
 800822c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800823a:	f001 f8ff 	bl	800943c <vPortExitCritical>

	return xAlreadyYielded;
 800823e:	68bb      	ldr	r3, [r7, #8]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	200010a0 	.word	0x200010a0
 800824c:	20001078 	.word	0x20001078
 8008250:	20001038 	.word	0x20001038
 8008254:	20001080 	.word	0x20001080
 8008258:	20000ba8 	.word	0x20000ba8
 800825c:	20000ba4 	.word	0x20000ba4
 8008260:	2000108c 	.word	0x2000108c
 8008264:	20001088 	.word	0x20001088
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008272:	4b05      	ldr	r3, [pc, #20]	@ (8008288 <xTaskGetTickCount+0x1c>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008278:	687b      	ldr	r3, [r7, #4]
}
 800827a:	4618      	mov	r0, r3
 800827c:	370c      	adds	r7, #12
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	2000107c 	.word	0x2000107c

0800828c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008292:	2300      	movs	r3, #0
 8008294:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008296:	4b4f      	ldr	r3, [pc, #316]	@ (80083d4 <xTaskIncrementTick+0x148>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	f040 8090 	bne.w	80083c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082a0:	4b4d      	ldr	r3, [pc, #308]	@ (80083d8 <xTaskIncrementTick+0x14c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3301      	adds	r3, #1
 80082a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082a8:	4a4b      	ldr	r2, [pc, #300]	@ (80083d8 <xTaskIncrementTick+0x14c>)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d121      	bne.n	80082f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80082b4:	4b49      	ldr	r3, [pc, #292]	@ (80083dc <xTaskIncrementTick+0x150>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00b      	beq.n	80082d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	603b      	str	r3, [r7, #0]
}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	e7fd      	b.n	80082d2 <xTaskIncrementTick+0x46>
 80082d6:	4b41      	ldr	r3, [pc, #260]	@ (80083dc <xTaskIncrementTick+0x150>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	4b40      	ldr	r3, [pc, #256]	@ (80083e0 <xTaskIncrementTick+0x154>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a3e      	ldr	r2, [pc, #248]	@ (80083dc <xTaskIncrementTick+0x150>)
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	4a3e      	ldr	r2, [pc, #248]	@ (80083e0 <xTaskIncrementTick+0x154>)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	4b3e      	ldr	r3, [pc, #248]	@ (80083e4 <xTaskIncrementTick+0x158>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3301      	adds	r3, #1
 80082f0:	4a3c      	ldr	r2, [pc, #240]	@ (80083e4 <xTaskIncrementTick+0x158>)
 80082f2:	6013      	str	r3, [r2, #0]
 80082f4:	f000 fae2 	bl	80088bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80082f8:	4b3b      	ldr	r3, [pc, #236]	@ (80083e8 <xTaskIncrementTick+0x15c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d349      	bcc.n	8008396 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008302:	4b36      	ldr	r3, [pc, #216]	@ (80083dc <xTaskIncrementTick+0x150>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d104      	bne.n	8008316 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800830c:	4b36      	ldr	r3, [pc, #216]	@ (80083e8 <xTaskIncrementTick+0x15c>)
 800830e:	f04f 32ff 	mov.w	r2, #4294967295
 8008312:	601a      	str	r2, [r3, #0]
					break;
 8008314:	e03f      	b.n	8008396 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008316:	4b31      	ldr	r3, [pc, #196]	@ (80083dc <xTaskIncrementTick+0x150>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	429a      	cmp	r2, r3
 800832c:	d203      	bcs.n	8008336 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800832e:	4a2e      	ldr	r2, [pc, #184]	@ (80083e8 <xTaskIncrementTick+0x15c>)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008334:	e02f      	b.n	8008396 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	3304      	adds	r3, #4
 800833a:	4618      	mov	r0, r3
 800833c:	f7fe fea4 	bl	8007088 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008344:	2b00      	cmp	r3, #0
 8008346:	d004      	beq.n	8008352 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	3318      	adds	r3, #24
 800834c:	4618      	mov	r0, r3
 800834e:	f7fe fe9b 	bl	8007088 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008356:	4b25      	ldr	r3, [pc, #148]	@ (80083ec <xTaskIncrementTick+0x160>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d903      	bls.n	8008366 <xTaskIncrementTick+0xda>
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008362:	4a22      	ldr	r2, [pc, #136]	@ (80083ec <xTaskIncrementTick+0x160>)
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800836a:	4613      	mov	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4a1f      	ldr	r2, [pc, #124]	@ (80083f0 <xTaskIncrementTick+0x164>)
 8008374:	441a      	add	r2, r3
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	3304      	adds	r3, #4
 800837a:	4619      	mov	r1, r3
 800837c:	4610      	mov	r0, r2
 800837e:	f7fe fe26 	bl	8006fce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008386:	4b1b      	ldr	r3, [pc, #108]	@ (80083f4 <xTaskIncrementTick+0x168>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838c:	429a      	cmp	r2, r3
 800838e:	d3b8      	bcc.n	8008302 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008390:	2301      	movs	r3, #1
 8008392:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008394:	e7b5      	b.n	8008302 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008396:	4b17      	ldr	r3, [pc, #92]	@ (80083f4 <xTaskIncrementTick+0x168>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800839c:	4914      	ldr	r1, [pc, #80]	@ (80083f0 <xTaskIncrementTick+0x164>)
 800839e:	4613      	mov	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	440b      	add	r3, r1
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d901      	bls.n	80083b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80083ae:	2301      	movs	r3, #1
 80083b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80083b2:	4b11      	ldr	r3, [pc, #68]	@ (80083f8 <xTaskIncrementTick+0x16c>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d007      	beq.n	80083ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80083ba:	2301      	movs	r3, #1
 80083bc:	617b      	str	r3, [r7, #20]
 80083be:	e004      	b.n	80083ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80083c0:	4b0e      	ldr	r3, [pc, #56]	@ (80083fc <xTaskIncrementTick+0x170>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3301      	adds	r3, #1
 80083c6:	4a0d      	ldr	r2, [pc, #52]	@ (80083fc <xTaskIncrementTick+0x170>)
 80083c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80083ca:	697b      	ldr	r3, [r7, #20]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3718      	adds	r7, #24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	200010a0 	.word	0x200010a0
 80083d8:	2000107c 	.word	0x2000107c
 80083dc:	20001030 	.word	0x20001030
 80083e0:	20001034 	.word	0x20001034
 80083e4:	20001090 	.word	0x20001090
 80083e8:	20001098 	.word	0x20001098
 80083ec:	20001080 	.word	0x20001080
 80083f0:	20000ba8 	.word	0x20000ba8
 80083f4:	20000ba4 	.word	0x20000ba4
 80083f8:	2000108c 	.word	0x2000108c
 80083fc:	20001088 	.word	0x20001088

08008400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008406:	4b2b      	ldr	r3, [pc, #172]	@ (80084b4 <vTaskSwitchContext+0xb4>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800840e:	4b2a      	ldr	r3, [pc, #168]	@ (80084b8 <vTaskSwitchContext+0xb8>)
 8008410:	2201      	movs	r2, #1
 8008412:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008414:	e047      	b.n	80084a6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008416:	4b28      	ldr	r3, [pc, #160]	@ (80084b8 <vTaskSwitchContext+0xb8>)
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800841c:	4b27      	ldr	r3, [pc, #156]	@ (80084bc <vTaskSwitchContext+0xbc>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	60fb      	str	r3, [r7, #12]
 8008422:	e011      	b.n	8008448 <vTaskSwitchContext+0x48>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10b      	bne.n	8008442 <vTaskSwitchContext+0x42>
	__asm volatile
 800842a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842e:	f383 8811 	msr	BASEPRI, r3
 8008432:	f3bf 8f6f 	isb	sy
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	607b      	str	r3, [r7, #4]
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	e7fd      	b.n	800843e <vTaskSwitchContext+0x3e>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3b01      	subs	r3, #1
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	491d      	ldr	r1, [pc, #116]	@ (80084c0 <vTaskSwitchContext+0xc0>)
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	4613      	mov	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	440b      	add	r3, r1
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0e3      	beq.n	8008424 <vTaskSwitchContext+0x24>
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4a16      	ldr	r2, [pc, #88]	@ (80084c0 <vTaskSwitchContext+0xc0>)
 8008468:	4413      	add	r3, r2
 800846a:	60bb      	str	r3, [r7, #8]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	605a      	str	r2, [r3, #4]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	685a      	ldr	r2, [r3, #4]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	3308      	adds	r3, #8
 800847e:	429a      	cmp	r2, r3
 8008480:	d104      	bne.n	800848c <vTaskSwitchContext+0x8c>
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	605a      	str	r2, [r3, #4]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	4a0c      	ldr	r2, [pc, #48]	@ (80084c4 <vTaskSwitchContext+0xc4>)
 8008494:	6013      	str	r3, [r2, #0]
 8008496:	4a09      	ldr	r2, [pc, #36]	@ (80084bc <vTaskSwitchContext+0xbc>)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800849c:	4b09      	ldr	r3, [pc, #36]	@ (80084c4 <vTaskSwitchContext+0xc4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3354      	adds	r3, #84	@ 0x54
 80084a2:	4a09      	ldr	r2, [pc, #36]	@ (80084c8 <vTaskSwitchContext+0xc8>)
 80084a4:	6013      	str	r3, [r2, #0]
}
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	200010a0 	.word	0x200010a0
 80084b8:	2000108c 	.word	0x2000108c
 80084bc:	20001080 	.word	0x20001080
 80084c0:	20000ba8 	.word	0x20000ba8
 80084c4:	20000ba4 	.word	0x20000ba4
 80084c8:	20000024 	.word	0x20000024

080084cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10b      	bne.n	80084f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	60fb      	str	r3, [r7, #12]
}
 80084ee:	bf00      	nop
 80084f0:	bf00      	nop
 80084f2:	e7fd      	b.n	80084f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084f4:	4b07      	ldr	r3, [pc, #28]	@ (8008514 <vTaskPlaceOnEventList+0x48>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3318      	adds	r3, #24
 80084fa:	4619      	mov	r1, r3
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7fe fd8a 	bl	8007016 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008502:	2101      	movs	r1, #1
 8008504:	6838      	ldr	r0, [r7, #0]
 8008506:	f000 fa87 	bl	8008a18 <prvAddCurrentTaskToDelayedList>
}
 800850a:	bf00      	nop
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20000ba4 	.word	0x20000ba4

08008518 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10b      	bne.n	8008542 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800852a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800852e:	f383 8811 	msr	BASEPRI, r3
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	617b      	str	r3, [r7, #20]
}
 800853c:	bf00      	nop
 800853e:	bf00      	nop
 8008540:	e7fd      	b.n	800853e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008542:	4b0a      	ldr	r3, [pc, #40]	@ (800856c <vTaskPlaceOnEventListRestricted+0x54>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3318      	adds	r3, #24
 8008548:	4619      	mov	r1, r3
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f7fe fd3f 	bl	8006fce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008556:	f04f 33ff 	mov.w	r3, #4294967295
 800855a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800855c:	6879      	ldr	r1, [r7, #4]
 800855e:	68b8      	ldr	r0, [r7, #8]
 8008560:	f000 fa5a 	bl	8008a18 <prvAddCurrentTaskToDelayedList>
	}
 8008564:	bf00      	nop
 8008566:	3718      	adds	r7, #24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	20000ba4 	.word	0x20000ba4

08008570 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10b      	bne.n	800859e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858a:	f383 8811 	msr	BASEPRI, r3
 800858e:	f3bf 8f6f 	isb	sy
 8008592:	f3bf 8f4f 	dsb	sy
 8008596:	60fb      	str	r3, [r7, #12]
}
 8008598:	bf00      	nop
 800859a:	bf00      	nop
 800859c:	e7fd      	b.n	800859a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	3318      	adds	r3, #24
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fd70 	bl	8007088 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085a8:	4b1d      	ldr	r3, [pc, #116]	@ (8008620 <xTaskRemoveFromEventList+0xb0>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d11d      	bne.n	80085ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	3304      	adds	r3, #4
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe fd67 	bl	8007088 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085be:	4b19      	ldr	r3, [pc, #100]	@ (8008624 <xTaskRemoveFromEventList+0xb4>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d903      	bls.n	80085ce <xTaskRemoveFromEventList+0x5e>
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ca:	4a16      	ldr	r2, [pc, #88]	@ (8008624 <xTaskRemoveFromEventList+0xb4>)
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085d2:	4613      	mov	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4a13      	ldr	r2, [pc, #76]	@ (8008628 <xTaskRemoveFromEventList+0xb8>)
 80085dc:	441a      	add	r2, r3
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	3304      	adds	r3, #4
 80085e2:	4619      	mov	r1, r3
 80085e4:	4610      	mov	r0, r2
 80085e6:	f7fe fcf2 	bl	8006fce <vListInsertEnd>
 80085ea:	e005      	b.n	80085f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	3318      	adds	r3, #24
 80085f0:	4619      	mov	r1, r3
 80085f2:	480e      	ldr	r0, [pc, #56]	@ (800862c <xTaskRemoveFromEventList+0xbc>)
 80085f4:	f7fe fceb 	bl	8006fce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008630 <xTaskRemoveFromEventList+0xc0>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008602:	429a      	cmp	r2, r3
 8008604:	d905      	bls.n	8008612 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008606:	2301      	movs	r3, #1
 8008608:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800860a:	4b0a      	ldr	r3, [pc, #40]	@ (8008634 <xTaskRemoveFromEventList+0xc4>)
 800860c:	2201      	movs	r2, #1
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	e001      	b.n	8008616 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008612:	2300      	movs	r3, #0
 8008614:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008616:	697b      	ldr	r3, [r7, #20]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3718      	adds	r7, #24
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	200010a0 	.word	0x200010a0
 8008624:	20001080 	.word	0x20001080
 8008628:	20000ba8 	.word	0x20000ba8
 800862c:	20001038 	.word	0x20001038
 8008630:	20000ba4 	.word	0x20000ba4
 8008634:	2000108c 	.word	0x2000108c

08008638 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008640:	4b06      	ldr	r3, [pc, #24]	@ (800865c <vTaskInternalSetTimeOutState+0x24>)
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008648:	4b05      	ldr	r3, [pc, #20]	@ (8008660 <vTaskInternalSetTimeOutState+0x28>)
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	605a      	str	r2, [r3, #4]
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	20001090 	.word	0x20001090
 8008660:	2000107c 	.word	0x2000107c

08008664 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b088      	sub	sp, #32
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10b      	bne.n	800868c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	613b      	str	r3, [r7, #16]
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	e7fd      	b.n	8008688 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10b      	bne.n	80086aa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	60fb      	str	r3, [r7, #12]
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop
 80086a8:	e7fd      	b.n	80086a6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80086aa:	f000 fe95 	bl	80093d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80086ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008724 <xTaskCheckForTimeOut+0xc0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c6:	d102      	bne.n	80086ce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086c8:	2300      	movs	r3, #0
 80086ca:	61fb      	str	r3, [r7, #28]
 80086cc:	e023      	b.n	8008716 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	4b15      	ldr	r3, [pc, #84]	@ (8008728 <xTaskCheckForTimeOut+0xc4>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d007      	beq.n	80086ea <xTaskCheckForTimeOut+0x86>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d302      	bcc.n	80086ea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80086e4:	2301      	movs	r3, #1
 80086e6:	61fb      	str	r3, [r7, #28]
 80086e8:	e015      	b.n	8008716 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d20b      	bcs.n	800870c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	1ad2      	subs	r2, r2, r3
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7ff ff99 	bl	8008638 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008706:	2300      	movs	r3, #0
 8008708:	61fb      	str	r3, [r7, #28]
 800870a:	e004      	b.n	8008716 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008712:	2301      	movs	r3, #1
 8008714:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008716:	f000 fe91 	bl	800943c <vPortExitCritical>

	return xReturn;
 800871a:	69fb      	ldr	r3, [r7, #28]
}
 800871c:	4618      	mov	r0, r3
 800871e:	3720      	adds	r7, #32
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	2000107c 	.word	0x2000107c
 8008728:	20001090 	.word	0x20001090

0800872c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800872c:	b480      	push	{r7}
 800872e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008730:	4b03      	ldr	r3, [pc, #12]	@ (8008740 <vTaskMissedYield+0x14>)
 8008732:	2201      	movs	r2, #1
 8008734:	601a      	str	r2, [r3, #0]
}
 8008736:	bf00      	nop
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr
 8008740:	2000108c 	.word	0x2000108c

08008744 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800874c:	f000 f852 	bl	80087f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008750:	4b06      	ldr	r3, [pc, #24]	@ (800876c <prvIdleTask+0x28>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d9f9      	bls.n	800874c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008758:	4b05      	ldr	r3, [pc, #20]	@ (8008770 <prvIdleTask+0x2c>)
 800875a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800875e:	601a      	str	r2, [r3, #0]
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008768:	e7f0      	b.n	800874c <prvIdleTask+0x8>
 800876a:	bf00      	nop
 800876c:	20000ba8 	.word	0x20000ba8
 8008770:	e000ed04 	.word	0xe000ed04

08008774 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800877a:	2300      	movs	r3, #0
 800877c:	607b      	str	r3, [r7, #4]
 800877e:	e00c      	b.n	800879a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4a12      	ldr	r2, [pc, #72]	@ (80087d4 <prvInitialiseTaskLists+0x60>)
 800878c:	4413      	add	r3, r2
 800878e:	4618      	mov	r0, r3
 8008790:	f7fe fbf0 	bl	8006f74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3301      	adds	r3, #1
 8008798:	607b      	str	r3, [r7, #4]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b37      	cmp	r3, #55	@ 0x37
 800879e:	d9ef      	bls.n	8008780 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087a0:	480d      	ldr	r0, [pc, #52]	@ (80087d8 <prvInitialiseTaskLists+0x64>)
 80087a2:	f7fe fbe7 	bl	8006f74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087a6:	480d      	ldr	r0, [pc, #52]	@ (80087dc <prvInitialiseTaskLists+0x68>)
 80087a8:	f7fe fbe4 	bl	8006f74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087ac:	480c      	ldr	r0, [pc, #48]	@ (80087e0 <prvInitialiseTaskLists+0x6c>)
 80087ae:	f7fe fbe1 	bl	8006f74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087b2:	480c      	ldr	r0, [pc, #48]	@ (80087e4 <prvInitialiseTaskLists+0x70>)
 80087b4:	f7fe fbde 	bl	8006f74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087b8:	480b      	ldr	r0, [pc, #44]	@ (80087e8 <prvInitialiseTaskLists+0x74>)
 80087ba:	f7fe fbdb 	bl	8006f74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087be:	4b0b      	ldr	r3, [pc, #44]	@ (80087ec <prvInitialiseTaskLists+0x78>)
 80087c0:	4a05      	ldr	r2, [pc, #20]	@ (80087d8 <prvInitialiseTaskLists+0x64>)
 80087c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087c4:	4b0a      	ldr	r3, [pc, #40]	@ (80087f0 <prvInitialiseTaskLists+0x7c>)
 80087c6:	4a05      	ldr	r2, [pc, #20]	@ (80087dc <prvInitialiseTaskLists+0x68>)
 80087c8:	601a      	str	r2, [r3, #0]
}
 80087ca:	bf00      	nop
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20000ba8 	.word	0x20000ba8
 80087d8:	20001008 	.word	0x20001008
 80087dc:	2000101c 	.word	0x2000101c
 80087e0:	20001038 	.word	0x20001038
 80087e4:	2000104c 	.word	0x2000104c
 80087e8:	20001064 	.word	0x20001064
 80087ec:	20001030 	.word	0x20001030
 80087f0:	20001034 	.word	0x20001034

080087f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087fa:	e019      	b.n	8008830 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80087fc:	f000 fdec 	bl	80093d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008800:	4b10      	ldr	r3, [pc, #64]	@ (8008844 <prvCheckTasksWaitingTermination+0x50>)
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3304      	adds	r3, #4
 800880c:	4618      	mov	r0, r3
 800880e:	f7fe fc3b 	bl	8007088 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008812:	4b0d      	ldr	r3, [pc, #52]	@ (8008848 <prvCheckTasksWaitingTermination+0x54>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3b01      	subs	r3, #1
 8008818:	4a0b      	ldr	r2, [pc, #44]	@ (8008848 <prvCheckTasksWaitingTermination+0x54>)
 800881a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800881c:	4b0b      	ldr	r3, [pc, #44]	@ (800884c <prvCheckTasksWaitingTermination+0x58>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3b01      	subs	r3, #1
 8008822:	4a0a      	ldr	r2, [pc, #40]	@ (800884c <prvCheckTasksWaitingTermination+0x58>)
 8008824:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008826:	f000 fe09 	bl	800943c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f810 	bl	8008850 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008830:	4b06      	ldr	r3, [pc, #24]	@ (800884c <prvCheckTasksWaitingTermination+0x58>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1e1      	bne.n	80087fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	2000104c 	.word	0x2000104c
 8008848:	20001078 	.word	0x20001078
 800884c:	20001060 	.word	0x20001060

08008850 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	3354      	adds	r3, #84	@ 0x54
 800885c:	4618      	mov	r0, r3
 800885e:	f001 fb03 	bl	8009e68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008868:	2b00      	cmp	r3, #0
 800886a:	d108      	bne.n	800887e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008870:	4618      	mov	r0, r3
 8008872:	f000 ffa1 	bl	80097b8 <vPortFree>
				vPortFree( pxTCB );
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 ff9e 	bl	80097b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800887c:	e019      	b.n	80088b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008884:	2b01      	cmp	r3, #1
 8008886:	d103      	bne.n	8008890 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 ff95 	bl	80097b8 <vPortFree>
	}
 800888e:	e010      	b.n	80088b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008896:	2b02      	cmp	r3, #2
 8008898:	d00b      	beq.n	80088b2 <prvDeleteTCB+0x62>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	60fb      	str	r3, [r7, #12]
}
 80088ac:	bf00      	nop
 80088ae:	bf00      	nop
 80088b0:	e7fd      	b.n	80088ae <prvDeleteTCB+0x5e>
	}
 80088b2:	bf00      	nop
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
	...

080088bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088c2:	4b0c      	ldr	r3, [pc, #48]	@ (80088f4 <prvResetNextTaskUnblockTime+0x38>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d104      	bne.n	80088d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088cc:	4b0a      	ldr	r3, [pc, #40]	@ (80088f8 <prvResetNextTaskUnblockTime+0x3c>)
 80088ce:	f04f 32ff 	mov.w	r2, #4294967295
 80088d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088d4:	e008      	b.n	80088e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d6:	4b07      	ldr	r3, [pc, #28]	@ (80088f4 <prvResetNextTaskUnblockTime+0x38>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	4a04      	ldr	r2, [pc, #16]	@ (80088f8 <prvResetNextTaskUnblockTime+0x3c>)
 80088e6:	6013      	str	r3, [r2, #0]
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr
 80088f4:	20001030 	.word	0x20001030
 80088f8:	20001098 	.word	0x20001098

080088fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008902:	4b0b      	ldr	r3, [pc, #44]	@ (8008930 <xTaskGetSchedulerState+0x34>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d102      	bne.n	8008910 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800890a:	2301      	movs	r3, #1
 800890c:	607b      	str	r3, [r7, #4]
 800890e:	e008      	b.n	8008922 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008910:	4b08      	ldr	r3, [pc, #32]	@ (8008934 <xTaskGetSchedulerState+0x38>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d102      	bne.n	800891e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008918:	2302      	movs	r3, #2
 800891a:	607b      	str	r3, [r7, #4]
 800891c:	e001      	b.n	8008922 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800891e:	2300      	movs	r3, #0
 8008920:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008922:	687b      	ldr	r3, [r7, #4]
	}
 8008924:	4618      	mov	r0, r3
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	20001084 	.word	0x20001084
 8008934:	200010a0 	.word	0x200010a0

08008938 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008944:	2300      	movs	r3, #0
 8008946:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d058      	beq.n	8008a00 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800894e:	4b2f      	ldr	r3, [pc, #188]	@ (8008a0c <xTaskPriorityDisinherit+0xd4>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	429a      	cmp	r2, r3
 8008956:	d00b      	beq.n	8008970 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	60fb      	str	r3, [r7, #12]
}
 800896a:	bf00      	nop
 800896c:	bf00      	nop
 800896e:	e7fd      	b.n	800896c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10b      	bne.n	8008990 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	60bb      	str	r3, [r7, #8]
}
 800898a:	bf00      	nop
 800898c:	bf00      	nop
 800898e:	e7fd      	b.n	800898c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008994:	1e5a      	subs	r2, r3, #1
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d02c      	beq.n	8008a00 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d128      	bne.n	8008a00 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	3304      	adds	r3, #4
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe fb68 	bl	8007088 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008a10 <xTaskPriorityDisinherit+0xd8>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d903      	bls.n	80089e0 <xTaskPriorityDisinherit+0xa8>
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089dc:	4a0c      	ldr	r2, [pc, #48]	@ (8008a10 <xTaskPriorityDisinherit+0xd8>)
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e4:	4613      	mov	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4a09      	ldr	r2, [pc, #36]	@ (8008a14 <xTaskPriorityDisinherit+0xdc>)
 80089ee:	441a      	add	r2, r3
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	3304      	adds	r3, #4
 80089f4:	4619      	mov	r1, r3
 80089f6:	4610      	mov	r0, r2
 80089f8:	f7fe fae9 	bl	8006fce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089fc:	2301      	movs	r3, #1
 80089fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a00:	697b      	ldr	r3, [r7, #20]
	}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20000ba4 	.word	0x20000ba4
 8008a10:	20001080 	.word	0x20001080
 8008a14:	20000ba8 	.word	0x20000ba8

08008a18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a22:	4b21      	ldr	r3, [pc, #132]	@ (8008aa8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a28:	4b20      	ldr	r3, [pc, #128]	@ (8008aac <prvAddCurrentTaskToDelayedList+0x94>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3304      	adds	r3, #4
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe fb2a 	bl	8007088 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3a:	d10a      	bne.n	8008a52 <prvAddCurrentTaskToDelayedList+0x3a>
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d007      	beq.n	8008a52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a42:	4b1a      	ldr	r3, [pc, #104]	@ (8008aac <prvAddCurrentTaskToDelayedList+0x94>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3304      	adds	r3, #4
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4819      	ldr	r0, [pc, #100]	@ (8008ab0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008a4c:	f7fe fabf 	bl	8006fce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a50:	e026      	b.n	8008aa0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4413      	add	r3, r2
 8008a58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a5a:	4b14      	ldr	r3, [pc, #80]	@ (8008aac <prvAddCurrentTaskToDelayedList+0x94>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d209      	bcs.n	8008a7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a6a:	4b12      	ldr	r3, [pc, #72]	@ (8008ab4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8008aac <prvAddCurrentTaskToDelayedList+0x94>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3304      	adds	r3, #4
 8008a74:	4619      	mov	r1, r3
 8008a76:	4610      	mov	r0, r2
 8008a78:	f7fe facd 	bl	8007016 <vListInsert>
}
 8008a7c:	e010      	b.n	8008aa0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ab8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	4b0a      	ldr	r3, [pc, #40]	@ (8008aac <prvAddCurrentTaskToDelayedList+0x94>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3304      	adds	r3, #4
 8008a88:	4619      	mov	r1, r3
 8008a8a:	4610      	mov	r0, r2
 8008a8c:	f7fe fac3 	bl	8007016 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a90:	4b0a      	ldr	r3, [pc, #40]	@ (8008abc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68ba      	ldr	r2, [r7, #8]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d202      	bcs.n	8008aa0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008a9a:	4a08      	ldr	r2, [pc, #32]	@ (8008abc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	6013      	str	r3, [r2, #0]
}
 8008aa0:	bf00      	nop
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	2000107c 	.word	0x2000107c
 8008aac:	20000ba4 	.word	0x20000ba4
 8008ab0:	20001064 	.word	0x20001064
 8008ab4:	20001034 	.word	0x20001034
 8008ab8:	20001030 	.word	0x20001030
 8008abc:	20001098 	.word	0x20001098

08008ac0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b08a      	sub	sp, #40	@ 0x28
 8008ac4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008aca:	f000 fb13 	bl	80090f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008ace:	4b1d      	ldr	r3, [pc, #116]	@ (8008b44 <xTimerCreateTimerTask+0x84>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d021      	beq.n	8008b1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008ade:	1d3a      	adds	r2, r7, #4
 8008ae0:	f107 0108 	add.w	r1, r7, #8
 8008ae4:	f107 030c 	add.w	r3, r7, #12
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fe fa29 	bl	8006f40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	9202      	str	r2, [sp, #8]
 8008af6:	9301      	str	r3, [sp, #4]
 8008af8:	2302      	movs	r3, #2
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	2300      	movs	r3, #0
 8008afe:	460a      	mov	r2, r1
 8008b00:	4911      	ldr	r1, [pc, #68]	@ (8008b48 <xTimerCreateTimerTask+0x88>)
 8008b02:	4812      	ldr	r0, [pc, #72]	@ (8008b4c <xTimerCreateTimerTask+0x8c>)
 8008b04:	f7ff f8a2 	bl	8007c4c <xTaskCreateStatic>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	4a11      	ldr	r2, [pc, #68]	@ (8008b50 <xTimerCreateTimerTask+0x90>)
 8008b0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b0e:	4b10      	ldr	r3, [pc, #64]	@ (8008b50 <xTimerCreateTimerTask+0x90>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b16:	2301      	movs	r3, #1
 8008b18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10b      	bne.n	8008b38 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b24:	f383 8811 	msr	BASEPRI, r3
 8008b28:	f3bf 8f6f 	isb	sy
 8008b2c:	f3bf 8f4f 	dsb	sy
 8008b30:	613b      	str	r3, [r7, #16]
}
 8008b32:	bf00      	nop
 8008b34:	bf00      	nop
 8008b36:	e7fd      	b.n	8008b34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008b38:	697b      	ldr	r3, [r7, #20]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	200010d4 	.word	0x200010d4
 8008b48:	0800b300 	.word	0x0800b300
 8008b4c:	08008c8d 	.word	0x08008c8d
 8008b50:	200010d8 	.word	0x200010d8

08008b54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b08a      	sub	sp, #40	@ 0x28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
 8008b60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10b      	bne.n	8008b84 <xTimerGenericCommand+0x30>
	__asm volatile
 8008b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	623b      	str	r3, [r7, #32]
}
 8008b7e:	bf00      	nop
 8008b80:	bf00      	nop
 8008b82:	e7fd      	b.n	8008b80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008b84:	4b19      	ldr	r3, [pc, #100]	@ (8008bec <xTimerGenericCommand+0x98>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d02a      	beq.n	8008be2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2b05      	cmp	r3, #5
 8008b9c:	dc18      	bgt.n	8008bd0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008b9e:	f7ff fead 	bl	80088fc <xTaskGetSchedulerState>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d109      	bne.n	8008bbc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ba8:	4b10      	ldr	r3, [pc, #64]	@ (8008bec <xTimerGenericCommand+0x98>)
 8008baa:	6818      	ldr	r0, [r3, #0]
 8008bac:	f107 0110 	add.w	r1, r7, #16
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bb4:	f7fe fbd8 	bl	8007368 <xQueueGenericSend>
 8008bb8:	6278      	str	r0, [r7, #36]	@ 0x24
 8008bba:	e012      	b.n	8008be2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8008bec <xTimerGenericCommand+0x98>)
 8008bbe:	6818      	ldr	r0, [r3, #0]
 8008bc0:	f107 0110 	add.w	r1, r7, #16
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f7fe fbce 	bl	8007368 <xQueueGenericSend>
 8008bcc:	6278      	str	r0, [r7, #36]	@ 0x24
 8008bce:	e008      	b.n	8008be2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008bd0:	4b06      	ldr	r3, [pc, #24]	@ (8008bec <xTimerGenericCommand+0x98>)
 8008bd2:	6818      	ldr	r0, [r3, #0]
 8008bd4:	f107 0110 	add.w	r1, r7, #16
 8008bd8:	2300      	movs	r3, #0
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	f7fe fcc6 	bl	800756c <xQueueGenericSendFromISR>
 8008be0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3728      	adds	r7, #40	@ 0x28
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	200010d4 	.word	0x200010d4

08008bf0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b088      	sub	sp, #32
 8008bf4:	af02      	add	r7, sp, #8
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bfa:	4b23      	ldr	r3, [pc, #140]	@ (8008c88 <prvProcessExpiredTimer+0x98>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	3304      	adds	r3, #4
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7fe fa3d 	bl	8007088 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c14:	f003 0304 	and.w	r3, r3, #4
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d023      	beq.n	8008c64 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	699a      	ldr	r2, [r3, #24]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	18d1      	adds	r1, r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	6978      	ldr	r0, [r7, #20]
 8008c2a:	f000 f8d5 	bl	8008dd8 <prvInsertTimerInActiveList>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d020      	beq.n	8008c76 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c34:	2300      	movs	r3, #0
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	6978      	ldr	r0, [r7, #20]
 8008c40:	f7ff ff88 	bl	8008b54 <xTimerGenericCommand>
 8008c44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d114      	bne.n	8008c76 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	60fb      	str	r3, [r7, #12]
}
 8008c5e:	bf00      	nop
 8008c60:	bf00      	nop
 8008c62:	e7fd      	b.n	8008c60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c6a:	f023 0301 	bic.w	r3, r3, #1
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	6978      	ldr	r0, [r7, #20]
 8008c7c:	4798      	blx	r3
}
 8008c7e:	bf00      	nop
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	200010cc 	.word	0x200010cc

08008c8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008c94:	f107 0308 	add.w	r3, r7, #8
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 f859 	bl	8008d50 <prvGetNextExpireTime>
 8008c9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 f805 	bl	8008cb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008caa:	f000 f8d7 	bl	8008e5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cae:	bf00      	nop
 8008cb0:	e7f0      	b.n	8008c94 <prvTimerTask+0x8>
	...

08008cb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008cbe:	f7ff fa29 	bl	8008114 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cc2:	f107 0308 	add.w	r3, r7, #8
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 f866 	bl	8008d98 <prvSampleTimeNow>
 8008ccc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d130      	bne.n	8008d36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10a      	bne.n	8008cf0 <prvProcessTimerOrBlockTask+0x3c>
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d806      	bhi.n	8008cf0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ce2:	f7ff fa25 	bl	8008130 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ce6:	68f9      	ldr	r1, [r7, #12]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff ff81 	bl	8008bf0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008cee:	e024      	b.n	8008d3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d008      	beq.n	8008d08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008cf6:	4b13      	ldr	r3, [pc, #76]	@ (8008d44 <prvProcessTimerOrBlockTask+0x90>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <prvProcessTimerOrBlockTask+0x50>
 8008d00:	2301      	movs	r3, #1
 8008d02:	e000      	b.n	8008d06 <prvProcessTimerOrBlockTask+0x52>
 8008d04:	2300      	movs	r3, #0
 8008d06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d08:	4b0f      	ldr	r3, [pc, #60]	@ (8008d48 <prvProcessTimerOrBlockTask+0x94>)
 8008d0a:	6818      	ldr	r0, [r3, #0]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	4619      	mov	r1, r3
 8008d16:	f7fe ff65 	bl	8007be4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d1a:	f7ff fa09 	bl	8008130 <xTaskResumeAll>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10a      	bne.n	8008d3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d24:	4b09      	ldr	r3, [pc, #36]	@ (8008d4c <prvProcessTimerOrBlockTask+0x98>)
 8008d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	f3bf 8f4f 	dsb	sy
 8008d30:	f3bf 8f6f 	isb	sy
}
 8008d34:	e001      	b.n	8008d3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d36:	f7ff f9fb 	bl	8008130 <xTaskResumeAll>
}
 8008d3a:	bf00      	nop
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	200010d0 	.word	0x200010d0
 8008d48:	200010d4 	.word	0x200010d4
 8008d4c:	e000ed04 	.word	0xe000ed04

08008d50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008d58:	4b0e      	ldr	r3, [pc, #56]	@ (8008d94 <prvGetNextExpireTime+0x44>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <prvGetNextExpireTime+0x16>
 8008d62:	2201      	movs	r2, #1
 8008d64:	e000      	b.n	8008d68 <prvGetNextExpireTime+0x18>
 8008d66:	2200      	movs	r2, #0
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d105      	bne.n	8008d80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d74:	4b07      	ldr	r3, [pc, #28]	@ (8008d94 <prvGetNextExpireTime+0x44>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	e001      	b.n	8008d84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008d84:	68fb      	ldr	r3, [r7, #12]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	200010cc 	.word	0x200010cc

08008d98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008da0:	f7ff fa64 	bl	800826c <xTaskGetTickCount>
 8008da4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008da6:	4b0b      	ldr	r3, [pc, #44]	@ (8008dd4 <prvSampleTimeNow+0x3c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d205      	bcs.n	8008dbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008db0:	f000 f93a 	bl	8009028 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	e002      	b.n	8008dc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008dc2:	4a04      	ldr	r2, [pc, #16]	@ (8008dd4 <prvSampleTimeNow+0x3c>)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	200010dc 	.word	0x200010dc

08008dd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
 8008de4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008de6:	2300      	movs	r3, #0
 8008de8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	68fa      	ldr	r2, [r7, #12]
 8008df4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d812      	bhi.n	8008e24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	1ad2      	subs	r2, r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d302      	bcc.n	8008e12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	617b      	str	r3, [r7, #20]
 8008e10:	e01b      	b.n	8008e4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e12:	4b10      	ldr	r3, [pc, #64]	@ (8008e54 <prvInsertTimerInActiveList+0x7c>)
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3304      	adds	r3, #4
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	f7fe f8fa 	bl	8007016 <vListInsert>
 8008e22:	e012      	b.n	8008e4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d206      	bcs.n	8008e3a <prvInsertTimerInActiveList+0x62>
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d302      	bcc.n	8008e3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e34:	2301      	movs	r3, #1
 8008e36:	617b      	str	r3, [r7, #20]
 8008e38:	e007      	b.n	8008e4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e3a:	4b07      	ldr	r3, [pc, #28]	@ (8008e58 <prvInsertTimerInActiveList+0x80>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3304      	adds	r3, #4
 8008e42:	4619      	mov	r1, r3
 8008e44:	4610      	mov	r0, r2
 8008e46:	f7fe f8e6 	bl	8007016 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008e4a:	697b      	ldr	r3, [r7, #20]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3718      	adds	r7, #24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	200010d0 	.word	0x200010d0
 8008e58:	200010cc 	.word	0x200010cc

08008e5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b08e      	sub	sp, #56	@ 0x38
 8008e60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e62:	e0ce      	b.n	8009002 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	da19      	bge.n	8008e9e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008e6a:	1d3b      	adds	r3, r7, #4
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10b      	bne.n	8008e8e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	61fb      	str	r3, [r7, #28]
}
 8008e88:	bf00      	nop
 8008e8a:	bf00      	nop
 8008e8c:	e7fd      	b.n	8008e8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e94:	6850      	ldr	r0, [r2, #4]
 8008e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e98:	6892      	ldr	r2, [r2, #8]
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f2c0 80ae 	blt.w	8009002 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d004      	beq.n	8008ebc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe f8e6 	bl	8007088 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ebc:	463b      	mov	r3, r7
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7ff ff6a 	bl	8008d98 <prvSampleTimeNow>
 8008ec4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b09      	cmp	r3, #9
 8008eca:	f200 8097 	bhi.w	8008ffc <prvProcessReceivedCommands+0x1a0>
 8008ece:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed4 <prvProcessReceivedCommands+0x78>)
 8008ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed4:	08008efd 	.word	0x08008efd
 8008ed8:	08008efd 	.word	0x08008efd
 8008edc:	08008efd 	.word	0x08008efd
 8008ee0:	08008f73 	.word	0x08008f73
 8008ee4:	08008f87 	.word	0x08008f87
 8008ee8:	08008fd3 	.word	0x08008fd3
 8008eec:	08008efd 	.word	0x08008efd
 8008ef0:	08008efd 	.word	0x08008efd
 8008ef4:	08008f73 	.word	0x08008f73
 8008ef8:	08008f87 	.word	0x08008f87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f02:	f043 0301 	orr.w	r3, r3, #1
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	18d1      	adds	r1, r2, r3
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f1c:	f7ff ff5c 	bl	8008dd8 <prvInsertTimerInActiveList>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d06c      	beq.n	8009000 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f34:	f003 0304 	and.w	r3, r3, #4
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d061      	beq.n	8009000 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	441a      	add	r2, r3
 8008f44:	2300      	movs	r3, #0
 8008f46:	9300      	str	r3, [sp, #0]
 8008f48:	2300      	movs	r3, #0
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f4e:	f7ff fe01 	bl	8008b54 <xTimerGenericCommand>
 8008f52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d152      	bne.n	8009000 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	61bb      	str	r3, [r7, #24]
}
 8008f6c:	bf00      	nop
 8008f6e:	bf00      	nop
 8008f70:	e7fd      	b.n	8008f6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f78:	f023 0301 	bic.w	r3, r3, #1
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008f84:	e03d      	b.n	8009002 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f8c:	f043 0301 	orr.w	r3, r3, #1
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10b      	bne.n	8008fbe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	617b      	str	r3, [r7, #20]
}
 8008fb8:	bf00      	nop
 8008fba:	bf00      	nop
 8008fbc:	e7fd      	b.n	8008fba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc0:	699a      	ldr	r2, [r3, #24]
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc4:	18d1      	adds	r1, r2, r3
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fcc:	f7ff ff04 	bl	8008dd8 <prvInsertTimerInActiveList>
					break;
 8008fd0:	e017      	b.n	8009002 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fd8:	f003 0302 	and.w	r3, r3, #2
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d103      	bne.n	8008fe8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008fe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fe2:	f000 fbe9 	bl	80097b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008fe6:	e00c      	b.n	8009002 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fee:	f023 0301 	bic.w	r3, r3, #1
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008ffa:	e002      	b.n	8009002 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008ffc:	bf00      	nop
 8008ffe:	e000      	b.n	8009002 <prvProcessReceivedCommands+0x1a6>
					break;
 8009000:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009002:	4b08      	ldr	r3, [pc, #32]	@ (8009024 <prvProcessReceivedCommands+0x1c8>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	1d39      	adds	r1, r7, #4
 8009008:	2200      	movs	r2, #0
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe fb4c 	bl	80076a8 <xQueueReceive>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	f47f af26 	bne.w	8008e64 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	3730      	adds	r7, #48	@ 0x30
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	200010d4 	.word	0x200010d4

08009028 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800902e:	e049      	b.n	80090c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009030:	4b2e      	ldr	r3, [pc, #184]	@ (80090ec <prvSwitchTimerLists+0xc4>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800903a:	4b2c      	ldr	r3, [pc, #176]	@ (80090ec <prvSwitchTimerLists+0xc4>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	3304      	adds	r3, #4
 8009048:	4618      	mov	r0, r3
 800904a:	f7fe f81d 	bl	8007088 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800905c:	f003 0304 	and.w	r3, r3, #4
 8009060:	2b00      	cmp	r3, #0
 8009062:	d02f      	beq.n	80090c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	4413      	add	r3, r2
 800906c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	429a      	cmp	r2, r3
 8009074:	d90e      	bls.n	8009094 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009082:	4b1a      	ldr	r3, [pc, #104]	@ (80090ec <prvSwitchTimerLists+0xc4>)
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	3304      	adds	r3, #4
 800908a:	4619      	mov	r1, r3
 800908c:	4610      	mov	r0, r2
 800908e:	f7fd ffc2 	bl	8007016 <vListInsert>
 8009092:	e017      	b.n	80090c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009094:	2300      	movs	r3, #0
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	2300      	movs	r3, #0
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	2100      	movs	r1, #0
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f7ff fd58 	bl	8008b54 <xTimerGenericCommand>
 80090a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10b      	bne.n	80090c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	603b      	str	r3, [r7, #0]
}
 80090be:	bf00      	nop
 80090c0:	bf00      	nop
 80090c2:	e7fd      	b.n	80090c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090c4:	4b09      	ldr	r3, [pc, #36]	@ (80090ec <prvSwitchTimerLists+0xc4>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1b0      	bne.n	8009030 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80090ce:	4b07      	ldr	r3, [pc, #28]	@ (80090ec <prvSwitchTimerLists+0xc4>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80090d4:	4b06      	ldr	r3, [pc, #24]	@ (80090f0 <prvSwitchTimerLists+0xc8>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a04      	ldr	r2, [pc, #16]	@ (80090ec <prvSwitchTimerLists+0xc4>)
 80090da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80090dc:	4a04      	ldr	r2, [pc, #16]	@ (80090f0 <prvSwitchTimerLists+0xc8>)
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	6013      	str	r3, [r2, #0]
}
 80090e2:	bf00      	nop
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	200010cc 	.word	0x200010cc
 80090f0:	200010d0 	.word	0x200010d0

080090f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80090fa:	f000 f96d 	bl	80093d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80090fe:	4b15      	ldr	r3, [pc, #84]	@ (8009154 <prvCheckForValidListAndQueue+0x60>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d120      	bne.n	8009148 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009106:	4814      	ldr	r0, [pc, #80]	@ (8009158 <prvCheckForValidListAndQueue+0x64>)
 8009108:	f7fd ff34 	bl	8006f74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800910c:	4813      	ldr	r0, [pc, #76]	@ (800915c <prvCheckForValidListAndQueue+0x68>)
 800910e:	f7fd ff31 	bl	8006f74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009112:	4b13      	ldr	r3, [pc, #76]	@ (8009160 <prvCheckForValidListAndQueue+0x6c>)
 8009114:	4a10      	ldr	r2, [pc, #64]	@ (8009158 <prvCheckForValidListAndQueue+0x64>)
 8009116:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009118:	4b12      	ldr	r3, [pc, #72]	@ (8009164 <prvCheckForValidListAndQueue+0x70>)
 800911a:	4a10      	ldr	r2, [pc, #64]	@ (800915c <prvCheckForValidListAndQueue+0x68>)
 800911c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800911e:	2300      	movs	r3, #0
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	4b11      	ldr	r3, [pc, #68]	@ (8009168 <prvCheckForValidListAndQueue+0x74>)
 8009124:	4a11      	ldr	r2, [pc, #68]	@ (800916c <prvCheckForValidListAndQueue+0x78>)
 8009126:	2110      	movs	r1, #16
 8009128:	200a      	movs	r0, #10
 800912a:	f7fe f841 	bl	80071b0 <xQueueGenericCreateStatic>
 800912e:	4603      	mov	r3, r0
 8009130:	4a08      	ldr	r2, [pc, #32]	@ (8009154 <prvCheckForValidListAndQueue+0x60>)
 8009132:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009134:	4b07      	ldr	r3, [pc, #28]	@ (8009154 <prvCheckForValidListAndQueue+0x60>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d005      	beq.n	8009148 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800913c:	4b05      	ldr	r3, [pc, #20]	@ (8009154 <prvCheckForValidListAndQueue+0x60>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	490b      	ldr	r1, [pc, #44]	@ (8009170 <prvCheckForValidListAndQueue+0x7c>)
 8009142:	4618      	mov	r0, r3
 8009144:	f7fe fd24 	bl	8007b90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009148:	f000 f978 	bl	800943c <vPortExitCritical>
}
 800914c:	bf00      	nop
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	200010d4 	.word	0x200010d4
 8009158:	200010a4 	.word	0x200010a4
 800915c:	200010b8 	.word	0x200010b8
 8009160:	200010cc 	.word	0x200010cc
 8009164:	200010d0 	.word	0x200010d0
 8009168:	20001180 	.word	0x20001180
 800916c:	200010e0 	.word	0x200010e0
 8009170:	0800b308 	.word	0x0800b308

08009174 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3b04      	subs	r3, #4
 8009184:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800918c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	3b04      	subs	r3, #4
 8009192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	f023 0201 	bic.w	r2, r3, #1
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3b04      	subs	r3, #4
 80091a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80091a4:	4a0c      	ldr	r2, [pc, #48]	@ (80091d8 <pxPortInitialiseStack+0x64>)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	3b14      	subs	r3, #20
 80091ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3b04      	subs	r3, #4
 80091ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f06f 0202 	mvn.w	r2, #2
 80091c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	3b20      	subs	r3, #32
 80091c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80091ca:	68fb      	ldr	r3, [r7, #12]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	080091dd 	.word	0x080091dd

080091dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091e6:	4b13      	ldr	r3, [pc, #76]	@ (8009234 <prvTaskExitError+0x58>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ee:	d00b      	beq.n	8009208 <prvTaskExitError+0x2c>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	60fb      	str	r3, [r7, #12]
}
 8009202:	bf00      	nop
 8009204:	bf00      	nop
 8009206:	e7fd      	b.n	8009204 <prvTaskExitError+0x28>
	__asm volatile
 8009208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920c:	f383 8811 	msr	BASEPRI, r3
 8009210:	f3bf 8f6f 	isb	sy
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	60bb      	str	r3, [r7, #8]
}
 800921a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800921c:	bf00      	nop
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d0fc      	beq.n	800921e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009224:	bf00      	nop
 8009226:	bf00      	nop
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	20000014 	.word	0x20000014
	...

08009240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009240:	4b07      	ldr	r3, [pc, #28]	@ (8009260 <pxCurrentTCBConst2>)
 8009242:	6819      	ldr	r1, [r3, #0]
 8009244:	6808      	ldr	r0, [r1, #0]
 8009246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924a:	f380 8809 	msr	PSP, r0
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f04f 0000 	mov.w	r0, #0
 8009256:	f380 8811 	msr	BASEPRI, r0
 800925a:	4770      	bx	lr
 800925c:	f3af 8000 	nop.w

08009260 <pxCurrentTCBConst2>:
 8009260:	20000ba4 	.word	0x20000ba4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009264:	bf00      	nop
 8009266:	bf00      	nop

08009268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009268:	4808      	ldr	r0, [pc, #32]	@ (800928c <prvPortStartFirstTask+0x24>)
 800926a:	6800      	ldr	r0, [r0, #0]
 800926c:	6800      	ldr	r0, [r0, #0]
 800926e:	f380 8808 	msr	MSP, r0
 8009272:	f04f 0000 	mov.w	r0, #0
 8009276:	f380 8814 	msr	CONTROL, r0
 800927a:	b662      	cpsie	i
 800927c:	b661      	cpsie	f
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	df00      	svc	0
 8009288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800928a:	bf00      	nop
 800928c:	e000ed08 	.word	0xe000ed08

08009290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009296:	4b47      	ldr	r3, [pc, #284]	@ (80093b4 <xPortStartScheduler+0x124>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a47      	ldr	r2, [pc, #284]	@ (80093b8 <xPortStartScheduler+0x128>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d10b      	bne.n	80092b8 <xPortStartScheduler+0x28>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	60fb      	str	r3, [r7, #12]
}
 80092b2:	bf00      	nop
 80092b4:	bf00      	nop
 80092b6:	e7fd      	b.n	80092b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80092b8:	4b3e      	ldr	r3, [pc, #248]	@ (80093b4 <xPortStartScheduler+0x124>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a3f      	ldr	r2, [pc, #252]	@ (80093bc <xPortStartScheduler+0x12c>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d10b      	bne.n	80092da <xPortStartScheduler+0x4a>
	__asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	613b      	str	r3, [r7, #16]
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop
 80092d8:	e7fd      	b.n	80092d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092da:	4b39      	ldr	r3, [pc, #228]	@ (80093c0 <xPortStartScheduler+0x130>)
 80092dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	22ff      	movs	r2, #255	@ 0xff
 80092ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092f4:	78fb      	ldrb	r3, [r7, #3]
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	4b31      	ldr	r3, [pc, #196]	@ (80093c4 <xPortStartScheduler+0x134>)
 8009300:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009302:	4b31      	ldr	r3, [pc, #196]	@ (80093c8 <xPortStartScheduler+0x138>)
 8009304:	2207      	movs	r2, #7
 8009306:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009308:	e009      	b.n	800931e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800930a:	4b2f      	ldr	r3, [pc, #188]	@ (80093c8 <xPortStartScheduler+0x138>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3b01      	subs	r3, #1
 8009310:	4a2d      	ldr	r2, [pc, #180]	@ (80093c8 <xPortStartScheduler+0x138>)
 8009312:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009314:	78fb      	ldrb	r3, [r7, #3]
 8009316:	b2db      	uxtb	r3, r3
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	b2db      	uxtb	r3, r3
 800931c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800931e:	78fb      	ldrb	r3, [r7, #3]
 8009320:	b2db      	uxtb	r3, r3
 8009322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009326:	2b80      	cmp	r3, #128	@ 0x80
 8009328:	d0ef      	beq.n	800930a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800932a:	4b27      	ldr	r3, [pc, #156]	@ (80093c8 <xPortStartScheduler+0x138>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f1c3 0307 	rsb	r3, r3, #7
 8009332:	2b04      	cmp	r3, #4
 8009334:	d00b      	beq.n	800934e <xPortStartScheduler+0xbe>
	__asm volatile
 8009336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800933a:	f383 8811 	msr	BASEPRI, r3
 800933e:	f3bf 8f6f 	isb	sy
 8009342:	f3bf 8f4f 	dsb	sy
 8009346:	60bb      	str	r3, [r7, #8]
}
 8009348:	bf00      	nop
 800934a:	bf00      	nop
 800934c:	e7fd      	b.n	800934a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800934e:	4b1e      	ldr	r3, [pc, #120]	@ (80093c8 <xPortStartScheduler+0x138>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	021b      	lsls	r3, r3, #8
 8009354:	4a1c      	ldr	r2, [pc, #112]	@ (80093c8 <xPortStartScheduler+0x138>)
 8009356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009358:	4b1b      	ldr	r3, [pc, #108]	@ (80093c8 <xPortStartScheduler+0x138>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009360:	4a19      	ldr	r2, [pc, #100]	@ (80093c8 <xPortStartScheduler+0x138>)
 8009362:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	b2da      	uxtb	r2, r3
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800936c:	4b17      	ldr	r3, [pc, #92]	@ (80093cc <xPortStartScheduler+0x13c>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a16      	ldr	r2, [pc, #88]	@ (80093cc <xPortStartScheduler+0x13c>)
 8009372:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009378:	4b14      	ldr	r3, [pc, #80]	@ (80093cc <xPortStartScheduler+0x13c>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a13      	ldr	r2, [pc, #76]	@ (80093cc <xPortStartScheduler+0x13c>)
 800937e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009382:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009384:	f000 f8da 	bl	800953c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009388:	4b11      	ldr	r3, [pc, #68]	@ (80093d0 <xPortStartScheduler+0x140>)
 800938a:	2200      	movs	r2, #0
 800938c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800938e:	f000 f8f9 	bl	8009584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009392:	4b10      	ldr	r3, [pc, #64]	@ (80093d4 <xPortStartScheduler+0x144>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a0f      	ldr	r2, [pc, #60]	@ (80093d4 <xPortStartScheduler+0x144>)
 8009398:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800939c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800939e:	f7ff ff63 	bl	8009268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093a2:	f7ff f82d 	bl	8008400 <vTaskSwitchContext>
	prvTaskExitError();
 80093a6:	f7ff ff19 	bl	80091dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	e000ed00 	.word	0xe000ed00
 80093b8:	410fc271 	.word	0x410fc271
 80093bc:	410fc270 	.word	0x410fc270
 80093c0:	e000e400 	.word	0xe000e400
 80093c4:	200011d0 	.word	0x200011d0
 80093c8:	200011d4 	.word	0x200011d4
 80093cc:	e000ed20 	.word	0xe000ed20
 80093d0:	20000014 	.word	0x20000014
 80093d4:	e000ef34 	.word	0xe000ef34

080093d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	607b      	str	r3, [r7, #4]
}
 80093f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093f2:	4b10      	ldr	r3, [pc, #64]	@ (8009434 <vPortEnterCritical+0x5c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3301      	adds	r3, #1
 80093f8:	4a0e      	ldr	r2, [pc, #56]	@ (8009434 <vPortEnterCritical+0x5c>)
 80093fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009434 <vPortEnterCritical+0x5c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d110      	bne.n	8009426 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009404:	4b0c      	ldr	r3, [pc, #48]	@ (8009438 <vPortEnterCritical+0x60>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	b2db      	uxtb	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00b      	beq.n	8009426 <vPortEnterCritical+0x4e>
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	603b      	str	r3, [r7, #0]
}
 8009420:	bf00      	nop
 8009422:	bf00      	nop
 8009424:	e7fd      	b.n	8009422 <vPortEnterCritical+0x4a>
	}
}
 8009426:	bf00      	nop
 8009428:	370c      	adds	r7, #12
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	20000014 	.word	0x20000014
 8009438:	e000ed04 	.word	0xe000ed04

0800943c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009442:	4b12      	ldr	r3, [pc, #72]	@ (800948c <vPortExitCritical+0x50>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10b      	bne.n	8009462 <vPortExitCritical+0x26>
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	607b      	str	r3, [r7, #4]
}
 800945c:	bf00      	nop
 800945e:	bf00      	nop
 8009460:	e7fd      	b.n	800945e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009462:	4b0a      	ldr	r3, [pc, #40]	@ (800948c <vPortExitCritical+0x50>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3b01      	subs	r3, #1
 8009468:	4a08      	ldr	r2, [pc, #32]	@ (800948c <vPortExitCritical+0x50>)
 800946a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800946c:	4b07      	ldr	r3, [pc, #28]	@ (800948c <vPortExitCritical+0x50>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d105      	bne.n	8009480 <vPortExitCritical+0x44>
 8009474:	2300      	movs	r3, #0
 8009476:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	f383 8811 	msr	BASEPRI, r3
}
 800947e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr
 800948c:	20000014 	.word	0x20000014

08009490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009490:	f3ef 8009 	mrs	r0, PSP
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	4b15      	ldr	r3, [pc, #84]	@ (80094f0 <pxCurrentTCBConst>)
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	f01e 0f10 	tst.w	lr, #16
 80094a0:	bf08      	it	eq
 80094a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80094a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094aa:	6010      	str	r0, [r2, #0]
 80094ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80094b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80094b4:	f380 8811 	msr	BASEPRI, r0
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f7fe ff9e 	bl	8008400 <vTaskSwitchContext>
 80094c4:	f04f 0000 	mov.w	r0, #0
 80094c8:	f380 8811 	msr	BASEPRI, r0
 80094cc:	bc09      	pop	{r0, r3}
 80094ce:	6819      	ldr	r1, [r3, #0]
 80094d0:	6808      	ldr	r0, [r1, #0]
 80094d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d6:	f01e 0f10 	tst.w	lr, #16
 80094da:	bf08      	it	eq
 80094dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80094e0:	f380 8809 	msr	PSP, r0
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	f3af 8000 	nop.w

080094f0 <pxCurrentTCBConst>:
 80094f0:	20000ba4 	.word	0x20000ba4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094f4:	bf00      	nop
 80094f6:	bf00      	nop

080094f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
	__asm volatile
 80094fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	607b      	str	r3, [r7, #4]
}
 8009510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009512:	f7fe febb 	bl	800828c <xTaskIncrementTick>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d003      	beq.n	8009524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800951c:	4b06      	ldr	r3, [pc, #24]	@ (8009538 <xPortSysTickHandler+0x40>)
 800951e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009522:	601a      	str	r2, [r3, #0]
 8009524:	2300      	movs	r3, #0
 8009526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	f383 8811 	msr	BASEPRI, r3
}
 800952e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009530:	bf00      	nop
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	e000ed04 	.word	0xe000ed04

0800953c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800953c:	b480      	push	{r7}
 800953e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009540:	4b0b      	ldr	r3, [pc, #44]	@ (8009570 <vPortSetupTimerInterrupt+0x34>)
 8009542:	2200      	movs	r2, #0
 8009544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009546:	4b0b      	ldr	r3, [pc, #44]	@ (8009574 <vPortSetupTimerInterrupt+0x38>)
 8009548:	2200      	movs	r2, #0
 800954a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800954c:	4b0a      	ldr	r3, [pc, #40]	@ (8009578 <vPortSetupTimerInterrupt+0x3c>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a0a      	ldr	r2, [pc, #40]	@ (800957c <vPortSetupTimerInterrupt+0x40>)
 8009552:	fba2 2303 	umull	r2, r3, r2, r3
 8009556:	099b      	lsrs	r3, r3, #6
 8009558:	4a09      	ldr	r2, [pc, #36]	@ (8009580 <vPortSetupTimerInterrupt+0x44>)
 800955a:	3b01      	subs	r3, #1
 800955c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800955e:	4b04      	ldr	r3, [pc, #16]	@ (8009570 <vPortSetupTimerInterrupt+0x34>)
 8009560:	2207      	movs	r2, #7
 8009562:	601a      	str	r2, [r3, #0]
}
 8009564:	bf00      	nop
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	e000e010 	.word	0xe000e010
 8009574:	e000e018 	.word	0xe000e018
 8009578:	20000008 	.word	0x20000008
 800957c:	10624dd3 	.word	0x10624dd3
 8009580:	e000e014 	.word	0xe000e014

08009584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009584:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009594 <vPortEnableVFP+0x10>
 8009588:	6801      	ldr	r1, [r0, #0]
 800958a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800958e:	6001      	str	r1, [r0, #0]
 8009590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009592:	bf00      	nop
 8009594:	e000ed88 	.word	0xe000ed88

08009598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800959e:	f3ef 8305 	mrs	r3, IPSR
 80095a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2b0f      	cmp	r3, #15
 80095a8:	d915      	bls.n	80095d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80095aa:	4a18      	ldr	r2, [pc, #96]	@ (800960c <vPortValidateInterruptPriority+0x74>)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4413      	add	r3, r2
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80095b4:	4b16      	ldr	r3, [pc, #88]	@ (8009610 <vPortValidateInterruptPriority+0x78>)
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	7afa      	ldrb	r2, [r7, #11]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d20b      	bcs.n	80095d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80095be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	607b      	str	r3, [r7, #4]
}
 80095d0:	bf00      	nop
 80095d2:	bf00      	nop
 80095d4:	e7fd      	b.n	80095d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80095d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009614 <vPortValidateInterruptPriority+0x7c>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80095de:	4b0e      	ldr	r3, [pc, #56]	@ (8009618 <vPortValidateInterruptPriority+0x80>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d90b      	bls.n	80095fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	603b      	str	r3, [r7, #0]
}
 80095f8:	bf00      	nop
 80095fa:	bf00      	nop
 80095fc:	e7fd      	b.n	80095fa <vPortValidateInterruptPriority+0x62>
	}
 80095fe:	bf00      	nop
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	e000e3f0 	.word	0xe000e3f0
 8009610:	200011d0 	.word	0x200011d0
 8009614:	e000ed0c 	.word	0xe000ed0c
 8009618:	200011d4 	.word	0x200011d4

0800961c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b08a      	sub	sp, #40	@ 0x28
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009624:	2300      	movs	r3, #0
 8009626:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009628:	f7fe fd74 	bl	8008114 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800962c:	4b5c      	ldr	r3, [pc, #368]	@ (80097a0 <pvPortMalloc+0x184>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009634:	f000 f924 	bl	8009880 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009638:	4b5a      	ldr	r3, [pc, #360]	@ (80097a4 <pvPortMalloc+0x188>)
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4013      	ands	r3, r2
 8009640:	2b00      	cmp	r3, #0
 8009642:	f040 8095 	bne.w	8009770 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d01e      	beq.n	800968a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800964c:	2208      	movs	r2, #8
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4413      	add	r3, r2
 8009652:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f003 0307 	and.w	r3, r3, #7
 800965a:	2b00      	cmp	r3, #0
 800965c:	d015      	beq.n	800968a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f023 0307 	bic.w	r3, r3, #7
 8009664:	3308      	adds	r3, #8
 8009666:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f003 0307 	and.w	r3, r3, #7
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00b      	beq.n	800968a <pvPortMalloc+0x6e>
	__asm volatile
 8009672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009676:	f383 8811 	msr	BASEPRI, r3
 800967a:	f3bf 8f6f 	isb	sy
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	617b      	str	r3, [r7, #20]
}
 8009684:	bf00      	nop
 8009686:	bf00      	nop
 8009688:	e7fd      	b.n	8009686 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d06f      	beq.n	8009770 <pvPortMalloc+0x154>
 8009690:	4b45      	ldr	r3, [pc, #276]	@ (80097a8 <pvPortMalloc+0x18c>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	429a      	cmp	r2, r3
 8009698:	d86a      	bhi.n	8009770 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800969a:	4b44      	ldr	r3, [pc, #272]	@ (80097ac <pvPortMalloc+0x190>)
 800969c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800969e:	4b43      	ldr	r3, [pc, #268]	@ (80097ac <pvPortMalloc+0x190>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096a4:	e004      	b.n	80096b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80096a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d903      	bls.n	80096c2 <pvPortMalloc+0xa6>
 80096ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1f1      	bne.n	80096a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096c2:	4b37      	ldr	r3, [pc, #220]	@ (80097a0 <pvPortMalloc+0x184>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d051      	beq.n	8009770 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2208      	movs	r2, #8
 80096d2:	4413      	add	r3, r2
 80096d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	6a3b      	ldr	r3, [r7, #32]
 80096dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e0:	685a      	ldr	r2, [r3, #4]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	1ad2      	subs	r2, r2, r3
 80096e6:	2308      	movs	r3, #8
 80096e8:	005b      	lsls	r3, r3, #1
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d920      	bls.n	8009730 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4413      	add	r3, r2
 80096f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	f003 0307 	and.w	r3, r3, #7
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00b      	beq.n	8009718 <pvPortMalloc+0xfc>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	613b      	str	r3, [r7, #16]
}
 8009712:	bf00      	nop
 8009714:	bf00      	nop
 8009716:	e7fd      	b.n	8009714 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	1ad2      	subs	r2, r2, r3
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800972a:	69b8      	ldr	r0, [r7, #24]
 800972c:	f000 f90a 	bl	8009944 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009730:	4b1d      	ldr	r3, [pc, #116]	@ (80097a8 <pvPortMalloc+0x18c>)
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	4a1b      	ldr	r2, [pc, #108]	@ (80097a8 <pvPortMalloc+0x18c>)
 800973c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800973e:	4b1a      	ldr	r3, [pc, #104]	@ (80097a8 <pvPortMalloc+0x18c>)
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	4b1b      	ldr	r3, [pc, #108]	@ (80097b0 <pvPortMalloc+0x194>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d203      	bcs.n	8009752 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800974a:	4b17      	ldr	r3, [pc, #92]	@ (80097a8 <pvPortMalloc+0x18c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a18      	ldr	r2, [pc, #96]	@ (80097b0 <pvPortMalloc+0x194>)
 8009750:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009754:	685a      	ldr	r2, [r3, #4]
 8009756:	4b13      	ldr	r3, [pc, #76]	@ (80097a4 <pvPortMalloc+0x188>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	431a      	orrs	r2, r3
 800975c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009762:	2200      	movs	r2, #0
 8009764:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009766:	4b13      	ldr	r3, [pc, #76]	@ (80097b4 <pvPortMalloc+0x198>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	3301      	adds	r3, #1
 800976c:	4a11      	ldr	r2, [pc, #68]	@ (80097b4 <pvPortMalloc+0x198>)
 800976e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009770:	f7fe fcde 	bl	8008130 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00b      	beq.n	8009796 <pvPortMalloc+0x17a>
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	60fb      	str	r3, [r7, #12]
}
 8009790:	bf00      	nop
 8009792:	bf00      	nop
 8009794:	e7fd      	b.n	8009792 <pvPortMalloc+0x176>
	return pvReturn;
 8009796:	69fb      	ldr	r3, [r7, #28]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3728      	adds	r7, #40	@ 0x28
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	20002c70 	.word	0x20002c70
 80097a4:	20002c84 	.word	0x20002c84
 80097a8:	20002c74 	.word	0x20002c74
 80097ac:	20002c68 	.word	0x20002c68
 80097b0:	20002c78 	.word	0x20002c78
 80097b4:	20002c7c 	.word	0x20002c7c

080097b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d04f      	beq.n	800986a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097ca:	2308      	movs	r3, #8
 80097cc:	425b      	negs	r3, r3
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	4413      	add	r3, r2
 80097d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	4b25      	ldr	r3, [pc, #148]	@ (8009874 <vPortFree+0xbc>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4013      	ands	r3, r2
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10b      	bne.n	80097fe <vPortFree+0x46>
	__asm volatile
 80097e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	60fb      	str	r3, [r7, #12]
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	e7fd      	b.n	80097fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00b      	beq.n	800981e <vPortFree+0x66>
	__asm volatile
 8009806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	60bb      	str	r3, [r7, #8]
}
 8009818:	bf00      	nop
 800981a:	bf00      	nop
 800981c:	e7fd      	b.n	800981a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	685a      	ldr	r2, [r3, #4]
 8009822:	4b14      	ldr	r3, [pc, #80]	@ (8009874 <vPortFree+0xbc>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4013      	ands	r3, r2
 8009828:	2b00      	cmp	r3, #0
 800982a:	d01e      	beq.n	800986a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d11a      	bne.n	800986a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	685a      	ldr	r2, [r3, #4]
 8009838:	4b0e      	ldr	r3, [pc, #56]	@ (8009874 <vPortFree+0xbc>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	43db      	mvns	r3, r3
 800983e:	401a      	ands	r2, r3
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009844:	f7fe fc66 	bl	8008114 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	4b0a      	ldr	r3, [pc, #40]	@ (8009878 <vPortFree+0xc0>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4413      	add	r3, r2
 8009852:	4a09      	ldr	r2, [pc, #36]	@ (8009878 <vPortFree+0xc0>)
 8009854:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009856:	6938      	ldr	r0, [r7, #16]
 8009858:	f000 f874 	bl	8009944 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800985c:	4b07      	ldr	r3, [pc, #28]	@ (800987c <vPortFree+0xc4>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3301      	adds	r3, #1
 8009862:	4a06      	ldr	r2, [pc, #24]	@ (800987c <vPortFree+0xc4>)
 8009864:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009866:	f7fe fc63 	bl	8008130 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800986a:	bf00      	nop
 800986c:	3718      	adds	r7, #24
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	20002c84 	.word	0x20002c84
 8009878:	20002c74 	.word	0x20002c74
 800987c:	20002c80 	.word	0x20002c80

08009880 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009886:	f641 2390 	movw	r3, #6800	@ 0x1a90
 800988a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800988c:	4b27      	ldr	r3, [pc, #156]	@ (800992c <prvHeapInit+0xac>)
 800988e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f003 0307 	and.w	r3, r3, #7
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00c      	beq.n	80098b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3307      	adds	r3, #7
 800989e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f023 0307 	bic.w	r3, r3, #7
 80098a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	4a1f      	ldr	r2, [pc, #124]	@ (800992c <prvHeapInit+0xac>)
 80098b0:	4413      	add	r3, r2
 80098b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009930 <prvHeapInit+0xb0>)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098be:	4b1c      	ldr	r3, [pc, #112]	@ (8009930 <prvHeapInit+0xb0>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	4413      	add	r3, r2
 80098ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098cc:	2208      	movs	r2, #8
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	1a9b      	subs	r3, r3, r2
 80098d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f023 0307 	bic.w	r3, r3, #7
 80098da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4a15      	ldr	r2, [pc, #84]	@ (8009934 <prvHeapInit+0xb4>)
 80098e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80098e2:	4b14      	ldr	r3, [pc, #80]	@ (8009934 <prvHeapInit+0xb4>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2200      	movs	r2, #0
 80098e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80098ea:	4b12      	ldr	r3, [pc, #72]	@ (8009934 <prvHeapInit+0xb4>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2200      	movs	r2, #0
 80098f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	1ad2      	subs	r2, r2, r3
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009900:	4b0c      	ldr	r3, [pc, #48]	@ (8009934 <prvHeapInit+0xb4>)
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	4a0a      	ldr	r2, [pc, #40]	@ (8009938 <prvHeapInit+0xb8>)
 800990e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	4a09      	ldr	r2, [pc, #36]	@ (800993c <prvHeapInit+0xbc>)
 8009916:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009918:	4b09      	ldr	r3, [pc, #36]	@ (8009940 <prvHeapInit+0xc0>)
 800991a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800991e:	601a      	str	r2, [r3, #0]
}
 8009920:	bf00      	nop
 8009922:	3714      	adds	r7, #20
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	200011d8 	.word	0x200011d8
 8009930:	20002c68 	.word	0x20002c68
 8009934:	20002c70 	.word	0x20002c70
 8009938:	20002c78 	.word	0x20002c78
 800993c:	20002c74 	.word	0x20002c74
 8009940:	20002c84 	.word	0x20002c84

08009944 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800994c:	4b28      	ldr	r3, [pc, #160]	@ (80099f0 <prvInsertBlockIntoFreeList+0xac>)
 800994e:	60fb      	str	r3, [r7, #12]
 8009950:	e002      	b.n	8009958 <prvInsertBlockIntoFreeList+0x14>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	60fb      	str	r3, [r7, #12]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	429a      	cmp	r2, r3
 8009960:	d8f7      	bhi.n	8009952 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	4413      	add	r3, r2
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	429a      	cmp	r2, r3
 8009972:	d108      	bne.n	8009986 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	441a      	add	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	441a      	add	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	d118      	bne.n	80099cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	4b15      	ldr	r3, [pc, #84]	@ (80099f4 <prvInsertBlockIntoFreeList+0xb0>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d00d      	beq.n	80099c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	685a      	ldr	r2, [r3, #4]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	441a      	add	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	601a      	str	r2, [r3, #0]
 80099c0:	e008      	b.n	80099d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099c2:	4b0c      	ldr	r3, [pc, #48]	@ (80099f4 <prvInsertBlockIntoFreeList+0xb0>)
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	601a      	str	r2, [r3, #0]
 80099ca:	e003      	b.n	80099d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d002      	beq.n	80099e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099e2:	bf00      	nop
 80099e4:	3714      	adds	r7, #20
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	20002c68 	.word	0x20002c68
 80099f4:	20002c70 	.word	0x20002c70

080099f8 <atoi>:
 80099f8:	220a      	movs	r2, #10
 80099fa:	2100      	movs	r1, #0
 80099fc:	f000 b87a 	b.w	8009af4 <strtol>

08009a00 <_strtol_l.isra.0>:
 8009a00:	2b24      	cmp	r3, #36	@ 0x24
 8009a02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a06:	4686      	mov	lr, r0
 8009a08:	4690      	mov	r8, r2
 8009a0a:	d801      	bhi.n	8009a10 <_strtol_l.isra.0+0x10>
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d106      	bne.n	8009a1e <_strtol_l.isra.0+0x1e>
 8009a10:	f000 fabe 	bl	8009f90 <__errno>
 8009a14:	2316      	movs	r3, #22
 8009a16:	6003      	str	r3, [r0, #0]
 8009a18:	2000      	movs	r0, #0
 8009a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1e:	4834      	ldr	r0, [pc, #208]	@ (8009af0 <_strtol_l.isra.0+0xf0>)
 8009a20:	460d      	mov	r5, r1
 8009a22:	462a      	mov	r2, r5
 8009a24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a28:	5d06      	ldrb	r6, [r0, r4]
 8009a2a:	f016 0608 	ands.w	r6, r6, #8
 8009a2e:	d1f8      	bne.n	8009a22 <_strtol_l.isra.0+0x22>
 8009a30:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a32:	d110      	bne.n	8009a56 <_strtol_l.isra.0+0x56>
 8009a34:	782c      	ldrb	r4, [r5, #0]
 8009a36:	2601      	movs	r6, #1
 8009a38:	1c95      	adds	r5, r2, #2
 8009a3a:	f033 0210 	bics.w	r2, r3, #16
 8009a3e:	d115      	bne.n	8009a6c <_strtol_l.isra.0+0x6c>
 8009a40:	2c30      	cmp	r4, #48	@ 0x30
 8009a42:	d10d      	bne.n	8009a60 <_strtol_l.isra.0+0x60>
 8009a44:	782a      	ldrb	r2, [r5, #0]
 8009a46:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a4a:	2a58      	cmp	r2, #88	@ 0x58
 8009a4c:	d108      	bne.n	8009a60 <_strtol_l.isra.0+0x60>
 8009a4e:	786c      	ldrb	r4, [r5, #1]
 8009a50:	3502      	adds	r5, #2
 8009a52:	2310      	movs	r3, #16
 8009a54:	e00a      	b.n	8009a6c <_strtol_l.isra.0+0x6c>
 8009a56:	2c2b      	cmp	r4, #43	@ 0x2b
 8009a58:	bf04      	itt	eq
 8009a5a:	782c      	ldrbeq	r4, [r5, #0]
 8009a5c:	1c95      	addeq	r5, r2, #2
 8009a5e:	e7ec      	b.n	8009a3a <_strtol_l.isra.0+0x3a>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d1f6      	bne.n	8009a52 <_strtol_l.isra.0+0x52>
 8009a64:	2c30      	cmp	r4, #48	@ 0x30
 8009a66:	bf14      	ite	ne
 8009a68:	230a      	movne	r3, #10
 8009a6a:	2308      	moveq	r3, #8
 8009a6c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a70:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009a74:	2200      	movs	r2, #0
 8009a76:	fbbc f9f3 	udiv	r9, ip, r3
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009a80:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009a84:	2f09      	cmp	r7, #9
 8009a86:	d80f      	bhi.n	8009aa8 <_strtol_l.isra.0+0xa8>
 8009a88:	463c      	mov	r4, r7
 8009a8a:	42a3      	cmp	r3, r4
 8009a8c:	dd1b      	ble.n	8009ac6 <_strtol_l.isra.0+0xc6>
 8009a8e:	1c57      	adds	r7, r2, #1
 8009a90:	d007      	beq.n	8009aa2 <_strtol_l.isra.0+0xa2>
 8009a92:	4581      	cmp	r9, r0
 8009a94:	d314      	bcc.n	8009ac0 <_strtol_l.isra.0+0xc0>
 8009a96:	d101      	bne.n	8009a9c <_strtol_l.isra.0+0x9c>
 8009a98:	45a2      	cmp	sl, r4
 8009a9a:	db11      	blt.n	8009ac0 <_strtol_l.isra.0+0xc0>
 8009a9c:	fb00 4003 	mla	r0, r0, r3, r4
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009aa6:	e7eb      	b.n	8009a80 <_strtol_l.isra.0+0x80>
 8009aa8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009aac:	2f19      	cmp	r7, #25
 8009aae:	d801      	bhi.n	8009ab4 <_strtol_l.isra.0+0xb4>
 8009ab0:	3c37      	subs	r4, #55	@ 0x37
 8009ab2:	e7ea      	b.n	8009a8a <_strtol_l.isra.0+0x8a>
 8009ab4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009ab8:	2f19      	cmp	r7, #25
 8009aba:	d804      	bhi.n	8009ac6 <_strtol_l.isra.0+0xc6>
 8009abc:	3c57      	subs	r4, #87	@ 0x57
 8009abe:	e7e4      	b.n	8009a8a <_strtol_l.isra.0+0x8a>
 8009ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac4:	e7ed      	b.n	8009aa2 <_strtol_l.isra.0+0xa2>
 8009ac6:	1c53      	adds	r3, r2, #1
 8009ac8:	d108      	bne.n	8009adc <_strtol_l.isra.0+0xdc>
 8009aca:	2322      	movs	r3, #34	@ 0x22
 8009acc:	f8ce 3000 	str.w	r3, [lr]
 8009ad0:	4660      	mov	r0, ip
 8009ad2:	f1b8 0f00 	cmp.w	r8, #0
 8009ad6:	d0a0      	beq.n	8009a1a <_strtol_l.isra.0+0x1a>
 8009ad8:	1e69      	subs	r1, r5, #1
 8009ada:	e006      	b.n	8009aea <_strtol_l.isra.0+0xea>
 8009adc:	b106      	cbz	r6, 8009ae0 <_strtol_l.isra.0+0xe0>
 8009ade:	4240      	negs	r0, r0
 8009ae0:	f1b8 0f00 	cmp.w	r8, #0
 8009ae4:	d099      	beq.n	8009a1a <_strtol_l.isra.0+0x1a>
 8009ae6:	2a00      	cmp	r2, #0
 8009ae8:	d1f6      	bne.n	8009ad8 <_strtol_l.isra.0+0xd8>
 8009aea:	f8c8 1000 	str.w	r1, [r8]
 8009aee:	e794      	b.n	8009a1a <_strtol_l.isra.0+0x1a>
 8009af0:	0800b839 	.word	0x0800b839

08009af4 <strtol>:
 8009af4:	4613      	mov	r3, r2
 8009af6:	460a      	mov	r2, r1
 8009af8:	4601      	mov	r1, r0
 8009afa:	4802      	ldr	r0, [pc, #8]	@ (8009b04 <strtol+0x10>)
 8009afc:	6800      	ldr	r0, [r0, #0]
 8009afe:	f7ff bf7f 	b.w	8009a00 <_strtol_l.isra.0>
 8009b02:	bf00      	nop
 8009b04:	20000024 	.word	0x20000024

08009b08 <std>:
 8009b08:	2300      	movs	r3, #0
 8009b0a:	b510      	push	{r4, lr}
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b16:	6083      	str	r3, [r0, #8]
 8009b18:	8181      	strh	r1, [r0, #12]
 8009b1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b1c:	81c2      	strh	r2, [r0, #14]
 8009b1e:	6183      	str	r3, [r0, #24]
 8009b20:	4619      	mov	r1, r3
 8009b22:	2208      	movs	r2, #8
 8009b24:	305c      	adds	r0, #92	@ 0x5c
 8009b26:	f000 f92a 	bl	8009d7e <memset>
 8009b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b60 <std+0x58>)
 8009b2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b64 <std+0x5c>)
 8009b30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b32:	4b0d      	ldr	r3, [pc, #52]	@ (8009b68 <std+0x60>)
 8009b34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b36:	4b0d      	ldr	r3, [pc, #52]	@ (8009b6c <std+0x64>)
 8009b38:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b70 <std+0x68>)
 8009b3c:	6224      	str	r4, [r4, #32]
 8009b3e:	429c      	cmp	r4, r3
 8009b40:	d006      	beq.n	8009b50 <std+0x48>
 8009b42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b46:	4294      	cmp	r4, r2
 8009b48:	d002      	beq.n	8009b50 <std+0x48>
 8009b4a:	33d0      	adds	r3, #208	@ 0xd0
 8009b4c:	429c      	cmp	r4, r3
 8009b4e:	d105      	bne.n	8009b5c <std+0x54>
 8009b50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b58:	f000 ba44 	b.w	8009fe4 <__retarget_lock_init_recursive>
 8009b5c:	bd10      	pop	{r4, pc}
 8009b5e:	bf00      	nop
 8009b60:	08009cf9 	.word	0x08009cf9
 8009b64:	08009d1b 	.word	0x08009d1b
 8009b68:	08009d53 	.word	0x08009d53
 8009b6c:	08009d77 	.word	0x08009d77
 8009b70:	20002c88 	.word	0x20002c88

08009b74 <stdio_exit_handler>:
 8009b74:	4a02      	ldr	r2, [pc, #8]	@ (8009b80 <stdio_exit_handler+0xc>)
 8009b76:	4903      	ldr	r1, [pc, #12]	@ (8009b84 <stdio_exit_handler+0x10>)
 8009b78:	4803      	ldr	r0, [pc, #12]	@ (8009b88 <stdio_exit_handler+0x14>)
 8009b7a:	f000 b869 	b.w	8009c50 <_fwalk_sglue>
 8009b7e:	bf00      	nop
 8009b80:	20000018 	.word	0x20000018
 8009b84:	0800a915 	.word	0x0800a915
 8009b88:	20000028 	.word	0x20000028

08009b8c <cleanup_stdio>:
 8009b8c:	6841      	ldr	r1, [r0, #4]
 8009b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc0 <cleanup_stdio+0x34>)
 8009b90:	4299      	cmp	r1, r3
 8009b92:	b510      	push	{r4, lr}
 8009b94:	4604      	mov	r4, r0
 8009b96:	d001      	beq.n	8009b9c <cleanup_stdio+0x10>
 8009b98:	f000 febc 	bl	800a914 <_fflush_r>
 8009b9c:	68a1      	ldr	r1, [r4, #8]
 8009b9e:	4b09      	ldr	r3, [pc, #36]	@ (8009bc4 <cleanup_stdio+0x38>)
 8009ba0:	4299      	cmp	r1, r3
 8009ba2:	d002      	beq.n	8009baa <cleanup_stdio+0x1e>
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f000 feb5 	bl	800a914 <_fflush_r>
 8009baa:	68e1      	ldr	r1, [r4, #12]
 8009bac:	4b06      	ldr	r3, [pc, #24]	@ (8009bc8 <cleanup_stdio+0x3c>)
 8009bae:	4299      	cmp	r1, r3
 8009bb0:	d004      	beq.n	8009bbc <cleanup_stdio+0x30>
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb8:	f000 beac 	b.w	800a914 <_fflush_r>
 8009bbc:	bd10      	pop	{r4, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20002c88 	.word	0x20002c88
 8009bc4:	20002cf0 	.word	0x20002cf0
 8009bc8:	20002d58 	.word	0x20002d58

08009bcc <global_stdio_init.part.0>:
 8009bcc:	b510      	push	{r4, lr}
 8009bce:	4b0b      	ldr	r3, [pc, #44]	@ (8009bfc <global_stdio_init.part.0+0x30>)
 8009bd0:	4c0b      	ldr	r4, [pc, #44]	@ (8009c00 <global_stdio_init.part.0+0x34>)
 8009bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8009c04 <global_stdio_init.part.0+0x38>)
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2104      	movs	r1, #4
 8009bdc:	f7ff ff94 	bl	8009b08 <std>
 8009be0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009be4:	2201      	movs	r2, #1
 8009be6:	2109      	movs	r1, #9
 8009be8:	f7ff ff8e 	bl	8009b08 <std>
 8009bec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf6:	2112      	movs	r1, #18
 8009bf8:	f7ff bf86 	b.w	8009b08 <std>
 8009bfc:	20002dc0 	.word	0x20002dc0
 8009c00:	20002c88 	.word	0x20002c88
 8009c04:	08009b75 	.word	0x08009b75

08009c08 <__sfp_lock_acquire>:
 8009c08:	4801      	ldr	r0, [pc, #4]	@ (8009c10 <__sfp_lock_acquire+0x8>)
 8009c0a:	f000 b9ec 	b.w	8009fe6 <__retarget_lock_acquire_recursive>
 8009c0e:	bf00      	nop
 8009c10:	20002dc9 	.word	0x20002dc9

08009c14 <__sfp_lock_release>:
 8009c14:	4801      	ldr	r0, [pc, #4]	@ (8009c1c <__sfp_lock_release+0x8>)
 8009c16:	f000 b9e7 	b.w	8009fe8 <__retarget_lock_release_recursive>
 8009c1a:	bf00      	nop
 8009c1c:	20002dc9 	.word	0x20002dc9

08009c20 <__sinit>:
 8009c20:	b510      	push	{r4, lr}
 8009c22:	4604      	mov	r4, r0
 8009c24:	f7ff fff0 	bl	8009c08 <__sfp_lock_acquire>
 8009c28:	6a23      	ldr	r3, [r4, #32]
 8009c2a:	b11b      	cbz	r3, 8009c34 <__sinit+0x14>
 8009c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c30:	f7ff bff0 	b.w	8009c14 <__sfp_lock_release>
 8009c34:	4b04      	ldr	r3, [pc, #16]	@ (8009c48 <__sinit+0x28>)
 8009c36:	6223      	str	r3, [r4, #32]
 8009c38:	4b04      	ldr	r3, [pc, #16]	@ (8009c4c <__sinit+0x2c>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1f5      	bne.n	8009c2c <__sinit+0xc>
 8009c40:	f7ff ffc4 	bl	8009bcc <global_stdio_init.part.0>
 8009c44:	e7f2      	b.n	8009c2c <__sinit+0xc>
 8009c46:	bf00      	nop
 8009c48:	08009b8d 	.word	0x08009b8d
 8009c4c:	20002dc0 	.word	0x20002dc0

08009c50 <_fwalk_sglue>:
 8009c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c54:	4607      	mov	r7, r0
 8009c56:	4688      	mov	r8, r1
 8009c58:	4614      	mov	r4, r2
 8009c5a:	2600      	movs	r6, #0
 8009c5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c60:	f1b9 0901 	subs.w	r9, r9, #1
 8009c64:	d505      	bpl.n	8009c72 <_fwalk_sglue+0x22>
 8009c66:	6824      	ldr	r4, [r4, #0]
 8009c68:	2c00      	cmp	r4, #0
 8009c6a:	d1f7      	bne.n	8009c5c <_fwalk_sglue+0xc>
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c72:	89ab      	ldrh	r3, [r5, #12]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d907      	bls.n	8009c88 <_fwalk_sglue+0x38>
 8009c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	d003      	beq.n	8009c88 <_fwalk_sglue+0x38>
 8009c80:	4629      	mov	r1, r5
 8009c82:	4638      	mov	r0, r7
 8009c84:	47c0      	blx	r8
 8009c86:	4306      	orrs	r6, r0
 8009c88:	3568      	adds	r5, #104	@ 0x68
 8009c8a:	e7e9      	b.n	8009c60 <_fwalk_sglue+0x10>

08009c8c <sniprintf>:
 8009c8c:	b40c      	push	{r2, r3}
 8009c8e:	b530      	push	{r4, r5, lr}
 8009c90:	4b18      	ldr	r3, [pc, #96]	@ (8009cf4 <sniprintf+0x68>)
 8009c92:	1e0c      	subs	r4, r1, #0
 8009c94:	681d      	ldr	r5, [r3, #0]
 8009c96:	b09d      	sub	sp, #116	@ 0x74
 8009c98:	da08      	bge.n	8009cac <sniprintf+0x20>
 8009c9a:	238b      	movs	r3, #139	@ 0x8b
 8009c9c:	602b      	str	r3, [r5, #0]
 8009c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca2:	b01d      	add	sp, #116	@ 0x74
 8009ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ca8:	b002      	add	sp, #8
 8009caa:	4770      	bx	lr
 8009cac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009cb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009cb4:	f04f 0300 	mov.w	r3, #0
 8009cb8:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009cba:	bf14      	ite	ne
 8009cbc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009cc0:	4623      	moveq	r3, r4
 8009cc2:	9304      	str	r3, [sp, #16]
 8009cc4:	9307      	str	r3, [sp, #28]
 8009cc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009cca:	9002      	str	r0, [sp, #8]
 8009ccc:	9006      	str	r0, [sp, #24]
 8009cce:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009cd2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009cd4:	ab21      	add	r3, sp, #132	@ 0x84
 8009cd6:	a902      	add	r1, sp, #8
 8009cd8:	4628      	mov	r0, r5
 8009cda:	9301      	str	r3, [sp, #4]
 8009cdc:	f000 fb0e 	bl	800a2fc <_svfiprintf_r>
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	bfbc      	itt	lt
 8009ce4:	238b      	movlt	r3, #139	@ 0x8b
 8009ce6:	602b      	strlt	r3, [r5, #0]
 8009ce8:	2c00      	cmp	r4, #0
 8009cea:	d0da      	beq.n	8009ca2 <sniprintf+0x16>
 8009cec:	9b02      	ldr	r3, [sp, #8]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	701a      	strb	r2, [r3, #0]
 8009cf2:	e7d6      	b.n	8009ca2 <sniprintf+0x16>
 8009cf4:	20000024 	.word	0x20000024

08009cf8 <__sread>:
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d00:	f000 f922 	bl	8009f48 <_read_r>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	bfab      	itete	ge
 8009d08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d0c:	181b      	addge	r3, r3, r0
 8009d0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d12:	bfac      	ite	ge
 8009d14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d16:	81a3      	strhlt	r3, [r4, #12]
 8009d18:	bd10      	pop	{r4, pc}

08009d1a <__swrite>:
 8009d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1e:	461f      	mov	r7, r3
 8009d20:	898b      	ldrh	r3, [r1, #12]
 8009d22:	05db      	lsls	r3, r3, #23
 8009d24:	4605      	mov	r5, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	4616      	mov	r6, r2
 8009d2a:	d505      	bpl.n	8009d38 <__swrite+0x1e>
 8009d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d30:	2302      	movs	r3, #2
 8009d32:	2200      	movs	r2, #0
 8009d34:	f000 f8f6 	bl	8009f24 <_lseek_r>
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d42:	81a3      	strh	r3, [r4, #12]
 8009d44:	4632      	mov	r2, r6
 8009d46:	463b      	mov	r3, r7
 8009d48:	4628      	mov	r0, r5
 8009d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d4e:	f000 b90d 	b.w	8009f6c <_write_r>

08009d52 <__sseek>:
 8009d52:	b510      	push	{r4, lr}
 8009d54:	460c      	mov	r4, r1
 8009d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d5a:	f000 f8e3 	bl	8009f24 <_lseek_r>
 8009d5e:	1c43      	adds	r3, r0, #1
 8009d60:	89a3      	ldrh	r3, [r4, #12]
 8009d62:	bf15      	itete	ne
 8009d64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d6e:	81a3      	strheq	r3, [r4, #12]
 8009d70:	bf18      	it	ne
 8009d72:	81a3      	strhne	r3, [r4, #12]
 8009d74:	bd10      	pop	{r4, pc}

08009d76 <__sclose>:
 8009d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d7a:	f000 b865 	b.w	8009e48 <_close_r>

08009d7e <memset>:
 8009d7e:	4402      	add	r2, r0
 8009d80:	4603      	mov	r3, r0
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d100      	bne.n	8009d88 <memset+0xa>
 8009d86:	4770      	bx	lr
 8009d88:	f803 1b01 	strb.w	r1, [r3], #1
 8009d8c:	e7f9      	b.n	8009d82 <memset+0x4>
	...

08009d90 <strtok>:
 8009d90:	4b16      	ldr	r3, [pc, #88]	@ (8009dec <strtok+0x5c>)
 8009d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d96:	681f      	ldr	r7, [r3, #0]
 8009d98:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	460e      	mov	r6, r1
 8009d9e:	b9ec      	cbnz	r4, 8009ddc <strtok+0x4c>
 8009da0:	2050      	movs	r0, #80	@ 0x50
 8009da2:	f000 f999 	bl	800a0d8 <malloc>
 8009da6:	4602      	mov	r2, r0
 8009da8:	6478      	str	r0, [r7, #68]	@ 0x44
 8009daa:	b920      	cbnz	r0, 8009db6 <strtok+0x26>
 8009dac:	4b10      	ldr	r3, [pc, #64]	@ (8009df0 <strtok+0x60>)
 8009dae:	4811      	ldr	r0, [pc, #68]	@ (8009df4 <strtok+0x64>)
 8009db0:	215b      	movs	r1, #91	@ 0x5b
 8009db2:	f000 f929 	bl	800a008 <__assert_func>
 8009db6:	e9c0 4400 	strd	r4, r4, [r0]
 8009dba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009dbe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009dc2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009dc6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009dca:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009dce:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009dd2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009dd6:	6184      	str	r4, [r0, #24]
 8009dd8:	7704      	strb	r4, [r0, #28]
 8009dda:	6244      	str	r4, [r0, #36]	@ 0x24
 8009ddc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dde:	4631      	mov	r1, r6
 8009de0:	4628      	mov	r0, r5
 8009de2:	2301      	movs	r3, #1
 8009de4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009de8:	f000 b806 	b.w	8009df8 <__strtok_r>
 8009dec:	20000024 	.word	0x20000024
 8009df0:	0800b939 	.word	0x0800b939
 8009df4:	0800b950 	.word	0x0800b950

08009df8 <__strtok_r>:
 8009df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	b908      	cbnz	r0, 8009e02 <__strtok_r+0xa>
 8009dfe:	6814      	ldr	r4, [r2, #0]
 8009e00:	b144      	cbz	r4, 8009e14 <__strtok_r+0x1c>
 8009e02:	4620      	mov	r0, r4
 8009e04:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009e08:	460f      	mov	r7, r1
 8009e0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009e0e:	b91e      	cbnz	r6, 8009e18 <__strtok_r+0x20>
 8009e10:	b965      	cbnz	r5, 8009e2c <__strtok_r+0x34>
 8009e12:	6015      	str	r5, [r2, #0]
 8009e14:	2000      	movs	r0, #0
 8009e16:	e005      	b.n	8009e24 <__strtok_r+0x2c>
 8009e18:	42b5      	cmp	r5, r6
 8009e1a:	d1f6      	bne.n	8009e0a <__strtok_r+0x12>
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1f0      	bne.n	8009e02 <__strtok_r+0xa>
 8009e20:	6014      	str	r4, [r2, #0]
 8009e22:	7003      	strb	r3, [r0, #0]
 8009e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e26:	461c      	mov	r4, r3
 8009e28:	e00c      	b.n	8009e44 <__strtok_r+0x4c>
 8009e2a:	b91d      	cbnz	r5, 8009e34 <__strtok_r+0x3c>
 8009e2c:	4627      	mov	r7, r4
 8009e2e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009e32:	460e      	mov	r6, r1
 8009e34:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009e38:	42ab      	cmp	r3, r5
 8009e3a:	d1f6      	bne.n	8009e2a <__strtok_r+0x32>
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d0f2      	beq.n	8009e26 <__strtok_r+0x2e>
 8009e40:	2300      	movs	r3, #0
 8009e42:	703b      	strb	r3, [r7, #0]
 8009e44:	6014      	str	r4, [r2, #0]
 8009e46:	e7ed      	b.n	8009e24 <__strtok_r+0x2c>

08009e48 <_close_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4d06      	ldr	r5, [pc, #24]	@ (8009e64 <_close_r+0x1c>)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	4604      	mov	r4, r0
 8009e50:	4608      	mov	r0, r1
 8009e52:	602b      	str	r3, [r5, #0]
 8009e54:	f7f7 fcae 	bl	80017b4 <_close>
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d102      	bne.n	8009e62 <_close_r+0x1a>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	b103      	cbz	r3, 8009e62 <_close_r+0x1a>
 8009e60:	6023      	str	r3, [r4, #0]
 8009e62:	bd38      	pop	{r3, r4, r5, pc}
 8009e64:	20002dc4 	.word	0x20002dc4

08009e68 <_reclaim_reent>:
 8009e68:	4b2d      	ldr	r3, [pc, #180]	@ (8009f20 <_reclaim_reent+0xb8>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4283      	cmp	r3, r0
 8009e6e:	b570      	push	{r4, r5, r6, lr}
 8009e70:	4604      	mov	r4, r0
 8009e72:	d053      	beq.n	8009f1c <_reclaim_reent+0xb4>
 8009e74:	69c3      	ldr	r3, [r0, #28]
 8009e76:	b31b      	cbz	r3, 8009ec0 <_reclaim_reent+0x58>
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	b163      	cbz	r3, 8009e96 <_reclaim_reent+0x2e>
 8009e7c:	2500      	movs	r5, #0
 8009e7e:	69e3      	ldr	r3, [r4, #28]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	5959      	ldr	r1, [r3, r5]
 8009e84:	b9b1      	cbnz	r1, 8009eb4 <_reclaim_reent+0x4c>
 8009e86:	3504      	adds	r5, #4
 8009e88:	2d80      	cmp	r5, #128	@ 0x80
 8009e8a:	d1f8      	bne.n	8009e7e <_reclaim_reent+0x16>
 8009e8c:	69e3      	ldr	r3, [r4, #28]
 8009e8e:	4620      	mov	r0, r4
 8009e90:	68d9      	ldr	r1, [r3, #12]
 8009e92:	f000 f8d7 	bl	800a044 <_free_r>
 8009e96:	69e3      	ldr	r3, [r4, #28]
 8009e98:	6819      	ldr	r1, [r3, #0]
 8009e9a:	b111      	cbz	r1, 8009ea2 <_reclaim_reent+0x3a>
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f000 f8d1 	bl	800a044 <_free_r>
 8009ea2:	69e3      	ldr	r3, [r4, #28]
 8009ea4:	689d      	ldr	r5, [r3, #8]
 8009ea6:	b15d      	cbz	r5, 8009ec0 <_reclaim_reent+0x58>
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	4620      	mov	r0, r4
 8009eac:	682d      	ldr	r5, [r5, #0]
 8009eae:	f000 f8c9 	bl	800a044 <_free_r>
 8009eb2:	e7f8      	b.n	8009ea6 <_reclaim_reent+0x3e>
 8009eb4:	680e      	ldr	r6, [r1, #0]
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f000 f8c4 	bl	800a044 <_free_r>
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	e7e1      	b.n	8009e84 <_reclaim_reent+0x1c>
 8009ec0:	6961      	ldr	r1, [r4, #20]
 8009ec2:	b111      	cbz	r1, 8009eca <_reclaim_reent+0x62>
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f000 f8bd 	bl	800a044 <_free_r>
 8009eca:	69e1      	ldr	r1, [r4, #28]
 8009ecc:	b111      	cbz	r1, 8009ed4 <_reclaim_reent+0x6c>
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f000 f8b8 	bl	800a044 <_free_r>
 8009ed4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009ed6:	b111      	cbz	r1, 8009ede <_reclaim_reent+0x76>
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f000 f8b3 	bl	800a044 <_free_r>
 8009ede:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ee0:	b111      	cbz	r1, 8009ee8 <_reclaim_reent+0x80>
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	f000 f8ae 	bl	800a044 <_free_r>
 8009ee8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009eea:	b111      	cbz	r1, 8009ef2 <_reclaim_reent+0x8a>
 8009eec:	4620      	mov	r0, r4
 8009eee:	f000 f8a9 	bl	800a044 <_free_r>
 8009ef2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009ef4:	b111      	cbz	r1, 8009efc <_reclaim_reent+0x94>
 8009ef6:	4620      	mov	r0, r4
 8009ef8:	f000 f8a4 	bl	800a044 <_free_r>
 8009efc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009efe:	b111      	cbz	r1, 8009f06 <_reclaim_reent+0x9e>
 8009f00:	4620      	mov	r0, r4
 8009f02:	f000 f89f 	bl	800a044 <_free_r>
 8009f06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009f08:	b111      	cbz	r1, 8009f10 <_reclaim_reent+0xa8>
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f000 f89a 	bl	800a044 <_free_r>
 8009f10:	6a23      	ldr	r3, [r4, #32]
 8009f12:	b11b      	cbz	r3, 8009f1c <_reclaim_reent+0xb4>
 8009f14:	4620      	mov	r0, r4
 8009f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f1a:	4718      	bx	r3
 8009f1c:	bd70      	pop	{r4, r5, r6, pc}
 8009f1e:	bf00      	nop
 8009f20:	20000024 	.word	0x20000024

08009f24 <_lseek_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4d07      	ldr	r5, [pc, #28]	@ (8009f44 <_lseek_r+0x20>)
 8009f28:	4604      	mov	r4, r0
 8009f2a:	4608      	mov	r0, r1
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	2200      	movs	r2, #0
 8009f30:	602a      	str	r2, [r5, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	f7f7 fc65 	bl	8001802 <_lseek>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d102      	bne.n	8009f42 <_lseek_r+0x1e>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	b103      	cbz	r3, 8009f42 <_lseek_r+0x1e>
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	bd38      	pop	{r3, r4, r5, pc}
 8009f44:	20002dc4 	.word	0x20002dc4

08009f48 <_read_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d07      	ldr	r5, [pc, #28]	@ (8009f68 <_read_r+0x20>)
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	4608      	mov	r0, r1
 8009f50:	4611      	mov	r1, r2
 8009f52:	2200      	movs	r2, #0
 8009f54:	602a      	str	r2, [r5, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	f7f7 fbf3 	bl	8001742 <_read>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d102      	bne.n	8009f66 <_read_r+0x1e>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	b103      	cbz	r3, 8009f66 <_read_r+0x1e>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	20002dc4 	.word	0x20002dc4

08009f6c <_write_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4d07      	ldr	r5, [pc, #28]	@ (8009f8c <_write_r+0x20>)
 8009f70:	4604      	mov	r4, r0
 8009f72:	4608      	mov	r0, r1
 8009f74:	4611      	mov	r1, r2
 8009f76:	2200      	movs	r2, #0
 8009f78:	602a      	str	r2, [r5, #0]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	f7f7 fbfe 	bl	800177c <_write>
 8009f80:	1c43      	adds	r3, r0, #1
 8009f82:	d102      	bne.n	8009f8a <_write_r+0x1e>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	b103      	cbz	r3, 8009f8a <_write_r+0x1e>
 8009f88:	6023      	str	r3, [r4, #0]
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	20002dc4 	.word	0x20002dc4

08009f90 <__errno>:
 8009f90:	4b01      	ldr	r3, [pc, #4]	@ (8009f98 <__errno+0x8>)
 8009f92:	6818      	ldr	r0, [r3, #0]
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	20000024 	.word	0x20000024

08009f9c <__libc_init_array>:
 8009f9c:	b570      	push	{r4, r5, r6, lr}
 8009f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8009fd4 <__libc_init_array+0x38>)
 8009fa0:	4c0d      	ldr	r4, [pc, #52]	@ (8009fd8 <__libc_init_array+0x3c>)
 8009fa2:	1b64      	subs	r4, r4, r5
 8009fa4:	10a4      	asrs	r4, r4, #2
 8009fa6:	2600      	movs	r6, #0
 8009fa8:	42a6      	cmp	r6, r4
 8009faa:	d109      	bne.n	8009fc0 <__libc_init_array+0x24>
 8009fac:	4d0b      	ldr	r5, [pc, #44]	@ (8009fdc <__libc_init_array+0x40>)
 8009fae:	4c0c      	ldr	r4, [pc, #48]	@ (8009fe0 <__libc_init_array+0x44>)
 8009fb0:	f000 ffee 	bl	800af90 <_init>
 8009fb4:	1b64      	subs	r4, r4, r5
 8009fb6:	10a4      	asrs	r4, r4, #2
 8009fb8:	2600      	movs	r6, #0
 8009fba:	42a6      	cmp	r6, r4
 8009fbc:	d105      	bne.n	8009fca <__libc_init_array+0x2e>
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}
 8009fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fc4:	4798      	blx	r3
 8009fc6:	3601      	adds	r6, #1
 8009fc8:	e7ee      	b.n	8009fa8 <__libc_init_array+0xc>
 8009fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fce:	4798      	blx	r3
 8009fd0:	3601      	adds	r6, #1
 8009fd2:	e7f2      	b.n	8009fba <__libc_init_array+0x1e>
 8009fd4:	0800ba24 	.word	0x0800ba24
 8009fd8:	0800ba24 	.word	0x0800ba24
 8009fdc:	0800ba24 	.word	0x0800ba24
 8009fe0:	0800ba28 	.word	0x0800ba28

08009fe4 <__retarget_lock_init_recursive>:
 8009fe4:	4770      	bx	lr

08009fe6 <__retarget_lock_acquire_recursive>:
 8009fe6:	4770      	bx	lr

08009fe8 <__retarget_lock_release_recursive>:
 8009fe8:	4770      	bx	lr

08009fea <memcpy>:
 8009fea:	440a      	add	r2, r1
 8009fec:	4291      	cmp	r1, r2
 8009fee:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ff2:	d100      	bne.n	8009ff6 <memcpy+0xc>
 8009ff4:	4770      	bx	lr
 8009ff6:	b510      	push	{r4, lr}
 8009ff8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ffc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a000:	4291      	cmp	r1, r2
 800a002:	d1f9      	bne.n	8009ff8 <memcpy+0xe>
 800a004:	bd10      	pop	{r4, pc}
	...

0800a008 <__assert_func>:
 800a008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a00a:	4614      	mov	r4, r2
 800a00c:	461a      	mov	r2, r3
 800a00e:	4b09      	ldr	r3, [pc, #36]	@ (800a034 <__assert_func+0x2c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4605      	mov	r5, r0
 800a014:	68d8      	ldr	r0, [r3, #12]
 800a016:	b14c      	cbz	r4, 800a02c <__assert_func+0x24>
 800a018:	4b07      	ldr	r3, [pc, #28]	@ (800a038 <__assert_func+0x30>)
 800a01a:	9100      	str	r1, [sp, #0]
 800a01c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a020:	4906      	ldr	r1, [pc, #24]	@ (800a03c <__assert_func+0x34>)
 800a022:	462b      	mov	r3, r5
 800a024:	f000 fc9e 	bl	800a964 <fiprintf>
 800a028:	f000 fcd8 	bl	800a9dc <abort>
 800a02c:	4b04      	ldr	r3, [pc, #16]	@ (800a040 <__assert_func+0x38>)
 800a02e:	461c      	mov	r4, r3
 800a030:	e7f3      	b.n	800a01a <__assert_func+0x12>
 800a032:	bf00      	nop
 800a034:	20000024 	.word	0x20000024
 800a038:	0800b9aa 	.word	0x0800b9aa
 800a03c:	0800b9b7 	.word	0x0800b9b7
 800a040:	0800b9e5 	.word	0x0800b9e5

0800a044 <_free_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4605      	mov	r5, r0
 800a048:	2900      	cmp	r1, #0
 800a04a:	d041      	beq.n	800a0d0 <_free_r+0x8c>
 800a04c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a050:	1f0c      	subs	r4, r1, #4
 800a052:	2b00      	cmp	r3, #0
 800a054:	bfb8      	it	lt
 800a056:	18e4      	addlt	r4, r4, r3
 800a058:	f000 f8e8 	bl	800a22c <__malloc_lock>
 800a05c:	4a1d      	ldr	r2, [pc, #116]	@ (800a0d4 <_free_r+0x90>)
 800a05e:	6813      	ldr	r3, [r2, #0]
 800a060:	b933      	cbnz	r3, 800a070 <_free_r+0x2c>
 800a062:	6063      	str	r3, [r4, #4]
 800a064:	6014      	str	r4, [r2, #0]
 800a066:	4628      	mov	r0, r5
 800a068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a06c:	f000 b8e4 	b.w	800a238 <__malloc_unlock>
 800a070:	42a3      	cmp	r3, r4
 800a072:	d908      	bls.n	800a086 <_free_r+0x42>
 800a074:	6820      	ldr	r0, [r4, #0]
 800a076:	1821      	adds	r1, r4, r0
 800a078:	428b      	cmp	r3, r1
 800a07a:	bf01      	itttt	eq
 800a07c:	6819      	ldreq	r1, [r3, #0]
 800a07e:	685b      	ldreq	r3, [r3, #4]
 800a080:	1809      	addeq	r1, r1, r0
 800a082:	6021      	streq	r1, [r4, #0]
 800a084:	e7ed      	b.n	800a062 <_free_r+0x1e>
 800a086:	461a      	mov	r2, r3
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	b10b      	cbz	r3, 800a090 <_free_r+0x4c>
 800a08c:	42a3      	cmp	r3, r4
 800a08e:	d9fa      	bls.n	800a086 <_free_r+0x42>
 800a090:	6811      	ldr	r1, [r2, #0]
 800a092:	1850      	adds	r0, r2, r1
 800a094:	42a0      	cmp	r0, r4
 800a096:	d10b      	bne.n	800a0b0 <_free_r+0x6c>
 800a098:	6820      	ldr	r0, [r4, #0]
 800a09a:	4401      	add	r1, r0
 800a09c:	1850      	adds	r0, r2, r1
 800a09e:	4283      	cmp	r3, r0
 800a0a0:	6011      	str	r1, [r2, #0]
 800a0a2:	d1e0      	bne.n	800a066 <_free_r+0x22>
 800a0a4:	6818      	ldr	r0, [r3, #0]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	6053      	str	r3, [r2, #4]
 800a0aa:	4408      	add	r0, r1
 800a0ac:	6010      	str	r0, [r2, #0]
 800a0ae:	e7da      	b.n	800a066 <_free_r+0x22>
 800a0b0:	d902      	bls.n	800a0b8 <_free_r+0x74>
 800a0b2:	230c      	movs	r3, #12
 800a0b4:	602b      	str	r3, [r5, #0]
 800a0b6:	e7d6      	b.n	800a066 <_free_r+0x22>
 800a0b8:	6820      	ldr	r0, [r4, #0]
 800a0ba:	1821      	adds	r1, r4, r0
 800a0bc:	428b      	cmp	r3, r1
 800a0be:	bf04      	itt	eq
 800a0c0:	6819      	ldreq	r1, [r3, #0]
 800a0c2:	685b      	ldreq	r3, [r3, #4]
 800a0c4:	6063      	str	r3, [r4, #4]
 800a0c6:	bf04      	itt	eq
 800a0c8:	1809      	addeq	r1, r1, r0
 800a0ca:	6021      	streq	r1, [r4, #0]
 800a0cc:	6054      	str	r4, [r2, #4]
 800a0ce:	e7ca      	b.n	800a066 <_free_r+0x22>
 800a0d0:	bd38      	pop	{r3, r4, r5, pc}
 800a0d2:	bf00      	nop
 800a0d4:	20002dd0 	.word	0x20002dd0

0800a0d8 <malloc>:
 800a0d8:	4b02      	ldr	r3, [pc, #8]	@ (800a0e4 <malloc+0xc>)
 800a0da:	4601      	mov	r1, r0
 800a0dc:	6818      	ldr	r0, [r3, #0]
 800a0de:	f000 b825 	b.w	800a12c <_malloc_r>
 800a0e2:	bf00      	nop
 800a0e4:	20000024 	.word	0x20000024

0800a0e8 <sbrk_aligned>:
 800a0e8:	b570      	push	{r4, r5, r6, lr}
 800a0ea:	4e0f      	ldr	r6, [pc, #60]	@ (800a128 <sbrk_aligned+0x40>)
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	6831      	ldr	r1, [r6, #0]
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	b911      	cbnz	r1, 800a0fa <sbrk_aligned+0x12>
 800a0f4:	f000 fc62 	bl	800a9bc <_sbrk_r>
 800a0f8:	6030      	str	r0, [r6, #0]
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f000 fc5d 	bl	800a9bc <_sbrk_r>
 800a102:	1c43      	adds	r3, r0, #1
 800a104:	d103      	bne.n	800a10e <sbrk_aligned+0x26>
 800a106:	f04f 34ff 	mov.w	r4, #4294967295
 800a10a:	4620      	mov	r0, r4
 800a10c:	bd70      	pop	{r4, r5, r6, pc}
 800a10e:	1cc4      	adds	r4, r0, #3
 800a110:	f024 0403 	bic.w	r4, r4, #3
 800a114:	42a0      	cmp	r0, r4
 800a116:	d0f8      	beq.n	800a10a <sbrk_aligned+0x22>
 800a118:	1a21      	subs	r1, r4, r0
 800a11a:	4628      	mov	r0, r5
 800a11c:	f000 fc4e 	bl	800a9bc <_sbrk_r>
 800a120:	3001      	adds	r0, #1
 800a122:	d1f2      	bne.n	800a10a <sbrk_aligned+0x22>
 800a124:	e7ef      	b.n	800a106 <sbrk_aligned+0x1e>
 800a126:	bf00      	nop
 800a128:	20002dcc 	.word	0x20002dcc

0800a12c <_malloc_r>:
 800a12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a130:	1ccd      	adds	r5, r1, #3
 800a132:	f025 0503 	bic.w	r5, r5, #3
 800a136:	3508      	adds	r5, #8
 800a138:	2d0c      	cmp	r5, #12
 800a13a:	bf38      	it	cc
 800a13c:	250c      	movcc	r5, #12
 800a13e:	2d00      	cmp	r5, #0
 800a140:	4606      	mov	r6, r0
 800a142:	db01      	blt.n	800a148 <_malloc_r+0x1c>
 800a144:	42a9      	cmp	r1, r5
 800a146:	d904      	bls.n	800a152 <_malloc_r+0x26>
 800a148:	230c      	movs	r3, #12
 800a14a:	6033      	str	r3, [r6, #0]
 800a14c:	2000      	movs	r0, #0
 800a14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a152:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a228 <_malloc_r+0xfc>
 800a156:	f000 f869 	bl	800a22c <__malloc_lock>
 800a15a:	f8d8 3000 	ldr.w	r3, [r8]
 800a15e:	461c      	mov	r4, r3
 800a160:	bb44      	cbnz	r4, 800a1b4 <_malloc_r+0x88>
 800a162:	4629      	mov	r1, r5
 800a164:	4630      	mov	r0, r6
 800a166:	f7ff ffbf 	bl	800a0e8 <sbrk_aligned>
 800a16a:	1c43      	adds	r3, r0, #1
 800a16c:	4604      	mov	r4, r0
 800a16e:	d158      	bne.n	800a222 <_malloc_r+0xf6>
 800a170:	f8d8 4000 	ldr.w	r4, [r8]
 800a174:	4627      	mov	r7, r4
 800a176:	2f00      	cmp	r7, #0
 800a178:	d143      	bne.n	800a202 <_malloc_r+0xd6>
 800a17a:	2c00      	cmp	r4, #0
 800a17c:	d04b      	beq.n	800a216 <_malloc_r+0xea>
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	4639      	mov	r1, r7
 800a182:	4630      	mov	r0, r6
 800a184:	eb04 0903 	add.w	r9, r4, r3
 800a188:	f000 fc18 	bl	800a9bc <_sbrk_r>
 800a18c:	4581      	cmp	r9, r0
 800a18e:	d142      	bne.n	800a216 <_malloc_r+0xea>
 800a190:	6821      	ldr	r1, [r4, #0]
 800a192:	1a6d      	subs	r5, r5, r1
 800a194:	4629      	mov	r1, r5
 800a196:	4630      	mov	r0, r6
 800a198:	f7ff ffa6 	bl	800a0e8 <sbrk_aligned>
 800a19c:	3001      	adds	r0, #1
 800a19e:	d03a      	beq.n	800a216 <_malloc_r+0xea>
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	442b      	add	r3, r5
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	f8d8 3000 	ldr.w	r3, [r8]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	bb62      	cbnz	r2, 800a208 <_malloc_r+0xdc>
 800a1ae:	f8c8 7000 	str.w	r7, [r8]
 800a1b2:	e00f      	b.n	800a1d4 <_malloc_r+0xa8>
 800a1b4:	6822      	ldr	r2, [r4, #0]
 800a1b6:	1b52      	subs	r2, r2, r5
 800a1b8:	d420      	bmi.n	800a1fc <_malloc_r+0xd0>
 800a1ba:	2a0b      	cmp	r2, #11
 800a1bc:	d917      	bls.n	800a1ee <_malloc_r+0xc2>
 800a1be:	1961      	adds	r1, r4, r5
 800a1c0:	42a3      	cmp	r3, r4
 800a1c2:	6025      	str	r5, [r4, #0]
 800a1c4:	bf18      	it	ne
 800a1c6:	6059      	strne	r1, [r3, #4]
 800a1c8:	6863      	ldr	r3, [r4, #4]
 800a1ca:	bf08      	it	eq
 800a1cc:	f8c8 1000 	streq.w	r1, [r8]
 800a1d0:	5162      	str	r2, [r4, r5]
 800a1d2:	604b      	str	r3, [r1, #4]
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f000 f82f 	bl	800a238 <__malloc_unlock>
 800a1da:	f104 000b 	add.w	r0, r4, #11
 800a1de:	1d23      	adds	r3, r4, #4
 800a1e0:	f020 0007 	bic.w	r0, r0, #7
 800a1e4:	1ac2      	subs	r2, r0, r3
 800a1e6:	bf1c      	itt	ne
 800a1e8:	1a1b      	subne	r3, r3, r0
 800a1ea:	50a3      	strne	r3, [r4, r2]
 800a1ec:	e7af      	b.n	800a14e <_malloc_r+0x22>
 800a1ee:	6862      	ldr	r2, [r4, #4]
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	bf0c      	ite	eq
 800a1f4:	f8c8 2000 	streq.w	r2, [r8]
 800a1f8:	605a      	strne	r2, [r3, #4]
 800a1fa:	e7eb      	b.n	800a1d4 <_malloc_r+0xa8>
 800a1fc:	4623      	mov	r3, r4
 800a1fe:	6864      	ldr	r4, [r4, #4]
 800a200:	e7ae      	b.n	800a160 <_malloc_r+0x34>
 800a202:	463c      	mov	r4, r7
 800a204:	687f      	ldr	r7, [r7, #4]
 800a206:	e7b6      	b.n	800a176 <_malloc_r+0x4a>
 800a208:	461a      	mov	r2, r3
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	42a3      	cmp	r3, r4
 800a20e:	d1fb      	bne.n	800a208 <_malloc_r+0xdc>
 800a210:	2300      	movs	r3, #0
 800a212:	6053      	str	r3, [r2, #4]
 800a214:	e7de      	b.n	800a1d4 <_malloc_r+0xa8>
 800a216:	230c      	movs	r3, #12
 800a218:	6033      	str	r3, [r6, #0]
 800a21a:	4630      	mov	r0, r6
 800a21c:	f000 f80c 	bl	800a238 <__malloc_unlock>
 800a220:	e794      	b.n	800a14c <_malloc_r+0x20>
 800a222:	6005      	str	r5, [r0, #0]
 800a224:	e7d6      	b.n	800a1d4 <_malloc_r+0xa8>
 800a226:	bf00      	nop
 800a228:	20002dd0 	.word	0x20002dd0

0800a22c <__malloc_lock>:
 800a22c:	4801      	ldr	r0, [pc, #4]	@ (800a234 <__malloc_lock+0x8>)
 800a22e:	f7ff beda 	b.w	8009fe6 <__retarget_lock_acquire_recursive>
 800a232:	bf00      	nop
 800a234:	20002dc8 	.word	0x20002dc8

0800a238 <__malloc_unlock>:
 800a238:	4801      	ldr	r0, [pc, #4]	@ (800a240 <__malloc_unlock+0x8>)
 800a23a:	f7ff bed5 	b.w	8009fe8 <__retarget_lock_release_recursive>
 800a23e:	bf00      	nop
 800a240:	20002dc8 	.word	0x20002dc8

0800a244 <__ssputs_r>:
 800a244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a248:	688e      	ldr	r6, [r1, #8]
 800a24a:	461f      	mov	r7, r3
 800a24c:	42be      	cmp	r6, r7
 800a24e:	680b      	ldr	r3, [r1, #0]
 800a250:	4682      	mov	sl, r0
 800a252:	460c      	mov	r4, r1
 800a254:	4690      	mov	r8, r2
 800a256:	d82d      	bhi.n	800a2b4 <__ssputs_r+0x70>
 800a258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a25c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a260:	d026      	beq.n	800a2b0 <__ssputs_r+0x6c>
 800a262:	6965      	ldr	r5, [r4, #20]
 800a264:	6909      	ldr	r1, [r1, #16]
 800a266:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a26a:	eba3 0901 	sub.w	r9, r3, r1
 800a26e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a272:	1c7b      	adds	r3, r7, #1
 800a274:	444b      	add	r3, r9
 800a276:	106d      	asrs	r5, r5, #1
 800a278:	429d      	cmp	r5, r3
 800a27a:	bf38      	it	cc
 800a27c:	461d      	movcc	r5, r3
 800a27e:	0553      	lsls	r3, r2, #21
 800a280:	d527      	bpl.n	800a2d2 <__ssputs_r+0x8e>
 800a282:	4629      	mov	r1, r5
 800a284:	f7ff ff52 	bl	800a12c <_malloc_r>
 800a288:	4606      	mov	r6, r0
 800a28a:	b360      	cbz	r0, 800a2e6 <__ssputs_r+0xa2>
 800a28c:	6921      	ldr	r1, [r4, #16]
 800a28e:	464a      	mov	r2, r9
 800a290:	f7ff feab 	bl	8009fea <memcpy>
 800a294:	89a3      	ldrh	r3, [r4, #12]
 800a296:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a29a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a29e:	81a3      	strh	r3, [r4, #12]
 800a2a0:	6126      	str	r6, [r4, #16]
 800a2a2:	6165      	str	r5, [r4, #20]
 800a2a4:	444e      	add	r6, r9
 800a2a6:	eba5 0509 	sub.w	r5, r5, r9
 800a2aa:	6026      	str	r6, [r4, #0]
 800a2ac:	60a5      	str	r5, [r4, #8]
 800a2ae:	463e      	mov	r6, r7
 800a2b0:	42be      	cmp	r6, r7
 800a2b2:	d900      	bls.n	800a2b6 <__ssputs_r+0x72>
 800a2b4:	463e      	mov	r6, r7
 800a2b6:	6820      	ldr	r0, [r4, #0]
 800a2b8:	4632      	mov	r2, r6
 800a2ba:	4641      	mov	r1, r8
 800a2bc:	f000 fb64 	bl	800a988 <memmove>
 800a2c0:	68a3      	ldr	r3, [r4, #8]
 800a2c2:	1b9b      	subs	r3, r3, r6
 800a2c4:	60a3      	str	r3, [r4, #8]
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	4433      	add	r3, r6
 800a2ca:	6023      	str	r3, [r4, #0]
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	f000 fb89 	bl	800a9ea <_realloc_r>
 800a2d8:	4606      	mov	r6, r0
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d1e0      	bne.n	800a2a0 <__ssputs_r+0x5c>
 800a2de:	6921      	ldr	r1, [r4, #16]
 800a2e0:	4650      	mov	r0, sl
 800a2e2:	f7ff feaf 	bl	800a044 <_free_r>
 800a2e6:	230c      	movs	r3, #12
 800a2e8:	f8ca 3000 	str.w	r3, [sl]
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2f2:	81a3      	strh	r3, [r4, #12]
 800a2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f8:	e7e9      	b.n	800a2ce <__ssputs_r+0x8a>
	...

0800a2fc <_svfiprintf_r>:
 800a2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	4698      	mov	r8, r3
 800a302:	898b      	ldrh	r3, [r1, #12]
 800a304:	061b      	lsls	r3, r3, #24
 800a306:	b09d      	sub	sp, #116	@ 0x74
 800a308:	4607      	mov	r7, r0
 800a30a:	460d      	mov	r5, r1
 800a30c:	4614      	mov	r4, r2
 800a30e:	d510      	bpl.n	800a332 <_svfiprintf_r+0x36>
 800a310:	690b      	ldr	r3, [r1, #16]
 800a312:	b973      	cbnz	r3, 800a332 <_svfiprintf_r+0x36>
 800a314:	2140      	movs	r1, #64	@ 0x40
 800a316:	f7ff ff09 	bl	800a12c <_malloc_r>
 800a31a:	6028      	str	r0, [r5, #0]
 800a31c:	6128      	str	r0, [r5, #16]
 800a31e:	b930      	cbnz	r0, 800a32e <_svfiprintf_r+0x32>
 800a320:	230c      	movs	r3, #12
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	f04f 30ff 	mov.w	r0, #4294967295
 800a328:	b01d      	add	sp, #116	@ 0x74
 800a32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32e:	2340      	movs	r3, #64	@ 0x40
 800a330:	616b      	str	r3, [r5, #20]
 800a332:	2300      	movs	r3, #0
 800a334:	9309      	str	r3, [sp, #36]	@ 0x24
 800a336:	2320      	movs	r3, #32
 800a338:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a33c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a340:	2330      	movs	r3, #48	@ 0x30
 800a342:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4e0 <_svfiprintf_r+0x1e4>
 800a346:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a34a:	f04f 0901 	mov.w	r9, #1
 800a34e:	4623      	mov	r3, r4
 800a350:	469a      	mov	sl, r3
 800a352:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a356:	b10a      	cbz	r2, 800a35c <_svfiprintf_r+0x60>
 800a358:	2a25      	cmp	r2, #37	@ 0x25
 800a35a:	d1f9      	bne.n	800a350 <_svfiprintf_r+0x54>
 800a35c:	ebba 0b04 	subs.w	fp, sl, r4
 800a360:	d00b      	beq.n	800a37a <_svfiprintf_r+0x7e>
 800a362:	465b      	mov	r3, fp
 800a364:	4622      	mov	r2, r4
 800a366:	4629      	mov	r1, r5
 800a368:	4638      	mov	r0, r7
 800a36a:	f7ff ff6b 	bl	800a244 <__ssputs_r>
 800a36e:	3001      	adds	r0, #1
 800a370:	f000 80a7 	beq.w	800a4c2 <_svfiprintf_r+0x1c6>
 800a374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a376:	445a      	add	r2, fp
 800a378:	9209      	str	r2, [sp, #36]	@ 0x24
 800a37a:	f89a 3000 	ldrb.w	r3, [sl]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f000 809f 	beq.w	800a4c2 <_svfiprintf_r+0x1c6>
 800a384:	2300      	movs	r3, #0
 800a386:	f04f 32ff 	mov.w	r2, #4294967295
 800a38a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a38e:	f10a 0a01 	add.w	sl, sl, #1
 800a392:	9304      	str	r3, [sp, #16]
 800a394:	9307      	str	r3, [sp, #28]
 800a396:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a39a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a39c:	4654      	mov	r4, sl
 800a39e:	2205      	movs	r2, #5
 800a3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3a4:	484e      	ldr	r0, [pc, #312]	@ (800a4e0 <_svfiprintf_r+0x1e4>)
 800a3a6:	f7f5 ff2b 	bl	8000200 <memchr>
 800a3aa:	9a04      	ldr	r2, [sp, #16]
 800a3ac:	b9d8      	cbnz	r0, 800a3e6 <_svfiprintf_r+0xea>
 800a3ae:	06d0      	lsls	r0, r2, #27
 800a3b0:	bf44      	itt	mi
 800a3b2:	2320      	movmi	r3, #32
 800a3b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3b8:	0711      	lsls	r1, r2, #28
 800a3ba:	bf44      	itt	mi
 800a3bc:	232b      	movmi	r3, #43	@ 0x2b
 800a3be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3c8:	d015      	beq.n	800a3f6 <_svfiprintf_r+0xfa>
 800a3ca:	9a07      	ldr	r2, [sp, #28]
 800a3cc:	4654      	mov	r4, sl
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	f04f 0c0a 	mov.w	ip, #10
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3da:	3b30      	subs	r3, #48	@ 0x30
 800a3dc:	2b09      	cmp	r3, #9
 800a3de:	d94b      	bls.n	800a478 <_svfiprintf_r+0x17c>
 800a3e0:	b1b0      	cbz	r0, 800a410 <_svfiprintf_r+0x114>
 800a3e2:	9207      	str	r2, [sp, #28]
 800a3e4:	e014      	b.n	800a410 <_svfiprintf_r+0x114>
 800a3e6:	eba0 0308 	sub.w	r3, r0, r8
 800a3ea:	fa09 f303 	lsl.w	r3, r9, r3
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	9304      	str	r3, [sp, #16]
 800a3f2:	46a2      	mov	sl, r4
 800a3f4:	e7d2      	b.n	800a39c <_svfiprintf_r+0xa0>
 800a3f6:	9b03      	ldr	r3, [sp, #12]
 800a3f8:	1d19      	adds	r1, r3, #4
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	9103      	str	r1, [sp, #12]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	bfbb      	ittet	lt
 800a402:	425b      	neglt	r3, r3
 800a404:	f042 0202 	orrlt.w	r2, r2, #2
 800a408:	9307      	strge	r3, [sp, #28]
 800a40a:	9307      	strlt	r3, [sp, #28]
 800a40c:	bfb8      	it	lt
 800a40e:	9204      	strlt	r2, [sp, #16]
 800a410:	7823      	ldrb	r3, [r4, #0]
 800a412:	2b2e      	cmp	r3, #46	@ 0x2e
 800a414:	d10a      	bne.n	800a42c <_svfiprintf_r+0x130>
 800a416:	7863      	ldrb	r3, [r4, #1]
 800a418:	2b2a      	cmp	r3, #42	@ 0x2a
 800a41a:	d132      	bne.n	800a482 <_svfiprintf_r+0x186>
 800a41c:	9b03      	ldr	r3, [sp, #12]
 800a41e:	1d1a      	adds	r2, r3, #4
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	9203      	str	r2, [sp, #12]
 800a424:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a428:	3402      	adds	r4, #2
 800a42a:	9305      	str	r3, [sp, #20]
 800a42c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4f0 <_svfiprintf_r+0x1f4>
 800a430:	7821      	ldrb	r1, [r4, #0]
 800a432:	2203      	movs	r2, #3
 800a434:	4650      	mov	r0, sl
 800a436:	f7f5 fee3 	bl	8000200 <memchr>
 800a43a:	b138      	cbz	r0, 800a44c <_svfiprintf_r+0x150>
 800a43c:	9b04      	ldr	r3, [sp, #16]
 800a43e:	eba0 000a 	sub.w	r0, r0, sl
 800a442:	2240      	movs	r2, #64	@ 0x40
 800a444:	4082      	lsls	r2, r0
 800a446:	4313      	orrs	r3, r2
 800a448:	3401      	adds	r4, #1
 800a44a:	9304      	str	r3, [sp, #16]
 800a44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a450:	4824      	ldr	r0, [pc, #144]	@ (800a4e4 <_svfiprintf_r+0x1e8>)
 800a452:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a456:	2206      	movs	r2, #6
 800a458:	f7f5 fed2 	bl	8000200 <memchr>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d036      	beq.n	800a4ce <_svfiprintf_r+0x1d2>
 800a460:	4b21      	ldr	r3, [pc, #132]	@ (800a4e8 <_svfiprintf_r+0x1ec>)
 800a462:	bb1b      	cbnz	r3, 800a4ac <_svfiprintf_r+0x1b0>
 800a464:	9b03      	ldr	r3, [sp, #12]
 800a466:	3307      	adds	r3, #7
 800a468:	f023 0307 	bic.w	r3, r3, #7
 800a46c:	3308      	adds	r3, #8
 800a46e:	9303      	str	r3, [sp, #12]
 800a470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a472:	4433      	add	r3, r6
 800a474:	9309      	str	r3, [sp, #36]	@ 0x24
 800a476:	e76a      	b.n	800a34e <_svfiprintf_r+0x52>
 800a478:	fb0c 3202 	mla	r2, ip, r2, r3
 800a47c:	460c      	mov	r4, r1
 800a47e:	2001      	movs	r0, #1
 800a480:	e7a8      	b.n	800a3d4 <_svfiprintf_r+0xd8>
 800a482:	2300      	movs	r3, #0
 800a484:	3401      	adds	r4, #1
 800a486:	9305      	str	r3, [sp, #20]
 800a488:	4619      	mov	r1, r3
 800a48a:	f04f 0c0a 	mov.w	ip, #10
 800a48e:	4620      	mov	r0, r4
 800a490:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a494:	3a30      	subs	r2, #48	@ 0x30
 800a496:	2a09      	cmp	r2, #9
 800a498:	d903      	bls.n	800a4a2 <_svfiprintf_r+0x1a6>
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d0c6      	beq.n	800a42c <_svfiprintf_r+0x130>
 800a49e:	9105      	str	r1, [sp, #20]
 800a4a0:	e7c4      	b.n	800a42c <_svfiprintf_r+0x130>
 800a4a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e7f0      	b.n	800a48e <_svfiprintf_r+0x192>
 800a4ac:	ab03      	add	r3, sp, #12
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	462a      	mov	r2, r5
 800a4b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a4ec <_svfiprintf_r+0x1f0>)
 800a4b4:	a904      	add	r1, sp, #16
 800a4b6:	4638      	mov	r0, r7
 800a4b8:	f3af 8000 	nop.w
 800a4bc:	1c42      	adds	r2, r0, #1
 800a4be:	4606      	mov	r6, r0
 800a4c0:	d1d6      	bne.n	800a470 <_svfiprintf_r+0x174>
 800a4c2:	89ab      	ldrh	r3, [r5, #12]
 800a4c4:	065b      	lsls	r3, r3, #25
 800a4c6:	f53f af2d 	bmi.w	800a324 <_svfiprintf_r+0x28>
 800a4ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4cc:	e72c      	b.n	800a328 <_svfiprintf_r+0x2c>
 800a4ce:	ab03      	add	r3, sp, #12
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	462a      	mov	r2, r5
 800a4d4:	4b05      	ldr	r3, [pc, #20]	@ (800a4ec <_svfiprintf_r+0x1f0>)
 800a4d6:	a904      	add	r1, sp, #16
 800a4d8:	4638      	mov	r0, r7
 800a4da:	f000 f879 	bl	800a5d0 <_printf_i>
 800a4de:	e7ed      	b.n	800a4bc <_svfiprintf_r+0x1c0>
 800a4e0:	0800b9e6 	.word	0x0800b9e6
 800a4e4:	0800b9f0 	.word	0x0800b9f0
 800a4e8:	00000000 	.word	0x00000000
 800a4ec:	0800a245 	.word	0x0800a245
 800a4f0:	0800b9ec 	.word	0x0800b9ec

0800a4f4 <_printf_common>:
 800a4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f8:	4616      	mov	r6, r2
 800a4fa:	4698      	mov	r8, r3
 800a4fc:	688a      	ldr	r2, [r1, #8]
 800a4fe:	690b      	ldr	r3, [r1, #16]
 800a500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a504:	4293      	cmp	r3, r2
 800a506:	bfb8      	it	lt
 800a508:	4613      	movlt	r3, r2
 800a50a:	6033      	str	r3, [r6, #0]
 800a50c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a510:	4607      	mov	r7, r0
 800a512:	460c      	mov	r4, r1
 800a514:	b10a      	cbz	r2, 800a51a <_printf_common+0x26>
 800a516:	3301      	adds	r3, #1
 800a518:	6033      	str	r3, [r6, #0]
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	0699      	lsls	r1, r3, #26
 800a51e:	bf42      	ittt	mi
 800a520:	6833      	ldrmi	r3, [r6, #0]
 800a522:	3302      	addmi	r3, #2
 800a524:	6033      	strmi	r3, [r6, #0]
 800a526:	6825      	ldr	r5, [r4, #0]
 800a528:	f015 0506 	ands.w	r5, r5, #6
 800a52c:	d106      	bne.n	800a53c <_printf_common+0x48>
 800a52e:	f104 0a19 	add.w	sl, r4, #25
 800a532:	68e3      	ldr	r3, [r4, #12]
 800a534:	6832      	ldr	r2, [r6, #0]
 800a536:	1a9b      	subs	r3, r3, r2
 800a538:	42ab      	cmp	r3, r5
 800a53a:	dc26      	bgt.n	800a58a <_printf_common+0x96>
 800a53c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a540:	6822      	ldr	r2, [r4, #0]
 800a542:	3b00      	subs	r3, #0
 800a544:	bf18      	it	ne
 800a546:	2301      	movne	r3, #1
 800a548:	0692      	lsls	r2, r2, #26
 800a54a:	d42b      	bmi.n	800a5a4 <_printf_common+0xb0>
 800a54c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a550:	4641      	mov	r1, r8
 800a552:	4638      	mov	r0, r7
 800a554:	47c8      	blx	r9
 800a556:	3001      	adds	r0, #1
 800a558:	d01e      	beq.n	800a598 <_printf_common+0xa4>
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	6922      	ldr	r2, [r4, #16]
 800a55e:	f003 0306 	and.w	r3, r3, #6
 800a562:	2b04      	cmp	r3, #4
 800a564:	bf02      	ittt	eq
 800a566:	68e5      	ldreq	r5, [r4, #12]
 800a568:	6833      	ldreq	r3, [r6, #0]
 800a56a:	1aed      	subeq	r5, r5, r3
 800a56c:	68a3      	ldr	r3, [r4, #8]
 800a56e:	bf0c      	ite	eq
 800a570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a574:	2500      	movne	r5, #0
 800a576:	4293      	cmp	r3, r2
 800a578:	bfc4      	itt	gt
 800a57a:	1a9b      	subgt	r3, r3, r2
 800a57c:	18ed      	addgt	r5, r5, r3
 800a57e:	2600      	movs	r6, #0
 800a580:	341a      	adds	r4, #26
 800a582:	42b5      	cmp	r5, r6
 800a584:	d11a      	bne.n	800a5bc <_printf_common+0xc8>
 800a586:	2000      	movs	r0, #0
 800a588:	e008      	b.n	800a59c <_printf_common+0xa8>
 800a58a:	2301      	movs	r3, #1
 800a58c:	4652      	mov	r2, sl
 800a58e:	4641      	mov	r1, r8
 800a590:	4638      	mov	r0, r7
 800a592:	47c8      	blx	r9
 800a594:	3001      	adds	r0, #1
 800a596:	d103      	bne.n	800a5a0 <_printf_common+0xac>
 800a598:	f04f 30ff 	mov.w	r0, #4294967295
 800a59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a0:	3501      	adds	r5, #1
 800a5a2:	e7c6      	b.n	800a532 <_printf_common+0x3e>
 800a5a4:	18e1      	adds	r1, r4, r3
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	2030      	movs	r0, #48	@ 0x30
 800a5aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5ae:	4422      	add	r2, r4
 800a5b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5b8:	3302      	adds	r3, #2
 800a5ba:	e7c7      	b.n	800a54c <_printf_common+0x58>
 800a5bc:	2301      	movs	r3, #1
 800a5be:	4622      	mov	r2, r4
 800a5c0:	4641      	mov	r1, r8
 800a5c2:	4638      	mov	r0, r7
 800a5c4:	47c8      	blx	r9
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	d0e6      	beq.n	800a598 <_printf_common+0xa4>
 800a5ca:	3601      	adds	r6, #1
 800a5cc:	e7d9      	b.n	800a582 <_printf_common+0x8e>
	...

0800a5d0 <_printf_i>:
 800a5d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d4:	7e0f      	ldrb	r7, [r1, #24]
 800a5d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5d8:	2f78      	cmp	r7, #120	@ 0x78
 800a5da:	4691      	mov	r9, r2
 800a5dc:	4680      	mov	r8, r0
 800a5de:	460c      	mov	r4, r1
 800a5e0:	469a      	mov	sl, r3
 800a5e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5e6:	d807      	bhi.n	800a5f8 <_printf_i+0x28>
 800a5e8:	2f62      	cmp	r7, #98	@ 0x62
 800a5ea:	d80a      	bhi.n	800a602 <_printf_i+0x32>
 800a5ec:	2f00      	cmp	r7, #0
 800a5ee:	f000 80d1 	beq.w	800a794 <_printf_i+0x1c4>
 800a5f2:	2f58      	cmp	r7, #88	@ 0x58
 800a5f4:	f000 80b8 	beq.w	800a768 <_printf_i+0x198>
 800a5f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a600:	e03a      	b.n	800a678 <_printf_i+0xa8>
 800a602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a606:	2b15      	cmp	r3, #21
 800a608:	d8f6      	bhi.n	800a5f8 <_printf_i+0x28>
 800a60a:	a101      	add	r1, pc, #4	@ (adr r1, 800a610 <_printf_i+0x40>)
 800a60c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a610:	0800a669 	.word	0x0800a669
 800a614:	0800a67d 	.word	0x0800a67d
 800a618:	0800a5f9 	.word	0x0800a5f9
 800a61c:	0800a5f9 	.word	0x0800a5f9
 800a620:	0800a5f9 	.word	0x0800a5f9
 800a624:	0800a5f9 	.word	0x0800a5f9
 800a628:	0800a67d 	.word	0x0800a67d
 800a62c:	0800a5f9 	.word	0x0800a5f9
 800a630:	0800a5f9 	.word	0x0800a5f9
 800a634:	0800a5f9 	.word	0x0800a5f9
 800a638:	0800a5f9 	.word	0x0800a5f9
 800a63c:	0800a77b 	.word	0x0800a77b
 800a640:	0800a6a7 	.word	0x0800a6a7
 800a644:	0800a735 	.word	0x0800a735
 800a648:	0800a5f9 	.word	0x0800a5f9
 800a64c:	0800a5f9 	.word	0x0800a5f9
 800a650:	0800a79d 	.word	0x0800a79d
 800a654:	0800a5f9 	.word	0x0800a5f9
 800a658:	0800a6a7 	.word	0x0800a6a7
 800a65c:	0800a5f9 	.word	0x0800a5f9
 800a660:	0800a5f9 	.word	0x0800a5f9
 800a664:	0800a73d 	.word	0x0800a73d
 800a668:	6833      	ldr	r3, [r6, #0]
 800a66a:	1d1a      	adds	r2, r3, #4
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6032      	str	r2, [r6, #0]
 800a670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a678:	2301      	movs	r3, #1
 800a67a:	e09c      	b.n	800a7b6 <_printf_i+0x1e6>
 800a67c:	6833      	ldr	r3, [r6, #0]
 800a67e:	6820      	ldr	r0, [r4, #0]
 800a680:	1d19      	adds	r1, r3, #4
 800a682:	6031      	str	r1, [r6, #0]
 800a684:	0606      	lsls	r6, r0, #24
 800a686:	d501      	bpl.n	800a68c <_printf_i+0xbc>
 800a688:	681d      	ldr	r5, [r3, #0]
 800a68a:	e003      	b.n	800a694 <_printf_i+0xc4>
 800a68c:	0645      	lsls	r5, r0, #25
 800a68e:	d5fb      	bpl.n	800a688 <_printf_i+0xb8>
 800a690:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a694:	2d00      	cmp	r5, #0
 800a696:	da03      	bge.n	800a6a0 <_printf_i+0xd0>
 800a698:	232d      	movs	r3, #45	@ 0x2d
 800a69a:	426d      	negs	r5, r5
 800a69c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6a0:	4858      	ldr	r0, [pc, #352]	@ (800a804 <_printf_i+0x234>)
 800a6a2:	230a      	movs	r3, #10
 800a6a4:	e011      	b.n	800a6ca <_printf_i+0xfa>
 800a6a6:	6821      	ldr	r1, [r4, #0]
 800a6a8:	6833      	ldr	r3, [r6, #0]
 800a6aa:	0608      	lsls	r0, r1, #24
 800a6ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6b0:	d402      	bmi.n	800a6b8 <_printf_i+0xe8>
 800a6b2:	0649      	lsls	r1, r1, #25
 800a6b4:	bf48      	it	mi
 800a6b6:	b2ad      	uxthmi	r5, r5
 800a6b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6ba:	4852      	ldr	r0, [pc, #328]	@ (800a804 <_printf_i+0x234>)
 800a6bc:	6033      	str	r3, [r6, #0]
 800a6be:	bf14      	ite	ne
 800a6c0:	230a      	movne	r3, #10
 800a6c2:	2308      	moveq	r3, #8
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6ca:	6866      	ldr	r6, [r4, #4]
 800a6cc:	60a6      	str	r6, [r4, #8]
 800a6ce:	2e00      	cmp	r6, #0
 800a6d0:	db05      	blt.n	800a6de <_printf_i+0x10e>
 800a6d2:	6821      	ldr	r1, [r4, #0]
 800a6d4:	432e      	orrs	r6, r5
 800a6d6:	f021 0104 	bic.w	r1, r1, #4
 800a6da:	6021      	str	r1, [r4, #0]
 800a6dc:	d04b      	beq.n	800a776 <_printf_i+0x1a6>
 800a6de:	4616      	mov	r6, r2
 800a6e0:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6e4:	fb03 5711 	mls	r7, r3, r1, r5
 800a6e8:	5dc7      	ldrb	r7, [r0, r7]
 800a6ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6ee:	462f      	mov	r7, r5
 800a6f0:	42bb      	cmp	r3, r7
 800a6f2:	460d      	mov	r5, r1
 800a6f4:	d9f4      	bls.n	800a6e0 <_printf_i+0x110>
 800a6f6:	2b08      	cmp	r3, #8
 800a6f8:	d10b      	bne.n	800a712 <_printf_i+0x142>
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	07df      	lsls	r7, r3, #31
 800a6fe:	d508      	bpl.n	800a712 <_printf_i+0x142>
 800a700:	6923      	ldr	r3, [r4, #16]
 800a702:	6861      	ldr	r1, [r4, #4]
 800a704:	4299      	cmp	r1, r3
 800a706:	bfde      	ittt	le
 800a708:	2330      	movle	r3, #48	@ 0x30
 800a70a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a70e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a712:	1b92      	subs	r2, r2, r6
 800a714:	6122      	str	r2, [r4, #16]
 800a716:	f8cd a000 	str.w	sl, [sp]
 800a71a:	464b      	mov	r3, r9
 800a71c:	aa03      	add	r2, sp, #12
 800a71e:	4621      	mov	r1, r4
 800a720:	4640      	mov	r0, r8
 800a722:	f7ff fee7 	bl	800a4f4 <_printf_common>
 800a726:	3001      	adds	r0, #1
 800a728:	d14a      	bne.n	800a7c0 <_printf_i+0x1f0>
 800a72a:	f04f 30ff 	mov.w	r0, #4294967295
 800a72e:	b004      	add	sp, #16
 800a730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a734:	6823      	ldr	r3, [r4, #0]
 800a736:	f043 0320 	orr.w	r3, r3, #32
 800a73a:	6023      	str	r3, [r4, #0]
 800a73c:	4832      	ldr	r0, [pc, #200]	@ (800a808 <_printf_i+0x238>)
 800a73e:	2778      	movs	r7, #120	@ 0x78
 800a740:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a744:	6823      	ldr	r3, [r4, #0]
 800a746:	6831      	ldr	r1, [r6, #0]
 800a748:	061f      	lsls	r7, r3, #24
 800a74a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a74e:	d402      	bmi.n	800a756 <_printf_i+0x186>
 800a750:	065f      	lsls	r7, r3, #25
 800a752:	bf48      	it	mi
 800a754:	b2ad      	uxthmi	r5, r5
 800a756:	6031      	str	r1, [r6, #0]
 800a758:	07d9      	lsls	r1, r3, #31
 800a75a:	bf44      	itt	mi
 800a75c:	f043 0320 	orrmi.w	r3, r3, #32
 800a760:	6023      	strmi	r3, [r4, #0]
 800a762:	b11d      	cbz	r5, 800a76c <_printf_i+0x19c>
 800a764:	2310      	movs	r3, #16
 800a766:	e7ad      	b.n	800a6c4 <_printf_i+0xf4>
 800a768:	4826      	ldr	r0, [pc, #152]	@ (800a804 <_printf_i+0x234>)
 800a76a:	e7e9      	b.n	800a740 <_printf_i+0x170>
 800a76c:	6823      	ldr	r3, [r4, #0]
 800a76e:	f023 0320 	bic.w	r3, r3, #32
 800a772:	6023      	str	r3, [r4, #0]
 800a774:	e7f6      	b.n	800a764 <_printf_i+0x194>
 800a776:	4616      	mov	r6, r2
 800a778:	e7bd      	b.n	800a6f6 <_printf_i+0x126>
 800a77a:	6833      	ldr	r3, [r6, #0]
 800a77c:	6825      	ldr	r5, [r4, #0]
 800a77e:	6961      	ldr	r1, [r4, #20]
 800a780:	1d18      	adds	r0, r3, #4
 800a782:	6030      	str	r0, [r6, #0]
 800a784:	062e      	lsls	r6, r5, #24
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	d501      	bpl.n	800a78e <_printf_i+0x1be>
 800a78a:	6019      	str	r1, [r3, #0]
 800a78c:	e002      	b.n	800a794 <_printf_i+0x1c4>
 800a78e:	0668      	lsls	r0, r5, #25
 800a790:	d5fb      	bpl.n	800a78a <_printf_i+0x1ba>
 800a792:	8019      	strh	r1, [r3, #0]
 800a794:	2300      	movs	r3, #0
 800a796:	6123      	str	r3, [r4, #16]
 800a798:	4616      	mov	r6, r2
 800a79a:	e7bc      	b.n	800a716 <_printf_i+0x146>
 800a79c:	6833      	ldr	r3, [r6, #0]
 800a79e:	1d1a      	adds	r2, r3, #4
 800a7a0:	6032      	str	r2, [r6, #0]
 800a7a2:	681e      	ldr	r6, [r3, #0]
 800a7a4:	6862      	ldr	r2, [r4, #4]
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f7f5 fd29 	bl	8000200 <memchr>
 800a7ae:	b108      	cbz	r0, 800a7b4 <_printf_i+0x1e4>
 800a7b0:	1b80      	subs	r0, r0, r6
 800a7b2:	6060      	str	r0, [r4, #4]
 800a7b4:	6863      	ldr	r3, [r4, #4]
 800a7b6:	6123      	str	r3, [r4, #16]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7be:	e7aa      	b.n	800a716 <_printf_i+0x146>
 800a7c0:	6923      	ldr	r3, [r4, #16]
 800a7c2:	4632      	mov	r2, r6
 800a7c4:	4649      	mov	r1, r9
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	47d0      	blx	sl
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	d0ad      	beq.n	800a72a <_printf_i+0x15a>
 800a7ce:	6823      	ldr	r3, [r4, #0]
 800a7d0:	079b      	lsls	r3, r3, #30
 800a7d2:	d413      	bmi.n	800a7fc <_printf_i+0x22c>
 800a7d4:	68e0      	ldr	r0, [r4, #12]
 800a7d6:	9b03      	ldr	r3, [sp, #12]
 800a7d8:	4298      	cmp	r0, r3
 800a7da:	bfb8      	it	lt
 800a7dc:	4618      	movlt	r0, r3
 800a7de:	e7a6      	b.n	800a72e <_printf_i+0x15e>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	4632      	mov	r2, r6
 800a7e4:	4649      	mov	r1, r9
 800a7e6:	4640      	mov	r0, r8
 800a7e8:	47d0      	blx	sl
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	d09d      	beq.n	800a72a <_printf_i+0x15a>
 800a7ee:	3501      	adds	r5, #1
 800a7f0:	68e3      	ldr	r3, [r4, #12]
 800a7f2:	9903      	ldr	r1, [sp, #12]
 800a7f4:	1a5b      	subs	r3, r3, r1
 800a7f6:	42ab      	cmp	r3, r5
 800a7f8:	dcf2      	bgt.n	800a7e0 <_printf_i+0x210>
 800a7fa:	e7eb      	b.n	800a7d4 <_printf_i+0x204>
 800a7fc:	2500      	movs	r5, #0
 800a7fe:	f104 0619 	add.w	r6, r4, #25
 800a802:	e7f5      	b.n	800a7f0 <_printf_i+0x220>
 800a804:	0800b9f7 	.word	0x0800b9f7
 800a808:	0800ba08 	.word	0x0800ba08

0800a80c <__sflush_r>:
 800a80c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a814:	0716      	lsls	r6, r2, #28
 800a816:	4605      	mov	r5, r0
 800a818:	460c      	mov	r4, r1
 800a81a:	d454      	bmi.n	800a8c6 <__sflush_r+0xba>
 800a81c:	684b      	ldr	r3, [r1, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	dc02      	bgt.n	800a828 <__sflush_r+0x1c>
 800a822:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a824:	2b00      	cmp	r3, #0
 800a826:	dd48      	ble.n	800a8ba <__sflush_r+0xae>
 800a828:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a82a:	2e00      	cmp	r6, #0
 800a82c:	d045      	beq.n	800a8ba <__sflush_r+0xae>
 800a82e:	2300      	movs	r3, #0
 800a830:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a834:	682f      	ldr	r7, [r5, #0]
 800a836:	6a21      	ldr	r1, [r4, #32]
 800a838:	602b      	str	r3, [r5, #0]
 800a83a:	d030      	beq.n	800a89e <__sflush_r+0x92>
 800a83c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	0759      	lsls	r1, r3, #29
 800a842:	d505      	bpl.n	800a850 <__sflush_r+0x44>
 800a844:	6863      	ldr	r3, [r4, #4]
 800a846:	1ad2      	subs	r2, r2, r3
 800a848:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a84a:	b10b      	cbz	r3, 800a850 <__sflush_r+0x44>
 800a84c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a84e:	1ad2      	subs	r2, r2, r3
 800a850:	2300      	movs	r3, #0
 800a852:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a854:	6a21      	ldr	r1, [r4, #32]
 800a856:	4628      	mov	r0, r5
 800a858:	47b0      	blx	r6
 800a85a:	1c43      	adds	r3, r0, #1
 800a85c:	89a3      	ldrh	r3, [r4, #12]
 800a85e:	d106      	bne.n	800a86e <__sflush_r+0x62>
 800a860:	6829      	ldr	r1, [r5, #0]
 800a862:	291d      	cmp	r1, #29
 800a864:	d82b      	bhi.n	800a8be <__sflush_r+0xb2>
 800a866:	4a2a      	ldr	r2, [pc, #168]	@ (800a910 <__sflush_r+0x104>)
 800a868:	40ca      	lsrs	r2, r1
 800a86a:	07d6      	lsls	r6, r2, #31
 800a86c:	d527      	bpl.n	800a8be <__sflush_r+0xb2>
 800a86e:	2200      	movs	r2, #0
 800a870:	6062      	str	r2, [r4, #4]
 800a872:	04d9      	lsls	r1, r3, #19
 800a874:	6922      	ldr	r2, [r4, #16]
 800a876:	6022      	str	r2, [r4, #0]
 800a878:	d504      	bpl.n	800a884 <__sflush_r+0x78>
 800a87a:	1c42      	adds	r2, r0, #1
 800a87c:	d101      	bne.n	800a882 <__sflush_r+0x76>
 800a87e:	682b      	ldr	r3, [r5, #0]
 800a880:	b903      	cbnz	r3, 800a884 <__sflush_r+0x78>
 800a882:	6560      	str	r0, [r4, #84]	@ 0x54
 800a884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a886:	602f      	str	r7, [r5, #0]
 800a888:	b1b9      	cbz	r1, 800a8ba <__sflush_r+0xae>
 800a88a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a88e:	4299      	cmp	r1, r3
 800a890:	d002      	beq.n	800a898 <__sflush_r+0x8c>
 800a892:	4628      	mov	r0, r5
 800a894:	f7ff fbd6 	bl	800a044 <_free_r>
 800a898:	2300      	movs	r3, #0
 800a89a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a89c:	e00d      	b.n	800a8ba <__sflush_r+0xae>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	47b0      	blx	r6
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	1c50      	adds	r0, r2, #1
 800a8a8:	d1c9      	bne.n	800a83e <__sflush_r+0x32>
 800a8aa:	682b      	ldr	r3, [r5, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d0c6      	beq.n	800a83e <__sflush_r+0x32>
 800a8b0:	2b1d      	cmp	r3, #29
 800a8b2:	d001      	beq.n	800a8b8 <__sflush_r+0xac>
 800a8b4:	2b16      	cmp	r3, #22
 800a8b6:	d11e      	bne.n	800a8f6 <__sflush_r+0xea>
 800a8b8:	602f      	str	r7, [r5, #0]
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	e022      	b.n	800a904 <__sflush_r+0xf8>
 800a8be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8c2:	b21b      	sxth	r3, r3
 800a8c4:	e01b      	b.n	800a8fe <__sflush_r+0xf2>
 800a8c6:	690f      	ldr	r7, [r1, #16]
 800a8c8:	2f00      	cmp	r7, #0
 800a8ca:	d0f6      	beq.n	800a8ba <__sflush_r+0xae>
 800a8cc:	0793      	lsls	r3, r2, #30
 800a8ce:	680e      	ldr	r6, [r1, #0]
 800a8d0:	bf08      	it	eq
 800a8d2:	694b      	ldreq	r3, [r1, #20]
 800a8d4:	600f      	str	r7, [r1, #0]
 800a8d6:	bf18      	it	ne
 800a8d8:	2300      	movne	r3, #0
 800a8da:	eba6 0807 	sub.w	r8, r6, r7
 800a8de:	608b      	str	r3, [r1, #8]
 800a8e0:	f1b8 0f00 	cmp.w	r8, #0
 800a8e4:	dde9      	ble.n	800a8ba <__sflush_r+0xae>
 800a8e6:	6a21      	ldr	r1, [r4, #32]
 800a8e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a8ea:	4643      	mov	r3, r8
 800a8ec:	463a      	mov	r2, r7
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	47b0      	blx	r6
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	dc08      	bgt.n	800a908 <__sflush_r+0xfc>
 800a8f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8fe:	81a3      	strh	r3, [r4, #12]
 800a900:	f04f 30ff 	mov.w	r0, #4294967295
 800a904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a908:	4407      	add	r7, r0
 800a90a:	eba8 0800 	sub.w	r8, r8, r0
 800a90e:	e7e7      	b.n	800a8e0 <__sflush_r+0xd4>
 800a910:	20400001 	.word	0x20400001

0800a914 <_fflush_r>:
 800a914:	b538      	push	{r3, r4, r5, lr}
 800a916:	690b      	ldr	r3, [r1, #16]
 800a918:	4605      	mov	r5, r0
 800a91a:	460c      	mov	r4, r1
 800a91c:	b913      	cbnz	r3, 800a924 <_fflush_r+0x10>
 800a91e:	2500      	movs	r5, #0
 800a920:	4628      	mov	r0, r5
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	b118      	cbz	r0, 800a92e <_fflush_r+0x1a>
 800a926:	6a03      	ldr	r3, [r0, #32]
 800a928:	b90b      	cbnz	r3, 800a92e <_fflush_r+0x1a>
 800a92a:	f7ff f979 	bl	8009c20 <__sinit>
 800a92e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0f3      	beq.n	800a91e <_fflush_r+0xa>
 800a936:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a938:	07d0      	lsls	r0, r2, #31
 800a93a:	d404      	bmi.n	800a946 <_fflush_r+0x32>
 800a93c:	0599      	lsls	r1, r3, #22
 800a93e:	d402      	bmi.n	800a946 <_fflush_r+0x32>
 800a940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a942:	f7ff fb50 	bl	8009fe6 <__retarget_lock_acquire_recursive>
 800a946:	4628      	mov	r0, r5
 800a948:	4621      	mov	r1, r4
 800a94a:	f7ff ff5f 	bl	800a80c <__sflush_r>
 800a94e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a950:	07da      	lsls	r2, r3, #31
 800a952:	4605      	mov	r5, r0
 800a954:	d4e4      	bmi.n	800a920 <_fflush_r+0xc>
 800a956:	89a3      	ldrh	r3, [r4, #12]
 800a958:	059b      	lsls	r3, r3, #22
 800a95a:	d4e1      	bmi.n	800a920 <_fflush_r+0xc>
 800a95c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a95e:	f7ff fb43 	bl	8009fe8 <__retarget_lock_release_recursive>
 800a962:	e7dd      	b.n	800a920 <_fflush_r+0xc>

0800a964 <fiprintf>:
 800a964:	b40e      	push	{r1, r2, r3}
 800a966:	b503      	push	{r0, r1, lr}
 800a968:	4601      	mov	r1, r0
 800a96a:	ab03      	add	r3, sp, #12
 800a96c:	4805      	ldr	r0, [pc, #20]	@ (800a984 <fiprintf+0x20>)
 800a96e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a972:	6800      	ldr	r0, [r0, #0]
 800a974:	9301      	str	r3, [sp, #4]
 800a976:	f000 f88f 	bl	800aa98 <_vfiprintf_r>
 800a97a:	b002      	add	sp, #8
 800a97c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a980:	b003      	add	sp, #12
 800a982:	4770      	bx	lr
 800a984:	20000024 	.word	0x20000024

0800a988 <memmove>:
 800a988:	4288      	cmp	r0, r1
 800a98a:	b510      	push	{r4, lr}
 800a98c:	eb01 0402 	add.w	r4, r1, r2
 800a990:	d902      	bls.n	800a998 <memmove+0x10>
 800a992:	4284      	cmp	r4, r0
 800a994:	4623      	mov	r3, r4
 800a996:	d807      	bhi.n	800a9a8 <memmove+0x20>
 800a998:	1e43      	subs	r3, r0, #1
 800a99a:	42a1      	cmp	r1, r4
 800a99c:	d008      	beq.n	800a9b0 <memmove+0x28>
 800a99e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9a6:	e7f8      	b.n	800a99a <memmove+0x12>
 800a9a8:	4402      	add	r2, r0
 800a9aa:	4601      	mov	r1, r0
 800a9ac:	428a      	cmp	r2, r1
 800a9ae:	d100      	bne.n	800a9b2 <memmove+0x2a>
 800a9b0:	bd10      	pop	{r4, pc}
 800a9b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9ba:	e7f7      	b.n	800a9ac <memmove+0x24>

0800a9bc <_sbrk_r>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	4d06      	ldr	r5, [pc, #24]	@ (800a9d8 <_sbrk_r+0x1c>)
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	4608      	mov	r0, r1
 800a9c6:	602b      	str	r3, [r5, #0]
 800a9c8:	f7f6 ff28 	bl	800181c <_sbrk>
 800a9cc:	1c43      	adds	r3, r0, #1
 800a9ce:	d102      	bne.n	800a9d6 <_sbrk_r+0x1a>
 800a9d0:	682b      	ldr	r3, [r5, #0]
 800a9d2:	b103      	cbz	r3, 800a9d6 <_sbrk_r+0x1a>
 800a9d4:	6023      	str	r3, [r4, #0]
 800a9d6:	bd38      	pop	{r3, r4, r5, pc}
 800a9d8:	20002dc4 	.word	0x20002dc4

0800a9dc <abort>:
 800a9dc:	b508      	push	{r3, lr}
 800a9de:	2006      	movs	r0, #6
 800a9e0:	f000 fa2e 	bl	800ae40 <raise>
 800a9e4:	2001      	movs	r0, #1
 800a9e6:	f7f6 fea1 	bl	800172c <_exit>

0800a9ea <_realloc_r>:
 800a9ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ee:	4607      	mov	r7, r0
 800a9f0:	4614      	mov	r4, r2
 800a9f2:	460d      	mov	r5, r1
 800a9f4:	b921      	cbnz	r1, 800aa00 <_realloc_r+0x16>
 800a9f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	f7ff bb96 	b.w	800a12c <_malloc_r>
 800aa00:	b92a      	cbnz	r2, 800aa0e <_realloc_r+0x24>
 800aa02:	f7ff fb1f 	bl	800a044 <_free_r>
 800aa06:	4625      	mov	r5, r4
 800aa08:	4628      	mov	r0, r5
 800aa0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa0e:	f000 fa33 	bl	800ae78 <_malloc_usable_size_r>
 800aa12:	4284      	cmp	r4, r0
 800aa14:	4606      	mov	r6, r0
 800aa16:	d802      	bhi.n	800aa1e <_realloc_r+0x34>
 800aa18:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa1c:	d8f4      	bhi.n	800aa08 <_realloc_r+0x1e>
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4638      	mov	r0, r7
 800aa22:	f7ff fb83 	bl	800a12c <_malloc_r>
 800aa26:	4680      	mov	r8, r0
 800aa28:	b908      	cbnz	r0, 800aa2e <_realloc_r+0x44>
 800aa2a:	4645      	mov	r5, r8
 800aa2c:	e7ec      	b.n	800aa08 <_realloc_r+0x1e>
 800aa2e:	42b4      	cmp	r4, r6
 800aa30:	4622      	mov	r2, r4
 800aa32:	4629      	mov	r1, r5
 800aa34:	bf28      	it	cs
 800aa36:	4632      	movcs	r2, r6
 800aa38:	f7ff fad7 	bl	8009fea <memcpy>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	4638      	mov	r0, r7
 800aa40:	f7ff fb00 	bl	800a044 <_free_r>
 800aa44:	e7f1      	b.n	800aa2a <_realloc_r+0x40>

0800aa46 <__sfputc_r>:
 800aa46:	6893      	ldr	r3, [r2, #8]
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	b410      	push	{r4}
 800aa4e:	6093      	str	r3, [r2, #8]
 800aa50:	da08      	bge.n	800aa64 <__sfputc_r+0x1e>
 800aa52:	6994      	ldr	r4, [r2, #24]
 800aa54:	42a3      	cmp	r3, r4
 800aa56:	db01      	blt.n	800aa5c <__sfputc_r+0x16>
 800aa58:	290a      	cmp	r1, #10
 800aa5a:	d103      	bne.n	800aa64 <__sfputc_r+0x1e>
 800aa5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa60:	f000 b932 	b.w	800acc8 <__swbuf_r>
 800aa64:	6813      	ldr	r3, [r2, #0]
 800aa66:	1c58      	adds	r0, r3, #1
 800aa68:	6010      	str	r0, [r2, #0]
 800aa6a:	7019      	strb	r1, [r3, #0]
 800aa6c:	4608      	mov	r0, r1
 800aa6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <__sfputs_r>:
 800aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa76:	4606      	mov	r6, r0
 800aa78:	460f      	mov	r7, r1
 800aa7a:	4614      	mov	r4, r2
 800aa7c:	18d5      	adds	r5, r2, r3
 800aa7e:	42ac      	cmp	r4, r5
 800aa80:	d101      	bne.n	800aa86 <__sfputs_r+0x12>
 800aa82:	2000      	movs	r0, #0
 800aa84:	e007      	b.n	800aa96 <__sfputs_r+0x22>
 800aa86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa8a:	463a      	mov	r2, r7
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	f7ff ffda 	bl	800aa46 <__sfputc_r>
 800aa92:	1c43      	adds	r3, r0, #1
 800aa94:	d1f3      	bne.n	800aa7e <__sfputs_r+0xa>
 800aa96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa98 <_vfiprintf_r>:
 800aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa9c:	460d      	mov	r5, r1
 800aa9e:	b09d      	sub	sp, #116	@ 0x74
 800aaa0:	4614      	mov	r4, r2
 800aaa2:	4698      	mov	r8, r3
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	b118      	cbz	r0, 800aab0 <_vfiprintf_r+0x18>
 800aaa8:	6a03      	ldr	r3, [r0, #32]
 800aaaa:	b90b      	cbnz	r3, 800aab0 <_vfiprintf_r+0x18>
 800aaac:	f7ff f8b8 	bl	8009c20 <__sinit>
 800aab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aab2:	07d9      	lsls	r1, r3, #31
 800aab4:	d405      	bmi.n	800aac2 <_vfiprintf_r+0x2a>
 800aab6:	89ab      	ldrh	r3, [r5, #12]
 800aab8:	059a      	lsls	r2, r3, #22
 800aaba:	d402      	bmi.n	800aac2 <_vfiprintf_r+0x2a>
 800aabc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aabe:	f7ff fa92 	bl	8009fe6 <__retarget_lock_acquire_recursive>
 800aac2:	89ab      	ldrh	r3, [r5, #12]
 800aac4:	071b      	lsls	r3, r3, #28
 800aac6:	d501      	bpl.n	800aacc <_vfiprintf_r+0x34>
 800aac8:	692b      	ldr	r3, [r5, #16]
 800aaca:	b99b      	cbnz	r3, 800aaf4 <_vfiprintf_r+0x5c>
 800aacc:	4629      	mov	r1, r5
 800aace:	4630      	mov	r0, r6
 800aad0:	f000 f938 	bl	800ad44 <__swsetup_r>
 800aad4:	b170      	cbz	r0, 800aaf4 <_vfiprintf_r+0x5c>
 800aad6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aad8:	07dc      	lsls	r4, r3, #31
 800aada:	d504      	bpl.n	800aae6 <_vfiprintf_r+0x4e>
 800aadc:	f04f 30ff 	mov.w	r0, #4294967295
 800aae0:	b01d      	add	sp, #116	@ 0x74
 800aae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae6:	89ab      	ldrh	r3, [r5, #12]
 800aae8:	0598      	lsls	r0, r3, #22
 800aaea:	d4f7      	bmi.n	800aadc <_vfiprintf_r+0x44>
 800aaec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaee:	f7ff fa7b 	bl	8009fe8 <__retarget_lock_release_recursive>
 800aaf2:	e7f3      	b.n	800aadc <_vfiprintf_r+0x44>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aaf8:	2320      	movs	r3, #32
 800aafa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aafe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab02:	2330      	movs	r3, #48	@ 0x30
 800ab04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800acb4 <_vfiprintf_r+0x21c>
 800ab08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab0c:	f04f 0901 	mov.w	r9, #1
 800ab10:	4623      	mov	r3, r4
 800ab12:	469a      	mov	sl, r3
 800ab14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab18:	b10a      	cbz	r2, 800ab1e <_vfiprintf_r+0x86>
 800ab1a:	2a25      	cmp	r2, #37	@ 0x25
 800ab1c:	d1f9      	bne.n	800ab12 <_vfiprintf_r+0x7a>
 800ab1e:	ebba 0b04 	subs.w	fp, sl, r4
 800ab22:	d00b      	beq.n	800ab3c <_vfiprintf_r+0xa4>
 800ab24:	465b      	mov	r3, fp
 800ab26:	4622      	mov	r2, r4
 800ab28:	4629      	mov	r1, r5
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	f7ff ffa2 	bl	800aa74 <__sfputs_r>
 800ab30:	3001      	adds	r0, #1
 800ab32:	f000 80a7 	beq.w	800ac84 <_vfiprintf_r+0x1ec>
 800ab36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab38:	445a      	add	r2, fp
 800ab3a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f000 809f 	beq.w	800ac84 <_vfiprintf_r+0x1ec>
 800ab46:	2300      	movs	r3, #0
 800ab48:	f04f 32ff 	mov.w	r2, #4294967295
 800ab4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab50:	f10a 0a01 	add.w	sl, sl, #1
 800ab54:	9304      	str	r3, [sp, #16]
 800ab56:	9307      	str	r3, [sp, #28]
 800ab58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab5c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab5e:	4654      	mov	r4, sl
 800ab60:	2205      	movs	r2, #5
 800ab62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab66:	4853      	ldr	r0, [pc, #332]	@ (800acb4 <_vfiprintf_r+0x21c>)
 800ab68:	f7f5 fb4a 	bl	8000200 <memchr>
 800ab6c:	9a04      	ldr	r2, [sp, #16]
 800ab6e:	b9d8      	cbnz	r0, 800aba8 <_vfiprintf_r+0x110>
 800ab70:	06d1      	lsls	r1, r2, #27
 800ab72:	bf44      	itt	mi
 800ab74:	2320      	movmi	r3, #32
 800ab76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab7a:	0713      	lsls	r3, r2, #28
 800ab7c:	bf44      	itt	mi
 800ab7e:	232b      	movmi	r3, #43	@ 0x2b
 800ab80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab84:	f89a 3000 	ldrb.w	r3, [sl]
 800ab88:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab8a:	d015      	beq.n	800abb8 <_vfiprintf_r+0x120>
 800ab8c:	9a07      	ldr	r2, [sp, #28]
 800ab8e:	4654      	mov	r4, sl
 800ab90:	2000      	movs	r0, #0
 800ab92:	f04f 0c0a 	mov.w	ip, #10
 800ab96:	4621      	mov	r1, r4
 800ab98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab9c:	3b30      	subs	r3, #48	@ 0x30
 800ab9e:	2b09      	cmp	r3, #9
 800aba0:	d94b      	bls.n	800ac3a <_vfiprintf_r+0x1a2>
 800aba2:	b1b0      	cbz	r0, 800abd2 <_vfiprintf_r+0x13a>
 800aba4:	9207      	str	r2, [sp, #28]
 800aba6:	e014      	b.n	800abd2 <_vfiprintf_r+0x13a>
 800aba8:	eba0 0308 	sub.w	r3, r0, r8
 800abac:	fa09 f303 	lsl.w	r3, r9, r3
 800abb0:	4313      	orrs	r3, r2
 800abb2:	9304      	str	r3, [sp, #16]
 800abb4:	46a2      	mov	sl, r4
 800abb6:	e7d2      	b.n	800ab5e <_vfiprintf_r+0xc6>
 800abb8:	9b03      	ldr	r3, [sp, #12]
 800abba:	1d19      	adds	r1, r3, #4
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	9103      	str	r1, [sp, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	bfbb      	ittet	lt
 800abc4:	425b      	neglt	r3, r3
 800abc6:	f042 0202 	orrlt.w	r2, r2, #2
 800abca:	9307      	strge	r3, [sp, #28]
 800abcc:	9307      	strlt	r3, [sp, #28]
 800abce:	bfb8      	it	lt
 800abd0:	9204      	strlt	r2, [sp, #16]
 800abd2:	7823      	ldrb	r3, [r4, #0]
 800abd4:	2b2e      	cmp	r3, #46	@ 0x2e
 800abd6:	d10a      	bne.n	800abee <_vfiprintf_r+0x156>
 800abd8:	7863      	ldrb	r3, [r4, #1]
 800abda:	2b2a      	cmp	r3, #42	@ 0x2a
 800abdc:	d132      	bne.n	800ac44 <_vfiprintf_r+0x1ac>
 800abde:	9b03      	ldr	r3, [sp, #12]
 800abe0:	1d1a      	adds	r2, r3, #4
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	9203      	str	r2, [sp, #12]
 800abe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abea:	3402      	adds	r4, #2
 800abec:	9305      	str	r3, [sp, #20]
 800abee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800acc4 <_vfiprintf_r+0x22c>
 800abf2:	7821      	ldrb	r1, [r4, #0]
 800abf4:	2203      	movs	r2, #3
 800abf6:	4650      	mov	r0, sl
 800abf8:	f7f5 fb02 	bl	8000200 <memchr>
 800abfc:	b138      	cbz	r0, 800ac0e <_vfiprintf_r+0x176>
 800abfe:	9b04      	ldr	r3, [sp, #16]
 800ac00:	eba0 000a 	sub.w	r0, r0, sl
 800ac04:	2240      	movs	r2, #64	@ 0x40
 800ac06:	4082      	lsls	r2, r0
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	3401      	adds	r4, #1
 800ac0c:	9304      	str	r3, [sp, #16]
 800ac0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac12:	4829      	ldr	r0, [pc, #164]	@ (800acb8 <_vfiprintf_r+0x220>)
 800ac14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac18:	2206      	movs	r2, #6
 800ac1a:	f7f5 faf1 	bl	8000200 <memchr>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d03f      	beq.n	800aca2 <_vfiprintf_r+0x20a>
 800ac22:	4b26      	ldr	r3, [pc, #152]	@ (800acbc <_vfiprintf_r+0x224>)
 800ac24:	bb1b      	cbnz	r3, 800ac6e <_vfiprintf_r+0x1d6>
 800ac26:	9b03      	ldr	r3, [sp, #12]
 800ac28:	3307      	adds	r3, #7
 800ac2a:	f023 0307 	bic.w	r3, r3, #7
 800ac2e:	3308      	adds	r3, #8
 800ac30:	9303      	str	r3, [sp, #12]
 800ac32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac34:	443b      	add	r3, r7
 800ac36:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac38:	e76a      	b.n	800ab10 <_vfiprintf_r+0x78>
 800ac3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac3e:	460c      	mov	r4, r1
 800ac40:	2001      	movs	r0, #1
 800ac42:	e7a8      	b.n	800ab96 <_vfiprintf_r+0xfe>
 800ac44:	2300      	movs	r3, #0
 800ac46:	3401      	adds	r4, #1
 800ac48:	9305      	str	r3, [sp, #20]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	f04f 0c0a 	mov.w	ip, #10
 800ac50:	4620      	mov	r0, r4
 800ac52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac56:	3a30      	subs	r2, #48	@ 0x30
 800ac58:	2a09      	cmp	r2, #9
 800ac5a:	d903      	bls.n	800ac64 <_vfiprintf_r+0x1cc>
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d0c6      	beq.n	800abee <_vfiprintf_r+0x156>
 800ac60:	9105      	str	r1, [sp, #20]
 800ac62:	e7c4      	b.n	800abee <_vfiprintf_r+0x156>
 800ac64:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac68:	4604      	mov	r4, r0
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e7f0      	b.n	800ac50 <_vfiprintf_r+0x1b8>
 800ac6e:	ab03      	add	r3, sp, #12
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	462a      	mov	r2, r5
 800ac74:	4b12      	ldr	r3, [pc, #72]	@ (800acc0 <_vfiprintf_r+0x228>)
 800ac76:	a904      	add	r1, sp, #16
 800ac78:	4630      	mov	r0, r6
 800ac7a:	f3af 8000 	nop.w
 800ac7e:	4607      	mov	r7, r0
 800ac80:	1c78      	adds	r0, r7, #1
 800ac82:	d1d6      	bne.n	800ac32 <_vfiprintf_r+0x19a>
 800ac84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac86:	07d9      	lsls	r1, r3, #31
 800ac88:	d405      	bmi.n	800ac96 <_vfiprintf_r+0x1fe>
 800ac8a:	89ab      	ldrh	r3, [r5, #12]
 800ac8c:	059a      	lsls	r2, r3, #22
 800ac8e:	d402      	bmi.n	800ac96 <_vfiprintf_r+0x1fe>
 800ac90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac92:	f7ff f9a9 	bl	8009fe8 <__retarget_lock_release_recursive>
 800ac96:	89ab      	ldrh	r3, [r5, #12]
 800ac98:	065b      	lsls	r3, r3, #25
 800ac9a:	f53f af1f 	bmi.w	800aadc <_vfiprintf_r+0x44>
 800ac9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aca0:	e71e      	b.n	800aae0 <_vfiprintf_r+0x48>
 800aca2:	ab03      	add	r3, sp, #12
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	462a      	mov	r2, r5
 800aca8:	4b05      	ldr	r3, [pc, #20]	@ (800acc0 <_vfiprintf_r+0x228>)
 800acaa:	a904      	add	r1, sp, #16
 800acac:	4630      	mov	r0, r6
 800acae:	f7ff fc8f 	bl	800a5d0 <_printf_i>
 800acb2:	e7e4      	b.n	800ac7e <_vfiprintf_r+0x1e6>
 800acb4:	0800b9e6 	.word	0x0800b9e6
 800acb8:	0800b9f0 	.word	0x0800b9f0
 800acbc:	00000000 	.word	0x00000000
 800acc0:	0800aa75 	.word	0x0800aa75
 800acc4:	0800b9ec 	.word	0x0800b9ec

0800acc8 <__swbuf_r>:
 800acc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acca:	460e      	mov	r6, r1
 800accc:	4614      	mov	r4, r2
 800acce:	4605      	mov	r5, r0
 800acd0:	b118      	cbz	r0, 800acda <__swbuf_r+0x12>
 800acd2:	6a03      	ldr	r3, [r0, #32]
 800acd4:	b90b      	cbnz	r3, 800acda <__swbuf_r+0x12>
 800acd6:	f7fe ffa3 	bl	8009c20 <__sinit>
 800acda:	69a3      	ldr	r3, [r4, #24]
 800acdc:	60a3      	str	r3, [r4, #8]
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	071a      	lsls	r2, r3, #28
 800ace2:	d501      	bpl.n	800ace8 <__swbuf_r+0x20>
 800ace4:	6923      	ldr	r3, [r4, #16]
 800ace6:	b943      	cbnz	r3, 800acfa <__swbuf_r+0x32>
 800ace8:	4621      	mov	r1, r4
 800acea:	4628      	mov	r0, r5
 800acec:	f000 f82a 	bl	800ad44 <__swsetup_r>
 800acf0:	b118      	cbz	r0, 800acfa <__swbuf_r+0x32>
 800acf2:	f04f 37ff 	mov.w	r7, #4294967295
 800acf6:	4638      	mov	r0, r7
 800acf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acfa:	6823      	ldr	r3, [r4, #0]
 800acfc:	6922      	ldr	r2, [r4, #16]
 800acfe:	1a98      	subs	r0, r3, r2
 800ad00:	6963      	ldr	r3, [r4, #20]
 800ad02:	b2f6      	uxtb	r6, r6
 800ad04:	4283      	cmp	r3, r0
 800ad06:	4637      	mov	r7, r6
 800ad08:	dc05      	bgt.n	800ad16 <__swbuf_r+0x4e>
 800ad0a:	4621      	mov	r1, r4
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	f7ff fe01 	bl	800a914 <_fflush_r>
 800ad12:	2800      	cmp	r0, #0
 800ad14:	d1ed      	bne.n	800acf2 <__swbuf_r+0x2a>
 800ad16:	68a3      	ldr	r3, [r4, #8]
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	60a3      	str	r3, [r4, #8]
 800ad1c:	6823      	ldr	r3, [r4, #0]
 800ad1e:	1c5a      	adds	r2, r3, #1
 800ad20:	6022      	str	r2, [r4, #0]
 800ad22:	701e      	strb	r6, [r3, #0]
 800ad24:	6962      	ldr	r2, [r4, #20]
 800ad26:	1c43      	adds	r3, r0, #1
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d004      	beq.n	800ad36 <__swbuf_r+0x6e>
 800ad2c:	89a3      	ldrh	r3, [r4, #12]
 800ad2e:	07db      	lsls	r3, r3, #31
 800ad30:	d5e1      	bpl.n	800acf6 <__swbuf_r+0x2e>
 800ad32:	2e0a      	cmp	r6, #10
 800ad34:	d1df      	bne.n	800acf6 <__swbuf_r+0x2e>
 800ad36:	4621      	mov	r1, r4
 800ad38:	4628      	mov	r0, r5
 800ad3a:	f7ff fdeb 	bl	800a914 <_fflush_r>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d0d9      	beq.n	800acf6 <__swbuf_r+0x2e>
 800ad42:	e7d6      	b.n	800acf2 <__swbuf_r+0x2a>

0800ad44 <__swsetup_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	4b29      	ldr	r3, [pc, #164]	@ (800adec <__swsetup_r+0xa8>)
 800ad48:	4605      	mov	r5, r0
 800ad4a:	6818      	ldr	r0, [r3, #0]
 800ad4c:	460c      	mov	r4, r1
 800ad4e:	b118      	cbz	r0, 800ad58 <__swsetup_r+0x14>
 800ad50:	6a03      	ldr	r3, [r0, #32]
 800ad52:	b90b      	cbnz	r3, 800ad58 <__swsetup_r+0x14>
 800ad54:	f7fe ff64 	bl	8009c20 <__sinit>
 800ad58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad5c:	0719      	lsls	r1, r3, #28
 800ad5e:	d422      	bmi.n	800ada6 <__swsetup_r+0x62>
 800ad60:	06da      	lsls	r2, r3, #27
 800ad62:	d407      	bmi.n	800ad74 <__swsetup_r+0x30>
 800ad64:	2209      	movs	r2, #9
 800ad66:	602a      	str	r2, [r5, #0]
 800ad68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad6c:	81a3      	strh	r3, [r4, #12]
 800ad6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad72:	e033      	b.n	800addc <__swsetup_r+0x98>
 800ad74:	0758      	lsls	r0, r3, #29
 800ad76:	d512      	bpl.n	800ad9e <__swsetup_r+0x5a>
 800ad78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad7a:	b141      	cbz	r1, 800ad8e <__swsetup_r+0x4a>
 800ad7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad80:	4299      	cmp	r1, r3
 800ad82:	d002      	beq.n	800ad8a <__swsetup_r+0x46>
 800ad84:	4628      	mov	r0, r5
 800ad86:	f7ff f95d 	bl	800a044 <_free_r>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad8e:	89a3      	ldrh	r3, [r4, #12]
 800ad90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad94:	81a3      	strh	r3, [r4, #12]
 800ad96:	2300      	movs	r3, #0
 800ad98:	6063      	str	r3, [r4, #4]
 800ad9a:	6923      	ldr	r3, [r4, #16]
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	89a3      	ldrh	r3, [r4, #12]
 800ada0:	f043 0308 	orr.w	r3, r3, #8
 800ada4:	81a3      	strh	r3, [r4, #12]
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	b94b      	cbnz	r3, 800adbe <__swsetup_r+0x7a>
 800adaa:	89a3      	ldrh	r3, [r4, #12]
 800adac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800adb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adb4:	d003      	beq.n	800adbe <__swsetup_r+0x7a>
 800adb6:	4621      	mov	r1, r4
 800adb8:	4628      	mov	r0, r5
 800adba:	f000 f88b 	bl	800aed4 <__smakebuf_r>
 800adbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adc2:	f013 0201 	ands.w	r2, r3, #1
 800adc6:	d00a      	beq.n	800adde <__swsetup_r+0x9a>
 800adc8:	2200      	movs	r2, #0
 800adca:	60a2      	str	r2, [r4, #8]
 800adcc:	6962      	ldr	r2, [r4, #20]
 800adce:	4252      	negs	r2, r2
 800add0:	61a2      	str	r2, [r4, #24]
 800add2:	6922      	ldr	r2, [r4, #16]
 800add4:	b942      	cbnz	r2, 800ade8 <__swsetup_r+0xa4>
 800add6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800adda:	d1c5      	bne.n	800ad68 <__swsetup_r+0x24>
 800addc:	bd38      	pop	{r3, r4, r5, pc}
 800adde:	0799      	lsls	r1, r3, #30
 800ade0:	bf58      	it	pl
 800ade2:	6962      	ldrpl	r2, [r4, #20]
 800ade4:	60a2      	str	r2, [r4, #8]
 800ade6:	e7f4      	b.n	800add2 <__swsetup_r+0x8e>
 800ade8:	2000      	movs	r0, #0
 800adea:	e7f7      	b.n	800addc <__swsetup_r+0x98>
 800adec:	20000024 	.word	0x20000024

0800adf0 <_raise_r>:
 800adf0:	291f      	cmp	r1, #31
 800adf2:	b538      	push	{r3, r4, r5, lr}
 800adf4:	4605      	mov	r5, r0
 800adf6:	460c      	mov	r4, r1
 800adf8:	d904      	bls.n	800ae04 <_raise_r+0x14>
 800adfa:	2316      	movs	r3, #22
 800adfc:	6003      	str	r3, [r0, #0]
 800adfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ae02:	bd38      	pop	{r3, r4, r5, pc}
 800ae04:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae06:	b112      	cbz	r2, 800ae0e <_raise_r+0x1e>
 800ae08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae0c:	b94b      	cbnz	r3, 800ae22 <_raise_r+0x32>
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f000 f830 	bl	800ae74 <_getpid_r>
 800ae14:	4622      	mov	r2, r4
 800ae16:	4601      	mov	r1, r0
 800ae18:	4628      	mov	r0, r5
 800ae1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae1e:	f000 b817 	b.w	800ae50 <_kill_r>
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d00a      	beq.n	800ae3c <_raise_r+0x4c>
 800ae26:	1c59      	adds	r1, r3, #1
 800ae28:	d103      	bne.n	800ae32 <_raise_r+0x42>
 800ae2a:	2316      	movs	r3, #22
 800ae2c:	6003      	str	r3, [r0, #0]
 800ae2e:	2001      	movs	r0, #1
 800ae30:	e7e7      	b.n	800ae02 <_raise_r+0x12>
 800ae32:	2100      	movs	r1, #0
 800ae34:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae38:	4620      	mov	r0, r4
 800ae3a:	4798      	blx	r3
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	e7e0      	b.n	800ae02 <_raise_r+0x12>

0800ae40 <raise>:
 800ae40:	4b02      	ldr	r3, [pc, #8]	@ (800ae4c <raise+0xc>)
 800ae42:	4601      	mov	r1, r0
 800ae44:	6818      	ldr	r0, [r3, #0]
 800ae46:	f7ff bfd3 	b.w	800adf0 <_raise_r>
 800ae4a:	bf00      	nop
 800ae4c:	20000024 	.word	0x20000024

0800ae50 <_kill_r>:
 800ae50:	b538      	push	{r3, r4, r5, lr}
 800ae52:	4d07      	ldr	r5, [pc, #28]	@ (800ae70 <_kill_r+0x20>)
 800ae54:	2300      	movs	r3, #0
 800ae56:	4604      	mov	r4, r0
 800ae58:	4608      	mov	r0, r1
 800ae5a:	4611      	mov	r1, r2
 800ae5c:	602b      	str	r3, [r5, #0]
 800ae5e:	f7f6 fc55 	bl	800170c <_kill>
 800ae62:	1c43      	adds	r3, r0, #1
 800ae64:	d102      	bne.n	800ae6c <_kill_r+0x1c>
 800ae66:	682b      	ldr	r3, [r5, #0]
 800ae68:	b103      	cbz	r3, 800ae6c <_kill_r+0x1c>
 800ae6a:	6023      	str	r3, [r4, #0]
 800ae6c:	bd38      	pop	{r3, r4, r5, pc}
 800ae6e:	bf00      	nop
 800ae70:	20002dc4 	.word	0x20002dc4

0800ae74 <_getpid_r>:
 800ae74:	f7f6 bc42 	b.w	80016fc <_getpid>

0800ae78 <_malloc_usable_size_r>:
 800ae78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae7c:	1f18      	subs	r0, r3, #4
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	bfbc      	itt	lt
 800ae82:	580b      	ldrlt	r3, [r1, r0]
 800ae84:	18c0      	addlt	r0, r0, r3
 800ae86:	4770      	bx	lr

0800ae88 <__swhatbuf_r>:
 800ae88:	b570      	push	{r4, r5, r6, lr}
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae90:	2900      	cmp	r1, #0
 800ae92:	b096      	sub	sp, #88	@ 0x58
 800ae94:	4615      	mov	r5, r2
 800ae96:	461e      	mov	r6, r3
 800ae98:	da0d      	bge.n	800aeb6 <__swhatbuf_r+0x2e>
 800ae9a:	89a3      	ldrh	r3, [r4, #12]
 800ae9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aea0:	f04f 0100 	mov.w	r1, #0
 800aea4:	bf14      	ite	ne
 800aea6:	2340      	movne	r3, #64	@ 0x40
 800aea8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aeac:	2000      	movs	r0, #0
 800aeae:	6031      	str	r1, [r6, #0]
 800aeb0:	602b      	str	r3, [r5, #0]
 800aeb2:	b016      	add	sp, #88	@ 0x58
 800aeb4:	bd70      	pop	{r4, r5, r6, pc}
 800aeb6:	466a      	mov	r2, sp
 800aeb8:	f000 f848 	bl	800af4c <_fstat_r>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	dbec      	blt.n	800ae9a <__swhatbuf_r+0x12>
 800aec0:	9901      	ldr	r1, [sp, #4]
 800aec2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aec6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aeca:	4259      	negs	r1, r3
 800aecc:	4159      	adcs	r1, r3
 800aece:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aed2:	e7eb      	b.n	800aeac <__swhatbuf_r+0x24>

0800aed4 <__smakebuf_r>:
 800aed4:	898b      	ldrh	r3, [r1, #12]
 800aed6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aed8:	079d      	lsls	r5, r3, #30
 800aeda:	4606      	mov	r6, r0
 800aedc:	460c      	mov	r4, r1
 800aede:	d507      	bpl.n	800aef0 <__smakebuf_r+0x1c>
 800aee0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aee4:	6023      	str	r3, [r4, #0]
 800aee6:	6123      	str	r3, [r4, #16]
 800aee8:	2301      	movs	r3, #1
 800aeea:	6163      	str	r3, [r4, #20]
 800aeec:	b003      	add	sp, #12
 800aeee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aef0:	ab01      	add	r3, sp, #4
 800aef2:	466a      	mov	r2, sp
 800aef4:	f7ff ffc8 	bl	800ae88 <__swhatbuf_r>
 800aef8:	9f00      	ldr	r7, [sp, #0]
 800aefa:	4605      	mov	r5, r0
 800aefc:	4639      	mov	r1, r7
 800aefe:	4630      	mov	r0, r6
 800af00:	f7ff f914 	bl	800a12c <_malloc_r>
 800af04:	b948      	cbnz	r0, 800af1a <__smakebuf_r+0x46>
 800af06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af0a:	059a      	lsls	r2, r3, #22
 800af0c:	d4ee      	bmi.n	800aeec <__smakebuf_r+0x18>
 800af0e:	f023 0303 	bic.w	r3, r3, #3
 800af12:	f043 0302 	orr.w	r3, r3, #2
 800af16:	81a3      	strh	r3, [r4, #12]
 800af18:	e7e2      	b.n	800aee0 <__smakebuf_r+0xc>
 800af1a:	89a3      	ldrh	r3, [r4, #12]
 800af1c:	6020      	str	r0, [r4, #0]
 800af1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af22:	81a3      	strh	r3, [r4, #12]
 800af24:	9b01      	ldr	r3, [sp, #4]
 800af26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af2a:	b15b      	cbz	r3, 800af44 <__smakebuf_r+0x70>
 800af2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af30:	4630      	mov	r0, r6
 800af32:	f000 f81d 	bl	800af70 <_isatty_r>
 800af36:	b128      	cbz	r0, 800af44 <__smakebuf_r+0x70>
 800af38:	89a3      	ldrh	r3, [r4, #12]
 800af3a:	f023 0303 	bic.w	r3, r3, #3
 800af3e:	f043 0301 	orr.w	r3, r3, #1
 800af42:	81a3      	strh	r3, [r4, #12]
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	431d      	orrs	r5, r3
 800af48:	81a5      	strh	r5, [r4, #12]
 800af4a:	e7cf      	b.n	800aeec <__smakebuf_r+0x18>

0800af4c <_fstat_r>:
 800af4c:	b538      	push	{r3, r4, r5, lr}
 800af4e:	4d07      	ldr	r5, [pc, #28]	@ (800af6c <_fstat_r+0x20>)
 800af50:	2300      	movs	r3, #0
 800af52:	4604      	mov	r4, r0
 800af54:	4608      	mov	r0, r1
 800af56:	4611      	mov	r1, r2
 800af58:	602b      	str	r3, [r5, #0]
 800af5a:	f7f6 fc37 	bl	80017cc <_fstat>
 800af5e:	1c43      	adds	r3, r0, #1
 800af60:	d102      	bne.n	800af68 <_fstat_r+0x1c>
 800af62:	682b      	ldr	r3, [r5, #0]
 800af64:	b103      	cbz	r3, 800af68 <_fstat_r+0x1c>
 800af66:	6023      	str	r3, [r4, #0]
 800af68:	bd38      	pop	{r3, r4, r5, pc}
 800af6a:	bf00      	nop
 800af6c:	20002dc4 	.word	0x20002dc4

0800af70 <_isatty_r>:
 800af70:	b538      	push	{r3, r4, r5, lr}
 800af72:	4d06      	ldr	r5, [pc, #24]	@ (800af8c <_isatty_r+0x1c>)
 800af74:	2300      	movs	r3, #0
 800af76:	4604      	mov	r4, r0
 800af78:	4608      	mov	r0, r1
 800af7a:	602b      	str	r3, [r5, #0]
 800af7c:	f7f6 fc36 	bl	80017ec <_isatty>
 800af80:	1c43      	adds	r3, r0, #1
 800af82:	d102      	bne.n	800af8a <_isatty_r+0x1a>
 800af84:	682b      	ldr	r3, [r5, #0]
 800af86:	b103      	cbz	r3, 800af8a <_isatty_r+0x1a>
 800af88:	6023      	str	r3, [r4, #0]
 800af8a:	bd38      	pop	{r3, r4, r5, pc}
 800af8c:	20002dc4 	.word	0x20002dc4

0800af90 <_init>:
 800af90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af92:	bf00      	nop
 800af94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af96:	bc08      	pop	{r3}
 800af98:	469e      	mov	lr, r3
 800af9a:	4770      	bx	lr

0800af9c <_fini>:
 800af9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9e:	bf00      	nop
 800afa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afa2:	bc08      	pop	{r3}
 800afa4:	469e      	mov	lr, r3
 800afa6:	4770      	bx	lr
